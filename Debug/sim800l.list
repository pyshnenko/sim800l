
sim800l.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005810  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000688  0800591c  0800591c  0001591c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005fa4  08005fa4  000201d4  2**0
                  CONTENTS
  4 .ARM          00000000  08005fa4  08005fa4  000201d4  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005fa4  08005fa4  000201d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005fa4  08005fa4  00015fa4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005fa8  08005fa8  00015fa8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  08005fac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000830  200001d4  08006180  000201d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000a04  08006180  00020a04  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000847d  00000000  00000000  000201fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000016f5  00000000  00000000  0002867a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000710  00000000  00000000  00029d70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000688  00000000  00000000  0002a480  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00001562  00000000  00000000  0002ab08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008e5d  00000000  00000000  0002c06a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000804b6  00000000  00000000  00034ec7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000b537d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000023f4  00000000  00000000  000b53d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200001d4 	.word	0x200001d4
 8000128:	00000000 	.word	0x00000000
 800012c:	08005904 	.word	0x08005904

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200001d8 	.word	0x200001d8
 8000148:	08005904 	.word	0x08005904

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <__aeabi_drsub>:
 800015c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000160:	e002      	b.n	8000168 <__adddf3>
 8000162:	bf00      	nop

08000164 <__aeabi_dsub>:
 8000164:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000168 <__adddf3>:
 8000168:	b530      	push	{r4, r5, lr}
 800016a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800016e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000172:	ea94 0f05 	teq	r4, r5
 8000176:	bf08      	it	eq
 8000178:	ea90 0f02 	teqeq	r0, r2
 800017c:	bf1f      	itttt	ne
 800017e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000182:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000186:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800018e:	f000 80e2 	beq.w	8000356 <__adddf3+0x1ee>
 8000192:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000196:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019a:	bfb8      	it	lt
 800019c:	426d      	neglt	r5, r5
 800019e:	dd0c      	ble.n	80001ba <__adddf3+0x52>
 80001a0:	442c      	add	r4, r5
 80001a2:	ea80 0202 	eor.w	r2, r0, r2
 80001a6:	ea81 0303 	eor.w	r3, r1, r3
 80001aa:	ea82 0000 	eor.w	r0, r2, r0
 80001ae:	ea83 0101 	eor.w	r1, r3, r1
 80001b2:	ea80 0202 	eor.w	r2, r0, r2
 80001b6:	ea81 0303 	eor.w	r3, r1, r3
 80001ba:	2d36      	cmp	r5, #54	; 0x36
 80001bc:	bf88      	it	hi
 80001be:	bd30      	pophi	{r4, r5, pc}
 80001c0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001c8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001cc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d0:	d002      	beq.n	80001d8 <__adddf3+0x70>
 80001d2:	4240      	negs	r0, r0
 80001d4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001d8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001dc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e4:	d002      	beq.n	80001ec <__adddf3+0x84>
 80001e6:	4252      	negs	r2, r2
 80001e8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001ec:	ea94 0f05 	teq	r4, r5
 80001f0:	f000 80a7 	beq.w	8000342 <__adddf3+0x1da>
 80001f4:	f1a4 0401 	sub.w	r4, r4, #1
 80001f8:	f1d5 0e20 	rsbs	lr, r5, #32
 80001fc:	db0d      	blt.n	800021a <__adddf3+0xb2>
 80001fe:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000202:	fa22 f205 	lsr.w	r2, r2, r5
 8000206:	1880      	adds	r0, r0, r2
 8000208:	f141 0100 	adc.w	r1, r1, #0
 800020c:	fa03 f20e 	lsl.w	r2, r3, lr
 8000210:	1880      	adds	r0, r0, r2
 8000212:	fa43 f305 	asr.w	r3, r3, r5
 8000216:	4159      	adcs	r1, r3
 8000218:	e00e      	b.n	8000238 <__adddf3+0xd0>
 800021a:	f1a5 0520 	sub.w	r5, r5, #32
 800021e:	f10e 0e20 	add.w	lr, lr, #32
 8000222:	2a01      	cmp	r2, #1
 8000224:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000228:	bf28      	it	cs
 800022a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800022e:	fa43 f305 	asr.w	r3, r3, r5
 8000232:	18c0      	adds	r0, r0, r3
 8000234:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000238:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800023c:	d507      	bpl.n	800024e <__adddf3+0xe6>
 800023e:	f04f 0e00 	mov.w	lr, #0
 8000242:	f1dc 0c00 	rsbs	ip, ip, #0
 8000246:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024a:	eb6e 0101 	sbc.w	r1, lr, r1
 800024e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000252:	d31b      	bcc.n	800028c <__adddf3+0x124>
 8000254:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000258:	d30c      	bcc.n	8000274 <__adddf3+0x10c>
 800025a:	0849      	lsrs	r1, r1, #1
 800025c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000260:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000264:	f104 0401 	add.w	r4, r4, #1
 8000268:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800026c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000270:	f080 809a 	bcs.w	80003a8 <__adddf3+0x240>
 8000274:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000278:	bf08      	it	eq
 800027a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800027e:	f150 0000 	adcs.w	r0, r0, #0
 8000282:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000286:	ea41 0105 	orr.w	r1, r1, r5
 800028a:	bd30      	pop	{r4, r5, pc}
 800028c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000290:	4140      	adcs	r0, r0
 8000292:	eb41 0101 	adc.w	r1, r1, r1
 8000296:	3c01      	subs	r4, #1
 8000298:	bf28      	it	cs
 800029a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800029e:	d2e9      	bcs.n	8000274 <__adddf3+0x10c>
 80002a0:	f091 0f00 	teq	r1, #0
 80002a4:	bf04      	itt	eq
 80002a6:	4601      	moveq	r1, r0
 80002a8:	2000      	moveq	r0, #0
 80002aa:	fab1 f381 	clz	r3, r1
 80002ae:	bf08      	it	eq
 80002b0:	3320      	addeq	r3, #32
 80002b2:	f1a3 030b 	sub.w	r3, r3, #11
 80002b6:	f1b3 0220 	subs.w	r2, r3, #32
 80002ba:	da0c      	bge.n	80002d6 <__adddf3+0x16e>
 80002bc:	320c      	adds	r2, #12
 80002be:	dd08      	ble.n	80002d2 <__adddf3+0x16a>
 80002c0:	f102 0c14 	add.w	ip, r2, #20
 80002c4:	f1c2 020c 	rsb	r2, r2, #12
 80002c8:	fa01 f00c 	lsl.w	r0, r1, ip
 80002cc:	fa21 f102 	lsr.w	r1, r1, r2
 80002d0:	e00c      	b.n	80002ec <__adddf3+0x184>
 80002d2:	f102 0214 	add.w	r2, r2, #20
 80002d6:	bfd8      	it	le
 80002d8:	f1c2 0c20 	rsble	ip, r2, #32
 80002dc:	fa01 f102 	lsl.w	r1, r1, r2
 80002e0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e4:	bfdc      	itt	le
 80002e6:	ea41 010c 	orrle.w	r1, r1, ip
 80002ea:	4090      	lslle	r0, r2
 80002ec:	1ae4      	subs	r4, r4, r3
 80002ee:	bfa2      	ittt	ge
 80002f0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f4:	4329      	orrge	r1, r5
 80002f6:	bd30      	popge	{r4, r5, pc}
 80002f8:	ea6f 0404 	mvn.w	r4, r4
 80002fc:	3c1f      	subs	r4, #31
 80002fe:	da1c      	bge.n	800033a <__adddf3+0x1d2>
 8000300:	340c      	adds	r4, #12
 8000302:	dc0e      	bgt.n	8000322 <__adddf3+0x1ba>
 8000304:	f104 0414 	add.w	r4, r4, #20
 8000308:	f1c4 0220 	rsb	r2, r4, #32
 800030c:	fa20 f004 	lsr.w	r0, r0, r4
 8000310:	fa01 f302 	lsl.w	r3, r1, r2
 8000314:	ea40 0003 	orr.w	r0, r0, r3
 8000318:	fa21 f304 	lsr.w	r3, r1, r4
 800031c:	ea45 0103 	orr.w	r1, r5, r3
 8000320:	bd30      	pop	{r4, r5, pc}
 8000322:	f1c4 040c 	rsb	r4, r4, #12
 8000326:	f1c4 0220 	rsb	r2, r4, #32
 800032a:	fa20 f002 	lsr.w	r0, r0, r2
 800032e:	fa01 f304 	lsl.w	r3, r1, r4
 8000332:	ea40 0003 	orr.w	r0, r0, r3
 8000336:	4629      	mov	r1, r5
 8000338:	bd30      	pop	{r4, r5, pc}
 800033a:	fa21 f004 	lsr.w	r0, r1, r4
 800033e:	4629      	mov	r1, r5
 8000340:	bd30      	pop	{r4, r5, pc}
 8000342:	f094 0f00 	teq	r4, #0
 8000346:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034a:	bf06      	itte	eq
 800034c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000350:	3401      	addeq	r4, #1
 8000352:	3d01      	subne	r5, #1
 8000354:	e74e      	b.n	80001f4 <__adddf3+0x8c>
 8000356:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035a:	bf18      	it	ne
 800035c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000360:	d029      	beq.n	80003b6 <__adddf3+0x24e>
 8000362:	ea94 0f05 	teq	r4, r5
 8000366:	bf08      	it	eq
 8000368:	ea90 0f02 	teqeq	r0, r2
 800036c:	d005      	beq.n	800037a <__adddf3+0x212>
 800036e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000372:	bf04      	itt	eq
 8000374:	4619      	moveq	r1, r3
 8000376:	4610      	moveq	r0, r2
 8000378:	bd30      	pop	{r4, r5, pc}
 800037a:	ea91 0f03 	teq	r1, r3
 800037e:	bf1e      	ittt	ne
 8000380:	2100      	movne	r1, #0
 8000382:	2000      	movne	r0, #0
 8000384:	bd30      	popne	{r4, r5, pc}
 8000386:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038a:	d105      	bne.n	8000398 <__adddf3+0x230>
 800038c:	0040      	lsls	r0, r0, #1
 800038e:	4149      	adcs	r1, r1
 8000390:	bf28      	it	cs
 8000392:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000396:	bd30      	pop	{r4, r5, pc}
 8000398:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800039c:	bf3c      	itt	cc
 800039e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a2:	bd30      	popcc	{r4, r5, pc}
 80003a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a8:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003ac:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b0:	f04f 0000 	mov.w	r0, #0
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ba:	bf1a      	itte	ne
 80003bc:	4619      	movne	r1, r3
 80003be:	4610      	movne	r0, r2
 80003c0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c4:	bf1c      	itt	ne
 80003c6:	460b      	movne	r3, r1
 80003c8:	4602      	movne	r2, r0
 80003ca:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003ce:	bf06      	itte	eq
 80003d0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d4:	ea91 0f03 	teqeq	r1, r3
 80003d8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	bf00      	nop

080003e0 <__aeabi_ui2d>:
 80003e0:	f090 0f00 	teq	r0, #0
 80003e4:	bf04      	itt	eq
 80003e6:	2100      	moveq	r1, #0
 80003e8:	4770      	bxeq	lr
 80003ea:	b530      	push	{r4, r5, lr}
 80003ec:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f4:	f04f 0500 	mov.w	r5, #0
 80003f8:	f04f 0100 	mov.w	r1, #0
 80003fc:	e750      	b.n	80002a0 <__adddf3+0x138>
 80003fe:	bf00      	nop

08000400 <__aeabi_i2d>:
 8000400:	f090 0f00 	teq	r0, #0
 8000404:	bf04      	itt	eq
 8000406:	2100      	moveq	r1, #0
 8000408:	4770      	bxeq	lr
 800040a:	b530      	push	{r4, r5, lr}
 800040c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000410:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000414:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000418:	bf48      	it	mi
 800041a:	4240      	negmi	r0, r0
 800041c:	f04f 0100 	mov.w	r1, #0
 8000420:	e73e      	b.n	80002a0 <__adddf3+0x138>
 8000422:	bf00      	nop

08000424 <__aeabi_f2d>:
 8000424:	0042      	lsls	r2, r0, #1
 8000426:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042a:	ea4f 0131 	mov.w	r1, r1, rrx
 800042e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000432:	bf1f      	itttt	ne
 8000434:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000438:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800043c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000440:	4770      	bxne	lr
 8000442:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000446:	bf08      	it	eq
 8000448:	4770      	bxeq	lr
 800044a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800044e:	bf04      	itt	eq
 8000450:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 7460 	mov.w	r4, #896	; 0x380
 800045c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000460:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000464:	e71c      	b.n	80002a0 <__adddf3+0x138>
 8000466:	bf00      	nop

08000468 <__aeabi_ul2d>:
 8000468:	ea50 0201 	orrs.w	r2, r0, r1
 800046c:	bf08      	it	eq
 800046e:	4770      	bxeq	lr
 8000470:	b530      	push	{r4, r5, lr}
 8000472:	f04f 0500 	mov.w	r5, #0
 8000476:	e00a      	b.n	800048e <__aeabi_l2d+0x16>

08000478 <__aeabi_l2d>:
 8000478:	ea50 0201 	orrs.w	r2, r0, r1
 800047c:	bf08      	it	eq
 800047e:	4770      	bxeq	lr
 8000480:	b530      	push	{r4, r5, lr}
 8000482:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000486:	d502      	bpl.n	800048e <__aeabi_l2d+0x16>
 8000488:	4240      	negs	r0, r0
 800048a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800048e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000492:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000496:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049a:	f43f aed8 	beq.w	800024e <__adddf3+0xe6>
 800049e:	f04f 0203 	mov.w	r2, #3
 80004a2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a6:	bf18      	it	ne
 80004a8:	3203      	addne	r2, #3
 80004aa:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004ae:	bf18      	it	ne
 80004b0:	3203      	addne	r2, #3
 80004b2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004b6:	f1c2 0320 	rsb	r3, r2, #32
 80004ba:	fa00 fc03 	lsl.w	ip, r0, r3
 80004be:	fa20 f002 	lsr.w	r0, r0, r2
 80004c2:	fa01 fe03 	lsl.w	lr, r1, r3
 80004c6:	ea40 000e 	orr.w	r0, r0, lr
 80004ca:	fa21 f102 	lsr.w	r1, r1, r2
 80004ce:	4414      	add	r4, r2
 80004d0:	e6bd      	b.n	800024e <__adddf3+0xe6>
 80004d2:	bf00      	nop

080004d4 <__aeabi_dmul>:
 80004d4:	b570      	push	{r4, r5, r6, lr}
 80004d6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004da:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004de:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e2:	bf1d      	ittte	ne
 80004e4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004e8:	ea94 0f0c 	teqne	r4, ip
 80004ec:	ea95 0f0c 	teqne	r5, ip
 80004f0:	f000 f8de 	bleq	80006b0 <__aeabi_dmul+0x1dc>
 80004f4:	442c      	add	r4, r5
 80004f6:	ea81 0603 	eor.w	r6, r1, r3
 80004fa:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004fe:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000502:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000506:	bf18      	it	ne
 8000508:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 800050c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000510:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000514:	d038      	beq.n	8000588 <__aeabi_dmul+0xb4>
 8000516:	fba0 ce02 	umull	ip, lr, r0, r2
 800051a:	f04f 0500 	mov.w	r5, #0
 800051e:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000522:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000526:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052a:	f04f 0600 	mov.w	r6, #0
 800052e:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000532:	f09c 0f00 	teq	ip, #0
 8000536:	bf18      	it	ne
 8000538:	f04e 0e01 	orrne.w	lr, lr, #1
 800053c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000540:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000544:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000548:	d204      	bcs.n	8000554 <__aeabi_dmul+0x80>
 800054a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800054e:	416d      	adcs	r5, r5
 8000550:	eb46 0606 	adc.w	r6, r6, r6
 8000554:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000558:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 800055c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000560:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000564:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000568:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800056c:	bf88      	it	hi
 800056e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000572:	d81e      	bhi.n	80005b2 <__aeabi_dmul+0xde>
 8000574:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000578:	bf08      	it	eq
 800057a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800057e:	f150 0000 	adcs.w	r0, r0, #0
 8000582:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000586:	bd70      	pop	{r4, r5, r6, pc}
 8000588:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 800058c:	ea46 0101 	orr.w	r1, r6, r1
 8000590:	ea40 0002 	orr.w	r0, r0, r2
 8000594:	ea81 0103 	eor.w	r1, r1, r3
 8000598:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 800059c:	bfc2      	ittt	gt
 800059e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005a6:	bd70      	popgt	{r4, r5, r6, pc}
 80005a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005ac:	f04f 0e00 	mov.w	lr, #0
 80005b0:	3c01      	subs	r4, #1
 80005b2:	f300 80ab 	bgt.w	800070c <__aeabi_dmul+0x238>
 80005b6:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ba:	bfde      	ittt	le
 80005bc:	2000      	movle	r0, #0
 80005be:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c2:	bd70      	pople	{r4, r5, r6, pc}
 80005c4:	f1c4 0400 	rsb	r4, r4, #0
 80005c8:	3c20      	subs	r4, #32
 80005ca:	da35      	bge.n	8000638 <__aeabi_dmul+0x164>
 80005cc:	340c      	adds	r4, #12
 80005ce:	dc1b      	bgt.n	8000608 <__aeabi_dmul+0x134>
 80005d0:	f104 0414 	add.w	r4, r4, #20
 80005d4:	f1c4 0520 	rsb	r5, r4, #32
 80005d8:	fa00 f305 	lsl.w	r3, r0, r5
 80005dc:	fa20 f004 	lsr.w	r0, r0, r4
 80005e0:	fa01 f205 	lsl.w	r2, r1, r5
 80005e4:	ea40 0002 	orr.w	r0, r0, r2
 80005e8:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005ec:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f4:	fa21 f604 	lsr.w	r6, r1, r4
 80005f8:	eb42 0106 	adc.w	r1, r2, r6
 80005fc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000600:	bf08      	it	eq
 8000602:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000606:	bd70      	pop	{r4, r5, r6, pc}
 8000608:	f1c4 040c 	rsb	r4, r4, #12
 800060c:	f1c4 0520 	rsb	r5, r4, #32
 8000610:	fa00 f304 	lsl.w	r3, r0, r4
 8000614:	fa20 f005 	lsr.w	r0, r0, r5
 8000618:	fa01 f204 	lsl.w	r2, r1, r4
 800061c:	ea40 0002 	orr.w	r0, r0, r2
 8000620:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000624:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000628:	f141 0100 	adc.w	r1, r1, #0
 800062c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000630:	bf08      	it	eq
 8000632:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000636:	bd70      	pop	{r4, r5, r6, pc}
 8000638:	f1c4 0520 	rsb	r5, r4, #32
 800063c:	fa00 f205 	lsl.w	r2, r0, r5
 8000640:	ea4e 0e02 	orr.w	lr, lr, r2
 8000644:	fa20 f304 	lsr.w	r3, r0, r4
 8000648:	fa01 f205 	lsl.w	r2, r1, r5
 800064c:	ea43 0302 	orr.w	r3, r3, r2
 8000650:	fa21 f004 	lsr.w	r0, r1, r4
 8000654:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000658:	fa21 f204 	lsr.w	r2, r1, r4
 800065c:	ea20 0002 	bic.w	r0, r0, r2
 8000660:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000664:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000668:	bf08      	it	eq
 800066a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800066e:	bd70      	pop	{r4, r5, r6, pc}
 8000670:	f094 0f00 	teq	r4, #0
 8000674:	d10f      	bne.n	8000696 <__aeabi_dmul+0x1c2>
 8000676:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067a:	0040      	lsls	r0, r0, #1
 800067c:	eb41 0101 	adc.w	r1, r1, r1
 8000680:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000684:	bf08      	it	eq
 8000686:	3c01      	subeq	r4, #1
 8000688:	d0f7      	beq.n	800067a <__aeabi_dmul+0x1a6>
 800068a:	ea41 0106 	orr.w	r1, r1, r6
 800068e:	f095 0f00 	teq	r5, #0
 8000692:	bf18      	it	ne
 8000694:	4770      	bxne	lr
 8000696:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069a:	0052      	lsls	r2, r2, #1
 800069c:	eb43 0303 	adc.w	r3, r3, r3
 80006a0:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a4:	bf08      	it	eq
 80006a6:	3d01      	subeq	r5, #1
 80006a8:	d0f7      	beq.n	800069a <__aeabi_dmul+0x1c6>
 80006aa:	ea43 0306 	orr.w	r3, r3, r6
 80006ae:	4770      	bx	lr
 80006b0:	ea94 0f0c 	teq	r4, ip
 80006b4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006b8:	bf18      	it	ne
 80006ba:	ea95 0f0c 	teqne	r5, ip
 80006be:	d00c      	beq.n	80006da <__aeabi_dmul+0x206>
 80006c0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c4:	bf18      	it	ne
 80006c6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ca:	d1d1      	bne.n	8000670 <__aeabi_dmul+0x19c>
 80006cc:	ea81 0103 	eor.w	r1, r1, r3
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	f04f 0000 	mov.w	r0, #0
 80006d8:	bd70      	pop	{r4, r5, r6, pc}
 80006da:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006de:	bf06      	itte	eq
 80006e0:	4610      	moveq	r0, r2
 80006e2:	4619      	moveq	r1, r3
 80006e4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006e8:	d019      	beq.n	800071e <__aeabi_dmul+0x24a>
 80006ea:	ea94 0f0c 	teq	r4, ip
 80006ee:	d102      	bne.n	80006f6 <__aeabi_dmul+0x222>
 80006f0:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f4:	d113      	bne.n	800071e <__aeabi_dmul+0x24a>
 80006f6:	ea95 0f0c 	teq	r5, ip
 80006fa:	d105      	bne.n	8000708 <__aeabi_dmul+0x234>
 80006fc:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000700:	bf1c      	itt	ne
 8000702:	4610      	movne	r0, r2
 8000704:	4619      	movne	r1, r3
 8000706:	d10a      	bne.n	800071e <__aeabi_dmul+0x24a>
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000710:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000714:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000718:	f04f 0000 	mov.w	r0, #0
 800071c:	bd70      	pop	{r4, r5, r6, pc}
 800071e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000722:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000726:	bd70      	pop	{r4, r5, r6, pc}

08000728 <__aeabi_ddiv>:
 8000728:	b570      	push	{r4, r5, r6, lr}
 800072a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800072e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000732:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000736:	bf1d      	ittte	ne
 8000738:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800073c:	ea94 0f0c 	teqne	r4, ip
 8000740:	ea95 0f0c 	teqne	r5, ip
 8000744:	f000 f8a7 	bleq	8000896 <__aeabi_ddiv+0x16e>
 8000748:	eba4 0405 	sub.w	r4, r4, r5
 800074c:	ea81 0e03 	eor.w	lr, r1, r3
 8000750:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000754:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000758:	f000 8088 	beq.w	800086c <__aeabi_ddiv+0x144>
 800075c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000760:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000764:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000768:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 800076c:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000770:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000774:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000778:	ea4f 2600 	mov.w	r6, r0, lsl #8
 800077c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000780:	429d      	cmp	r5, r3
 8000782:	bf08      	it	eq
 8000784:	4296      	cmpeq	r6, r2
 8000786:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078a:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800078e:	d202      	bcs.n	8000796 <__aeabi_ddiv+0x6e>
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	1ab6      	subs	r6, r6, r2
 8000798:	eb65 0503 	sbc.w	r5, r5, r3
 800079c:	085b      	lsrs	r3, r3, #1
 800079e:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a2:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007a6:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007aa:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ae:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b2:	bf22      	ittt	cs
 80007b4:	1ab6      	subcs	r6, r6, r2
 80007b6:	4675      	movcs	r5, lr
 80007b8:	ea40 000c 	orrcs.w	r0, r0, ip
 80007bc:	085b      	lsrs	r3, r3, #1
 80007be:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007c6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ca:	bf22      	ittt	cs
 80007cc:	1ab6      	subcs	r6, r6, r2
 80007ce:	4675      	movcs	r5, lr
 80007d0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d4:	085b      	lsrs	r3, r3, #1
 80007d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007da:	ebb6 0e02 	subs.w	lr, r6, r2
 80007de:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e2:	bf22      	ittt	cs
 80007e4:	1ab6      	subcs	r6, r6, r2
 80007e6:	4675      	movcs	r5, lr
 80007e8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007ec:	085b      	lsrs	r3, r3, #1
 80007ee:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007f6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fa:	bf22      	ittt	cs
 80007fc:	1ab6      	subcs	r6, r6, r2
 80007fe:	4675      	movcs	r5, lr
 8000800:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000804:	ea55 0e06 	orrs.w	lr, r5, r6
 8000808:	d018      	beq.n	800083c <__aeabi_ddiv+0x114>
 800080a:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800080e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000812:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000816:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800081e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000822:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000826:	d1c0      	bne.n	80007aa <__aeabi_ddiv+0x82>
 8000828:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800082c:	d10b      	bne.n	8000846 <__aeabi_ddiv+0x11e>
 800082e:	ea41 0100 	orr.w	r1, r1, r0
 8000832:	f04f 0000 	mov.w	r0, #0
 8000836:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083a:	e7b6      	b.n	80007aa <__aeabi_ddiv+0x82>
 800083c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000840:	bf04      	itt	eq
 8000842:	4301      	orreq	r1, r0
 8000844:	2000      	moveq	r0, #0
 8000846:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084a:	bf88      	it	hi
 800084c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000850:	f63f aeaf 	bhi.w	80005b2 <__aeabi_dmul+0xde>
 8000854:	ebb5 0c03 	subs.w	ip, r5, r3
 8000858:	bf04      	itt	eq
 800085a:	ebb6 0c02 	subseq.w	ip, r6, r2
 800085e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000862:	f150 0000 	adcs.w	r0, r0, #0
 8000866:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086a:	bd70      	pop	{r4, r5, r6, pc}
 800086c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000870:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000874:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000878:	bfc2      	ittt	gt
 800087a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800087e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000882:	bd70      	popgt	{r4, r5, r6, pc}
 8000884:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000888:	f04f 0e00 	mov.w	lr, #0
 800088c:	3c01      	subs	r4, #1
 800088e:	e690      	b.n	80005b2 <__aeabi_dmul+0xde>
 8000890:	ea45 0e06 	orr.w	lr, r5, r6
 8000894:	e68d      	b.n	80005b2 <__aeabi_dmul+0xde>
 8000896:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089a:	ea94 0f0c 	teq	r4, ip
 800089e:	bf08      	it	eq
 80008a0:	ea95 0f0c 	teqeq	r5, ip
 80008a4:	f43f af3b 	beq.w	800071e <__aeabi_dmul+0x24a>
 80008a8:	ea94 0f0c 	teq	r4, ip
 80008ac:	d10a      	bne.n	80008c4 <__aeabi_ddiv+0x19c>
 80008ae:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b2:	f47f af34 	bne.w	800071e <__aeabi_dmul+0x24a>
 80008b6:	ea95 0f0c 	teq	r5, ip
 80008ba:	f47f af25 	bne.w	8000708 <__aeabi_dmul+0x234>
 80008be:	4610      	mov	r0, r2
 80008c0:	4619      	mov	r1, r3
 80008c2:	e72c      	b.n	800071e <__aeabi_dmul+0x24a>
 80008c4:	ea95 0f0c 	teq	r5, ip
 80008c8:	d106      	bne.n	80008d8 <__aeabi_ddiv+0x1b0>
 80008ca:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008ce:	f43f aefd 	beq.w	80006cc <__aeabi_dmul+0x1f8>
 80008d2:	4610      	mov	r0, r2
 80008d4:	4619      	mov	r1, r3
 80008d6:	e722      	b.n	800071e <__aeabi_dmul+0x24a>
 80008d8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008dc:	bf18      	it	ne
 80008de:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e2:	f47f aec5 	bne.w	8000670 <__aeabi_dmul+0x19c>
 80008e6:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ea:	f47f af0d 	bne.w	8000708 <__aeabi_dmul+0x234>
 80008ee:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f2:	f47f aeeb 	bne.w	80006cc <__aeabi_dmul+0x1f8>
 80008f6:	e712      	b.n	800071e <__aeabi_dmul+0x24a>

080008f8 <__gedf2>:
 80008f8:	f04f 3cff 	mov.w	ip, #4294967295
 80008fc:	e006      	b.n	800090c <__cmpdf2+0x4>
 80008fe:	bf00      	nop

08000900 <__ledf2>:
 8000900:	f04f 0c01 	mov.w	ip, #1
 8000904:	e002      	b.n	800090c <__cmpdf2+0x4>
 8000906:	bf00      	nop

08000908 <__cmpdf2>:
 8000908:	f04f 0c01 	mov.w	ip, #1
 800090c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000910:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000914:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000918:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800091c:	bf18      	it	ne
 800091e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000922:	d01b      	beq.n	800095c <__cmpdf2+0x54>
 8000924:	b001      	add	sp, #4
 8000926:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092a:	bf0c      	ite	eq
 800092c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000930:	ea91 0f03 	teqne	r1, r3
 8000934:	bf02      	ittt	eq
 8000936:	ea90 0f02 	teqeq	r0, r2
 800093a:	2000      	moveq	r0, #0
 800093c:	4770      	bxeq	lr
 800093e:	f110 0f00 	cmn.w	r0, #0
 8000942:	ea91 0f03 	teq	r1, r3
 8000946:	bf58      	it	pl
 8000948:	4299      	cmppl	r1, r3
 800094a:	bf08      	it	eq
 800094c:	4290      	cmpeq	r0, r2
 800094e:	bf2c      	ite	cs
 8000950:	17d8      	asrcs	r0, r3, #31
 8000952:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000956:	f040 0001 	orr.w	r0, r0, #1
 800095a:	4770      	bx	lr
 800095c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000960:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000964:	d102      	bne.n	800096c <__cmpdf2+0x64>
 8000966:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096a:	d107      	bne.n	800097c <__cmpdf2+0x74>
 800096c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000970:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000974:	d1d6      	bne.n	8000924 <__cmpdf2+0x1c>
 8000976:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097a:	d0d3      	beq.n	8000924 <__cmpdf2+0x1c>
 800097c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000980:	4770      	bx	lr
 8000982:	bf00      	nop

08000984 <__aeabi_cdrcmple>:
 8000984:	4684      	mov	ip, r0
 8000986:	4610      	mov	r0, r2
 8000988:	4662      	mov	r2, ip
 800098a:	468c      	mov	ip, r1
 800098c:	4619      	mov	r1, r3
 800098e:	4663      	mov	r3, ip
 8000990:	e000      	b.n	8000994 <__aeabi_cdcmpeq>
 8000992:	bf00      	nop

08000994 <__aeabi_cdcmpeq>:
 8000994:	b501      	push	{r0, lr}
 8000996:	f7ff ffb7 	bl	8000908 <__cmpdf2>
 800099a:	2800      	cmp	r0, #0
 800099c:	bf48      	it	mi
 800099e:	f110 0f00 	cmnmi.w	r0, #0
 80009a2:	bd01      	pop	{r0, pc}

080009a4 <__aeabi_dcmpeq>:
 80009a4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009a8:	f7ff fff4 	bl	8000994 <__aeabi_cdcmpeq>
 80009ac:	bf0c      	ite	eq
 80009ae:	2001      	moveq	r0, #1
 80009b0:	2000      	movne	r0, #0
 80009b2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009b6:	bf00      	nop

080009b8 <__aeabi_dcmplt>:
 80009b8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009bc:	f7ff ffea 	bl	8000994 <__aeabi_cdcmpeq>
 80009c0:	bf34      	ite	cc
 80009c2:	2001      	movcc	r0, #1
 80009c4:	2000      	movcs	r0, #0
 80009c6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ca:	bf00      	nop

080009cc <__aeabi_dcmple>:
 80009cc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d0:	f7ff ffe0 	bl	8000994 <__aeabi_cdcmpeq>
 80009d4:	bf94      	ite	ls
 80009d6:	2001      	movls	r0, #1
 80009d8:	2000      	movhi	r0, #0
 80009da:	f85d fb08 	ldr.w	pc, [sp], #8
 80009de:	bf00      	nop

080009e0 <__aeabi_dcmpge>:
 80009e0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e4:	f7ff ffce 	bl	8000984 <__aeabi_cdrcmple>
 80009e8:	bf94      	ite	ls
 80009ea:	2001      	movls	r0, #1
 80009ec:	2000      	movhi	r0, #0
 80009ee:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f2:	bf00      	nop

080009f4 <__aeabi_dcmpgt>:
 80009f4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009f8:	f7ff ffc4 	bl	8000984 <__aeabi_cdrcmple>
 80009fc:	bf34      	ite	cc
 80009fe:	2001      	movcc	r0, #1
 8000a00:	2000      	movcs	r0, #0
 8000a02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a06:	bf00      	nop

08000a08 <s800LSend>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void s800LSend(uint8_t *text, int nums) {
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b082      	sub	sp, #8
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	6078      	str	r0, [r7, #4]
 8000a10:	6039      	str	r1, [r7, #0]
	HAL_UART_Transmit(&huart2, text, nums, 0xFFFF);
 8000a12:	683b      	ldr	r3, [r7, #0]
 8000a14:	b29a      	uxth	r2, r3
 8000a16:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000a1a:	6879      	ldr	r1, [r7, #4]
 8000a1c:	4810      	ldr	r0, [pc, #64]	; (8000a60 <s800LSend+0x58>)
 8000a1e:	f003 fa71 	bl	8003f04 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, (uint8_t*)"\r\n", 2, 0xFFFF);
 8000a22:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000a26:	2202      	movs	r2, #2
 8000a28:	490e      	ldr	r1, [pc, #56]	; (8000a64 <s800LSend+0x5c>)
 8000a2a:	480d      	ldr	r0, [pc, #52]	; (8000a60 <s800LSend+0x58>)
 8000a2c:	f003 fa6a 	bl	8003f04 <HAL_UART_Transmit>
	if (echoMode) {
 8000a30:	4b0d      	ldr	r3, [pc, #52]	; (8000a68 <s800LSend+0x60>)
 8000a32:	781b      	ldrb	r3, [r3, #0]
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d00f      	beq.n	8000a58 <s800LSend+0x50>
		HAL_UART_Transmit(&huart1, text, nums, 0xFFFF);
 8000a38:	683b      	ldr	r3, [r7, #0]
 8000a3a:	b29a      	uxth	r2, r3
 8000a3c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000a40:	6879      	ldr	r1, [r7, #4]
 8000a42:	480a      	ldr	r0, [pc, #40]	; (8000a6c <s800LSend+0x64>)
 8000a44:	f003 fa5e 	bl	8003f04 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart1, (uint8_t*)"\r\n", 2, 0xFFFF);
 8000a48:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000a4c:	2202      	movs	r2, #2
 8000a4e:	4905      	ldr	r1, [pc, #20]	; (8000a64 <s800LSend+0x5c>)
 8000a50:	4806      	ldr	r0, [pc, #24]	; (8000a6c <s800LSend+0x64>)
 8000a52:	f003 fa57 	bl	8003f04 <HAL_UART_Transmit>
	}
	return;
 8000a56:	bf00      	nop
 8000a58:	bf00      	nop
}
 8000a5a:	3708      	adds	r7, #8
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	bd80      	pop	{r7, pc}
 8000a60:	20000240 	.word	0x20000240
 8000a64:	0800591c 	.word	0x0800591c
 8000a68:	200009da 	.word	0x200009da
 8000a6c:	200001f8 	.word	0x200001f8

08000a70 <s800lMessAdd>:

int s800lMessAdd(uint8_t* text) {
 8000a70:	b480      	push	{r7}
 8000a72:	b085      	sub	sp, #20
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	6078      	str	r0, [r7, #4]
	int i = 0;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	60fb      	str	r3, [r7, #12]
	for (i; i<250; i++) {
 8000a7c:	e00a      	b.n	8000a94 <s800lMessAdd+0x24>
		if (text[i]=='!') return i;
 8000a7e:	68fb      	ldr	r3, [r7, #12]
 8000a80:	687a      	ldr	r2, [r7, #4]
 8000a82:	4413      	add	r3, r2
 8000a84:	781b      	ldrb	r3, [r3, #0]
 8000a86:	2b21      	cmp	r3, #33	; 0x21
 8000a88:	d101      	bne.n	8000a8e <s800lMessAdd+0x1e>
 8000a8a:	68fb      	ldr	r3, [r7, #12]
 8000a8c:	e005      	b.n	8000a9a <s800lMessAdd+0x2a>
	for (i; i<250; i++) {
 8000a8e:	68fb      	ldr	r3, [r7, #12]
 8000a90:	3301      	adds	r3, #1
 8000a92:	60fb      	str	r3, [r7, #12]
 8000a94:	68fb      	ldr	r3, [r7, #12]
 8000a96:	2bf9      	cmp	r3, #249	; 0xf9
 8000a98:	ddf1      	ble.n	8000a7e <s800lMessAdd+0xe>
	}
}
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	3714      	adds	r7, #20
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	bc80      	pop	{r7}
 8000aa2:	4770      	bx	lr

08000aa4 <buttStart>:

void buttStart() {
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 0);
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000aae:	480d      	ldr	r0, [pc, #52]	; (8000ae4 <buttStart+0x40>)
 8000ab0:	f002 fd96 	bl	80035e0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0);
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000aba:	480b      	ldr	r0, [pc, #44]	; (8000ae8 <buttStart+0x44>)
 8000abc:	f002 fd90 	bl	80035e0 <HAL_GPIO_WritePin>
	HAL_Delay(3000);
 8000ac0:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000ac4:	f002 f83c 	bl	8002b40 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 1);
 8000ac8:	2201      	movs	r2, #1
 8000aca:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ace:	4805      	ldr	r0, [pc, #20]	; (8000ae4 <buttStart+0x40>)
 8000ad0:	f002 fd86 	bl	80035e0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);
 8000ad4:	2201      	movs	r2, #1
 8000ad6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ada:	4803      	ldr	r0, [pc, #12]	; (8000ae8 <buttStart+0x44>)
 8000adc:	f002 fd80 	bl	80035e0 <HAL_GPIO_WritePin>
}
 8000ae0:	bf00      	nop
 8000ae2:	bd80      	pop	{r7, pc}
 8000ae4:	40011000 	.word	0x40011000
 8000ae8:	40010c00 	.word	0x40010c00

08000aec <buttOpen>:

void buttOpen() {
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b082      	sub	sp, #8
 8000af0:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 0);
 8000af2:	2200      	movs	r2, #0
 8000af4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000af8:	4816      	ldr	r0, [pc, #88]	; (8000b54 <buttOpen+0x68>)
 8000afa:	f002 fd71 	bl	80035e0 <HAL_GPIO_WritePin>
	for (int i = 0; i<5; i++) {
 8000afe:	2300      	movs	r3, #0
 8000b00:	607b      	str	r3, [r7, #4]
 8000b02:	e014      	b.n	8000b2e <buttOpen+0x42>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 0);
 8000b04:	2200      	movs	r2, #0
 8000b06:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b0a:	4812      	ldr	r0, [pc, #72]	; (8000b54 <buttOpen+0x68>)
 8000b0c:	f002 fd68 	bl	80035e0 <HAL_GPIO_WritePin>
		HAL_Delay(100);
 8000b10:	2064      	movs	r0, #100	; 0x64
 8000b12:	f002 f815 	bl	8002b40 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 1);
 8000b16:	2201      	movs	r2, #1
 8000b18:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b1c:	480d      	ldr	r0, [pc, #52]	; (8000b54 <buttOpen+0x68>)
 8000b1e:	f002 fd5f 	bl	80035e0 <HAL_GPIO_WritePin>
		HAL_Delay(100);
 8000b22:	2064      	movs	r0, #100	; 0x64
 8000b24:	f002 f80c 	bl	8002b40 <HAL_Delay>
	for (int i = 0; i<5; i++) {
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	3301      	adds	r3, #1
 8000b2c:	607b      	str	r3, [r7, #4]
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	2b04      	cmp	r3, #4
 8000b32:	dde7      	ble.n	8000b04 <buttOpen+0x18>
	}
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 1);
 8000b34:	2201      	movs	r2, #1
 8000b36:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b3a:	4806      	ldr	r0, [pc, #24]	; (8000b54 <buttOpen+0x68>)
 8000b3c:	f002 fd50 	bl	80035e0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);
 8000b40:	2201      	movs	r2, #1
 8000b42:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b46:	4804      	ldr	r0, [pc, #16]	; (8000b58 <buttOpen+0x6c>)
 8000b48:	f002 fd4a 	bl	80035e0 <HAL_GPIO_WritePin>
}
 8000b4c:	bf00      	nop
 8000b4e:	3708      	adds	r7, #8
 8000b50:	46bd      	mov	sp, r7
 8000b52:	bd80      	pop	{r7, pc}
 8000b54:	40011000 	.word	0x40011000
 8000b58:	40010c00 	.word	0x40010c00

08000b5c <buttClose>:

void buttClose() {
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b082      	sub	sp, #8
 8000b60:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, 0);
 8000b62:	2200      	movs	r2, #0
 8000b64:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b68:	4816      	ldr	r0, [pc, #88]	; (8000bc4 <buttClose+0x68>)
 8000b6a:	f002 fd39 	bl	80035e0 <HAL_GPIO_WritePin>
	for (int i = 0; i<3; i++) {
 8000b6e:	2300      	movs	r3, #0
 8000b70:	607b      	str	r3, [r7, #4]
 8000b72:	e014      	b.n	8000b9e <buttClose+0x42>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 0);
 8000b74:	2200      	movs	r2, #0
 8000b76:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b7a:	4812      	ldr	r0, [pc, #72]	; (8000bc4 <buttClose+0x68>)
 8000b7c:	f002 fd30 	bl	80035e0 <HAL_GPIO_WritePin>
		HAL_Delay(250);
 8000b80:	20fa      	movs	r0, #250	; 0xfa
 8000b82:	f001 ffdd 	bl	8002b40 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 1);
 8000b86:	2201      	movs	r2, #1
 8000b88:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b8c:	480d      	ldr	r0, [pc, #52]	; (8000bc4 <buttClose+0x68>)
 8000b8e:	f002 fd27 	bl	80035e0 <HAL_GPIO_WritePin>
		HAL_Delay(250);
 8000b92:	20fa      	movs	r0, #250	; 0xfa
 8000b94:	f001 ffd4 	bl	8002b40 <HAL_Delay>
	for (int i = 0; i<3; i++) {
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	3301      	adds	r3, #1
 8000b9c:	607b      	str	r3, [r7, #4]
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	2b02      	cmp	r3, #2
 8000ba2:	dde7      	ble.n	8000b74 <buttClose+0x18>
	}
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 1);
 8000ba4:	2201      	movs	r2, #1
 8000ba6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000baa:	4806      	ldr	r0, [pc, #24]	; (8000bc4 <buttClose+0x68>)
 8000bac:	f002 fd18 	bl	80035e0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, 1);
 8000bb0:	2201      	movs	r2, #1
 8000bb2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000bb6:	4804      	ldr	r0, [pc, #16]	; (8000bc8 <buttClose+0x6c>)
 8000bb8:	f002 fd12 	bl	80035e0 <HAL_GPIO_WritePin>
}
 8000bbc:	bf00      	nop
 8000bbe:	3708      	adds	r7, #8
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	bd80      	pop	{r7, pc}
 8000bc4:	40011000 	.word	0x40011000
 8000bc8:	40010c00 	.word	0x40010c00

08000bcc <txATcommand>:

void txATcommand() {
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b0d4      	sub	sp, #336	; 0x150
 8000bd0:	af02      	add	r7, sp, #8
	//HAL_Delay(500);
	switch (step) {
 8000bd2:	4bd1      	ldr	r3, [pc, #836]	; (8000f18 <txATcommand+0x34c>)
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	2b63      	cmp	r3, #99	; 0x63
 8000bd8:	f200 821e 	bhi.w	8001018 <txATcommand+0x44c>
 8000bdc:	a201      	add	r2, pc, #4	; (adr r2, 8000be4 <txATcommand+0x18>)
 8000bde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000be2:	bf00      	nop
 8000be4:	08000d75 	.word	0x08000d75
 8000be8:	08000d93 	.word	0x08000d93
 8000bec:	08000da3 	.word	0x08000da3
 8000bf0:	08000db3 	.word	0x08000db3
 8000bf4:	08000dc3 	.word	0x08000dc3
 8000bf8:	08000ddb 	.word	0x08000ddb
 8000bfc:	08000deb 	.word	0x08000deb
 8000c00:	08000dfb 	.word	0x08000dfb
 8000c04:	08000e77 	.word	0x08000e77
 8000c08:	08000e87 	.word	0x08000e87
 8000c0c:	08000e97 	.word	0x08000e97
 8000c10:	08000ea7 	.word	0x08000ea7
 8000c14:	08001019 	.word	0x08001019
 8000c18:	08001019 	.word	0x08001019
 8000c1c:	08001019 	.word	0x08001019
 8000c20:	08001019 	.word	0x08001019
 8000c24:	08001019 	.word	0x08001019
 8000c28:	08001019 	.word	0x08001019
 8000c2c:	08001019 	.word	0x08001019
 8000c30:	08001019 	.word	0x08001019
 8000c34:	08000eb7 	.word	0x08000eb7
 8000c38:	08000ec7 	.word	0x08000ec7
 8000c3c:	08000f07 	.word	0x08000f07
 8000c40:	08000f91 	.word	0x08000f91
 8000c44:	08000fd1 	.word	0x08000fd1
 8000c48:	08001019 	.word	0x08001019
 8000c4c:	08001019 	.word	0x08001019
 8000c50:	08001019 	.word	0x08001019
 8000c54:	08001019 	.word	0x08001019
 8000c58:	08001019 	.word	0x08001019
 8000c5c:	08001019 	.word	0x08001019
 8000c60:	08001019 	.word	0x08001019
 8000c64:	08001019 	.word	0x08001019
 8000c68:	08001019 	.word	0x08001019
 8000c6c:	08001019 	.word	0x08001019
 8000c70:	08001019 	.word	0x08001019
 8000c74:	08001019 	.word	0x08001019
 8000c78:	08001019 	.word	0x08001019
 8000c7c:	08001019 	.word	0x08001019
 8000c80:	08001019 	.word	0x08001019
 8000c84:	08001019 	.word	0x08001019
 8000c88:	08001019 	.word	0x08001019
 8000c8c:	08001019 	.word	0x08001019
 8000c90:	08001019 	.word	0x08001019
 8000c94:	08001019 	.word	0x08001019
 8000c98:	08001019 	.word	0x08001019
 8000c9c:	08001019 	.word	0x08001019
 8000ca0:	08001019 	.word	0x08001019
 8000ca4:	08001019 	.word	0x08001019
 8000ca8:	08001019 	.word	0x08001019
 8000cac:	08001019 	.word	0x08001019
 8000cb0:	08001019 	.word	0x08001019
 8000cb4:	08001019 	.word	0x08001019
 8000cb8:	08001019 	.word	0x08001019
 8000cbc:	08001019 	.word	0x08001019
 8000cc0:	08001019 	.word	0x08001019
 8000cc4:	08001019 	.word	0x08001019
 8000cc8:	08001019 	.word	0x08001019
 8000ccc:	08001019 	.word	0x08001019
 8000cd0:	08001019 	.word	0x08001019
 8000cd4:	08001019 	.word	0x08001019
 8000cd8:	08001019 	.word	0x08001019
 8000cdc:	08001019 	.word	0x08001019
 8000ce0:	08001019 	.word	0x08001019
 8000ce4:	08001019 	.word	0x08001019
 8000ce8:	08001019 	.word	0x08001019
 8000cec:	08001019 	.word	0x08001019
 8000cf0:	08001019 	.word	0x08001019
 8000cf4:	08001019 	.word	0x08001019
 8000cf8:	08001019 	.word	0x08001019
 8000cfc:	08001019 	.word	0x08001019
 8000d00:	08001019 	.word	0x08001019
 8000d04:	08001019 	.word	0x08001019
 8000d08:	08001019 	.word	0x08001019
 8000d0c:	08001019 	.word	0x08001019
 8000d10:	08001019 	.word	0x08001019
 8000d14:	08001019 	.word	0x08001019
 8000d18:	08001019 	.word	0x08001019
 8000d1c:	08001019 	.word	0x08001019
 8000d20:	08001019 	.word	0x08001019
 8000d24:	08001019 	.word	0x08001019
 8000d28:	08001019 	.word	0x08001019
 8000d2c:	08001019 	.word	0x08001019
 8000d30:	08001019 	.word	0x08001019
 8000d34:	08001019 	.word	0x08001019
 8000d38:	08001019 	.word	0x08001019
 8000d3c:	08001019 	.word	0x08001019
 8000d40:	08001019 	.word	0x08001019
 8000d44:	08001019 	.word	0x08001019
 8000d48:	08001019 	.word	0x08001019
 8000d4c:	08001019 	.word	0x08001019
 8000d50:	08001019 	.word	0x08001019
 8000d54:	08001019 	.word	0x08001019
 8000d58:	08001019 	.word	0x08001019
 8000d5c:	08001019 	.word	0x08001019
 8000d60:	08001019 	.word	0x08001019
 8000d64:	08001019 	.word	0x08001019
 8000d68:	08001019 	.word	0x08001019
 8000d6c:	08001019 	.word	0x08001019
 8000d70:	08001007 	.word	0x08001007
		case 0: {
			ready=false;
 8000d74:	4b69      	ldr	r3, [pc, #420]	; (8000f1c <txATcommand+0x350>)
 8000d76:	2200      	movs	r2, #0
 8000d78:	701a      	strb	r2, [r3, #0]
			s800LSend((uint8_t*)"ATE0", 4);
 8000d7a:	2104      	movs	r1, #4
 8000d7c:	4868      	ldr	r0, [pc, #416]	; (8000f20 <txATcommand+0x354>)
 8000d7e:	f7ff fe43 	bl	8000a08 <s800LSend>
			HAL_UART_Transmit(&huart1, "start update\r\n", 14, 0xFFFF);
 8000d82:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000d86:	220e      	movs	r2, #14
 8000d88:	4966      	ldr	r1, [pc, #408]	; (8000f24 <txATcommand+0x358>)
 8000d8a:	4867      	ldr	r0, [pc, #412]	; (8000f28 <txATcommand+0x35c>)
 8000d8c:	f003 f8ba 	bl	8003f04 <HAL_UART_Transmit>
			break;
 8000d90:	e141      	b.n	8001016 <txATcommand+0x44a>
		}
		case 1: {
			ready=false;
 8000d92:	4b62      	ldr	r3, [pc, #392]	; (8000f1c <txATcommand+0x350>)
 8000d94:	2200      	movs	r2, #0
 8000d96:	701a      	strb	r2, [r3, #0]
			s800LSend((uint8_t*)"AT+CSQ", 6);
 8000d98:	2106      	movs	r1, #6
 8000d9a:	4864      	ldr	r0, [pc, #400]	; (8000f2c <txATcommand+0x360>)
 8000d9c:	f7ff fe34 	bl	8000a08 <s800LSend>
			break;
 8000da0:	e139      	b.n	8001016 <txATcommand+0x44a>
		}
		case 2: {
			ready=false;
 8000da2:	4b5e      	ldr	r3, [pc, #376]	; (8000f1c <txATcommand+0x350>)
 8000da4:	2200      	movs	r2, #0
 8000da6:	701a      	strb	r2, [r3, #0]
			s800LSend((uint8_t*)"AT+CBC", 6);
 8000da8:	2106      	movs	r1, #6
 8000daa:	4861      	ldr	r0, [pc, #388]	; (8000f30 <txATcommand+0x364>)
 8000dac:	f7ff fe2c 	bl	8000a08 <s800LSend>
			break;
 8000db0:	e131      	b.n	8001016 <txATcommand+0x44a>
		}
		case 3: {
			ready=false;
 8000db2:	4b5a      	ldr	r3, [pc, #360]	; (8000f1c <txATcommand+0x350>)
 8000db4:	2200      	movs	r2, #0
 8000db6:	701a      	strb	r2, [r3, #0]
			s800LSend((uint8_t*)"AT+CREG?", 8);
 8000db8:	2108      	movs	r1, #8
 8000dba:	485e      	ldr	r0, [pc, #376]	; (8000f34 <txATcommand+0x368>)
 8000dbc:	f7ff fe24 	bl	8000a08 <s800LSend>
			break;
 8000dc0:	e129      	b.n	8001016 <txATcommand+0x44a>
		}
		case 4: {
			ready=false;
 8000dc2:	4b56      	ldr	r3, [pc, #344]	; (8000f1c <txATcommand+0x350>)
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	701a      	strb	r2, [r3, #0]
			s800LSend((uint8_t*)"AT+SAPBR=1,1", 12);
 8000dc8:	210c      	movs	r1, #12
 8000dca:	485b      	ldr	r0, [pc, #364]	; (8000f38 <txATcommand+0x36c>)
 8000dcc:	f7ff fe1c 	bl	8000a08 <s800LSend>
			HAL_Delay(2000);
 8000dd0:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000dd4:	f001 feb4 	bl	8002b40 <HAL_Delay>
			break;
 8000dd8:	e11d      	b.n	8001016 <txATcommand+0x44a>
		}
		case 5: {
			ready=false;
 8000dda:	4b50      	ldr	r3, [pc, #320]	; (8000f1c <txATcommand+0x350>)
 8000ddc:	2200      	movs	r2, #0
 8000dde:	701a      	strb	r2, [r3, #0]
			s800LSend((uint8_t*)"AT+HTTPINIT", 11);
 8000de0:	210b      	movs	r1, #11
 8000de2:	4856      	ldr	r0, [pc, #344]	; (8000f3c <txATcommand+0x370>)
 8000de4:	f7ff fe10 	bl	8000a08 <s800LSend>
			break;
 8000de8:	e115      	b.n	8001016 <txATcommand+0x44a>
		}
		case 6: {
			ready=false;
 8000dea:	4b4c      	ldr	r3, [pc, #304]	; (8000f1c <txATcommand+0x350>)
 8000dec:	2200      	movs	r2, #0
 8000dee:	701a      	strb	r2, [r3, #0]
			s800LSend((uint8_t*)"AT+HTTPPARA=\"CID\",1",19);
 8000df0:	2113      	movs	r1, #19
 8000df2:	4853      	ldr	r0, [pc, #332]	; (8000f40 <txATcommand+0x374>)
 8000df4:	f7ff fe08 	bl	8000a08 <s800LSend>
			break;
 8000df8:	e10d      	b.n	8001016 <txATcommand+0x44a>
		}
		case 7: {
			ready=false;
 8000dfa:	4b48      	ldr	r3, [pc, #288]	; (8000f1c <txATcommand+0x350>)
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	701a      	strb	r2, [r3, #0]
			bat[7]=0;
 8000e00:	4b50      	ldr	r3, [pc, #320]	; (8000f44 <txATcommand+0x378>)
 8000e02:	2200      	movs	r2, #0
 8000e04:	71da      	strb	r2, [r3, #7]
			uint8_t ext[250];
			if ((answ)||(delayAnsw))
 8000e06:	4b50      	ldr	r3, [pc, #320]	; (8000f48 <txATcommand+0x37c>)
 8000e08:	781b      	ldrb	r3, [r3, #0]
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d103      	bne.n	8000e16 <txATcommand+0x24a>
 8000e0e:	4b4f      	ldr	r3, [pc, #316]	; (8000f4c <txATcommand+0x380>)
 8000e10:	781b      	ldrb	r3, [r3, #0]
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d00a      	beq.n	8000e2c <txATcommand+0x260>
				sprintf(ext, "AT+HTTPPARA=\"URL\",\"http://simple.spamigor.ru/api/gst?csq=%s&bat=%s&mes=%s&id=%s\"", csqlvl, bat, smsText, unicID);
 8000e16:	1d38      	adds	r0, r7, #4
 8000e18:	4b4d      	ldr	r3, [pc, #308]	; (8000f50 <txATcommand+0x384>)
 8000e1a:	9301      	str	r3, [sp, #4]
 8000e1c:	4b4d      	ldr	r3, [pc, #308]	; (8000f54 <txATcommand+0x388>)
 8000e1e:	9300      	str	r3, [sp, #0]
 8000e20:	4b48      	ldr	r3, [pc, #288]	; (8000f44 <txATcommand+0x378>)
 8000e22:	4a4d      	ldr	r2, [pc, #308]	; (8000f58 <txATcommand+0x38c>)
 8000e24:	494d      	ldr	r1, [pc, #308]	; (8000f5c <txATcommand+0x390>)
 8000e26:	f004 f93d 	bl	80050a4 <siprintf>
 8000e2a:	e015      	b.n	8000e58 <txATcommand+0x28c>
			else if (!checkPhones)
 8000e2c:	4b4c      	ldr	r3, [pc, #304]	; (8000f60 <txATcommand+0x394>)
 8000e2e:	781b      	ldrb	r3, [r3, #0]
 8000e30:	f083 0301 	eor.w	r3, r3, #1
 8000e34:	b2db      	uxtb	r3, r3
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d008      	beq.n	8000e4c <txATcommand+0x280>
				sprintf(ext, "AT+HTTPPARA=\"URL\",\"http://simple.spamigor.ru/api/gst?csq=%s&bat=%s&id=%s\"", csqlvl, bat, unicID);
 8000e3a:	1d38      	adds	r0, r7, #4
 8000e3c:	4b44      	ldr	r3, [pc, #272]	; (8000f50 <txATcommand+0x384>)
 8000e3e:	9300      	str	r3, [sp, #0]
 8000e40:	4b40      	ldr	r3, [pc, #256]	; (8000f44 <txATcommand+0x378>)
 8000e42:	4a45      	ldr	r2, [pc, #276]	; (8000f58 <txATcommand+0x38c>)
 8000e44:	4947      	ldr	r1, [pc, #284]	; (8000f64 <txATcommand+0x398>)
 8000e46:	f004 f92d 	bl	80050a4 <siprintf>
 8000e4a:	e005      	b.n	8000e58 <txATcommand+0x28c>
			else sprintf(ext, "AT+HTTPPARA=\"URL\",\"http://simple.spamigor.ru/api/phn?id=%s\"", unicID);
 8000e4c:	1d3b      	adds	r3, r7, #4
 8000e4e:	4a40      	ldr	r2, [pc, #256]	; (8000f50 <txATcommand+0x384>)
 8000e50:	4945      	ldr	r1, [pc, #276]	; (8000f68 <txATcommand+0x39c>)
 8000e52:	4618      	mov	r0, r3
 8000e54:	f004 f926 	bl	80050a4 <siprintf>
			delayAnsw = false;
 8000e58:	4b3c      	ldr	r3, [pc, #240]	; (8000f4c <txATcommand+0x380>)
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	701a      	strb	r2, [r3, #0]
			s800LSend(ext, strlen(ext));
 8000e5e:	1d3b      	adds	r3, r7, #4
 8000e60:	4618      	mov	r0, r3
 8000e62:	f7ff f973 	bl	800014c <strlen>
 8000e66:	4603      	mov	r3, r0
 8000e68:	461a      	mov	r2, r3
 8000e6a:	1d3b      	adds	r3, r7, #4
 8000e6c:	4611      	mov	r1, r2
 8000e6e:	4618      	mov	r0, r3
 8000e70:	f7ff fdca 	bl	8000a08 <s800LSend>
			break;
 8000e74:	e0cf      	b.n	8001016 <txATcommand+0x44a>
		}
		case 8: {
			ready=false;
 8000e76:	4b29      	ldr	r3, [pc, #164]	; (8000f1c <txATcommand+0x350>)
 8000e78:	2200      	movs	r2, #0
 8000e7a:	701a      	strb	r2, [r3, #0]
			s800LSend((uint8_t*)"AT+HTTPACTION=0",15);
 8000e7c:	210f      	movs	r1, #15
 8000e7e:	483b      	ldr	r0, [pc, #236]	; (8000f6c <txATcommand+0x3a0>)
 8000e80:	f7ff fdc2 	bl	8000a08 <s800LSend>
			break;
 8000e84:	e0c7      	b.n	8001016 <txATcommand+0x44a>
		}
		case 9: {
			ready=false;
 8000e86:	4b25      	ldr	r3, [pc, #148]	; (8000f1c <txATcommand+0x350>)
 8000e88:	2200      	movs	r2, #0
 8000e8a:	701a      	strb	r2, [r3, #0]
			s800LSend((uint8_t*)"AT+HTTPREAD",11);
 8000e8c:	210b      	movs	r1, #11
 8000e8e:	4838      	ldr	r0, [pc, #224]	; (8000f70 <txATcommand+0x3a4>)
 8000e90:	f7ff fdba 	bl	8000a08 <s800LSend>
			break;
 8000e94:	e0bf      	b.n	8001016 <txATcommand+0x44a>
		}
		case 10: {
			ready=false;
 8000e96:	4b21      	ldr	r3, [pc, #132]	; (8000f1c <txATcommand+0x350>)
 8000e98:	2200      	movs	r2, #0
 8000e9a:	701a      	strb	r2, [r3, #0]
			s800LSend((uint8_t*)"AT+HTTPTERM",11);
 8000e9c:	210b      	movs	r1, #11
 8000e9e:	4835      	ldr	r0, [pc, #212]	; (8000f74 <txATcommand+0x3a8>)
 8000ea0:	f7ff fdb2 	bl	8000a08 <s800LSend>
			break;
 8000ea4:	e0b7      	b.n	8001016 <txATcommand+0x44a>
		}
		case 11: {
			ready=false;
 8000ea6:	4b1d      	ldr	r3, [pc, #116]	; (8000f1c <txATcommand+0x350>)
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	701a      	strb	r2, [r3, #0]
			s800LSend((uint8_t*)"AT+SAPBR=0,1", 12);
 8000eac:	210c      	movs	r1, #12
 8000eae:	4832      	ldr	r0, [pc, #200]	; (8000f78 <txATcommand+0x3ac>)
 8000eb0:	f7ff fdaa 	bl	8000a08 <s800LSend>
			break;
 8000eb4:	e0af      	b.n	8001016 <txATcommand+0x44a>
		}
		case 20: {
			ready = false;
 8000eb6:	4b19      	ldr	r3, [pc, #100]	; (8000f1c <txATcommand+0x350>)
 8000eb8:	2200      	movs	r2, #0
 8000eba:	701a      	strb	r2, [r3, #0]
			s800LSend((uint8_t*)"AT+CMGF=1", 9);
 8000ebc:	2109      	movs	r1, #9
 8000ebe:	482f      	ldr	r0, [pc, #188]	; (8000f7c <txATcommand+0x3b0>)
 8000ec0:	f7ff fda2 	bl	8000a08 <s800LSend>
			break;
 8000ec4:	e0a7      	b.n	8001016 <txATcommand+0x44a>
		}
		case 21: {
			ready=false;
 8000ec6:	4b15      	ldr	r3, [pc, #84]	; (8000f1c <txATcommand+0x350>)
 8000ec8:	2200      	movs	r2, #0
 8000eca:	701a      	strb	r2, [r3, #0]
			uint8_t ext[15];
			uint8_t at[] = "AT+CMGR=";
 8000ecc:	4a2c      	ldr	r2, [pc, #176]	; (8000f80 <txATcommand+0x3b4>)
 8000ece:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 8000ed2:	ca07      	ldmia	r2, {r0, r1, r2}
 8000ed4:	c303      	stmia	r3!, {r0, r1}
 8000ed6:	701a      	strb	r2, [r3, #0]
			snprintf(ext, 15, "%s%s", at, smsNum);
 8000ed8:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 8000edc:	f507 709c 	add.w	r0, r7, #312	; 0x138
 8000ee0:	4a28      	ldr	r2, [pc, #160]	; (8000f84 <txATcommand+0x3b8>)
 8000ee2:	9200      	str	r2, [sp, #0]
 8000ee4:	4a28      	ldr	r2, [pc, #160]	; (8000f88 <txATcommand+0x3bc>)
 8000ee6:	210f      	movs	r1, #15
 8000ee8:	f004 f8a8 	bl	800503c <sniprintf>
			s800LSend(ext, s800lMessAdd(ext));
 8000eec:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	f7ff fdbd 	bl	8000a70 <s800lMessAdd>
 8000ef6:	4602      	mov	r2, r0
 8000ef8:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8000efc:	4611      	mov	r1, r2
 8000efe:	4618      	mov	r0, r3
 8000f00:	f7ff fd82 	bl	8000a08 <s800LSend>
			break;
 8000f04:	e087      	b.n	8001016 <txATcommand+0x44a>
		}
		case 22: {
			ready = false;
 8000f06:	4b05      	ldr	r3, [pc, #20]	; (8000f1c <txATcommand+0x350>)
 8000f08:	2200      	movs	r2, #0
 8000f0a:	701a      	strb	r2, [r3, #0]
			s800LSend((uint8_t*)"AT+CMGDA=\"DEL ALL\"", 18);
 8000f0c:	2112      	movs	r1, #18
 8000f0e:	481f      	ldr	r0, [pc, #124]	; (8000f8c <txATcommand+0x3c0>)
 8000f10:	f7ff fd7a 	bl	8000a08 <s800LSend>
			break;
 8000f14:	e07f      	b.n	8001016 <txATcommand+0x44a>
 8000f16:	bf00      	nop
 8000f18:	200009d0 	.word	0x200009d0
 8000f1c:	200009d8 	.word	0x200009d8
 8000f20:	08005920 	.word	0x08005920
 8000f24:	08005928 	.word	0x08005928
 8000f28:	200001f8 	.word	0x200001f8
 8000f2c:	08005938 	.word	0x08005938
 8000f30:	08005940 	.word	0x08005940
 8000f34:	08005948 	.word	0x08005948
 8000f38:	08005954 	.word	0x08005954
 8000f3c:	08005964 	.word	0x08005964
 8000f40:	08005970 	.word	0x08005970
 8000f44:	200009dc 	.word	0x200009dc
 8000f48:	200009d9 	.word	0x200009d9
 8000f4c:	200009e7 	.word	0x200009e7
 8000f50:	20000990 	.word	0x20000990
 8000f54:	20000008 	.word	0x20000008
 8000f58:	20000104 	.word	0x20000104
 8000f5c:	08005984 	.word	0x08005984
 8000f60:	2000015c 	.word	0x2000015c
 8000f64:	080059d8 	.word	0x080059d8
 8000f68:	08005a24 	.word	0x08005a24
 8000f6c:	08005a60 	.word	0x08005a60
 8000f70:	08005a70 	.word	0x08005a70
 8000f74:	08005a7c 	.word	0x08005a7c
 8000f78:	08005a88 	.word	0x08005a88
 8000f7c:	08005a98 	.word	0x08005a98
 8000f80:	08005ae4 	.word	0x08005ae4
 8000f84:	20000988 	.word	0x20000988
 8000f88:	08005aa4 	.word	0x08005aa4
 8000f8c:	08005aac 	.word	0x08005aac
		}
		case 23: {
			step=24;
 8000f90:	4b24      	ldr	r3, [pc, #144]	; (8001024 <txATcommand+0x458>)
 8000f92:	2218      	movs	r2, #24
 8000f94:	601a      	str	r2, [r3, #0]
			ready = true;
 8000f96:	4b24      	ldr	r3, [pc, #144]	; (8001028 <txATcommand+0x45c>)
 8000f98:	2201      	movs	r2, #1
 8000f9a:	701a      	strb	r2, [r3, #0]
			uint8_t ext[23] = {0};
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8000fa2:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	601a      	str	r2, [r3, #0]
 8000faa:	605a      	str	r2, [r3, #4]
 8000fac:	609a      	str	r2, [r3, #8]
 8000fae:	60da      	str	r2, [r3, #12]
 8000fb0:	f8c3 200f 	str.w	r2, [r3, #15]
			sprintf(ext, "AT+CMGS=\"+%s\"", backNumber);
 8000fb4:	f507 738a 	add.w	r3, r7, #276	; 0x114
 8000fb8:	4a1c      	ldr	r2, [pc, #112]	; (800102c <txATcommand+0x460>)
 8000fba:	491d      	ldr	r1, [pc, #116]	; (8001030 <txATcommand+0x464>)
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	f004 f871 	bl	80050a4 <siprintf>
			s800LSend(ext, 22);
 8000fc2:	f507 738a 	add.w	r3, r7, #276	; 0x114
 8000fc6:	2116      	movs	r1, #22
 8000fc8:	4618      	mov	r0, r3
 8000fca:	f7ff fd1d 	bl	8000a08 <s800LSend>
			break;
 8000fce:	e022      	b.n	8001016 <txATcommand+0x44a>
		}
		case 24: {
			ready = false;
 8000fd0:	4b15      	ldr	r3, [pc, #84]	; (8001028 <txATcommand+0x45c>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	701a      	strb	r2, [r3, #0]
			step=24;
 8000fd6:	4b13      	ldr	r3, [pc, #76]	; (8001024 <txATcommand+0x458>)
 8000fd8:	2218      	movs	r2, #24
 8000fda:	601a      	str	r2, [r3, #0]
			uint8_t ggg[20];
			sprintf(ggg, "%s%c", smsText, (uint8_t)0x1A);
 8000fdc:	f507 7080 	add.w	r0, r7, #256	; 0x100
 8000fe0:	231a      	movs	r3, #26
 8000fe2:	4a14      	ldr	r2, [pc, #80]	; (8001034 <txATcommand+0x468>)
 8000fe4:	4914      	ldr	r1, [pc, #80]	; (8001038 <txATcommand+0x46c>)
 8000fe6:	f004 f85d 	bl	80050a4 <siprintf>
			s800LSend(ggg, strlen(ggg));
 8000fea:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8000fee:	4618      	mov	r0, r3
 8000ff0:	f7ff f8ac 	bl	800014c <strlen>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	461a      	mov	r2, r3
 8000ff8:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8000ffc:	4611      	mov	r1, r2
 8000ffe:	4618      	mov	r0, r3
 8001000:	f7ff fd02 	bl	8000a08 <s800LSend>
			break;
 8001004:	e007      	b.n	8001016 <txATcommand+0x44a>
		}
		case 99: {
			ready = true;
 8001006:	4b08      	ldr	r3, [pc, #32]	; (8001028 <txATcommand+0x45c>)
 8001008:	2201      	movs	r2, #1
 800100a:	701a      	strb	r2, [r3, #0]
			s800LSend((uint8_t*)"AT+CFUN=1,1", 22);
 800100c:	2116      	movs	r1, #22
 800100e:	480b      	ldr	r0, [pc, #44]	; (800103c <txATcommand+0x470>)
 8001010:	f7ff fcfa 	bl	8000a08 <s800LSend>
			break;
 8001014:	bf00      	nop
		}
	}
	return;
 8001016:	bf00      	nop
 8001018:	bf00      	nop
}
 800101a:	f507 77a4 	add.w	r7, r7, #328	; 0x148
 800101e:	46bd      	mov	sp, r7
 8001020:	bd80      	pop	{r7, pc}
 8001022:	bf00      	nop
 8001024:	200009d0 	.word	0x200009d0
 8001028:	200009d8 	.word	0x200009d8
 800102c:	2000013c 	.word	0x2000013c
 8001030:	08005ac0 	.word	0x08005ac0
 8001034:	20000008 	.word	0x20000008
 8001038:	08005ad0 	.word	0x08005ad0
 800103c:	08005ad8 	.word	0x08005ad8

08001040 <rxATcommand>:

void rxATcommand(uint8_t* text) {
 8001040:	b5b0      	push	{r4, r5, r7, lr}
 8001042:	b094      	sub	sp, #80	; 0x50
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
	switch (step) {
 8001048:	4bbf      	ldr	r3, [pc, #764]	; (8001348 <rxATcommand+0x308>)
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	2b63      	cmp	r3, #99	; 0x63
 800104e:	f200 858b 	bhi.w	8001b68 <rxATcommand+0xb28>
 8001052:	a201      	add	r2, pc, #4	; (adr r2, 8001058 <rxATcommand+0x18>)
 8001054:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001058:	080011e9 	.word	0x080011e9
 800105c:	08001239 	.word	0x08001239
 8001060:	0800126b 	.word	0x0800126b
 8001064:	080012cd 	.word	0x080012cd
 8001068:	080012ef 	.word	0x080012ef
 800106c:	0800132d 	.word	0x0800132d
 8001070:	0800139b 	.word	0x0800139b
 8001074:	080013c9 	.word	0x080013c9
 8001078:	080013f7 	.word	0x080013f7
 800107c:	0800145f 	.word	0x0800145f
 8001080:	0800184f 	.word	0x0800184f
 8001084:	08001881 	.word	0x08001881
 8001088:	080018b9 	.word	0x080018b9
 800108c:	08001b69 	.word	0x08001b69
 8001090:	08001b69 	.word	0x08001b69
 8001094:	08001b69 	.word	0x08001b69
 8001098:	08001b69 	.word	0x08001b69
 800109c:	08001b69 	.word	0x08001b69
 80010a0:	08001b69 	.word	0x08001b69
 80010a4:	08001b69 	.word	0x08001b69
 80010a8:	080019ab 	.word	0x080019ab
 80010ac:	080019d3 	.word	0x080019d3
 80010b0:	08001ac3 	.word	0x08001ac3
 80010b4:	08001ad5 	.word	0x08001ad5
 80010b8:	08001ae7 	.word	0x08001ae7
 80010bc:	08001b69 	.word	0x08001b69
 80010c0:	08001b69 	.word	0x08001b69
 80010c4:	08001b69 	.word	0x08001b69
 80010c8:	08001b69 	.word	0x08001b69
 80010cc:	08001b69 	.word	0x08001b69
 80010d0:	08001b69 	.word	0x08001b69
 80010d4:	08001b69 	.word	0x08001b69
 80010d8:	08001b69 	.word	0x08001b69
 80010dc:	08001b69 	.word	0x08001b69
 80010e0:	08001b69 	.word	0x08001b69
 80010e4:	08001b69 	.word	0x08001b69
 80010e8:	08001b69 	.word	0x08001b69
 80010ec:	08001b69 	.word	0x08001b69
 80010f0:	08001b69 	.word	0x08001b69
 80010f4:	08001b69 	.word	0x08001b69
 80010f8:	08001b69 	.word	0x08001b69
 80010fc:	08001b69 	.word	0x08001b69
 8001100:	08001b69 	.word	0x08001b69
 8001104:	08001b69 	.word	0x08001b69
 8001108:	08001b69 	.word	0x08001b69
 800110c:	08001b69 	.word	0x08001b69
 8001110:	08001b69 	.word	0x08001b69
 8001114:	08001b69 	.word	0x08001b69
 8001118:	08001b69 	.word	0x08001b69
 800111c:	08001b69 	.word	0x08001b69
 8001120:	08001b69 	.word	0x08001b69
 8001124:	08001b69 	.word	0x08001b69
 8001128:	08001b69 	.word	0x08001b69
 800112c:	08001b69 	.word	0x08001b69
 8001130:	08001b69 	.word	0x08001b69
 8001134:	08001b69 	.word	0x08001b69
 8001138:	08001b69 	.word	0x08001b69
 800113c:	08001b69 	.word	0x08001b69
 8001140:	08001b69 	.word	0x08001b69
 8001144:	08001b69 	.word	0x08001b69
 8001148:	08001b69 	.word	0x08001b69
 800114c:	08001b69 	.word	0x08001b69
 8001150:	08001b69 	.word	0x08001b69
 8001154:	08001b69 	.word	0x08001b69
 8001158:	08001b69 	.word	0x08001b69
 800115c:	08001b69 	.word	0x08001b69
 8001160:	08001b69 	.word	0x08001b69
 8001164:	08001b69 	.word	0x08001b69
 8001168:	08001b69 	.word	0x08001b69
 800116c:	08001b69 	.word	0x08001b69
 8001170:	08001b69 	.word	0x08001b69
 8001174:	08001b69 	.word	0x08001b69
 8001178:	08001b69 	.word	0x08001b69
 800117c:	08001b69 	.word	0x08001b69
 8001180:	08001b69 	.word	0x08001b69
 8001184:	08001b69 	.word	0x08001b69
 8001188:	08001b69 	.word	0x08001b69
 800118c:	08001b69 	.word	0x08001b69
 8001190:	08001b69 	.word	0x08001b69
 8001194:	08001b69 	.word	0x08001b69
 8001198:	08001b69 	.word	0x08001b69
 800119c:	08001b69 	.word	0x08001b69
 80011a0:	08001b69 	.word	0x08001b69
 80011a4:	08001b69 	.word	0x08001b69
 80011a8:	08001b69 	.word	0x08001b69
 80011ac:	08001b69 	.word	0x08001b69
 80011b0:	08001b69 	.word	0x08001b69
 80011b4:	08001b69 	.word	0x08001b69
 80011b8:	08001b69 	.word	0x08001b69
 80011bc:	08001b69 	.word	0x08001b69
 80011c0:	08001b69 	.word	0x08001b69
 80011c4:	08001b69 	.word	0x08001b69
 80011c8:	08001b69 	.word	0x08001b69
 80011cc:	08001b69 	.word	0x08001b69
 80011d0:	08001b69 	.word	0x08001b69
 80011d4:	08001b69 	.word	0x08001b69
 80011d8:	08001b69 	.word	0x08001b69
 80011dc:	08001b69 	.word	0x08001b69
 80011e0:	08001b69 	.word	0x08001b69
 80011e4:	08001b45 	.word	0x08001b45
		case 0: {
			if (strstr((char*)text, (char*)"OK")) {
 80011e8:	4958      	ldr	r1, [pc, #352]	; (800134c <rxATcommand+0x30c>)
 80011ea:	6878      	ldr	r0, [r7, #4]
 80011ec:	f003 ff8f 	bl	800510e <strstr>
 80011f0:	4603      	mov	r3, r0
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d009      	beq.n	800120a <rxATcommand+0x1ca>
				step++;
 80011f6:	4b54      	ldr	r3, [pc, #336]	; (8001348 <rxATcommand+0x308>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	3301      	adds	r3, #1
 80011fc:	4a52      	ldr	r2, [pc, #328]	; (8001348 <rxATcommand+0x308>)
 80011fe:	6013      	str	r3, [r2, #0]
				ready=true;
 8001200:	4b53      	ldr	r3, [pc, #332]	; (8001350 <rxATcommand+0x310>)
 8001202:	2201      	movs	r2, #1
 8001204:	701a      	strb	r2, [r3, #0]
			}
			else {
				step=0;
				ready=true;
			}
			break;
 8001206:	f000 bcaf 	b.w	8001b68 <rxATcommand+0xb28>
			else if (strstr((char*)text, (char*)"CMTI")) {
 800120a:	4952      	ldr	r1, [pc, #328]	; (8001354 <rxATcommand+0x314>)
 800120c:	6878      	ldr	r0, [r7, #4]
 800120e:	f003 ff7e 	bl	800510e <strstr>
 8001212:	4603      	mov	r3, r0
 8001214:	2b00      	cmp	r3, #0
 8001216:	d007      	beq.n	8001228 <rxATcommand+0x1e8>
				step=20;
 8001218:	4b4b      	ldr	r3, [pc, #300]	; (8001348 <rxATcommand+0x308>)
 800121a:	2214      	movs	r2, #20
 800121c:	601a      	str	r2, [r3, #0]
				ready=true;
 800121e:	4b4c      	ldr	r3, [pc, #304]	; (8001350 <rxATcommand+0x310>)
 8001220:	2201      	movs	r2, #1
 8001222:	701a      	strb	r2, [r3, #0]
			break;
 8001224:	f000 bca0 	b.w	8001b68 <rxATcommand+0xb28>
				step=0;
 8001228:	4b47      	ldr	r3, [pc, #284]	; (8001348 <rxATcommand+0x308>)
 800122a:	2200      	movs	r2, #0
 800122c:	601a      	str	r2, [r3, #0]
				ready=true;
 800122e:	4b48      	ldr	r3, [pc, #288]	; (8001350 <rxATcommand+0x310>)
 8001230:	2201      	movs	r2, #1
 8001232:	701a      	strb	r2, [r3, #0]
			break;
 8001234:	f000 bc98 	b.w	8001b68 <rxATcommand+0xb28>
		}
		case 1: {
			if (strstr((char*)oldModem3, (char*)"CSQ")) {
 8001238:	4947      	ldr	r1, [pc, #284]	; (8001358 <rxATcommand+0x318>)
 800123a:	4848      	ldr	r0, [pc, #288]	; (800135c <rxATcommand+0x31c>)
 800123c:	f003 ff67 	bl	800510e <strstr>
 8001240:	4603      	mov	r3, r0
 8001242:	2b00      	cmp	r3, #0
 8001244:	d00c      	beq.n	8001260 <rxATcommand+0x220>
				csqlvl[0]=oldModem3[6];
 8001246:	4b45      	ldr	r3, [pc, #276]	; (800135c <rxATcommand+0x31c>)
 8001248:	799a      	ldrb	r2, [r3, #6]
 800124a:	4b45      	ldr	r3, [pc, #276]	; (8001360 <rxATcommand+0x320>)
 800124c:	701a      	strb	r2, [r3, #0]
				csqlvl[1]=oldModem3[7];
 800124e:	4b43      	ldr	r3, [pc, #268]	; (800135c <rxATcommand+0x31c>)
 8001250:	79da      	ldrb	r2, [r3, #7]
 8001252:	4b43      	ldr	r3, [pc, #268]	; (8001360 <rxATcommand+0x320>)
 8001254:	705a      	strb	r2, [r3, #1]
				step++;
 8001256:	4b3c      	ldr	r3, [pc, #240]	; (8001348 <rxATcommand+0x308>)
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	3301      	adds	r3, #1
 800125c:	4a3a      	ldr	r2, [pc, #232]	; (8001348 <rxATcommand+0x308>)
 800125e:	6013      	str	r3, [r2, #0]
			}
			ready=true;
 8001260:	4b3b      	ldr	r3, [pc, #236]	; (8001350 <rxATcommand+0x310>)
 8001262:	2201      	movs	r2, #1
 8001264:	701a      	strb	r2, [r3, #0]
			break;
 8001266:	f000 bc7f 	b.w	8001b68 <rxATcommand+0xb28>
		}
		case 2: {
			if (strstr((char*)oldModem3, (char*)"CBC")) {
 800126a:	493e      	ldr	r1, [pc, #248]	; (8001364 <rxATcommand+0x324>)
 800126c:	483b      	ldr	r0, [pc, #236]	; (800135c <rxATcommand+0x31c>)
 800126e:	f003 ff4e 	bl	800510e <strstr>
 8001272:	4603      	mov	r3, r0
 8001274:	2b00      	cmp	r3, #0
 8001276:	d024      	beq.n	80012c2 <rxATcommand+0x282>
				bat[0]=oldModem3[8];
 8001278:	4b38      	ldr	r3, [pc, #224]	; (800135c <rxATcommand+0x31c>)
 800127a:	7a1a      	ldrb	r2, [r3, #8]
 800127c:	4b3a      	ldr	r3, [pc, #232]	; (8001368 <rxATcommand+0x328>)
 800127e:	701a      	strb	r2, [r3, #0]
				bat[1]=oldModem3[9];
 8001280:	4b36      	ldr	r3, [pc, #216]	; (800135c <rxATcommand+0x31c>)
 8001282:	7a5a      	ldrb	r2, [r3, #9]
 8001284:	4b38      	ldr	r3, [pc, #224]	; (8001368 <rxATcommand+0x328>)
 8001286:	705a      	strb	r2, [r3, #1]
				bat[2]=oldModem3[10];
 8001288:	4b34      	ldr	r3, [pc, #208]	; (800135c <rxATcommand+0x31c>)
 800128a:	7a9a      	ldrb	r2, [r3, #10]
 800128c:	4b36      	ldr	r3, [pc, #216]	; (8001368 <rxATcommand+0x328>)
 800128e:	709a      	strb	r2, [r3, #2]
				bat[3]=oldModem3[11];
 8001290:	4b32      	ldr	r3, [pc, #200]	; (800135c <rxATcommand+0x31c>)
 8001292:	7ada      	ldrb	r2, [r3, #11]
 8001294:	4b34      	ldr	r3, [pc, #208]	; (8001368 <rxATcommand+0x328>)
 8001296:	70da      	strb	r2, [r3, #3]
				bat[4]=oldModem3[12];
 8001298:	4b30      	ldr	r3, [pc, #192]	; (800135c <rxATcommand+0x31c>)
 800129a:	7b1a      	ldrb	r2, [r3, #12]
 800129c:	4b32      	ldr	r3, [pc, #200]	; (8001368 <rxATcommand+0x328>)
 800129e:	711a      	strb	r2, [r3, #4]
				bat[5]=oldModem3[13];
 80012a0:	4b2e      	ldr	r3, [pc, #184]	; (800135c <rxATcommand+0x31c>)
 80012a2:	7b5a      	ldrb	r2, [r3, #13]
 80012a4:	4b30      	ldr	r3, [pc, #192]	; (8001368 <rxATcommand+0x328>)
 80012a6:	715a      	strb	r2, [r3, #5]
				bat[6]=oldModem3[14];
 80012a8:	4b2c      	ldr	r3, [pc, #176]	; (800135c <rxATcommand+0x31c>)
 80012aa:	7b9a      	ldrb	r2, [r3, #14]
 80012ac:	4b2e      	ldr	r3, [pc, #184]	; (8001368 <rxATcommand+0x328>)
 80012ae:	719a      	strb	r2, [r3, #6]
				bat[7]=oldModem3[15];
 80012b0:	4b2a      	ldr	r3, [pc, #168]	; (800135c <rxATcommand+0x31c>)
 80012b2:	7bda      	ldrb	r2, [r3, #15]
 80012b4:	4b2c      	ldr	r3, [pc, #176]	; (8001368 <rxATcommand+0x328>)
 80012b6:	71da      	strb	r2, [r3, #7]
				step++;
 80012b8:	4b23      	ldr	r3, [pc, #140]	; (8001348 <rxATcommand+0x308>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	3301      	adds	r3, #1
 80012be:	4a22      	ldr	r2, [pc, #136]	; (8001348 <rxATcommand+0x308>)
 80012c0:	6013      	str	r3, [r2, #0]
			}
			ready=true;
 80012c2:	4b23      	ldr	r3, [pc, #140]	; (8001350 <rxATcommand+0x310>)
 80012c4:	2201      	movs	r2, #1
 80012c6:	701a      	strb	r2, [r3, #0]
			break;
 80012c8:	f000 bc4e 	b.w	8001b68 <rxATcommand+0xb28>
		}
		case 3: {
			if (strstr((char*)oldModem3, (char*)"0,1")) step++;
 80012cc:	4927      	ldr	r1, [pc, #156]	; (800136c <rxATcommand+0x32c>)
 80012ce:	4823      	ldr	r0, [pc, #140]	; (800135c <rxATcommand+0x31c>)
 80012d0:	f003 ff1d 	bl	800510e <strstr>
 80012d4:	4603      	mov	r3, r0
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d004      	beq.n	80012e4 <rxATcommand+0x2a4>
 80012da:	4b1b      	ldr	r3, [pc, #108]	; (8001348 <rxATcommand+0x308>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	3301      	adds	r3, #1
 80012e0:	4a19      	ldr	r2, [pc, #100]	; (8001348 <rxATcommand+0x308>)
 80012e2:	6013      	str	r3, [r2, #0]
			ready=true;
 80012e4:	4b1a      	ldr	r3, [pc, #104]	; (8001350 <rxATcommand+0x310>)
 80012e6:	2201      	movs	r2, #1
 80012e8:	701a      	strb	r2, [r3, #0]
			break;
 80012ea:	f000 bc3d 	b.w	8001b68 <rxATcommand+0xb28>
		}
		case 4: {
			if (strstr((char*)text, (char*)"OK")) step++;
 80012ee:	4917      	ldr	r1, [pc, #92]	; (800134c <rxATcommand+0x30c>)
 80012f0:	6878      	ldr	r0, [r7, #4]
 80012f2:	f003 ff0c 	bl	800510e <strstr>
 80012f6:	4603      	mov	r3, r0
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d005      	beq.n	8001308 <rxATcommand+0x2c8>
 80012fc:	4b12      	ldr	r3, [pc, #72]	; (8001348 <rxATcommand+0x308>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	3301      	adds	r3, #1
 8001302:	4a11      	ldr	r2, [pc, #68]	; (8001348 <rxATcommand+0x308>)
 8001304:	6013      	str	r3, [r2, #0]
 8001306:	e00c      	b.n	8001322 <rxATcommand+0x2e2>
			else if (strstr((char*)text, (char*)"ERROR")) {
 8001308:	4919      	ldr	r1, [pc, #100]	; (8001370 <rxATcommand+0x330>)
 800130a:	6878      	ldr	r0, [r7, #4]
 800130c:	f003 feff 	bl	800510e <strstr>
 8001310:	4603      	mov	r3, r0
 8001312:	2b00      	cmp	r3, #0
 8001314:	d005      	beq.n	8001322 <rxATcommand+0x2e2>
				step=10;
 8001316:	4b0c      	ldr	r3, [pc, #48]	; (8001348 <rxATcommand+0x308>)
 8001318:	220a      	movs	r2, #10
 800131a:	601a      	str	r2, [r3, #0]
				errTransmit = true;
 800131c:	4b15      	ldr	r3, [pc, #84]	; (8001374 <rxATcommand+0x334>)
 800131e:	2201      	movs	r2, #1
 8001320:	701a      	strb	r2, [r3, #0]
			}
			ready=true;
 8001322:	4b0b      	ldr	r3, [pc, #44]	; (8001350 <rxATcommand+0x310>)
 8001324:	2201      	movs	r2, #1
 8001326:	701a      	strb	r2, [r3, #0]
			break;
 8001328:	f000 bc1e 	b.w	8001b68 <rxATcommand+0xb28>
		}
		case 5: {
			if (strstr((char*)text, (char*)"OK")) step++;
 800132c:	4907      	ldr	r1, [pc, #28]	; (800134c <rxATcommand+0x30c>)
 800132e:	6878      	ldr	r0, [r7, #4]
 8001330:	f003 feed 	bl	800510e <strstr>
 8001334:	4603      	mov	r3, r0
 8001336:	2b00      	cmp	r3, #0
 8001338:	d01e      	beq.n	8001378 <rxATcommand+0x338>
 800133a:	4b03      	ldr	r3, [pc, #12]	; (8001348 <rxATcommand+0x308>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	3301      	adds	r3, #1
 8001340:	4a01      	ldr	r2, [pc, #4]	; (8001348 <rxATcommand+0x308>)
 8001342:	6013      	str	r3, [r2, #0]
 8001344:	e025      	b.n	8001392 <rxATcommand+0x352>
 8001346:	bf00      	nop
 8001348:	200009d0 	.word	0x200009d0
 800134c:	08005af0 	.word	0x08005af0
 8001350:	200009d8 	.word	0x200009d8
 8001354:	08005af4 	.word	0x08005af4
 8001358:	08005afc 	.word	0x08005afc
 800135c:	20000790 	.word	0x20000790
 8001360:	20000104 	.word	0x20000104
 8001364:	08005b00 	.word	0x08005b00
 8001368:	200009dc 	.word	0x200009dc
 800136c:	08005b04 	.word	0x08005b04
 8001370:	08005b08 	.word	0x08005b08
 8001374:	200009db 	.word	0x200009db
			else if (strstr((char*)text, (char*)"ERROR")) {
 8001378:	4997      	ldr	r1, [pc, #604]	; (80015d8 <rxATcommand+0x598>)
 800137a:	6878      	ldr	r0, [r7, #4]
 800137c:	f003 fec7 	bl	800510e <strstr>
 8001380:	4603      	mov	r3, r0
 8001382:	2b00      	cmp	r3, #0
 8001384:	d005      	beq.n	8001392 <rxATcommand+0x352>
				step=10;
 8001386:	4b95      	ldr	r3, [pc, #596]	; (80015dc <rxATcommand+0x59c>)
 8001388:	220a      	movs	r2, #10
 800138a:	601a      	str	r2, [r3, #0]
				errTransmit = true;
 800138c:	4b94      	ldr	r3, [pc, #592]	; (80015e0 <rxATcommand+0x5a0>)
 800138e:	2201      	movs	r2, #1
 8001390:	701a      	strb	r2, [r3, #0]
			}
			ready=true;
 8001392:	4b94      	ldr	r3, [pc, #592]	; (80015e4 <rxATcommand+0x5a4>)
 8001394:	2201      	movs	r2, #1
 8001396:	701a      	strb	r2, [r3, #0]
			break;
 8001398:	e3e6      	b.n	8001b68 <rxATcommand+0xb28>
		}
		case 6: {
			if (strstr((char*)text, (char*)"OK")) step++;
 800139a:	4993      	ldr	r1, [pc, #588]	; (80015e8 <rxATcommand+0x5a8>)
 800139c:	6878      	ldr	r0, [r7, #4]
 800139e:	f003 feb6 	bl	800510e <strstr>
 80013a2:	4603      	mov	r3, r0
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d005      	beq.n	80013b4 <rxATcommand+0x374>
 80013a8:	4b8c      	ldr	r3, [pc, #560]	; (80015dc <rxATcommand+0x59c>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	3301      	adds	r3, #1
 80013ae:	4a8b      	ldr	r2, [pc, #556]	; (80015dc <rxATcommand+0x59c>)
 80013b0:	6013      	str	r3, [r2, #0]
 80013b2:	e005      	b.n	80013c0 <rxATcommand+0x380>
			else {
				step=10;
 80013b4:	4b89      	ldr	r3, [pc, #548]	; (80015dc <rxATcommand+0x59c>)
 80013b6:	220a      	movs	r2, #10
 80013b8:	601a      	str	r2, [r3, #0]
				errTransmit = true;
 80013ba:	4b89      	ldr	r3, [pc, #548]	; (80015e0 <rxATcommand+0x5a0>)
 80013bc:	2201      	movs	r2, #1
 80013be:	701a      	strb	r2, [r3, #0]
			}
			ready=true;
 80013c0:	4b88      	ldr	r3, [pc, #544]	; (80015e4 <rxATcommand+0x5a4>)
 80013c2:	2201      	movs	r2, #1
 80013c4:	701a      	strb	r2, [r3, #0]
			break;
 80013c6:	e3cf      	b.n	8001b68 <rxATcommand+0xb28>
		}
		case 7: {
			if (strstr((char*)text, (char*)"OK")) step++;
 80013c8:	4987      	ldr	r1, [pc, #540]	; (80015e8 <rxATcommand+0x5a8>)
 80013ca:	6878      	ldr	r0, [r7, #4]
 80013cc:	f003 fe9f 	bl	800510e <strstr>
 80013d0:	4603      	mov	r3, r0
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d005      	beq.n	80013e2 <rxATcommand+0x3a2>
 80013d6:	4b81      	ldr	r3, [pc, #516]	; (80015dc <rxATcommand+0x59c>)
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	3301      	adds	r3, #1
 80013dc:	4a7f      	ldr	r2, [pc, #508]	; (80015dc <rxATcommand+0x59c>)
 80013de:	6013      	str	r3, [r2, #0]
 80013e0:	e005      	b.n	80013ee <rxATcommand+0x3ae>
			else {
				step=10;
 80013e2:	4b7e      	ldr	r3, [pc, #504]	; (80015dc <rxATcommand+0x59c>)
 80013e4:	220a      	movs	r2, #10
 80013e6:	601a      	str	r2, [r3, #0]
				errTransmit = true;
 80013e8:	4b7d      	ldr	r3, [pc, #500]	; (80015e0 <rxATcommand+0x5a0>)
 80013ea:	2201      	movs	r2, #1
 80013ec:	701a      	strb	r2, [r3, #0]
			}
			ready=true;
 80013ee:	4b7d      	ldr	r3, [pc, #500]	; (80015e4 <rxATcommand+0x5a4>)
 80013f0:	2201      	movs	r2, #1
 80013f2:	701a      	strb	r2, [r3, #0]
			break;
 80013f4:	e3b8      	b.n	8001b68 <rxATcommand+0xb28>
		}
		case 8: {
			ready=true;
 80013f6:	4b7b      	ldr	r3, [pc, #492]	; (80015e4 <rxATcommand+0x5a4>)
 80013f8:	2201      	movs	r2, #1
 80013fa:	701a      	strb	r2, [r3, #0]
			if (strstr((char*)text, (char*)"200")) step++;
 80013fc:	497b      	ldr	r1, [pc, #492]	; (80015ec <rxATcommand+0x5ac>)
 80013fe:	6878      	ldr	r0, [r7, #4]
 8001400:	f003 fe85 	bl	800510e <strstr>
 8001404:	4603      	mov	r3, r0
 8001406:	2b00      	cmp	r3, #0
 8001408:	d005      	beq.n	8001416 <rxATcommand+0x3d6>
 800140a:	4b74      	ldr	r3, [pc, #464]	; (80015dc <rxATcommand+0x59c>)
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	3301      	adds	r3, #1
 8001410:	4a72      	ldr	r2, [pc, #456]	; (80015dc <rxATcommand+0x59c>)
 8001412:	6013      	str	r3, [r2, #0]
					(strstr((char*)text, (char*)"0,50"))) {
				step=10;
				errTransmit = true;
			}
			else ready=false;
			break;
 8001414:	e3a8      	b.n	8001b68 <rxATcommand+0xb28>
			else if (strstr((char*)text, (char*)"0,60")) step=99;
 8001416:	4976      	ldr	r1, [pc, #472]	; (80015f0 <rxATcommand+0x5b0>)
 8001418:	6878      	ldr	r0, [r7, #4]
 800141a:	f003 fe78 	bl	800510e <strstr>
 800141e:	4603      	mov	r3, r0
 8001420:	2b00      	cmp	r3, #0
 8001422:	d003      	beq.n	800142c <rxATcommand+0x3ec>
 8001424:	4b6d      	ldr	r3, [pc, #436]	; (80015dc <rxATcommand+0x59c>)
 8001426:	2263      	movs	r2, #99	; 0x63
 8001428:	601a      	str	r2, [r3, #0]
			break;
 800142a:	e39d      	b.n	8001b68 <rxATcommand+0xb28>
			else if ((strstr((char*)text, (char*)"0,40"))||
 800142c:	4971      	ldr	r1, [pc, #452]	; (80015f4 <rxATcommand+0x5b4>)
 800142e:	6878      	ldr	r0, [r7, #4]
 8001430:	f003 fe6d 	bl	800510e <strstr>
 8001434:	4603      	mov	r3, r0
 8001436:	2b00      	cmp	r3, #0
 8001438:	d106      	bne.n	8001448 <rxATcommand+0x408>
					(strstr((char*)text, (char*)"0,50"))) {
 800143a:	496f      	ldr	r1, [pc, #444]	; (80015f8 <rxATcommand+0x5b8>)
 800143c:	6878      	ldr	r0, [r7, #4]
 800143e:	f003 fe66 	bl	800510e <strstr>
 8001442:	4603      	mov	r3, r0
			else if ((strstr((char*)text, (char*)"0,40"))||
 8001444:	2b00      	cmp	r3, #0
 8001446:	d006      	beq.n	8001456 <rxATcommand+0x416>
				step=10;
 8001448:	4b64      	ldr	r3, [pc, #400]	; (80015dc <rxATcommand+0x59c>)
 800144a:	220a      	movs	r2, #10
 800144c:	601a      	str	r2, [r3, #0]
				errTransmit = true;
 800144e:	4b64      	ldr	r3, [pc, #400]	; (80015e0 <rxATcommand+0x5a0>)
 8001450:	2201      	movs	r2, #1
 8001452:	701a      	strb	r2, [r3, #0]
			break;
 8001454:	e388      	b.n	8001b68 <rxATcommand+0xb28>
			else ready=false;
 8001456:	4b63      	ldr	r3, [pc, #396]	; (80015e4 <rxATcommand+0x5a4>)
 8001458:	2200      	movs	r2, #0
 800145a:	701a      	strb	r2, [r3, #0]
			break;
 800145c:	e384      	b.n	8001b68 <rxATcommand+0xb28>
		}
		case 9: {
			if (!answ) {
 800145e:	4b67      	ldr	r3, [pc, #412]	; (80015fc <rxATcommand+0x5bc>)
 8001460:	781b      	ldrb	r3, [r3, #0]
 8001462:	f083 0301 	eor.w	r3, r3, #1
 8001466:	b2db      	uxtb	r3, r3
 8001468:	2b00      	cmp	r3, #0
 800146a:	f000 81cd 	beq.w	8001808 <rxATcommand+0x7c8>
				if (strstr((char*)text, (char*)"OK")) {
 800146e:	495e      	ldr	r1, [pc, #376]	; (80015e8 <rxATcommand+0x5a8>)
 8001470:	6878      	ldr	r0, [r7, #4]
 8001472:	f003 fe4c 	bl	800510e <strstr>
 8001476:	4603      	mov	r3, r0
 8001478:	2b00      	cmp	r3, #0
 800147a:	f000 81b8 	beq.w	80017ee <rxATcommand+0x7ae>
					if (checkPhones) {
 800147e:	4b60      	ldr	r3, [pc, #384]	; (8001600 <rxATcommand+0x5c0>)
 8001480:	781b      	ldrb	r3, [r3, #0]
 8001482:	2b00      	cmp	r3, #0
 8001484:	d04e      	beq.n	8001524 <rxATcommand+0x4e4>
						if (strstr((char*)oldModem2, (char*)"t1"))
 8001486:	495f      	ldr	r1, [pc, #380]	; (8001604 <rxATcommand+0x5c4>)
 8001488:	485f      	ldr	r0, [pc, #380]	; (8001608 <rxATcommand+0x5c8>)
 800148a:	f003 fe40 	bl	800510e <strstr>
 800148e:	4603      	mov	r3, r0
 8001490:	2b00      	cmp	r3, #0
 8001492:	d011      	beq.n	80014b8 <rxATcommand+0x478>
							for (int i = 0; i<11; i++) tnumber1[i] = oldModem2[i+7];
 8001494:	2300      	movs	r3, #0
 8001496:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001498:	e00b      	b.n	80014b2 <rxATcommand+0x472>
 800149a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800149c:	3307      	adds	r3, #7
 800149e:	4a5a      	ldr	r2, [pc, #360]	; (8001608 <rxATcommand+0x5c8>)
 80014a0:	5cd1      	ldrb	r1, [r2, r3]
 80014a2:	4a5a      	ldr	r2, [pc, #360]	; (800160c <rxATcommand+0x5cc>)
 80014a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80014a6:	4413      	add	r3, r2
 80014a8:	460a      	mov	r2, r1
 80014aa:	701a      	strb	r2, [r3, #0]
 80014ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80014ae:	3301      	adds	r3, #1
 80014b0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80014b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80014b4:	2b0a      	cmp	r3, #10
 80014b6:	ddf0      	ble.n	800149a <rxATcommand+0x45a>
						if (strstr((char*)oldModem2, (char*)"t2"))
 80014b8:	4955      	ldr	r1, [pc, #340]	; (8001610 <rxATcommand+0x5d0>)
 80014ba:	4853      	ldr	r0, [pc, #332]	; (8001608 <rxATcommand+0x5c8>)
 80014bc:	f003 fe27 	bl	800510e <strstr>
 80014c0:	4603      	mov	r3, r0
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d011      	beq.n	80014ea <rxATcommand+0x4aa>
							for (int i = 0; i<11; i++) tnumber2[i] = oldModem2[i+26];
 80014c6:	2300      	movs	r3, #0
 80014c8:	64bb      	str	r3, [r7, #72]	; 0x48
 80014ca:	e00b      	b.n	80014e4 <rxATcommand+0x4a4>
 80014cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80014ce:	331a      	adds	r3, #26
 80014d0:	4a4d      	ldr	r2, [pc, #308]	; (8001608 <rxATcommand+0x5c8>)
 80014d2:	5cd1      	ldrb	r1, [r2, r3]
 80014d4:	4a4f      	ldr	r2, [pc, #316]	; (8001614 <rxATcommand+0x5d4>)
 80014d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80014d8:	4413      	add	r3, r2
 80014da:	460a      	mov	r2, r1
 80014dc:	701a      	strb	r2, [r3, #0]
 80014de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80014e0:	3301      	adds	r3, #1
 80014e2:	64bb      	str	r3, [r7, #72]	; 0x48
 80014e4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80014e6:	2b0a      	cmp	r3, #10
 80014e8:	ddf0      	ble.n	80014cc <rxATcommand+0x48c>
						if (strstr((char*)oldModem2, (char*)"t3"))
 80014ea:	494b      	ldr	r1, [pc, #300]	; (8001618 <rxATcommand+0x5d8>)
 80014ec:	4846      	ldr	r0, [pc, #280]	; (8001608 <rxATcommand+0x5c8>)
 80014ee:	f003 fe0e 	bl	800510e <strstr>
 80014f2:	4603      	mov	r3, r0
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d011      	beq.n	800151c <rxATcommand+0x4dc>
							for (int i = 0; i<11; i++) tnumber3[i] = oldModem2[i+45];
 80014f8:	2300      	movs	r3, #0
 80014fa:	647b      	str	r3, [r7, #68]	; 0x44
 80014fc:	e00b      	b.n	8001516 <rxATcommand+0x4d6>
 80014fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001500:	332d      	adds	r3, #45	; 0x2d
 8001502:	4a41      	ldr	r2, [pc, #260]	; (8001608 <rxATcommand+0x5c8>)
 8001504:	5cd1      	ldrb	r1, [r2, r3]
 8001506:	4a45      	ldr	r2, [pc, #276]	; (800161c <rxATcommand+0x5dc>)
 8001508:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800150a:	4413      	add	r3, r2
 800150c:	460a      	mov	r2, r1
 800150e:	701a      	strb	r2, [r3, #0]
 8001510:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001512:	3301      	adds	r3, #1
 8001514:	647b      	str	r3, [r7, #68]	; 0x44
 8001516:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001518:	2b0a      	cmp	r3, #10
 800151a:	ddf0      	ble.n	80014fe <rxATcommand+0x4be>
						checkPhones = false;
 800151c:	4b38      	ldr	r3, [pc, #224]	; (8001600 <rxATcommand+0x5c0>)
 800151e:	2200      	movs	r2, #0
 8001520:	701a      	strb	r2, [r3, #0]
 8001522:	e160      	b.n	80017e6 <rxATcommand+0x7a6>
					}
					else if (strstr((char*)oldModem2, "phones")) {
 8001524:	493e      	ldr	r1, [pc, #248]	; (8001620 <rxATcommand+0x5e0>)
 8001526:	4838      	ldr	r0, [pc, #224]	; (8001608 <rxATcommand+0x5c8>)
 8001528:	f003 fdf1 	bl	800510e <strstr>
 800152c:	4603      	mov	r3, r0
 800152e:	2b00      	cmp	r3, #0
 8001530:	d006      	beq.n	8001540 <rxATcommand+0x500>
						checkPhones = true;
 8001532:	4b33      	ldr	r3, [pc, #204]	; (8001600 <rxATcommand+0x5c0>)
 8001534:	2201      	movs	r2, #1
 8001536:	701a      	strb	r2, [r3, #0]
						answ = false;
 8001538:	4b30      	ldr	r3, [pc, #192]	; (80015fc <rxATcommand+0x5bc>)
 800153a:	2200      	movs	r2, #0
 800153c:	701a      	strb	r2, [r3, #0]
 800153e:	e152      	b.n	80017e6 <rxATcommand+0x7a6>
					}
					else if (strstr((char*)oldModem2, "res")) {
 8001540:	4938      	ldr	r1, [pc, #224]	; (8001624 <rxATcommand+0x5e4>)
 8001542:	4831      	ldr	r0, [pc, #196]	; (8001608 <rxATcommand+0x5c8>)
 8001544:	f003 fde3 	bl	800510e <strstr>
 8001548:	4603      	mov	r3, r0
 800154a:	2b00      	cmp	r3, #0
 800154c:	f000 814b 	beq.w	80017e6 <rxATcommand+0x7a6>
						needStart = false;
 8001550:	4b35      	ldr	r3, [pc, #212]	; (8001628 <rxATcommand+0x5e8>)
 8001552:	2200      	movs	r2, #0
 8001554:	701a      	strb	r2, [r3, #0]
						needOpen = false;
 8001556:	4b35      	ldr	r3, [pc, #212]	; (800162c <rxATcommand+0x5ec>)
 8001558:	2200      	movs	r2, #0
 800155a:	701a      	strb	r2, [r3, #0]
						needClose = false;
 800155c:	4b34      	ldr	r3, [pc, #208]	; (8001630 <rxATcommand+0x5f0>)
 800155e:	2200      	movs	r2, #0
 8001560:	701a      	strb	r2, [r3, #0]
						if (strstr((char*)oldModem2, ",\"delT\":")) {
 8001562:	4934      	ldr	r1, [pc, #208]	; (8001634 <rxATcommand+0x5f4>)
 8001564:	4828      	ldr	r0, [pc, #160]	; (8001608 <rxATcommand+0x5c8>)
 8001566:	f003 fdd2 	bl	800510e <strstr>
 800156a:	4603      	mov	r3, r0
 800156c:	2b00      	cmp	r3, #0
 800156e:	f000 8086 	beq.w	800167e <rxATcommand+0x63e>
						    uint8_t *start;
						    uint8_t *end;
						    uint8_t str1 [8]=",\"res\"";
 8001572:	4a31      	ldr	r2, [pc, #196]	; (8001638 <rxATcommand+0x5f8>)
 8001574:	f107 031c 	add.w	r3, r7, #28
 8001578:	e892 0003 	ldmia.w	r2, {r0, r1}
 800157c:	6018      	str	r0, [r3, #0]
 800157e:	3304      	adds	r3, #4
 8001580:	8019      	strh	r1, [r3, #0]
 8001582:	3302      	adds	r3, #2
 8001584:	0c0a      	lsrs	r2, r1, #16
 8001586:	701a      	strb	r2, [r3, #0]
 8001588:	2300      	movs	r3, #0
 800158a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
						    uint8_t str2 [8]="\"delT\":";
 800158e:	4a2b      	ldr	r2, [pc, #172]	; (800163c <rxATcommand+0x5fc>)
 8001590:	f107 0314 	add.w	r3, r7, #20
 8001594:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001598:	e883 0003 	stmia.w	r3, {r0, r1}
						    start = strstr (oldModem2,str2);
 800159c:	f107 0314 	add.w	r3, r7, #20
 80015a0:	4619      	mov	r1, r3
 80015a2:	4819      	ldr	r0, [pc, #100]	; (8001608 <rxATcommand+0x5c8>)
 80015a4:	f003 fdb3 	bl	800510e <strstr>
 80015a8:	62b8      	str	r0, [r7, #40]	; 0x28
						    end = strstr (oldModem2,str1);
 80015aa:	f107 031c 	add.w	r3, r7, #28
 80015ae:	4619      	mov	r1, r3
 80015b0:	4815      	ldr	r0, [pc, #84]	; (8001608 <rxATcommand+0x5c8>)
 80015b2:	f003 fdac 	bl	800510e <strstr>
 80015b6:	6278      	str	r0, [r7, #36]	; 0x24
						    uint8_t delTime[10] = {0};
 80015b8:	2300      	movs	r3, #0
 80015ba:	60bb      	str	r3, [r7, #8]
 80015bc:	f107 030c 	add.w	r3, r7, #12
 80015c0:	2200      	movs	r2, #0
 80015c2:	601a      	str	r2, [r3, #0]
 80015c4:	809a      	strh	r2, [r3, #4]
							int j = 0;
 80015c6:	2300      	movs	r3, #0
 80015c8:	643b      	str	r3, [r7, #64]	; 0x40
							for (int i = (start-oldModem2)+7; i<(end-oldModem2); i++) {
 80015ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015cc:	4a0e      	ldr	r2, [pc, #56]	; (8001608 <rxATcommand+0x5c8>)
 80015ce:	1a9b      	subs	r3, r3, r2
 80015d0:	3307      	adds	r3, #7
 80015d2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80015d4:	e044      	b.n	8001660 <rxATcommand+0x620>
 80015d6:	bf00      	nop
 80015d8:	08005b08 	.word	0x08005b08
 80015dc:	200009d0 	.word	0x200009d0
 80015e0:	200009db 	.word	0x200009db
 80015e4:	200009d8 	.word	0x200009d8
 80015e8:	08005af0 	.word	0x08005af0
 80015ec:	08005b10 	.word	0x08005b10
 80015f0:	08005b14 	.word	0x08005b14
 80015f4:	08005b1c 	.word	0x08005b1c
 80015f8:	08005b24 	.word	0x08005b24
 80015fc:	200009d9 	.word	0x200009d9
 8001600:	2000015c 	.word	0x2000015c
 8001604:	08005b2c 	.word	0x08005b2c
 8001608:	20000694 	.word	0x20000694
 800160c:	2000010c 	.word	0x2000010c
 8001610:	08005b30 	.word	0x08005b30
 8001614:	2000011c 	.word	0x2000011c
 8001618:	08005b34 	.word	0x08005b34
 800161c:	2000012c 	.word	0x2000012c
 8001620:	08005b38 	.word	0x08005b38
 8001624:	08005b40 	.word	0x08005b40
 8001628:	200009e4 	.word	0x200009e4
 800162c:	200009e5 	.word	0x200009e5
 8001630:	200009e6 	.word	0x200009e6
 8001634:	08005b44 	.word	0x08005b44
 8001638:	08005ce4 	.word	0x08005ce4
 800163c:	08005cec 	.word	0x08005cec
								delTime[j]=oldModem2[i];
 8001640:	4aa5      	ldr	r2, [pc, #660]	; (80018d8 <rxATcommand+0x898>)
 8001642:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001644:	4413      	add	r3, r2
 8001646:	7819      	ldrb	r1, [r3, #0]
 8001648:	f107 0208 	add.w	r2, r7, #8
 800164c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800164e:	4413      	add	r3, r2
 8001650:	460a      	mov	r2, r1
 8001652:	701a      	strb	r2, [r3, #0]
								j++;
 8001654:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001656:	3301      	adds	r3, #1
 8001658:	643b      	str	r3, [r7, #64]	; 0x40
							for (int i = (start-oldModem2)+7; i<(end-oldModem2); i++) {
 800165a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800165c:	3301      	adds	r3, #1
 800165e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001662:	4a9d      	ldr	r2, [pc, #628]	; (80018d8 <rxATcommand+0x898>)
 8001664:	1a9b      	subs	r3, r3, r2
 8001666:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001668:	429a      	cmp	r2, r3
 800166a:	dbe9      	blt.n	8001640 <rxATcommand+0x600>
							}
							timeOfStart = atoi(delTime);
 800166c:	f107 0308 	add.w	r3, r7, #8
 8001670:	4618      	mov	r0, r3
 8001672:	f003 fbb3 	bl	8004ddc <atoi>
 8001676:	4603      	mov	r3, r0
 8001678:	461a      	mov	r2, r3
 800167a:	4b98      	ldr	r3, [pc, #608]	; (80018dc <rxATcommand+0x89c>)
 800167c:	601a      	str	r2, [r3, #0]
						}
						if (oldModem2[6]=='t') {
 800167e:	4b96      	ldr	r3, [pc, #600]	; (80018d8 <rxATcommand+0x898>)
 8001680:	799b      	ldrb	r3, [r3, #6]
 8001682:	2b74      	cmp	r3, #116	; 0x74
 8001684:	d135      	bne.n	80016f2 <rxATcommand+0x6b2>
							memset(smsText, 0, strlen(smsText));
 8001686:	4896      	ldr	r0, [pc, #600]	; (80018e0 <rxATcommand+0x8a0>)
 8001688:	f7fe fd60 	bl	800014c <strlen>
 800168c:	4603      	mov	r3, r0
 800168e:	461a      	mov	r2, r3
 8001690:	2100      	movs	r1, #0
 8001692:	4893      	ldr	r0, [pc, #588]	; (80018e0 <rxATcommand+0x8a0>)
 8001694:	f003 fbde 	bl	8004e54 <memset>
							if (timeOfStart==0) {
 8001698:	4b90      	ldr	r3, [pc, #576]	; (80018dc <rxATcommand+0x89c>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	2b00      	cmp	r3, #0
 800169e:	d10f      	bne.n	80016c0 <rxATcommand+0x680>
								buttStart();
 80016a0:	f7ff fa00 	bl	8000aa4 <buttStart>
								strcpy(smsText, (uint8_t*)"%D0%97%D0%B0%D0%BF%D1%83%D1%81%D0%BA");
 80016a4:	4a8e      	ldr	r2, [pc, #568]	; (80018e0 <rxATcommand+0x8a0>)
 80016a6:	4b8f      	ldr	r3, [pc, #572]	; (80018e4 <rxATcommand+0x8a4>)
 80016a8:	4614      	mov	r4, r2
 80016aa:	461d      	mov	r5, r3
 80016ac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80016ae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80016b0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80016b2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80016b4:	e895 0003 	ldmia.w	r5, {r0, r1}
 80016b8:	6020      	str	r0, [r4, #0]
 80016ba:	3404      	adds	r4, #4
 80016bc:	7021      	strb	r1, [r4, #0]
 80016be:	e08f      	b.n	80017e0 <rxATcommand+0x7a0>
							}
							else {
								if (!needStart) strcpy(smsText, (uint8_t*)"%D0%97%D0%B0%D0%BF%D1%83%D1%81%D1%82%D0%B8%D1%82%D1%8C%20%D0%BF%D0%BE%D0%B7%D0%B6%D0%B5");
 80016c0:	4b89      	ldr	r3, [pc, #548]	; (80018e8 <rxATcommand+0x8a8>)
 80016c2:	781b      	ldrb	r3, [r3, #0]
 80016c4:	f083 0301 	eor.w	r3, r3, #1
 80016c8:	b2db      	uxtb	r3, r3
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d007      	beq.n	80016de <rxATcommand+0x69e>
 80016ce:	4a84      	ldr	r2, [pc, #528]	; (80018e0 <rxATcommand+0x8a0>)
 80016d0:	4b86      	ldr	r3, [pc, #536]	; (80018ec <rxATcommand+0x8ac>)
 80016d2:	4610      	mov	r0, r2
 80016d4:	4619      	mov	r1, r3
 80016d6:	2358      	movs	r3, #88	; 0x58
 80016d8:	461a      	mov	r2, r3
 80016da:	f003 fbad 	bl	8004e38 <memcpy>
								needStart = true;
 80016de:	4b82      	ldr	r3, [pc, #520]	; (80018e8 <rxATcommand+0x8a8>)
 80016e0:	2201      	movs	r2, #1
 80016e2:	701a      	strb	r2, [r3, #0]
								needOpen = false;
 80016e4:	4b82      	ldr	r3, [pc, #520]	; (80018f0 <rxATcommand+0x8b0>)
 80016e6:	2200      	movs	r2, #0
 80016e8:	701a      	strb	r2, [r3, #0]
								needClose = false;
 80016ea:	4b82      	ldr	r3, [pc, #520]	; (80018f4 <rxATcommand+0x8b4>)
 80016ec:	2200      	movs	r2, #0
 80016ee:	701a      	strb	r2, [r3, #0]
 80016f0:	e076      	b.n	80017e0 <rxATcommand+0x7a0>
							}
						}
						else if (oldModem2[17]=='t') {
 80016f2:	4b79      	ldr	r3, [pc, #484]	; (80018d8 <rxATcommand+0x898>)
 80016f4:	7c5b      	ldrb	r3, [r3, #17]
 80016f6:	2b74      	cmp	r3, #116	; 0x74
 80016f8:	d137      	bne.n	800176a <rxATcommand+0x72a>
							memset(smsText, 0, strlen(smsText));
 80016fa:	4879      	ldr	r0, [pc, #484]	; (80018e0 <rxATcommand+0x8a0>)
 80016fc:	f7fe fd26 	bl	800014c <strlen>
 8001700:	4603      	mov	r3, r0
 8001702:	461a      	mov	r2, r3
 8001704:	2100      	movs	r1, #0
 8001706:	4876      	ldr	r0, [pc, #472]	; (80018e0 <rxATcommand+0x8a0>)
 8001708:	f003 fba4 	bl	8004e54 <memset>
							if (timeOfStart==0) {
 800170c:	4b73      	ldr	r3, [pc, #460]	; (80018dc <rxATcommand+0x89c>)
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	2b00      	cmp	r3, #0
 8001712:	d111      	bne.n	8001738 <rxATcommand+0x6f8>
								buttOpen();
 8001714:	f7ff f9ea 	bl	8000aec <buttOpen>
								strcpy(smsText, (uint8_t*)"%D0%9E%D1%82%D0%BA%D1%80%D1%8B%D1%82%D1%8C");
 8001718:	4a71      	ldr	r2, [pc, #452]	; (80018e0 <rxATcommand+0x8a0>)
 800171a:	4b77      	ldr	r3, [pc, #476]	; (80018f8 <rxATcommand+0x8b8>)
 800171c:	4614      	mov	r4, r2
 800171e:	461d      	mov	r5, r3
 8001720:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001722:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001724:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001726:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001728:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800172c:	c403      	stmia	r4!, {r0, r1}
 800172e:	8022      	strh	r2, [r4, #0]
 8001730:	3402      	adds	r4, #2
 8001732:	0c13      	lsrs	r3, r2, #16
 8001734:	7023      	strb	r3, [r4, #0]
 8001736:	e053      	b.n	80017e0 <rxATcommand+0x7a0>
							}
							else {
								if (!needOpen) strcpy(smsText, (uint8_t*)"%D0%9E%D1%82%D0%BA%D1%80%D1%8B%D1%82%D1%8C%20%D0%BF%D0%BE%D0%B7%D0%B6%D0%B5");
 8001738:	4b6d      	ldr	r3, [pc, #436]	; (80018f0 <rxATcommand+0x8b0>)
 800173a:	781b      	ldrb	r3, [r3, #0]
 800173c:	f083 0301 	eor.w	r3, r3, #1
 8001740:	b2db      	uxtb	r3, r3
 8001742:	2b00      	cmp	r3, #0
 8001744:	d007      	beq.n	8001756 <rxATcommand+0x716>
 8001746:	4a66      	ldr	r2, [pc, #408]	; (80018e0 <rxATcommand+0x8a0>)
 8001748:	4b6c      	ldr	r3, [pc, #432]	; (80018fc <rxATcommand+0x8bc>)
 800174a:	4610      	mov	r0, r2
 800174c:	4619      	mov	r1, r3
 800174e:	234c      	movs	r3, #76	; 0x4c
 8001750:	461a      	mov	r2, r3
 8001752:	f003 fb71 	bl	8004e38 <memcpy>
								needStart = false;
 8001756:	4b64      	ldr	r3, [pc, #400]	; (80018e8 <rxATcommand+0x8a8>)
 8001758:	2200      	movs	r2, #0
 800175a:	701a      	strb	r2, [r3, #0]
								needOpen = true;
 800175c:	4b64      	ldr	r3, [pc, #400]	; (80018f0 <rxATcommand+0x8b0>)
 800175e:	2201      	movs	r2, #1
 8001760:	701a      	strb	r2, [r3, #0]
								needClose = false;
 8001762:	4b64      	ldr	r3, [pc, #400]	; (80018f4 <rxATcommand+0x8b4>)
 8001764:	2200      	movs	r2, #0
 8001766:	701a      	strb	r2, [r3, #0]
 8001768:	e03a      	b.n	80017e0 <rxATcommand+0x7a0>
							}
						}
						else if (oldModem2[28]=='t') {
 800176a:	4b5b      	ldr	r3, [pc, #364]	; (80018d8 <rxATcommand+0x898>)
 800176c:	7f1b      	ldrb	r3, [r3, #28]
 800176e:	2b74      	cmp	r3, #116	; 0x74
 8001770:	d136      	bne.n	80017e0 <rxATcommand+0x7a0>
							memset(smsText, 0, strlen(smsText));
 8001772:	485b      	ldr	r0, [pc, #364]	; (80018e0 <rxATcommand+0x8a0>)
 8001774:	f7fe fcea 	bl	800014c <strlen>
 8001778:	4603      	mov	r3, r0
 800177a:	461a      	mov	r2, r3
 800177c:	2100      	movs	r1, #0
 800177e:	4858      	ldr	r0, [pc, #352]	; (80018e0 <rxATcommand+0x8a0>)
 8001780:	f003 fb68 	bl	8004e54 <memset>
							if (timeOfStart==0) {
 8001784:	4b55      	ldr	r3, [pc, #340]	; (80018dc <rxATcommand+0x89c>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	2b00      	cmp	r3, #0
 800178a:	d111      	bne.n	80017b0 <rxATcommand+0x770>
								buttClose();
 800178c:	f7ff f9e6 	bl	8000b5c <buttClose>
								strcpy(smsText, (uint8_t*)"%D0%97%D0%B0%D0%BA%D1%80%D1%8B%D1%82%D1%8C");
 8001790:	4a53      	ldr	r2, [pc, #332]	; (80018e0 <rxATcommand+0x8a0>)
 8001792:	4b5b      	ldr	r3, [pc, #364]	; (8001900 <rxATcommand+0x8c0>)
 8001794:	4614      	mov	r4, r2
 8001796:	461d      	mov	r5, r3
 8001798:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800179a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800179c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800179e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80017a0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80017a4:	c403      	stmia	r4!, {r0, r1}
 80017a6:	8022      	strh	r2, [r4, #0]
 80017a8:	3402      	adds	r4, #2
 80017aa:	0c13      	lsrs	r3, r2, #16
 80017ac:	7023      	strb	r3, [r4, #0]
 80017ae:	e017      	b.n	80017e0 <rxATcommand+0x7a0>
							}
							else {
								if (!needClose) strcpy(smsText, (uint8_t*)"%D0%97%D0%B0%D0%BA%D1%80%D1%8B%D1%82%D1%8C%20%D0%BF%D0%BE%D0%B7%D0%B6%D0%B5");
 80017b0:	4b50      	ldr	r3, [pc, #320]	; (80018f4 <rxATcommand+0x8b4>)
 80017b2:	781b      	ldrb	r3, [r3, #0]
 80017b4:	f083 0301 	eor.w	r3, r3, #1
 80017b8:	b2db      	uxtb	r3, r3
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d007      	beq.n	80017ce <rxATcommand+0x78e>
 80017be:	4a48      	ldr	r2, [pc, #288]	; (80018e0 <rxATcommand+0x8a0>)
 80017c0:	4b50      	ldr	r3, [pc, #320]	; (8001904 <rxATcommand+0x8c4>)
 80017c2:	4610      	mov	r0, r2
 80017c4:	4619      	mov	r1, r3
 80017c6:	234c      	movs	r3, #76	; 0x4c
 80017c8:	461a      	mov	r2, r3
 80017ca:	f003 fb35 	bl	8004e38 <memcpy>
								needStart = false;
 80017ce:	4b46      	ldr	r3, [pc, #280]	; (80018e8 <rxATcommand+0x8a8>)
 80017d0:	2200      	movs	r2, #0
 80017d2:	701a      	strb	r2, [r3, #0]
								needOpen = false;
 80017d4:	4b46      	ldr	r3, [pc, #280]	; (80018f0 <rxATcommand+0x8b0>)
 80017d6:	2200      	movs	r2, #0
 80017d8:	701a      	strb	r2, [r3, #0]
								needClose = true;
 80017da:	4b46      	ldr	r3, [pc, #280]	; (80018f4 <rxATcommand+0x8b4>)
 80017dc:	2201      	movs	r2, #1
 80017de:	701a      	strb	r2, [r3, #0]
							}
						}
						answ = true;
 80017e0:	4b49      	ldr	r3, [pc, #292]	; (8001908 <rxATcommand+0x8c8>)
 80017e2:	2201      	movs	r2, #1
 80017e4:	701a      	strb	r2, [r3, #0]
					}
					step=7;
 80017e6:	4b49      	ldr	r3, [pc, #292]	; (800190c <rxATcommand+0x8cc>)
 80017e8:	2207      	movs	r2, #7
 80017ea:	601a      	str	r2, [r3, #0]
 80017ec:	e008      	b.n	8001800 <rxATcommand+0x7c0>
				}
				else {
					step=10;
 80017ee:	4b47      	ldr	r3, [pc, #284]	; (800190c <rxATcommand+0x8cc>)
 80017f0:	220a      	movs	r2, #10
 80017f2:	601a      	str	r2, [r3, #0]
					answ = false;
 80017f4:	4b44      	ldr	r3, [pc, #272]	; (8001908 <rxATcommand+0x8c8>)
 80017f6:	2200      	movs	r2, #0
 80017f8:	701a      	strb	r2, [r3, #0]
					errTransmit = true;
 80017fa:	4b45      	ldr	r3, [pc, #276]	; (8001910 <rxATcommand+0x8d0>)
 80017fc:	2201      	movs	r2, #1
 80017fe:	701a      	strb	r2, [r3, #0]
				}
				ready=true;
 8001800:	4b44      	ldr	r3, [pc, #272]	; (8001914 <rxATcommand+0x8d4>)
 8001802:	2201      	movs	r2, #1
 8001804:	701a      	strb	r2, [r3, #0]
				}
				answ = false;
				ready=true;
				memset(smsText, 0, strlen(smsText));
			}
			break;
 8001806:	e1af      	b.n	8001b68 <rxATcommand+0xb28>
				if (strstr((char*)text, (char*)"OK")) step++;
 8001808:	4943      	ldr	r1, [pc, #268]	; (8001918 <rxATcommand+0x8d8>)
 800180a:	6878      	ldr	r0, [r7, #4]
 800180c:	f003 fc7f 	bl	800510e <strstr>
 8001810:	4603      	mov	r3, r0
 8001812:	2b00      	cmp	r3, #0
 8001814:	d005      	beq.n	8001822 <rxATcommand+0x7e2>
 8001816:	4b3d      	ldr	r3, [pc, #244]	; (800190c <rxATcommand+0x8cc>)
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	3301      	adds	r3, #1
 800181c:	4a3b      	ldr	r2, [pc, #236]	; (800190c <rxATcommand+0x8cc>)
 800181e:	6013      	str	r3, [r2, #0]
 8001820:	e005      	b.n	800182e <rxATcommand+0x7ee>
					step=10;
 8001822:	4b3a      	ldr	r3, [pc, #232]	; (800190c <rxATcommand+0x8cc>)
 8001824:	220a      	movs	r2, #10
 8001826:	601a      	str	r2, [r3, #0]
					errTransmit = true;
 8001828:	4b39      	ldr	r3, [pc, #228]	; (8001910 <rxATcommand+0x8d0>)
 800182a:	2201      	movs	r2, #1
 800182c:	701a      	strb	r2, [r3, #0]
				answ = false;
 800182e:	4b36      	ldr	r3, [pc, #216]	; (8001908 <rxATcommand+0x8c8>)
 8001830:	2200      	movs	r2, #0
 8001832:	701a      	strb	r2, [r3, #0]
				ready=true;
 8001834:	4b37      	ldr	r3, [pc, #220]	; (8001914 <rxATcommand+0x8d4>)
 8001836:	2201      	movs	r2, #1
 8001838:	701a      	strb	r2, [r3, #0]
				memset(smsText, 0, strlen(smsText));
 800183a:	4829      	ldr	r0, [pc, #164]	; (80018e0 <rxATcommand+0x8a0>)
 800183c:	f7fe fc86 	bl	800014c <strlen>
 8001840:	4603      	mov	r3, r0
 8001842:	461a      	mov	r2, r3
 8001844:	2100      	movs	r1, #0
 8001846:	4826      	ldr	r0, [pc, #152]	; (80018e0 <rxATcommand+0x8a0>)
 8001848:	f003 fb04 	bl	8004e54 <memset>
			break;
 800184c:	e18c      	b.n	8001b68 <rxATcommand+0xb28>
		}
		case 10: {
			if (strstr((char*)text, (char*)"OK")) step=11;
 800184e:	4932      	ldr	r1, [pc, #200]	; (8001918 <rxATcommand+0x8d8>)
 8001850:	6878      	ldr	r0, [r7, #4]
 8001852:	f003 fc5c 	bl	800510e <strstr>
 8001856:	4603      	mov	r3, r0
 8001858:	2b00      	cmp	r3, #0
 800185a:	d003      	beq.n	8001864 <rxATcommand+0x824>
 800185c:	4b2b      	ldr	r3, [pc, #172]	; (800190c <rxATcommand+0x8cc>)
 800185e:	220b      	movs	r2, #11
 8001860:	601a      	str	r2, [r3, #0]
 8001862:	e009      	b.n	8001878 <rxATcommand+0x838>
			else if (strstr((char*)text, (char*)"ERROR")) step=11;
 8001864:	492d      	ldr	r1, [pc, #180]	; (800191c <rxATcommand+0x8dc>)
 8001866:	6878      	ldr	r0, [r7, #4]
 8001868:	f003 fc51 	bl	800510e <strstr>
 800186c:	4603      	mov	r3, r0
 800186e:	2b00      	cmp	r3, #0
 8001870:	d002      	beq.n	8001878 <rxATcommand+0x838>
 8001872:	4b26      	ldr	r3, [pc, #152]	; (800190c <rxATcommand+0x8cc>)
 8001874:	220b      	movs	r2, #11
 8001876:	601a      	str	r2, [r3, #0]
			ready=true;
 8001878:	4b26      	ldr	r3, [pc, #152]	; (8001914 <rxATcommand+0x8d4>)
 800187a:	2201      	movs	r2, #1
 800187c:	701a      	strb	r2, [r3, #0]
			break;
 800187e:	e173      	b.n	8001b68 <rxATcommand+0xb28>
		}
		case 11: {
			if (strstr((char*)text, (char*)"OK")) {
 8001880:	4925      	ldr	r1, [pc, #148]	; (8001918 <rxATcommand+0x8d8>)
 8001882:	6878      	ldr	r0, [r7, #4]
 8001884:	f003 fc43 	bl	800510e <strstr>
 8001888:	4603      	mov	r3, r0
 800188a:	2b00      	cmp	r3, #0
 800188c:	d00a      	beq.n	80018a4 <rxATcommand+0x864>
				step=12;
 800188e:	4b1f      	ldr	r3, [pc, #124]	; (800190c <rxATcommand+0x8cc>)
 8001890:	220c      	movs	r2, #12
 8001892:	601a      	str	r2, [r3, #0]
				if (errTransmit) step = 0;
 8001894:	4b1e      	ldr	r3, [pc, #120]	; (8001910 <rxATcommand+0x8d0>)
 8001896:	781b      	ldrb	r3, [r3, #0]
 8001898:	2b00      	cmp	r3, #0
 800189a:	d006      	beq.n	80018aa <rxATcommand+0x86a>
 800189c:	4b1b      	ldr	r3, [pc, #108]	; (800190c <rxATcommand+0x8cc>)
 800189e:	2200      	movs	r2, #0
 80018a0:	601a      	str	r2, [r3, #0]
 80018a2:	e002      	b.n	80018aa <rxATcommand+0x86a>
			}
			else step=0;
 80018a4:	4b19      	ldr	r3, [pc, #100]	; (800190c <rxATcommand+0x8cc>)
 80018a6:	2200      	movs	r2, #0
 80018a8:	601a      	str	r2, [r3, #0]
			errTransmit = false;
 80018aa:	4b19      	ldr	r3, [pc, #100]	; (8001910 <rxATcommand+0x8d0>)
 80018ac:	2200      	movs	r2, #0
 80018ae:	701a      	strb	r2, [r3, #0]
			ready=true;
 80018b0:	4b18      	ldr	r3, [pc, #96]	; (8001914 <rxATcommand+0x8d4>)
 80018b2:	2201      	movs	r2, #1
 80018b4:	701a      	strb	r2, [r3, #0]
			break;
 80018b6:	e157      	b.n	8001b68 <rxATcommand+0xb28>
		}
		case 12: {
			if (strstr((char*)text, (char*)"CMTI")) {
 80018b8:	4919      	ldr	r1, [pc, #100]	; (8001920 <rxATcommand+0x8e0>)
 80018ba:	6878      	ldr	r0, [r7, #4]
 80018bc:	f003 fc27 	bl	800510e <strstr>
 80018c0:	4603      	mov	r3, r0
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d06a      	beq.n	800199c <rxATcommand+0x95c>
				bool start = false;
 80018c6:	2300      	movs	r3, #0
 80018c8:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
				int j = 0;
 80018cc:	2300      	movs	r3, #0
 80018ce:	637b      	str	r3, [r7, #52]	; 0x34
				for (int i = 0; i<250; i++) {
 80018d0:	2300      	movs	r3, #0
 80018d2:	633b      	str	r3, [r7, #48]	; 0x30
 80018d4:	e05b      	b.n	800198e <rxATcommand+0x94e>
 80018d6:	bf00      	nop
 80018d8:	20000694 	.word	0x20000694
 80018dc:	200009e8 	.word	0x200009e8
 80018e0:	20000008 	.word	0x20000008
 80018e4:	08005b50 	.word	0x08005b50
 80018e8:	200009e4 	.word	0x200009e4
 80018ec:	08005b78 	.word	0x08005b78
 80018f0:	200009e5 	.word	0x200009e5
 80018f4:	200009e6 	.word	0x200009e6
 80018f8:	08005bd0 	.word	0x08005bd0
 80018fc:	08005bfc 	.word	0x08005bfc
 8001900:	08005c48 	.word	0x08005c48
 8001904:	08005c74 	.word	0x08005c74
 8001908:	200009d9 	.word	0x200009d9
 800190c:	200009d0 	.word	0x200009d0
 8001910:	200009db 	.word	0x200009db
 8001914:	200009d8 	.word	0x200009d8
 8001918:	08005af0 	.word	0x08005af0
 800191c:	08005b08 	.word	0x08005b08
 8001920:	08005af4 	.word	0x08005af4
					if (start) {
 8001924:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001928:	2b00      	cmp	r3, #0
 800192a:	d024      	beq.n	8001976 <rxATcommand+0x936>
						if ((text[i]=='\r')||(text[i]=='\n')||(text[i]=='\0')) {
 800192c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800192e:	687a      	ldr	r2, [r7, #4]
 8001930:	4413      	add	r3, r2
 8001932:	781b      	ldrb	r3, [r3, #0]
 8001934:	2b0d      	cmp	r3, #13
 8001936:	d00b      	beq.n	8001950 <rxATcommand+0x910>
 8001938:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800193a:	687a      	ldr	r2, [r7, #4]
 800193c:	4413      	add	r3, r2
 800193e:	781b      	ldrb	r3, [r3, #0]
 8001940:	2b0a      	cmp	r3, #10
 8001942:	d005      	beq.n	8001950 <rxATcommand+0x910>
 8001944:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001946:	687a      	ldr	r2, [r7, #4]
 8001948:	4413      	add	r3, r2
 800194a:	781b      	ldrb	r3, [r3, #0]
 800194c:	2b00      	cmp	r3, #0
 800194e:	d105      	bne.n	800195c <rxATcommand+0x91c>
							smsNum[j]='!';  //стоп-символ
 8001950:	4a87      	ldr	r2, [pc, #540]	; (8001b70 <rxATcommand+0xb30>)
 8001952:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001954:	4413      	add	r3, r2
 8001956:	2221      	movs	r2, #33	; 0x21
 8001958:	701a      	strb	r2, [r3, #0]
							break;
 800195a:	e01b      	b.n	8001994 <rxATcommand+0x954>
						}
						else {
							smsNum[j]=text[i];
 800195c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800195e:	687a      	ldr	r2, [r7, #4]
 8001960:	4413      	add	r3, r2
 8001962:	7819      	ldrb	r1, [r3, #0]
 8001964:	4a82      	ldr	r2, [pc, #520]	; (8001b70 <rxATcommand+0xb30>)
 8001966:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001968:	4413      	add	r3, r2
 800196a:	460a      	mov	r2, r1
 800196c:	701a      	strb	r2, [r3, #0]
							j++;
 800196e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001970:	3301      	adds	r3, #1
 8001972:	637b      	str	r3, [r7, #52]	; 0x34
 8001974:	e008      	b.n	8001988 <rxATcommand+0x948>
						}
					}
					else if (text[i]==',') start = true;
 8001976:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001978:	687a      	ldr	r2, [r7, #4]
 800197a:	4413      	add	r3, r2
 800197c:	781b      	ldrb	r3, [r3, #0]
 800197e:	2b2c      	cmp	r3, #44	; 0x2c
 8001980:	d102      	bne.n	8001988 <rxATcommand+0x948>
 8001982:	2301      	movs	r3, #1
 8001984:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
				for (int i = 0; i<250; i++) {
 8001988:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800198a:	3301      	adds	r3, #1
 800198c:	633b      	str	r3, [r7, #48]	; 0x30
 800198e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001990:	2bf9      	cmp	r3, #249	; 0xf9
 8001992:	ddc7      	ble.n	8001924 <rxATcommand+0x8e4>
				}
				step=20;
 8001994:	4b77      	ldr	r3, [pc, #476]	; (8001b74 <rxATcommand+0xb34>)
 8001996:	2214      	movs	r2, #20
 8001998:	601a      	str	r2, [r3, #0]
 800199a:	e002      	b.n	80019a2 <rxATcommand+0x962>
			}
			else step=12;
 800199c:	4b75      	ldr	r3, [pc, #468]	; (8001b74 <rxATcommand+0xb34>)
 800199e:	220c      	movs	r2, #12
 80019a0:	601a      	str	r2, [r3, #0]
			ready=true;
 80019a2:	4b75      	ldr	r3, [pc, #468]	; (8001b78 <rxATcommand+0xb38>)
 80019a4:	2201      	movs	r2, #1
 80019a6:	701a      	strb	r2, [r3, #0]
			break;
 80019a8:	e0de      	b.n	8001b68 <rxATcommand+0xb28>
		}
		case 20: {
			if (strstr((char*)text, (char*)"OK")) step++;
 80019aa:	4974      	ldr	r1, [pc, #464]	; (8001b7c <rxATcommand+0xb3c>)
 80019ac:	6878      	ldr	r0, [r7, #4]
 80019ae:	f003 fbae 	bl	800510e <strstr>
 80019b2:	4603      	mov	r3, r0
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d005      	beq.n	80019c4 <rxATcommand+0x984>
 80019b8:	4b6e      	ldr	r3, [pc, #440]	; (8001b74 <rxATcommand+0xb34>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	3301      	adds	r3, #1
 80019be:	4a6d      	ldr	r2, [pc, #436]	; (8001b74 <rxATcommand+0xb34>)
 80019c0:	6013      	str	r3, [r2, #0]
 80019c2:	e002      	b.n	80019ca <rxATcommand+0x98a>
			else step=12;
 80019c4:	4b6b      	ldr	r3, [pc, #428]	; (8001b74 <rxATcommand+0xb34>)
 80019c6:	220c      	movs	r2, #12
 80019c8:	601a      	str	r2, [r3, #0]
			ready=true;
 80019ca:	4b6b      	ldr	r3, [pc, #428]	; (8001b78 <rxATcommand+0xb38>)
 80019cc:	2201      	movs	r2, #1
 80019ce:	701a      	strb	r2, [r3, #0]
			break;
 80019d0:	e0ca      	b.n	8001b68 <rxATcommand+0xb28>
		}
		case 21: {
			memset(smsText, 0, sizeof(smsText));
 80019d2:	22fa      	movs	r2, #250	; 0xfa
 80019d4:	2100      	movs	r1, #0
 80019d6:	486a      	ldr	r0, [pc, #424]	; (8001b80 <rxATcommand+0xb40>)
 80019d8:	f003 fa3c 	bl	8004e54 <memset>
			strcpy(smsText, oldModem3);
 80019dc:	4969      	ldr	r1, [pc, #420]	; (8001b84 <rxATcommand+0xb44>)
 80019de:	4868      	ldr	r0, [pc, #416]	; (8001b80 <rxATcommand+0xb40>)
 80019e0:	f003 fb8d 	bl	80050fe <strcpy>
			bool numberCorrect = false;
 80019e4:	2300      	movs	r3, #0
 80019e6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (strstr((char*)oldModem4, (char*)tnumber1)) {
 80019ea:	4967      	ldr	r1, [pc, #412]	; (8001b88 <rxATcommand+0xb48>)
 80019ec:	4867      	ldr	r0, [pc, #412]	; (8001b8c <rxATcommand+0xb4c>)
 80019ee:	f003 fb8e 	bl	800510e <strstr>
 80019f2:	4603      	mov	r3, r0
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d008      	beq.n	8001a0a <rxATcommand+0x9ca>
				numberCorrect=true;
 80019f8:	2301      	movs	r3, #1
 80019fa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				sprintf(backNumber, "%s", tnumber1);
 80019fe:	4a62      	ldr	r2, [pc, #392]	; (8001b88 <rxATcommand+0xb48>)
 8001a00:	4963      	ldr	r1, [pc, #396]	; (8001b90 <rxATcommand+0xb50>)
 8001a02:	4864      	ldr	r0, [pc, #400]	; (8001b94 <rxATcommand+0xb54>)
 8001a04:	f003 fb4e 	bl	80050a4 <siprintf>
 8001a08:	e01e      	b.n	8001a48 <rxATcommand+0xa08>
			}
			else if (strstr((char*)oldModem4, (char*)tnumber2)) {
 8001a0a:	4963      	ldr	r1, [pc, #396]	; (8001b98 <rxATcommand+0xb58>)
 8001a0c:	485f      	ldr	r0, [pc, #380]	; (8001b8c <rxATcommand+0xb4c>)
 8001a0e:	f003 fb7e 	bl	800510e <strstr>
 8001a12:	4603      	mov	r3, r0
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d008      	beq.n	8001a2a <rxATcommand+0x9ea>
				numberCorrect=true;
 8001a18:	2301      	movs	r3, #1
 8001a1a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				sprintf(backNumber, "%s", tnumber2);
 8001a1e:	4a5e      	ldr	r2, [pc, #376]	; (8001b98 <rxATcommand+0xb58>)
 8001a20:	495b      	ldr	r1, [pc, #364]	; (8001b90 <rxATcommand+0xb50>)
 8001a22:	485c      	ldr	r0, [pc, #368]	; (8001b94 <rxATcommand+0xb54>)
 8001a24:	f003 fb3e 	bl	80050a4 <siprintf>
 8001a28:	e00e      	b.n	8001a48 <rxATcommand+0xa08>
			}
			else if (strstr((char*)oldModem4, (char*)tnumber3)) {
 8001a2a:	495c      	ldr	r1, [pc, #368]	; (8001b9c <rxATcommand+0xb5c>)
 8001a2c:	4857      	ldr	r0, [pc, #348]	; (8001b8c <rxATcommand+0xb4c>)
 8001a2e:	f003 fb6e 	bl	800510e <strstr>
 8001a32:	4603      	mov	r3, r0
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d007      	beq.n	8001a48 <rxATcommand+0xa08>
				numberCorrect=true;
 8001a38:	2301      	movs	r3, #1
 8001a3a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				sprintf(backNumber, "%s", tnumber3);
 8001a3e:	4a57      	ldr	r2, [pc, #348]	; (8001b9c <rxATcommand+0xb5c>)
 8001a40:	4953      	ldr	r1, [pc, #332]	; (8001b90 <rxATcommand+0xb50>)
 8001a42:	4854      	ldr	r0, [pc, #336]	; (8001b94 <rxATcommand+0xb54>)
 8001a44:	f003 fb2e 	bl	80050a4 <siprintf>
			}
			if (numberCorrect) {
 8001a48:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d022      	beq.n	8001a96 <rxATcommand+0xa56>
				if (strstr(oldModem3, "tart")) {
 8001a50:	4953      	ldr	r1, [pc, #332]	; (8001ba0 <rxATcommand+0xb60>)
 8001a52:	484c      	ldr	r0, [pc, #304]	; (8001b84 <rxATcommand+0xb44>)
 8001a54:	f003 fb5b 	bl	800510e <strstr>
 8001a58:	4603      	mov	r3, r0
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d002      	beq.n	8001a64 <rxATcommand+0xa24>
					buttStart();
 8001a5e:	f7ff f821 	bl	8000aa4 <buttStart>
 8001a62:	e012      	b.n	8001a8a <rxATcommand+0xa4a>
				}
				else if (strstr(oldModem3, "pen")) {
 8001a64:	494f      	ldr	r1, [pc, #316]	; (8001ba4 <rxATcommand+0xb64>)
 8001a66:	4847      	ldr	r0, [pc, #284]	; (8001b84 <rxATcommand+0xb44>)
 8001a68:	f003 fb51 	bl	800510e <strstr>
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d002      	beq.n	8001a78 <rxATcommand+0xa38>
					buttOpen();
 8001a72:	f7ff f83b 	bl	8000aec <buttOpen>
 8001a76:	e008      	b.n	8001a8a <rxATcommand+0xa4a>
				}
				else if (strstr(oldModem3, "lose")) {
 8001a78:	494b      	ldr	r1, [pc, #300]	; (8001ba8 <rxATcommand+0xb68>)
 8001a7a:	4842      	ldr	r0, [pc, #264]	; (8001b84 <rxATcommand+0xb44>)
 8001a7c:	f003 fb47 	bl	800510e <strstr>
 8001a80:	4603      	mov	r3, r0
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d001      	beq.n	8001a8a <rxATcommand+0xa4a>
					buttClose();
 8001a86:	f7ff f869 	bl	8000b5c <buttClose>
				}
				step++;
 8001a8a:	4b3a      	ldr	r3, [pc, #232]	; (8001b74 <rxATcommand+0xb34>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	3301      	adds	r3, #1
 8001a90:	4a38      	ldr	r2, [pc, #224]	; (8001b74 <rxATcommand+0xb34>)
 8001a92:	6013      	str	r3, [r2, #0]
 8001a94:	e011      	b.n	8001aba <rxATcommand+0xa7a>
			}
			else {
				step = 0;
 8001a96:	4b37      	ldr	r3, [pc, #220]	; (8001b74 <rxATcommand+0xb34>)
 8001a98:	2200      	movs	r2, #0
 8001a9a:	601a      	str	r2, [r3, #0]
				strncat(smsText, (uint8_t*)"-stranger", 9);
 8001a9c:	4838      	ldr	r0, [pc, #224]	; (8001b80 <rxATcommand+0xb40>)
 8001a9e:	f7fe fb55 	bl	800014c <strlen>
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	461a      	mov	r2, r3
 8001aa6:	4b36      	ldr	r3, [pc, #216]	; (8001b80 <rxATcommand+0xb40>)
 8001aa8:	4413      	add	r3, r2
 8001aaa:	4940      	ldr	r1, [pc, #256]	; (8001bac <rxATcommand+0xb6c>)
 8001aac:	461a      	mov	r2, r3
 8001aae:	460b      	mov	r3, r1
 8001ab0:	cb03      	ldmia	r3!, {r0, r1}
 8001ab2:	6010      	str	r0, [r2, #0]
 8001ab4:	6051      	str	r1, [r2, #4]
 8001ab6:	881b      	ldrh	r3, [r3, #0]
 8001ab8:	8113      	strh	r3, [r2, #8]
			}
			ready=true;
 8001aba:	4b2f      	ldr	r3, [pc, #188]	; (8001b78 <rxATcommand+0xb38>)
 8001abc:	2201      	movs	r2, #1
 8001abe:	701a      	strb	r2, [r3, #0]
			break;
 8001ac0:	e052      	b.n	8001b68 <rxATcommand+0xb28>
		}
		case 22: {
			step++;
 8001ac2:	4b2c      	ldr	r3, [pc, #176]	; (8001b74 <rxATcommand+0xb34>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	3301      	adds	r3, #1
 8001ac8:	4a2a      	ldr	r2, [pc, #168]	; (8001b74 <rxATcommand+0xb34>)
 8001aca:	6013      	str	r3, [r2, #0]
			ready=true;
 8001acc:	4b2a      	ldr	r3, [pc, #168]	; (8001b78 <rxATcommand+0xb38>)
 8001ace:	2201      	movs	r2, #1
 8001ad0:	701a      	strb	r2, [r3, #0]
			break;
 8001ad2:	e049      	b.n	8001b68 <rxATcommand+0xb28>
		}
		case 23: {
			step++;
 8001ad4:	4b27      	ldr	r3, [pc, #156]	; (8001b74 <rxATcommand+0xb34>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	3301      	adds	r3, #1
 8001ada:	4a26      	ldr	r2, [pc, #152]	; (8001b74 <rxATcommand+0xb34>)
 8001adc:	6013      	str	r3, [r2, #0]
			ready=true;
 8001ade:	4b26      	ldr	r3, [pc, #152]	; (8001b78 <rxATcommand+0xb38>)
 8001ae0:	2201      	movs	r2, #1
 8001ae2:	701a      	strb	r2, [r3, #0]
			break;
 8001ae4:	e040      	b.n	8001b68 <rxATcommand+0xb28>
		}
		case 24: {
			if (strstr((char*)text, (char*)"OK")) {
 8001ae6:	4925      	ldr	r1, [pc, #148]	; (8001b7c <rxATcommand+0xb3c>)
 8001ae8:	6878      	ldr	r0, [r7, #4]
 8001aea:	f003 fb10 	bl	800510e <strstr>
 8001aee:	4603      	mov	r3, r0
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d00c      	beq.n	8001b0e <rxATcommand+0xace>
				if (stopStep==12) step=0;
 8001af4:	4b2e      	ldr	r3, [pc, #184]	; (8001bb0 <rxATcommand+0xb70>)
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	2b0c      	cmp	r3, #12
 8001afa:	d103      	bne.n	8001b04 <rxATcommand+0xac4>
 8001afc:	4b1d      	ldr	r3, [pc, #116]	; (8001b74 <rxATcommand+0xb34>)
 8001afe:	2200      	movs	r2, #0
 8001b00:	601a      	str	r2, [r3, #0]
 8001b02:	e01b      	b.n	8001b3c <rxATcommand+0xafc>
				else step=stopStep;
 8001b04:	4b2a      	ldr	r3, [pc, #168]	; (8001bb0 <rxATcommand+0xb70>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	4a1a      	ldr	r2, [pc, #104]	; (8001b74 <rxATcommand+0xb34>)
 8001b0a:	6013      	str	r3, [r2, #0]
 8001b0c:	e016      	b.n	8001b3c <rxATcommand+0xafc>
			}
			else if (strstr((char*)text, (char*)">")) {
 8001b0e:	213e      	movs	r1, #62	; 0x3e
 8001b10:	6878      	ldr	r0, [r7, #4]
 8001b12:	f003 fae7 	bl	80050e4 <strchr>
 8001b16:	4603      	mov	r3, r0
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d00c      	beq.n	8001b36 <rxATcommand+0xaf6>
				if (stopStep==12) step=0;
 8001b1c:	4b24      	ldr	r3, [pc, #144]	; (8001bb0 <rxATcommand+0xb70>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	2b0c      	cmp	r3, #12
 8001b22:	d103      	bne.n	8001b2c <rxATcommand+0xaec>
 8001b24:	4b13      	ldr	r3, [pc, #76]	; (8001b74 <rxATcommand+0xb34>)
 8001b26:	2200      	movs	r2, #0
 8001b28:	601a      	str	r2, [r3, #0]
 8001b2a:	e007      	b.n	8001b3c <rxATcommand+0xafc>
				else step=stopStep;
 8001b2c:	4b20      	ldr	r3, [pc, #128]	; (8001bb0 <rxATcommand+0xb70>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	4a10      	ldr	r2, [pc, #64]	; (8001b74 <rxATcommand+0xb34>)
 8001b32:	6013      	str	r3, [r2, #0]
 8001b34:	e002      	b.n	8001b3c <rxATcommand+0xafc>
			}
			else {
				step=12;
 8001b36:	4b0f      	ldr	r3, [pc, #60]	; (8001b74 <rxATcommand+0xb34>)
 8001b38:	220c      	movs	r2, #12
 8001b3a:	601a      	str	r2, [r3, #0]
			}
			ready=true;
 8001b3c:	4b0e      	ldr	r3, [pc, #56]	; (8001b78 <rxATcommand+0xb38>)
 8001b3e:	2201      	movs	r2, #1
 8001b40:	701a      	strb	r2, [r3, #0]
			break;
 8001b42:	e011      	b.n	8001b68 <rxATcommand+0xb28>
		}
		case 99: {
			if (strstr((char*)text, (char*)"OK")) {
 8001b44:	490d      	ldr	r1, [pc, #52]	; (8001b7c <rxATcommand+0xb3c>)
 8001b46:	6878      	ldr	r0, [r7, #4]
 8001b48:	f003 fae1 	bl	800510e <strstr>
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d006      	beq.n	8001b60 <rxATcommand+0xb20>
				step=0;
 8001b52:	4b08      	ldr	r3, [pc, #32]	; (8001b74 <rxATcommand+0xb34>)
 8001b54:	2200      	movs	r2, #0
 8001b56:	601a      	str	r2, [r3, #0]
				ready=true;
 8001b58:	4b07      	ldr	r3, [pc, #28]	; (8001b78 <rxATcommand+0xb38>)
 8001b5a:	2201      	movs	r2, #1
 8001b5c:	701a      	strb	r2, [r3, #0]
			}
			else ready = true;
			break;
 8001b5e:	e002      	b.n	8001b66 <rxATcommand+0xb26>
			else ready = true;
 8001b60:	4b05      	ldr	r3, [pc, #20]	; (8001b78 <rxATcommand+0xb38>)
 8001b62:	2201      	movs	r2, #1
 8001b64:	701a      	strb	r2, [r3, #0]
			break;
 8001b66:	bf00      	nop
		}
	}
}
 8001b68:	bf00      	nop
 8001b6a:	3750      	adds	r7, #80	; 0x50
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	bdb0      	pop	{r4, r5, r7, pc}
 8001b70:	20000988 	.word	0x20000988
 8001b74:	200009d0 	.word	0x200009d0
 8001b78:	200009d8 	.word	0x200009d8
 8001b7c:	08005af0 	.word	0x08005af0
 8001b80:	20000008 	.word	0x20000008
 8001b84:	20000790 	.word	0x20000790
 8001b88:	2000010c 	.word	0x2000010c
 8001b8c:	2000088c 	.word	0x2000088c
 8001b90:	08005cc0 	.word	0x08005cc0
 8001b94:	2000013c 	.word	0x2000013c
 8001b98:	2000011c 	.word	0x2000011c
 8001b9c:	2000012c 	.word	0x2000012c
 8001ba0:	08005cc4 	.word	0x08005cc4
 8001ba4:	08005ccc 	.word	0x08005ccc
 8001ba8:	08005cd0 	.word	0x08005cd0
 8001bac:	08005cd8 	.word	0x08005cd8
 8001bb0:	200001f4 	.word	0x200001f4

08001bb4 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b08c      	sub	sp, #48	; 0x30
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
	if (huart == &huart2) {
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	4a93      	ldr	r2, [pc, #588]	; (8001e0c <HAL_UART_RxCpltCallback+0x258>)
 8001bc0:	4293      	cmp	r3, r2
 8001bc2:	f040 809a 	bne.w	8001cfa <HAL_UART_RxCpltCallback+0x146>
		if (str[0]!='\n') {
 8001bc6:	4b92      	ldr	r3, [pc, #584]	; (8001e10 <HAL_UART_RxCpltCallback+0x25c>)
 8001bc8:	781b      	ldrb	r3, [r3, #0]
 8001bca:	2b0a      	cmp	r3, #10
 8001bcc:	d00b      	beq.n	8001be6 <HAL_UART_RxCpltCallback+0x32>
			modemString2[modemStringLength2] = str[0];
 8001bce:	4b91      	ldr	r3, [pc, #580]	; (8001e14 <HAL_UART_RxCpltCallback+0x260>)
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	4a8f      	ldr	r2, [pc, #572]	; (8001e10 <HAL_UART_RxCpltCallback+0x25c>)
 8001bd4:	7811      	ldrb	r1, [r2, #0]
 8001bd6:	4a90      	ldr	r2, [pc, #576]	; (8001e18 <HAL_UART_RxCpltCallback+0x264>)
 8001bd8:	54d1      	strb	r1, [r2, r3]
			modemStringLength2++;
 8001bda:	4b8e      	ldr	r3, [pc, #568]	; (8001e14 <HAL_UART_RxCpltCallback+0x260>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	3301      	adds	r3, #1
 8001be0:	4a8c      	ldr	r2, [pc, #560]	; (8001e14 <HAL_UART_RxCpltCallback+0x260>)
 8001be2:	6013      	str	r3, [r2, #0]
 8001be4:	e083      	b.n	8001cee <HAL_UART_RxCpltCallback+0x13a>
		}
		else {
			modemString2[modemStringLength2] = str[0];
 8001be6:	4b8b      	ldr	r3, [pc, #556]	; (8001e14 <HAL_UART_RxCpltCallback+0x260>)
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	4a89      	ldr	r2, [pc, #548]	; (8001e10 <HAL_UART_RxCpltCallback+0x25c>)
 8001bec:	7811      	ldrb	r1, [r2, #0]
 8001bee:	4a8a      	ldr	r2, [pc, #552]	; (8001e18 <HAL_UART_RxCpltCallback+0x264>)
 8001bf0:	54d1      	strb	r1, [r2, r3]
			modemStringLength2++;
 8001bf2:	4b88      	ldr	r3, [pc, #544]	; (8001e14 <HAL_UART_RxCpltCallback+0x260>)
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	3301      	adds	r3, #1
 8001bf8:	4a86      	ldr	r2, [pc, #536]	; (8001e14 <HAL_UART_RxCpltCallback+0x260>)
 8001bfa:	6013      	str	r3, [r2, #0]
			if (echoMode) HAL_UART_Transmit_DMA(&huart1, modemString2, modemStringLength2);
 8001bfc:	4b87      	ldr	r3, [pc, #540]	; (8001e1c <HAL_UART_RxCpltCallback+0x268>)
 8001bfe:	781b      	ldrb	r3, [r3, #0]
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d007      	beq.n	8001c14 <HAL_UART_RxCpltCallback+0x60>
 8001c04:	4b83      	ldr	r3, [pc, #524]	; (8001e14 <HAL_UART_RxCpltCallback+0x260>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	b29b      	uxth	r3, r3
 8001c0a:	461a      	mov	r2, r3
 8001c0c:	4982      	ldr	r1, [pc, #520]	; (8001e18 <HAL_UART_RxCpltCallback+0x264>)
 8001c0e:	4884      	ldr	r0, [pc, #528]	; (8001e20 <HAL_UART_RxCpltCallback+0x26c>)
 8001c10:	f002 fa20 	bl	8004054 <HAL_UART_Transmit_DMA>
			for (int i = modemStringLength2; i<250; i++)modemString2[i]=(uint8_t)0x00;
 8001c14:	4b7f      	ldr	r3, [pc, #508]	; (8001e14 <HAL_UART_RxCpltCallback+0x260>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001c1a:	e007      	b.n	8001c2c <HAL_UART_RxCpltCallback+0x78>
 8001c1c:	4a7e      	ldr	r2, [pc, #504]	; (8001e18 <HAL_UART_RxCpltCallback+0x264>)
 8001c1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c20:	4413      	add	r3, r2
 8001c22:	2200      	movs	r2, #0
 8001c24:	701a      	strb	r2, [r3, #0]
 8001c26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c28:	3301      	adds	r3, #1
 8001c2a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001c2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c2e:	2bf9      	cmp	r3, #249	; 0xf9
 8001c30:	ddf4      	ble.n	8001c1c <HAL_UART_RxCpltCallback+0x68>
			for (int i = 0; i<250; i++) oldModem4[i] = oldModem3[i];
 8001c32:	2300      	movs	r3, #0
 8001c34:	62bb      	str	r3, [r7, #40]	; 0x28
 8001c36:	e00b      	b.n	8001c50 <HAL_UART_RxCpltCallback+0x9c>
 8001c38:	4a7a      	ldr	r2, [pc, #488]	; (8001e24 <HAL_UART_RxCpltCallback+0x270>)
 8001c3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c3c:	4413      	add	r3, r2
 8001c3e:	7819      	ldrb	r1, [r3, #0]
 8001c40:	4a79      	ldr	r2, [pc, #484]	; (8001e28 <HAL_UART_RxCpltCallback+0x274>)
 8001c42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c44:	4413      	add	r3, r2
 8001c46:	460a      	mov	r2, r1
 8001c48:	701a      	strb	r2, [r3, #0]
 8001c4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c4c:	3301      	adds	r3, #1
 8001c4e:	62bb      	str	r3, [r7, #40]	; 0x28
 8001c50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c52:	2bf9      	cmp	r3, #249	; 0xf9
 8001c54:	ddf0      	ble.n	8001c38 <HAL_UART_RxCpltCallback+0x84>
			for (int i = 0; i<250; i++) oldModem3[i] = oldModem2[i];
 8001c56:	2300      	movs	r3, #0
 8001c58:	627b      	str	r3, [r7, #36]	; 0x24
 8001c5a:	e00b      	b.n	8001c74 <HAL_UART_RxCpltCallback+0xc0>
 8001c5c:	4a73      	ldr	r2, [pc, #460]	; (8001e2c <HAL_UART_RxCpltCallback+0x278>)
 8001c5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c60:	4413      	add	r3, r2
 8001c62:	7819      	ldrb	r1, [r3, #0]
 8001c64:	4a6f      	ldr	r2, [pc, #444]	; (8001e24 <HAL_UART_RxCpltCallback+0x270>)
 8001c66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c68:	4413      	add	r3, r2
 8001c6a:	460a      	mov	r2, r1
 8001c6c:	701a      	strb	r2, [r3, #0]
 8001c6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c70:	3301      	adds	r3, #1
 8001c72:	627b      	str	r3, [r7, #36]	; 0x24
 8001c74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c76:	2bf9      	cmp	r3, #249	; 0xf9
 8001c78:	ddf0      	ble.n	8001c5c <HAL_UART_RxCpltCallback+0xa8>
			for (int i = 0; i<250; i++) oldModem2[i] = oldModem[i];
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	623b      	str	r3, [r7, #32]
 8001c7e:	e00b      	b.n	8001c98 <HAL_UART_RxCpltCallback+0xe4>
 8001c80:	4a6b      	ldr	r2, [pc, #428]	; (8001e30 <HAL_UART_RxCpltCallback+0x27c>)
 8001c82:	6a3b      	ldr	r3, [r7, #32]
 8001c84:	4413      	add	r3, r2
 8001c86:	7819      	ldrb	r1, [r3, #0]
 8001c88:	4a68      	ldr	r2, [pc, #416]	; (8001e2c <HAL_UART_RxCpltCallback+0x278>)
 8001c8a:	6a3b      	ldr	r3, [r7, #32]
 8001c8c:	4413      	add	r3, r2
 8001c8e:	460a      	mov	r2, r1
 8001c90:	701a      	strb	r2, [r3, #0]
 8001c92:	6a3b      	ldr	r3, [r7, #32]
 8001c94:	3301      	adds	r3, #1
 8001c96:	623b      	str	r3, [r7, #32]
 8001c98:	6a3b      	ldr	r3, [r7, #32]
 8001c9a:	2bf9      	cmp	r3, #249	; 0xf9
 8001c9c:	ddf0      	ble.n	8001c80 <HAL_UART_RxCpltCallback+0xcc>
			for (int i = 0; i<250; i++) oldModem[i] = modemString2[i];
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	61fb      	str	r3, [r7, #28]
 8001ca2:	e00b      	b.n	8001cbc <HAL_UART_RxCpltCallback+0x108>
 8001ca4:	4a5c      	ldr	r2, [pc, #368]	; (8001e18 <HAL_UART_RxCpltCallback+0x264>)
 8001ca6:	69fb      	ldr	r3, [r7, #28]
 8001ca8:	4413      	add	r3, r2
 8001caa:	7819      	ldrb	r1, [r3, #0]
 8001cac:	4a60      	ldr	r2, [pc, #384]	; (8001e30 <HAL_UART_RxCpltCallback+0x27c>)
 8001cae:	69fb      	ldr	r3, [r7, #28]
 8001cb0:	4413      	add	r3, r2
 8001cb2:	460a      	mov	r2, r1
 8001cb4:	701a      	strb	r2, [r3, #0]
 8001cb6:	69fb      	ldr	r3, [r7, #28]
 8001cb8:	3301      	adds	r3, #1
 8001cba:	61fb      	str	r3, [r7, #28]
 8001cbc:	69fb      	ldr	r3, [r7, #28]
 8001cbe:	2bf9      	cmp	r3, #249	; 0xf9
 8001cc0:	ddf0      	ble.n	8001ca4 <HAL_UART_RxCpltCallback+0xf0>
			modemStringLength2 = 0;
 8001cc2:	4b54      	ldr	r3, [pc, #336]	; (8001e14 <HAL_UART_RxCpltCallback+0x260>)
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	601a      	str	r2, [r3, #0]
			oldModem[strlen(oldModem)-1]=0;
 8001cc8:	4859      	ldr	r0, [pc, #356]	; (8001e30 <HAL_UART_RxCpltCallback+0x27c>)
 8001cca:	f7fe fa3f 	bl	800014c <strlen>
 8001cce:	4603      	mov	r3, r0
 8001cd0:	3b01      	subs	r3, #1
 8001cd2:	4a57      	ldr	r2, [pc, #348]	; (8001e30 <HAL_UART_RxCpltCallback+0x27c>)
 8001cd4:	2100      	movs	r1, #0
 8001cd6:	54d1      	strb	r1, [r2, r3]
			oldModem[strlen(oldModem)-1]=0;
 8001cd8:	4855      	ldr	r0, [pc, #340]	; (8001e30 <HAL_UART_RxCpltCallback+0x27c>)
 8001cda:	f7fe fa37 	bl	800014c <strlen>
 8001cde:	4603      	mov	r3, r0
 8001ce0:	3b01      	subs	r3, #1
 8001ce2:	4a53      	ldr	r2, [pc, #332]	; (8001e30 <HAL_UART_RxCpltCallback+0x27c>)
 8001ce4:	2100      	movs	r1, #0
 8001ce6:	54d1      	strb	r1, [r2, r3]
			rxNew=true;
 8001ce8:	4b52      	ldr	r3, [pc, #328]	; (8001e34 <HAL_UART_RxCpltCallback+0x280>)
 8001cea:	2201      	movs	r2, #1
 8001cec:	601a      	str	r2, [r3, #0]
		}
		HAL_UART_Receive_IT(&huart2,str,1);
 8001cee:	2201      	movs	r2, #1
 8001cf0:	4947      	ldr	r1, [pc, #284]	; (8001e10 <HAL_UART_RxCpltCallback+0x25c>)
 8001cf2:	4846      	ldr	r0, [pc, #280]	; (8001e0c <HAL_UART_RxCpltCallback+0x258>)
 8001cf4:	f002 f989 	bl	800400a <HAL_UART_Receive_IT>
			else if (echoMode) HAL_UART_Transmit_DMA(&huart2, modemString1, modemStringLength1);
			modemStringLength1 = 0;
		}
		HAL_UART_Receive_IT(&huart1,str2,1);
	}
}
 8001cf8:	e0d0      	b.n	8001e9c <HAL_UART_RxCpltCallback+0x2e8>
		if (str2[0]!='\n') {
 8001cfa:	4b4f      	ldr	r3, [pc, #316]	; (8001e38 <HAL_UART_RxCpltCallback+0x284>)
 8001cfc:	781b      	ldrb	r3, [r3, #0]
 8001cfe:	2b0a      	cmp	r3, #10
 8001d00:	d00b      	beq.n	8001d1a <HAL_UART_RxCpltCallback+0x166>
			modemString1[modemStringLength1] = str2[0];
 8001d02:	4b4e      	ldr	r3, [pc, #312]	; (8001e3c <HAL_UART_RxCpltCallback+0x288>)
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	4a4c      	ldr	r2, [pc, #304]	; (8001e38 <HAL_UART_RxCpltCallback+0x284>)
 8001d08:	7811      	ldrb	r1, [r2, #0]
 8001d0a:	4a4d      	ldr	r2, [pc, #308]	; (8001e40 <HAL_UART_RxCpltCallback+0x28c>)
 8001d0c:	54d1      	strb	r1, [r2, r3]
			modemStringLength1++;
 8001d0e:	4b4b      	ldr	r3, [pc, #300]	; (8001e3c <HAL_UART_RxCpltCallback+0x288>)
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	3301      	adds	r3, #1
 8001d14:	4a49      	ldr	r2, [pc, #292]	; (8001e3c <HAL_UART_RxCpltCallback+0x288>)
 8001d16:	6013      	str	r3, [r2, #0]
 8001d18:	e0bb      	b.n	8001e92 <HAL_UART_RxCpltCallback+0x2de>
			modemString1[modemStringLength1] = str2[0];
 8001d1a:	4b48      	ldr	r3, [pc, #288]	; (8001e3c <HAL_UART_RxCpltCallback+0x288>)
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	4a46      	ldr	r2, [pc, #280]	; (8001e38 <HAL_UART_RxCpltCallback+0x284>)
 8001d20:	7811      	ldrb	r1, [r2, #0]
 8001d22:	4a47      	ldr	r2, [pc, #284]	; (8001e40 <HAL_UART_RxCpltCallback+0x28c>)
 8001d24:	54d1      	strb	r1, [r2, r3]
			modemStringLength1++;
 8001d26:	4b45      	ldr	r3, [pc, #276]	; (8001e3c <HAL_UART_RxCpltCallback+0x288>)
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	3301      	adds	r3, #1
 8001d2c:	4a43      	ldr	r2, [pc, #268]	; (8001e3c <HAL_UART_RxCpltCallback+0x288>)
 8001d2e:	6013      	str	r3, [r2, #0]
			if (strstr((char*)modemString1, (char*)"echoON")) {
 8001d30:	4944      	ldr	r1, [pc, #272]	; (8001e44 <HAL_UART_RxCpltCallback+0x290>)
 8001d32:	4843      	ldr	r0, [pc, #268]	; (8001e40 <HAL_UART_RxCpltCallback+0x28c>)
 8001d34:	f003 f9eb 	bl	800510e <strstr>
 8001d38:	4603      	mov	r3, r0
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d008      	beq.n	8001d50 <HAL_UART_RxCpltCallback+0x19c>
				echoMode = true;
 8001d3e:	4b37      	ldr	r3, [pc, #220]	; (8001e1c <HAL_UART_RxCpltCallback+0x268>)
 8001d40:	2201      	movs	r2, #1
 8001d42:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit_DMA(&huart1, (uint8_t*)"echo mode ON\r\n", 14);
 8001d44:	220e      	movs	r2, #14
 8001d46:	4940      	ldr	r1, [pc, #256]	; (8001e48 <HAL_UART_RxCpltCallback+0x294>)
 8001d48:	4835      	ldr	r0, [pc, #212]	; (8001e20 <HAL_UART_RxCpltCallback+0x26c>)
 8001d4a:	f002 f983 	bl	8004054 <HAL_UART_Transmit_DMA>
 8001d4e:	e09d      	b.n	8001e8c <HAL_UART_RxCpltCallback+0x2d8>
			else if (strstr((char*)modemString1, (char*)"echoOFF")) {
 8001d50:	493e      	ldr	r1, [pc, #248]	; (8001e4c <HAL_UART_RxCpltCallback+0x298>)
 8001d52:	483b      	ldr	r0, [pc, #236]	; (8001e40 <HAL_UART_RxCpltCallback+0x28c>)
 8001d54:	f003 f9db 	bl	800510e <strstr>
 8001d58:	4603      	mov	r3, r0
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d008      	beq.n	8001d70 <HAL_UART_RxCpltCallback+0x1bc>
				echoMode = false;
 8001d5e:	4b2f      	ldr	r3, [pc, #188]	; (8001e1c <HAL_UART_RxCpltCallback+0x268>)
 8001d60:	2200      	movs	r2, #0
 8001d62:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit_DMA(&huart1, (uint8_t*)"echo mode OFF\r\n", 14);
 8001d64:	220e      	movs	r2, #14
 8001d66:	493a      	ldr	r1, [pc, #232]	; (8001e50 <HAL_UART_RxCpltCallback+0x29c>)
 8001d68:	482d      	ldr	r0, [pc, #180]	; (8001e20 <HAL_UART_RxCpltCallback+0x26c>)
 8001d6a:	f002 f973 	bl	8004054 <HAL_UART_Transmit_DMA>
 8001d6e:	e08d      	b.n	8001e8c <HAL_UART_RxCpltCallback+0x2d8>
			else if (strstr((char*)modemString1, (char*)"gprs")) {
 8001d70:	4938      	ldr	r1, [pc, #224]	; (8001e54 <HAL_UART_RxCpltCallback+0x2a0>)
 8001d72:	4833      	ldr	r0, [pc, #204]	; (8001e40 <HAL_UART_RxCpltCallback+0x28c>)
 8001d74:	f003 f9cb 	bl	800510e <strstr>
 8001d78:	4603      	mov	r3, r0
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d008      	beq.n	8001d90 <HAL_UART_RxCpltCallback+0x1dc>
				timeRepeat = 0;
 8001d7e:	4b36      	ldr	r3, [pc, #216]	; (8001e58 <HAL_UART_RxCpltCallback+0x2a4>)
 8001d80:	2200      	movs	r2, #0
 8001d82:	601a      	str	r2, [r3, #0]
				HAL_UART_Transmit_DMA(&huart1, (uint8_t*)"update start\r\n", 14);
 8001d84:	220e      	movs	r2, #14
 8001d86:	4935      	ldr	r1, [pc, #212]	; (8001e5c <HAL_UART_RxCpltCallback+0x2a8>)
 8001d88:	4825      	ldr	r0, [pc, #148]	; (8001e20 <HAL_UART_RxCpltCallback+0x26c>)
 8001d8a:	f002 f963 	bl	8004054 <HAL_UART_Transmit_DMA>
 8001d8e:	e07d      	b.n	8001e8c <HAL_UART_RxCpltCallback+0x2d8>
			else if (strstr((char*)modemString1, (char*)"timeDelay")) {
 8001d90:	4933      	ldr	r1, [pc, #204]	; (8001e60 <HAL_UART_RxCpltCallback+0x2ac>)
 8001d92:	482b      	ldr	r0, [pc, #172]	; (8001e40 <HAL_UART_RxCpltCallback+0x28c>)
 8001d94:	f003 f9bb 	bl	800510e <strstr>
 8001d98:	4603      	mov	r3, r0
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d06a      	beq.n	8001e74 <HAL_UART_RxCpltCallback+0x2c0>
				timeRepeat = 0;
 8001d9e:	4b2e      	ldr	r3, [pc, #184]	; (8001e58 <HAL_UART_RxCpltCallback+0x2a4>)
 8001da0:	2200      	movs	r2, #0
 8001da2:	601a      	str	r2, [r3, #0]
				uint8_t buf[10] = {0};
 8001da4:	2300      	movs	r3, #0
 8001da6:	60bb      	str	r3, [r7, #8]
 8001da8:	f107 030c 	add.w	r3, r7, #12
 8001dac:	2200      	movs	r2, #0
 8001dae:	601a      	str	r2, [r3, #0]
 8001db0:	809a      	strh	r2, [r3, #4]
			    for (int i = 10; i<modemStringLength1-2; i++) buf[i-10] = modemString1[i];
 8001db2:	230a      	movs	r3, #10
 8001db4:	61bb      	str	r3, [r7, #24]
 8001db6:	e00c      	b.n	8001dd2 <HAL_UART_RxCpltCallback+0x21e>
 8001db8:	69bb      	ldr	r3, [r7, #24]
 8001dba:	3b0a      	subs	r3, #10
 8001dbc:	4920      	ldr	r1, [pc, #128]	; (8001e40 <HAL_UART_RxCpltCallback+0x28c>)
 8001dbe:	69ba      	ldr	r2, [r7, #24]
 8001dc0:	440a      	add	r2, r1
 8001dc2:	7812      	ldrb	r2, [r2, #0]
 8001dc4:	3330      	adds	r3, #48	; 0x30
 8001dc6:	443b      	add	r3, r7
 8001dc8:	f803 2c28 	strb.w	r2, [r3, #-40]
 8001dcc:	69bb      	ldr	r3, [r7, #24]
 8001dce:	3301      	adds	r3, #1
 8001dd0:	61bb      	str	r3, [r7, #24]
 8001dd2:	4b1a      	ldr	r3, [pc, #104]	; (8001e3c <HAL_UART_RxCpltCallback+0x288>)
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	3b02      	subs	r3, #2
 8001dd8:	69ba      	ldr	r2, [r7, #24]
 8001dda:	429a      	cmp	r2, r3
 8001ddc:	dbec      	blt.n	8001db8 <HAL_UART_RxCpltCallback+0x204>
			    uint32_t a = atoi(buf);
 8001dde:	f107 0308 	add.w	r3, r7, #8
 8001de2:	4618      	mov	r0, r3
 8001de4:	f002 fffa 	bl	8004ddc <atoi>
 8001de8:	4603      	mov	r3, r0
 8001dea:	617b      	str	r3, [r7, #20]
			    if (a<(2*60*1000)) a = 120000;
 8001dec:	697b      	ldr	r3, [r7, #20]
 8001dee:	4a1d      	ldr	r2, [pc, #116]	; (8001e64 <HAL_UART_RxCpltCallback+0x2b0>)
 8001df0:	4293      	cmp	r3, r2
 8001df2:	d801      	bhi.n	8001df8 <HAL_UART_RxCpltCallback+0x244>
 8001df4:	4b1c      	ldr	r3, [pc, #112]	; (8001e68 <HAL_UART_RxCpltCallback+0x2b4>)
 8001df6:	617b      	str	r3, [r7, #20]
			    timeRepeatTotal = a;
 8001df8:	4a1c      	ldr	r2, [pc, #112]	; (8001e6c <HAL_UART_RxCpltCallback+0x2b8>)
 8001dfa:	697b      	ldr	r3, [r7, #20]
 8001dfc:	6013      	str	r3, [r2, #0]
				HAL_UART_Transmit_DMA(&huart1, (uint8_t*)"new delay set\r\n", 15);
 8001dfe:	220f      	movs	r2, #15
 8001e00:	491b      	ldr	r1, [pc, #108]	; (8001e70 <HAL_UART_RxCpltCallback+0x2bc>)
 8001e02:	4807      	ldr	r0, [pc, #28]	; (8001e20 <HAL_UART_RxCpltCallback+0x26c>)
 8001e04:	f002 f926 	bl	8004054 <HAL_UART_Transmit_DMA>
 8001e08:	e040      	b.n	8001e8c <HAL_UART_RxCpltCallback+0x2d8>
 8001e0a:	bf00      	nop
 8001e0c:	20000240 	.word	0x20000240
 8001e10:	20000000 	.word	0x20000000
 8001e14:	20000494 	.word	0x20000494
 8001e18:	20000398 	.word	0x20000398
 8001e1c:	200009da 	.word	0x200009da
 8001e20:	200001f8 	.word	0x200001f8
 8001e24:	20000790 	.word	0x20000790
 8001e28:	2000088c 	.word	0x2000088c
 8001e2c:	20000694 	.word	0x20000694
 8001e30:	20000598 	.word	0x20000598
 8001e34:	200009d4 	.word	0x200009d4
 8001e38:	20000004 	.word	0x20000004
 8001e3c:	20000594 	.word	0x20000594
 8001e40:	20000498 	.word	0x20000498
 8001e44:	08005cf4 	.word	0x08005cf4
 8001e48:	08005cfc 	.word	0x08005cfc
 8001e4c:	08005d0c 	.word	0x08005d0c
 8001e50:	08005d14 	.word	0x08005d14
 8001e54:	08005d24 	.word	0x08005d24
 8001e58:	200001f0 	.word	0x200001f0
 8001e5c:	08005d2c 	.word	0x08005d2c
 8001e60:	08005d3c 	.word	0x08005d3c
 8001e64:	0001d4bf 	.word	0x0001d4bf
 8001e68:	0001d4c0 	.word	0x0001d4c0
 8001e6c:	20000160 	.word	0x20000160
 8001e70:	08005d48 	.word	0x08005d48
			else if (echoMode) HAL_UART_Transmit_DMA(&huart2, modemString1, modemStringLength1);
 8001e74:	4b0b      	ldr	r3, [pc, #44]	; (8001ea4 <HAL_UART_RxCpltCallback+0x2f0>)
 8001e76:	781b      	ldrb	r3, [r3, #0]
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d007      	beq.n	8001e8c <HAL_UART_RxCpltCallback+0x2d8>
 8001e7c:	4b0a      	ldr	r3, [pc, #40]	; (8001ea8 <HAL_UART_RxCpltCallback+0x2f4>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	b29b      	uxth	r3, r3
 8001e82:	461a      	mov	r2, r3
 8001e84:	4909      	ldr	r1, [pc, #36]	; (8001eac <HAL_UART_RxCpltCallback+0x2f8>)
 8001e86:	480a      	ldr	r0, [pc, #40]	; (8001eb0 <HAL_UART_RxCpltCallback+0x2fc>)
 8001e88:	f002 f8e4 	bl	8004054 <HAL_UART_Transmit_DMA>
			modemStringLength1 = 0;
 8001e8c:	4b06      	ldr	r3, [pc, #24]	; (8001ea8 <HAL_UART_RxCpltCallback+0x2f4>)
 8001e8e:	2200      	movs	r2, #0
 8001e90:	601a      	str	r2, [r3, #0]
		HAL_UART_Receive_IT(&huart1,str2,1);
 8001e92:	2201      	movs	r2, #1
 8001e94:	4907      	ldr	r1, [pc, #28]	; (8001eb4 <HAL_UART_RxCpltCallback+0x300>)
 8001e96:	4808      	ldr	r0, [pc, #32]	; (8001eb8 <HAL_UART_RxCpltCallback+0x304>)
 8001e98:	f002 f8b7 	bl	800400a <HAL_UART_Receive_IT>
}
 8001e9c:	bf00      	nop
 8001e9e:	3730      	adds	r7, #48	; 0x30
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	bd80      	pop	{r7, pc}
 8001ea4:	200009da 	.word	0x200009da
 8001ea8:	20000594 	.word	0x20000594
 8001eac:	20000498 	.word	0x20000498
 8001eb0:	20000240 	.word	0x20000240
 8001eb4:	20000004 	.word	0x20000004
 8001eb8:	200001f8 	.word	0x200001f8

08001ebc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001ebc:	b5b0      	push	{r4, r5, r7, lr}
 8001ebe:	b088      	sub	sp, #32
 8001ec0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001ec2:	f000 fddb 	bl	8002a7c <HAL_Init>

  /* USER CODE BEGIN Init */

  sprintf(unicID, "%x-%x-%lx-%lx", *idBase0, *idBase1, *idBase2, *idBase3);
 8001ec6:	4b95      	ldr	r3, [pc, #596]	; (800211c <main+0x260>)
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	881b      	ldrh	r3, [r3, #0]
 8001ecc:	4619      	mov	r1, r3
 8001ece:	4b94      	ldr	r3, [pc, #592]	; (8002120 <main+0x264>)
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	881b      	ldrh	r3, [r3, #0]
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	4b93      	ldr	r3, [pc, #588]	; (8002124 <main+0x268>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	4a92      	ldr	r2, [pc, #584]	; (8002128 <main+0x26c>)
 8001ede:	6812      	ldr	r2, [r2, #0]
 8001ee0:	6812      	ldr	r2, [r2, #0]
 8001ee2:	9201      	str	r2, [sp, #4]
 8001ee4:	9300      	str	r3, [sp, #0]
 8001ee6:	4603      	mov	r3, r0
 8001ee8:	460a      	mov	r2, r1
 8001eea:	4990      	ldr	r1, [pc, #576]	; (800212c <main+0x270>)
 8001eec:	4890      	ldr	r0, [pc, #576]	; (8002130 <main+0x274>)
 8001eee:	f003 f8d9 	bl	80050a4 <siprintf>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001ef2:	f000 fa49 	bl	8002388 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001ef6:	f000 fb17 	bl	8002528 <MX_GPIO_Init>
  MX_DMA_Init();
 8001efa:	f000 fadf 	bl	80024bc <MX_DMA_Init>
  MX_USART1_UART_Init();
 8001efe:	f000 fa89 	bl	8002414 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8001f02:	f000 fab1 	bl	8002468 <MX_USART2_UART_Init>
  /*SSD1306_Init();
  SSD1306_GotoXY(0, 44); //Устанавливаем курсор в позицию 0;44. Сначала по горизонтали, потом вертикали.
  SSD1306_Puts("Hello, habrahabr!!", &Font_7x10, SSD1306_COLOR_WHITE); //пишем надпись в выставленной позиции шрифтом "Font_7x10" белым цветом.
  SSD1306_DrawCircle(10, 33, 7, SSD1306_COLOR_WHITE);
  SSD1306_UpdateScreen();*/
  for (int i = 0; i<10; i++) {
 8001f06:	2300      	movs	r3, #0
 8001f08:	617b      	str	r3, [r7, #20]
 8001f0a:	e00a      	b.n	8001f22 <main+0x66>
	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8001f0c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001f10:	4888      	ldr	r0, [pc, #544]	; (8002134 <main+0x278>)
 8001f12:	f001 fb7d 	bl	8003610 <HAL_GPIO_TogglePin>
	  HAL_Delay(250);
 8001f16:	20fa      	movs	r0, #250	; 0xfa
 8001f18:	f000 fe12 	bl	8002b40 <HAL_Delay>
  for (int i = 0; i<10; i++) {
 8001f1c:	697b      	ldr	r3, [r7, #20]
 8001f1e:	3301      	adds	r3, #1
 8001f20:	617b      	str	r3, [r7, #20]
 8001f22:	697b      	ldr	r3, [r7, #20]
 8001f24:	2b09      	cmp	r3, #9
 8001f26:	ddf1      	ble.n	8001f0c <main+0x50>
  }

  HAL_UART_Transmit(&huart1,(uint8_t*)"start\r\n",7,0xFFFF);
 8001f28:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001f2c:	2207      	movs	r2, #7
 8001f2e:	4982      	ldr	r1, [pc, #520]	; (8002138 <main+0x27c>)
 8001f30:	4882      	ldr	r0, [pc, #520]	; (800213c <main+0x280>)
 8001f32:	f001 ffe7 	bl	8003f04 <HAL_UART_Transmit>
  HAL_UART_Transmit(&huart1,(uint8_t*)"echoON - for echo mode\r\n",24,0xFFFF);
 8001f36:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001f3a:	2218      	movs	r2, #24
 8001f3c:	4980      	ldr	r1, [pc, #512]	; (8002140 <main+0x284>)
 8001f3e:	487f      	ldr	r0, [pc, #508]	; (800213c <main+0x280>)
 8001f40:	f001 ffe0 	bl	8003f04 <HAL_UART_Transmit>
  HAL_UART_Transmit(&huart1,(uint8_t*)"echoOFF - for normal mode\r\n",27,0xFFFF);
 8001f44:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001f48:	221b      	movs	r2, #27
 8001f4a:	497e      	ldr	r1, [pc, #504]	; (8002144 <main+0x288>)
 8001f4c:	487b      	ldr	r0, [pc, #492]	; (800213c <main+0x280>)
 8001f4e:	f001 ffd9 	bl	8003f04 <HAL_UART_Transmit>
  HAL_UART_Transmit(&huart1,(uint8_t*)"gprs - gprs update\r\n",20,0xFFFF);
 8001f52:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001f56:	2214      	movs	r2, #20
 8001f58:	497b      	ldr	r1, [pc, #492]	; (8002148 <main+0x28c>)
 8001f5a:	4878      	ldr	r0, [pc, #480]	; (800213c <main+0x280>)
 8001f5c:	f001 ffd2 	bl	8003f04 <HAL_UART_Transmit>
  HAL_UART_Transmit(&huart1,(uint8_t*)"timeDelay:XXXXXXX\r\n",19,0xFFFF);
 8001f60:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001f64:	2213      	movs	r2, #19
 8001f66:	4979      	ldr	r1, [pc, #484]	; (800214c <main+0x290>)
 8001f68:	4874      	ldr	r0, [pc, #464]	; (800213c <main+0x280>)
 8001f6a:	f001 ffcb 	bl	8003f04 <HAL_UART_Transmit>
  HAL_UART_Transmit(&huart2,(uint8_t*)"AT\r\n",8,0xFFFF);
 8001f6e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001f72:	2208      	movs	r2, #8
 8001f74:	4976      	ldr	r1, [pc, #472]	; (8002150 <main+0x294>)
 8001f76:	4877      	ldr	r0, [pc, #476]	; (8002154 <main+0x298>)
 8001f78:	f001 ffc4 	bl	8003f04 <HAL_UART_Transmit>

  HAL_UART_Receive_IT(&huart2,str,1);
 8001f7c:	2201      	movs	r2, #1
 8001f7e:	4976      	ldr	r1, [pc, #472]	; (8002158 <main+0x29c>)
 8001f80:	4874      	ldr	r0, [pc, #464]	; (8002154 <main+0x298>)
 8001f82:	f002 f842 	bl	800400a <HAL_UART_Receive_IT>

  HAL_Delay(2000);
 8001f86:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001f8a:	f000 fdd9 	bl	8002b40 <HAL_Delay>
  ready=true;
 8001f8e:	4b73      	ldr	r3, [pc, #460]	; (800215c <main+0x2a0>)
 8001f90:	2201      	movs	r2, #1
 8001f92:	701a      	strb	r2, [r3, #0]

  timeRepeat = HAL_GetTick();
 8001f94:	f000 fdca 	bl	8002b2c <HAL_GetTick>
 8001f98:	4603      	mov	r3, r0
 8001f9a:	4a71      	ldr	r2, [pc, #452]	; (8002160 <main+0x2a4>)
 8001f9c:	6013      	str	r3, [r2, #0]
  int lightTime = 0;
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	613b      	str	r3, [r7, #16]
  uint32_t oldTick = 0;
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	60fb      	str	r3, [r7, #12]
  uint32_t deltaTick = 0;
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	60bb      	str	r3, [r7, #8]
  HAL_UART_Receive_IT(&huart1,str2,1);
 8001faa:	2201      	movs	r2, #1
 8001fac:	496d      	ldr	r1, [pc, #436]	; (8002164 <main+0x2a8>)
 8001fae:	4863      	ldr	r0, [pc, #396]	; (800213c <main+0x280>)
 8001fb0:	f002 f82b 	bl	800400a <HAL_UART_Receive_IT>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 1);
 8001fb4:	2201      	movs	r2, #1
 8001fb6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001fba:	485e      	ldr	r0, [pc, #376]	; (8002134 <main+0x278>)
 8001fbc:	f001 fb10 	bl	80035e0 <HAL_GPIO_WritePin>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if (oldTick!=0) {
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d006      	beq.n	8001fd4 <main+0x118>
		  uint32_t newTick = HAL_GetTick();
 8001fc6:	f000 fdb1 	bl	8002b2c <HAL_GetTick>
 8001fca:	6078      	str	r0, [r7, #4]
		  deltaTick = newTick-oldTick;
 8001fcc:	687a      	ldr	r2, [r7, #4]
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	1ad3      	subs	r3, r2, r3
 8001fd2:	60bb      	str	r3, [r7, #8]
	  }
	  oldTick = HAL_GetTick();
 8001fd4:	f000 fdaa 	bl	8002b2c <HAL_GetTick>
 8001fd8:	60f8      	str	r0, [r7, #12]
	  if ((timeOfStart!=0)&&(deltaTick!=0)) {
 8001fda:	4b63      	ldr	r3, [pc, #396]	; (8002168 <main+0x2ac>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d011      	beq.n	8002006 <main+0x14a>
 8001fe2:	68bb      	ldr	r3, [r7, #8]
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d00e      	beq.n	8002006 <main+0x14a>
		  if (timeOfStart>deltaTick) timeOfStart = timeOfStart - deltaTick;
 8001fe8:	4b5f      	ldr	r3, [pc, #380]	; (8002168 <main+0x2ac>)
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	68ba      	ldr	r2, [r7, #8]
 8001fee:	429a      	cmp	r2, r3
 8001ff0:	d206      	bcs.n	8002000 <main+0x144>
 8001ff2:	4b5d      	ldr	r3, [pc, #372]	; (8002168 <main+0x2ac>)
 8001ff4:	681a      	ldr	r2, [r3, #0]
 8001ff6:	68bb      	ldr	r3, [r7, #8]
 8001ff8:	1ad3      	subs	r3, r2, r3
 8001ffa:	4a5b      	ldr	r2, [pc, #364]	; (8002168 <main+0x2ac>)
 8001ffc:	6013      	str	r3, [r2, #0]
 8001ffe:	e002      	b.n	8002006 <main+0x14a>
		  else timeOfStart = 0;
 8002000:	4b59      	ldr	r3, [pc, #356]	; (8002168 <main+0x2ac>)
 8002002:	2200      	movs	r2, #0
 8002004:	601a      	str	r2, [r3, #0]
	  }
	  if (ready||
 8002006:	4b55      	ldr	r3, [pc, #340]	; (800215c <main+0x2a0>)
 8002008:	781b      	ldrb	r3, [r3, #0]
 800200a:	2b00      	cmp	r3, #0
 800200c:	d13f      	bne.n	800208e <main+0x1d2>
			  ((HAL_GetTick()-timeRepeat)>(timeRepeatTotal*2.5))||
 800200e:	f000 fd8d 	bl	8002b2c <HAL_GetTick>
 8002012:	4602      	mov	r2, r0
 8002014:	4b52      	ldr	r3, [pc, #328]	; (8002160 <main+0x2a4>)
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	1ad3      	subs	r3, r2, r3
 800201a:	4618      	mov	r0, r3
 800201c:	f7fe f9e0 	bl	80003e0 <__aeabi_ui2d>
 8002020:	4604      	mov	r4, r0
 8002022:	460d      	mov	r5, r1
 8002024:	4b51      	ldr	r3, [pc, #324]	; (800216c <main+0x2b0>)
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	4618      	mov	r0, r3
 800202a:	f7fe f9d9 	bl	80003e0 <__aeabi_ui2d>
 800202e:	f04f 0200 	mov.w	r2, #0
 8002032:	4b4f      	ldr	r3, [pc, #316]	; (8002170 <main+0x2b4>)
 8002034:	f7fe fa4e 	bl	80004d4 <__aeabi_dmul>
 8002038:	4602      	mov	r2, r0
 800203a:	460b      	mov	r3, r1
	  if (ready||
 800203c:	4620      	mov	r0, r4
 800203e:	4629      	mov	r1, r5
 8002040:	f7fe fcd8 	bl	80009f4 <__aeabi_dcmpgt>
 8002044:	4603      	mov	r3, r0
 8002046:	2b00      	cmp	r3, #0
 8002048:	d121      	bne.n	800208e <main+0x1d2>
			  (((HAL_GetTick()-timeRepeat)>(10*1000))&&(step==0))||
 800204a:	f000 fd6f 	bl	8002b2c <HAL_GetTick>
 800204e:	4602      	mov	r2, r0
 8002050:	4b43      	ldr	r3, [pc, #268]	; (8002160 <main+0x2a4>)
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	1ad3      	subs	r3, r2, r3
			  ((HAL_GetTick()-timeRepeat)>(timeRepeatTotal*2.5))||
 8002056:	f242 7210 	movw	r2, #10000	; 0x2710
 800205a:	4293      	cmp	r3, r2
 800205c:	d903      	bls.n	8002066 <main+0x1aa>
			  (((HAL_GetTick()-timeRepeat)>(10*1000))&&(step==0))||
 800205e:	4b45      	ldr	r3, [pc, #276]	; (8002174 <main+0x2b8>)
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	2b00      	cmp	r3, #0
 8002064:	d013      	beq.n	800208e <main+0x1d2>
			  ((timeOfStart<(10*1000))&&(needStart||needOpen||needClose))) {
 8002066:	4b40      	ldr	r3, [pc, #256]	; (8002168 <main+0x2ac>)
 8002068:	681b      	ldr	r3, [r3, #0]
			  (((HAL_GetTick()-timeRepeat)>(10*1000))&&(step==0))||
 800206a:	f242 720f 	movw	r2, #9999	; 0x270f
 800206e:	4293      	cmp	r3, r2
 8002070:	f200 812c 	bhi.w	80022cc <main+0x410>
			  ((timeOfStart<(10*1000))&&(needStart||needOpen||needClose))) {
 8002074:	4b40      	ldr	r3, [pc, #256]	; (8002178 <main+0x2bc>)
 8002076:	781b      	ldrb	r3, [r3, #0]
 8002078:	2b00      	cmp	r3, #0
 800207a:	d108      	bne.n	800208e <main+0x1d2>
 800207c:	4b3f      	ldr	r3, [pc, #252]	; (800217c <main+0x2c0>)
 800207e:	781b      	ldrb	r3, [r3, #0]
 8002080:	2b00      	cmp	r3, #0
 8002082:	d104      	bne.n	800208e <main+0x1d2>
 8002084:	4b3e      	ldr	r3, [pc, #248]	; (8002180 <main+0x2c4>)
 8002086:	781b      	ldrb	r3, [r3, #0]
 8002088:	2b00      	cmp	r3, #0
 800208a:	f000 811f 	beq.w	80022cc <main+0x410>
		  txATcommand();
 800208e:	f7fe fd9d 	bl	8000bcc <txATcommand>
		  if ((((HAL_GetTick()-timeRepeat)>timeRepeatTotal)&&(step==12))||
 8002092:	f000 fd4b 	bl	8002b2c <HAL_GetTick>
 8002096:	4602      	mov	r2, r0
 8002098:	4b31      	ldr	r3, [pc, #196]	; (8002160 <main+0x2a4>)
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	1ad2      	subs	r2, r2, r3
 800209e:	4b33      	ldr	r3, [pc, #204]	; (800216c <main+0x2b0>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	429a      	cmp	r2, r3
 80020a4:	d903      	bls.n	80020ae <main+0x1f2>
 80020a6:	4b33      	ldr	r3, [pc, #204]	; (8002174 <main+0x2b8>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	2b0c      	cmp	r3, #12
 80020ac:	d02b      	beq.n	8002106 <main+0x24a>
				  ((HAL_GetTick()-timeRepeat)>(timeRepeatTotal*2.5))||
 80020ae:	f000 fd3d 	bl	8002b2c <HAL_GetTick>
 80020b2:	4602      	mov	r2, r0
 80020b4:	4b2a      	ldr	r3, [pc, #168]	; (8002160 <main+0x2a4>)
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	1ad3      	subs	r3, r2, r3
 80020ba:	4618      	mov	r0, r3
 80020bc:	f7fe f990 	bl	80003e0 <__aeabi_ui2d>
 80020c0:	4604      	mov	r4, r0
 80020c2:	460d      	mov	r5, r1
 80020c4:	4b29      	ldr	r3, [pc, #164]	; (800216c <main+0x2b0>)
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	4618      	mov	r0, r3
 80020ca:	f7fe f989 	bl	80003e0 <__aeabi_ui2d>
 80020ce:	f04f 0200 	mov.w	r2, #0
 80020d2:	4b27      	ldr	r3, [pc, #156]	; (8002170 <main+0x2b4>)
 80020d4:	f7fe f9fe 	bl	80004d4 <__aeabi_dmul>
 80020d8:	4602      	mov	r2, r0
 80020da:	460b      	mov	r3, r1
		  if ((((HAL_GetTick()-timeRepeat)>timeRepeatTotal)&&(step==12))||
 80020dc:	4620      	mov	r0, r4
 80020de:	4629      	mov	r1, r5
 80020e0:	f7fe fc88 	bl	80009f4 <__aeabi_dcmpgt>
 80020e4:	4603      	mov	r3, r0
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d10d      	bne.n	8002106 <main+0x24a>
				  (((HAL_GetTick()-timeRepeat)>(10*1000))&&(step==0))){
 80020ea:	f000 fd1f 	bl	8002b2c <HAL_GetTick>
 80020ee:	4602      	mov	r2, r0
 80020f0:	4b1b      	ldr	r3, [pc, #108]	; (8002160 <main+0x2a4>)
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	1ad3      	subs	r3, r2, r3
				  ((HAL_GetTick()-timeRepeat)>(timeRepeatTotal*2.5))||
 80020f6:	f242 7210 	movw	r2, #10000	; 0x2710
 80020fa:	4293      	cmp	r3, r2
 80020fc:	d942      	bls.n	8002184 <main+0x2c8>
				  (((HAL_GetTick()-timeRepeat)>(10*1000))&&(step==0))){
 80020fe:	4b1d      	ldr	r3, [pc, #116]	; (8002174 <main+0x2b8>)
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	2b00      	cmp	r3, #0
 8002104:	d13e      	bne.n	8002184 <main+0x2c8>
			  step = 0;
 8002106:	4b1b      	ldr	r3, [pc, #108]	; (8002174 <main+0x2b8>)
 8002108:	2200      	movs	r2, #0
 800210a:	601a      	str	r2, [r3, #0]
			  timeRepeat = HAL_GetTick();
 800210c:	f000 fd0e 	bl	8002b2c <HAL_GetTick>
 8002110:	4603      	mov	r3, r0
 8002112:	4a13      	ldr	r2, [pc, #76]	; (8002160 <main+0x2a4>)
 8002114:	6013      	str	r3, [r2, #0]
			  txATcommand();
 8002116:	f7fe fd59 	bl	8000bcc <txATcommand>
 800211a:	e0bd      	b.n	8002298 <main+0x3dc>
 800211c:	2000014c 	.word	0x2000014c
 8002120:	20000150 	.word	0x20000150
 8002124:	20000154 	.word	0x20000154
 8002128:	20000158 	.word	0x20000158
 800212c:	08005d58 	.word	0x08005d58
 8002130:	20000990 	.word	0x20000990
 8002134:	40011000 	.word	0x40011000
 8002138:	08005d68 	.word	0x08005d68
 800213c:	200001f8 	.word	0x200001f8
 8002140:	08005d70 	.word	0x08005d70
 8002144:	08005d8c 	.word	0x08005d8c
 8002148:	08005da8 	.word	0x08005da8
 800214c:	08005dc0 	.word	0x08005dc0
 8002150:	08005dd4 	.word	0x08005dd4
 8002154:	20000240 	.word	0x20000240
 8002158:	20000000 	.word	0x20000000
 800215c:	200009d8 	.word	0x200009d8
 8002160:	200001f0 	.word	0x200001f0
 8002164:	20000004 	.word	0x20000004
 8002168:	200009e8 	.word	0x200009e8
 800216c:	20000160 	.word	0x20000160
 8002170:	40040000 	.word	0x40040000
 8002174:	200009d0 	.word	0x200009d0
 8002178:	200009e4 	.word	0x200009e4
 800217c:	200009e5 	.word	0x200009e5
 8002180:	200009e6 	.word	0x200009e6
		  }
		  else if ((timeOfStart<(10*1000))&&(needStart||needOpen||needClose)) {
 8002184:	4b6d      	ldr	r3, [pc, #436]	; (800233c <main+0x480>)
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f242 720f 	movw	r2, #9999	; 0x270f
 800218c:	4293      	cmp	r3, r2
 800218e:	d87a      	bhi.n	8002286 <main+0x3ca>
 8002190:	4b6b      	ldr	r3, [pc, #428]	; (8002340 <main+0x484>)
 8002192:	781b      	ldrb	r3, [r3, #0]
 8002194:	2b00      	cmp	r3, #0
 8002196:	d107      	bne.n	80021a8 <main+0x2ec>
 8002198:	4b6a      	ldr	r3, [pc, #424]	; (8002344 <main+0x488>)
 800219a:	781b      	ldrb	r3, [r3, #0]
 800219c:	2b00      	cmp	r3, #0
 800219e:	d103      	bne.n	80021a8 <main+0x2ec>
 80021a0:	4b69      	ldr	r3, [pc, #420]	; (8002348 <main+0x48c>)
 80021a2:	781b      	ldrb	r3, [r3, #0]
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d06e      	beq.n	8002286 <main+0x3ca>
			  if (needStart) {
 80021a8:	4b65      	ldr	r3, [pc, #404]	; (8002340 <main+0x484>)
 80021aa:	781b      	ldrb	r3, [r3, #0]
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d018      	beq.n	80021e2 <main+0x326>
				  buttStart();
 80021b0:	f7fe fc78 	bl	8000aa4 <buttStart>
				memset(smsText, 0, strlen(smsText));
 80021b4:	4865      	ldr	r0, [pc, #404]	; (800234c <main+0x490>)
 80021b6:	f7fd ffc9 	bl	800014c <strlen>
 80021ba:	4603      	mov	r3, r0
 80021bc:	461a      	mov	r2, r3
 80021be:	2100      	movs	r1, #0
 80021c0:	4862      	ldr	r0, [pc, #392]	; (800234c <main+0x490>)
 80021c2:	f002 fe47 	bl	8004e54 <memset>
				strcpy(smsText, (uint8_t*)"%D0%97%D0%B0%D0%BF%D1%83%D1%81%D0%BA");//Запуск
 80021c6:	4a61      	ldr	r2, [pc, #388]	; (800234c <main+0x490>)
 80021c8:	4b61      	ldr	r3, [pc, #388]	; (8002350 <main+0x494>)
 80021ca:	4614      	mov	r4, r2
 80021cc:	461d      	mov	r5, r3
 80021ce:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80021d0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80021d2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80021d4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80021d6:	e895 0003 	ldmia.w	r5, {r0, r1}
 80021da:	6020      	str	r0, [r4, #0]
 80021dc:	3404      	adds	r4, #4
 80021de:	7021      	strb	r1, [r4, #0]
 80021e0:	e03c      	b.n	800225c <main+0x3a0>
			  }
			  else if (needOpen) {
 80021e2:	4b58      	ldr	r3, [pc, #352]	; (8002344 <main+0x488>)
 80021e4:	781b      	ldrb	r3, [r3, #0]
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d01a      	beq.n	8002220 <main+0x364>
				  buttOpen();
 80021ea:	f7fe fc7f 	bl	8000aec <buttOpen>
				memset(smsText, 0, strlen(smsText));
 80021ee:	4857      	ldr	r0, [pc, #348]	; (800234c <main+0x490>)
 80021f0:	f7fd ffac 	bl	800014c <strlen>
 80021f4:	4603      	mov	r3, r0
 80021f6:	461a      	mov	r2, r3
 80021f8:	2100      	movs	r1, #0
 80021fa:	4854      	ldr	r0, [pc, #336]	; (800234c <main+0x490>)
 80021fc:	f002 fe2a 	bl	8004e54 <memset>
				strcpy(smsText, (uint8_t*)"%D0%9E%D1%82%D0%BA%D1%80%D1%8B%D1%82%D1%8C");//Открыть
 8002200:	4a52      	ldr	r2, [pc, #328]	; (800234c <main+0x490>)
 8002202:	4b54      	ldr	r3, [pc, #336]	; (8002354 <main+0x498>)
 8002204:	4614      	mov	r4, r2
 8002206:	461d      	mov	r5, r3
 8002208:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800220a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800220c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800220e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002210:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002214:	c403      	stmia	r4!, {r0, r1}
 8002216:	8022      	strh	r2, [r4, #0]
 8002218:	3402      	adds	r4, #2
 800221a:	0c13      	lsrs	r3, r2, #16
 800221c:	7023      	strb	r3, [r4, #0]
 800221e:	e01d      	b.n	800225c <main+0x3a0>
			  }
			  else if (needClose) {
 8002220:	4b49      	ldr	r3, [pc, #292]	; (8002348 <main+0x48c>)
 8002222:	781b      	ldrb	r3, [r3, #0]
 8002224:	2b00      	cmp	r3, #0
 8002226:	d019      	beq.n	800225c <main+0x3a0>
				  buttClose();
 8002228:	f7fe fc98 	bl	8000b5c <buttClose>
				memset(smsText, 0, strlen(smsText));
 800222c:	4847      	ldr	r0, [pc, #284]	; (800234c <main+0x490>)
 800222e:	f7fd ff8d 	bl	800014c <strlen>
 8002232:	4603      	mov	r3, r0
 8002234:	461a      	mov	r2, r3
 8002236:	2100      	movs	r1, #0
 8002238:	4844      	ldr	r0, [pc, #272]	; (800234c <main+0x490>)
 800223a:	f002 fe0b 	bl	8004e54 <memset>
				strcpy(smsText, (uint8_t*)"%D0%97%D0%B0%D0%BA%D1%80%D1%8B%D1%82%D1%8C");//Закрыть
 800223e:	4a43      	ldr	r2, [pc, #268]	; (800234c <main+0x490>)
 8002240:	4b45      	ldr	r3, [pc, #276]	; (8002358 <main+0x49c>)
 8002242:	4614      	mov	r4, r2
 8002244:	461d      	mov	r5, r3
 8002246:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002248:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800224a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800224c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800224e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002252:	c403      	stmia	r4!, {r0, r1}
 8002254:	8022      	strh	r2, [r4, #0]
 8002256:	3402      	adds	r4, #2
 8002258:	0c13      	lsrs	r3, r2, #16
 800225a:	7023      	strb	r3, [r4, #0]
			  }
			  step = 0;
 800225c:	4b3f      	ldr	r3, [pc, #252]	; (800235c <main+0x4a0>)
 800225e:	2200      	movs	r2, #0
 8002260:	601a      	str	r2, [r3, #0]
			  timeOfStart = 0;
 8002262:	4b36      	ldr	r3, [pc, #216]	; (800233c <main+0x480>)
 8002264:	2200      	movs	r2, #0
 8002266:	601a      	str	r2, [r3, #0]
			  needStart = false; needOpen = false; needClose = false; delayAnsw = true;
 8002268:	4b35      	ldr	r3, [pc, #212]	; (8002340 <main+0x484>)
 800226a:	2200      	movs	r2, #0
 800226c:	701a      	strb	r2, [r3, #0]
 800226e:	4b35      	ldr	r3, [pc, #212]	; (8002344 <main+0x488>)
 8002270:	2200      	movs	r2, #0
 8002272:	701a      	strb	r2, [r3, #0]
 8002274:	4b34      	ldr	r3, [pc, #208]	; (8002348 <main+0x48c>)
 8002276:	2200      	movs	r2, #0
 8002278:	701a      	strb	r2, [r3, #0]
 800227a:	4b39      	ldr	r3, [pc, #228]	; (8002360 <main+0x4a4>)
 800227c:	2201      	movs	r2, #1
 800227e:	701a      	strb	r2, [r3, #0]
			  txATcommand();
 8002280:	f7fe fca4 	bl	8000bcc <txATcommand>
 8002284:	e008      	b.n	8002298 <main+0x3dc>
		  }
		  else if (step!=12) timeRepeat = HAL_GetTick();
 8002286:	4b35      	ldr	r3, [pc, #212]	; (800235c <main+0x4a0>)
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	2b0c      	cmp	r3, #12
 800228c:	d004      	beq.n	8002298 <main+0x3dc>
 800228e:	f000 fc4d 	bl	8002b2c <HAL_GetTick>
 8002292:	4603      	mov	r3, r0
 8002294:	4a33      	ldr	r2, [pc, #204]	; (8002364 <main+0x4a8>)
 8002296:	6013      	str	r3, [r2, #0]
		  if ((HAL_GetTick()-lightTime)>(30*1000)) {
 8002298:	f000 fc48 	bl	8002b2c <HAL_GetTick>
 800229c:	4602      	mov	r2, r0
 800229e:	693b      	ldr	r3, [r7, #16]
 80022a0:	1ad3      	subs	r3, r2, r3
 80022a2:	f247 5230 	movw	r2, #30000	; 0x7530
 80022a6:	4293      	cmp	r3, r2
 80022a8:	d910      	bls.n	80022cc <main+0x410>
			  lightTime = HAL_GetTick();
 80022aa:	f000 fc3f 	bl	8002b2c <HAL_GetTick>
 80022ae:	4603      	mov	r3, r0
 80022b0:	613b      	str	r3, [r7, #16]
			  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 80022b2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80022b6:	482c      	ldr	r0, [pc, #176]	; (8002368 <main+0x4ac>)
 80022b8:	f001 f9aa 	bl	8003610 <HAL_GPIO_TogglePin>
			  HAL_Delay(100);
 80022bc:	2064      	movs	r0, #100	; 0x64
 80022be:	f000 fc3f 	bl	8002b40 <HAL_Delay>
			  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 80022c2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80022c6:	4828      	ldr	r0, [pc, #160]	; (8002368 <main+0x4ac>)
 80022c8:	f001 f9a2 	bl	8003610 <HAL_GPIO_TogglePin>
		  }
	  }
	  if (strstr(modemString2, "\r\n")) {
 80022cc:	4927      	ldr	r1, [pc, #156]	; (800236c <main+0x4b0>)
 80022ce:	4828      	ldr	r0, [pc, #160]	; (8002370 <main+0x4b4>)
 80022d0:	f002 ff1d 	bl	800510e <strstr>
 80022d4:	4603      	mov	r3, r0
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d023      	beq.n	8002322 <main+0x466>
			SSD1306_Puts(oldModem2, &Font_7x10, SSD1306_COLOR_WHITE);
			SSD1306_GotoXY(0, 40);
			SSD1306_Puts(oldModem, &Font_7x10, SSD1306_COLOR_WHITE);
			SSD1306_UpdateScreen();
		}*/
		if (rxNew) {
 80022da:	4b26      	ldr	r3, [pc, #152]	; (8002374 <main+0x4b8>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d01f      	beq.n	8002322 <main+0x466>
			if (strstr(oldModem, "+CMTI")) {
 80022e2:	4925      	ldr	r1, [pc, #148]	; (8002378 <main+0x4bc>)
 80022e4:	4825      	ldr	r0, [pc, #148]	; (800237c <main+0x4c0>)
 80022e6:	f002 ff12 	bl	800510e <strstr>
 80022ea:	4603      	mov	r3, r0
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d00a      	beq.n	8002306 <main+0x44a>
				stopStep = step;
 80022f0:	4b1a      	ldr	r3, [pc, #104]	; (800235c <main+0x4a0>)
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	4a22      	ldr	r2, [pc, #136]	; (8002380 <main+0x4c4>)
 80022f6:	6013      	str	r3, [r2, #0]
				step = 12;
 80022f8:	4b18      	ldr	r3, [pc, #96]	; (800235c <main+0x4a0>)
 80022fa:	220c      	movs	r2, #12
 80022fc:	601a      	str	r2, [r3, #0]
				rxATcommand(oldModem);
 80022fe:	481f      	ldr	r0, [pc, #124]	; (800237c <main+0x4c0>)
 8002300:	f7fe fe9e 	bl	8001040 <rxATcommand>
 8002304:	e00a      	b.n	800231c <main+0x460>
			}
			else if ((step==1))
 8002306:	4b15      	ldr	r3, [pc, #84]	; (800235c <main+0x4a0>)
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	2b01      	cmp	r3, #1
 800230c:	d103      	bne.n	8002316 <main+0x45a>
				rxATcommand(oldModem3);
 800230e:	481d      	ldr	r0, [pc, #116]	; (8002384 <main+0x4c8>)
 8002310:	f7fe fe96 	bl	8001040 <rxATcommand>
 8002314:	e002      	b.n	800231c <main+0x460>
			else rxATcommand(oldModem);
 8002316:	4819      	ldr	r0, [pc, #100]	; (800237c <main+0x4c0>)
 8002318:	f7fe fe92 	bl	8001040 <rxATcommand>
			rxNew = false;
 800231c:	4b15      	ldr	r3, [pc, #84]	; (8002374 <main+0x4b8>)
 800231e:	2200      	movs	r2, #0
 8002320:	601a      	str	r2, [r3, #0]
		}
	  }
	 if (step==12) HAL_Delay(1000);
 8002322:	4b0e      	ldr	r3, [pc, #56]	; (800235c <main+0x4a0>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	2b0c      	cmp	r3, #12
 8002328:	d104      	bne.n	8002334 <main+0x478>
 800232a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800232e:	f000 fc07 	bl	8002b40 <HAL_Delay>
 8002332:	e645      	b.n	8001fc0 <main+0x104>
	 else HAL_Delay(250);
 8002334:	20fa      	movs	r0, #250	; 0xfa
 8002336:	f000 fc03 	bl	8002b40 <HAL_Delay>
	  if (oldTick!=0) {
 800233a:	e641      	b.n	8001fc0 <main+0x104>
 800233c:	200009e8 	.word	0x200009e8
 8002340:	200009e4 	.word	0x200009e4
 8002344:	200009e5 	.word	0x200009e5
 8002348:	200009e6 	.word	0x200009e6
 800234c:	20000008 	.word	0x20000008
 8002350:	08005b50 	.word	0x08005b50
 8002354:	08005bd0 	.word	0x08005bd0
 8002358:	08005c48 	.word	0x08005c48
 800235c:	200009d0 	.word	0x200009d0
 8002360:	200009e7 	.word	0x200009e7
 8002364:	200001f0 	.word	0x200001f0
 8002368:	40011000 	.word	0x40011000
 800236c:	0800591c 	.word	0x0800591c
 8002370:	20000398 	.word	0x20000398
 8002374:	200009d4 	.word	0x200009d4
 8002378:	08005ddc 	.word	0x08005ddc
 800237c:	20000598 	.word	0x20000598
 8002380:	200001f4 	.word	0x200001f4
 8002384:	20000790 	.word	0x20000790

08002388 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	b090      	sub	sp, #64	; 0x40
 800238c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800238e:	f107 0318 	add.w	r3, r7, #24
 8002392:	2228      	movs	r2, #40	; 0x28
 8002394:	2100      	movs	r1, #0
 8002396:	4618      	mov	r0, r3
 8002398:	f002 fd5c 	bl	8004e54 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800239c:	1d3b      	adds	r3, r7, #4
 800239e:	2200      	movs	r2, #0
 80023a0:	601a      	str	r2, [r3, #0]
 80023a2:	605a      	str	r2, [r3, #4]
 80023a4:	609a      	str	r2, [r3, #8]
 80023a6:	60da      	str	r2, [r3, #12]
 80023a8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80023aa:	2301      	movs	r3, #1
 80023ac:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80023ae:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80023b2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80023b4:	2300      	movs	r3, #0
 80023b6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80023b8:	2301      	movs	r3, #1
 80023ba:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80023bc:	2302      	movs	r3, #2
 80023be:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80023c0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80023c4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80023c6:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80023ca:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80023cc:	f107 0318 	add.w	r3, r7, #24
 80023d0:	4618      	mov	r0, r3
 80023d2:	f001 f937 	bl	8003644 <HAL_RCC_OscConfig>
 80023d6:	4603      	mov	r3, r0
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d001      	beq.n	80023e0 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80023dc:	f000 f912 	bl	8002604 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80023e0:	230f      	movs	r3, #15
 80023e2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80023e4:	2302      	movs	r3, #2
 80023e6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80023e8:	2300      	movs	r3, #0
 80023ea:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80023ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80023f0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80023f2:	2300      	movs	r3, #0
 80023f4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80023f6:	1d3b      	adds	r3, r7, #4
 80023f8:	2102      	movs	r1, #2
 80023fa:	4618      	mov	r0, r3
 80023fc:	f001 fba4 	bl	8003b48 <HAL_RCC_ClockConfig>
 8002400:	4603      	mov	r3, r0
 8002402:	2b00      	cmp	r3, #0
 8002404:	d001      	beq.n	800240a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8002406:	f000 f8fd 	bl	8002604 <Error_Handler>
  }
}
 800240a:	bf00      	nop
 800240c:	3740      	adds	r7, #64	; 0x40
 800240e:	46bd      	mov	sp, r7
 8002410:	bd80      	pop	{r7, pc}
	...

08002414 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002418:	4b11      	ldr	r3, [pc, #68]	; (8002460 <MX_USART1_UART_Init+0x4c>)
 800241a:	4a12      	ldr	r2, [pc, #72]	; (8002464 <MX_USART1_UART_Init+0x50>)
 800241c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800241e:	4b10      	ldr	r3, [pc, #64]	; (8002460 <MX_USART1_UART_Init+0x4c>)
 8002420:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002424:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002426:	4b0e      	ldr	r3, [pc, #56]	; (8002460 <MX_USART1_UART_Init+0x4c>)
 8002428:	2200      	movs	r2, #0
 800242a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800242c:	4b0c      	ldr	r3, [pc, #48]	; (8002460 <MX_USART1_UART_Init+0x4c>)
 800242e:	2200      	movs	r2, #0
 8002430:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002432:	4b0b      	ldr	r3, [pc, #44]	; (8002460 <MX_USART1_UART_Init+0x4c>)
 8002434:	2200      	movs	r2, #0
 8002436:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002438:	4b09      	ldr	r3, [pc, #36]	; (8002460 <MX_USART1_UART_Init+0x4c>)
 800243a:	220c      	movs	r2, #12
 800243c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800243e:	4b08      	ldr	r3, [pc, #32]	; (8002460 <MX_USART1_UART_Init+0x4c>)
 8002440:	2200      	movs	r2, #0
 8002442:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002444:	4b06      	ldr	r3, [pc, #24]	; (8002460 <MX_USART1_UART_Init+0x4c>)
 8002446:	2200      	movs	r2, #0
 8002448:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800244a:	4805      	ldr	r0, [pc, #20]	; (8002460 <MX_USART1_UART_Init+0x4c>)
 800244c:	f001 fd0a 	bl	8003e64 <HAL_UART_Init>
 8002450:	4603      	mov	r3, r0
 8002452:	2b00      	cmp	r3, #0
 8002454:	d001      	beq.n	800245a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002456:	f000 f8d5 	bl	8002604 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800245a:	bf00      	nop
 800245c:	bd80      	pop	{r7, pc}
 800245e:	bf00      	nop
 8002460:	200001f8 	.word	0x200001f8
 8002464:	40013800 	.word	0x40013800

08002468 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800246c:	4b11      	ldr	r3, [pc, #68]	; (80024b4 <MX_USART2_UART_Init+0x4c>)
 800246e:	4a12      	ldr	r2, [pc, #72]	; (80024b8 <MX_USART2_UART_Init+0x50>)
 8002470:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8002472:	4b10      	ldr	r3, [pc, #64]	; (80024b4 <MX_USART2_UART_Init+0x4c>)
 8002474:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002478:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800247a:	4b0e      	ldr	r3, [pc, #56]	; (80024b4 <MX_USART2_UART_Init+0x4c>)
 800247c:	2200      	movs	r2, #0
 800247e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002480:	4b0c      	ldr	r3, [pc, #48]	; (80024b4 <MX_USART2_UART_Init+0x4c>)
 8002482:	2200      	movs	r2, #0
 8002484:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002486:	4b0b      	ldr	r3, [pc, #44]	; (80024b4 <MX_USART2_UART_Init+0x4c>)
 8002488:	2200      	movs	r2, #0
 800248a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800248c:	4b09      	ldr	r3, [pc, #36]	; (80024b4 <MX_USART2_UART_Init+0x4c>)
 800248e:	220c      	movs	r2, #12
 8002490:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002492:	4b08      	ldr	r3, [pc, #32]	; (80024b4 <MX_USART2_UART_Init+0x4c>)
 8002494:	2200      	movs	r2, #0
 8002496:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002498:	4b06      	ldr	r3, [pc, #24]	; (80024b4 <MX_USART2_UART_Init+0x4c>)
 800249a:	2200      	movs	r2, #0
 800249c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800249e:	4805      	ldr	r0, [pc, #20]	; (80024b4 <MX_USART2_UART_Init+0x4c>)
 80024a0:	f001 fce0 	bl	8003e64 <HAL_UART_Init>
 80024a4:	4603      	mov	r3, r0
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d001      	beq.n	80024ae <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80024aa:	f000 f8ab 	bl	8002604 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80024ae:	bf00      	nop
 80024b0:	bd80      	pop	{r7, pc}
 80024b2:	bf00      	nop
 80024b4:	20000240 	.word	0x20000240
 80024b8:	40004400 	.word	0x40004400

080024bc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	b082      	sub	sp, #8
 80024c0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80024c2:	4b18      	ldr	r3, [pc, #96]	; (8002524 <MX_DMA_Init+0x68>)
 80024c4:	695b      	ldr	r3, [r3, #20]
 80024c6:	4a17      	ldr	r2, [pc, #92]	; (8002524 <MX_DMA_Init+0x68>)
 80024c8:	f043 0301 	orr.w	r3, r3, #1
 80024cc:	6153      	str	r3, [r2, #20]
 80024ce:	4b15      	ldr	r3, [pc, #84]	; (8002524 <MX_DMA_Init+0x68>)
 80024d0:	695b      	ldr	r3, [r3, #20]
 80024d2:	f003 0301 	and.w	r3, r3, #1
 80024d6:	607b      	str	r3, [r7, #4]
 80024d8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 80024da:	2200      	movs	r2, #0
 80024dc:	2100      	movs	r1, #0
 80024de:	200e      	movs	r0, #14
 80024e0:	f000 fc29 	bl	8002d36 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 80024e4:	200e      	movs	r0, #14
 80024e6:	f000 fc42 	bl	8002d6e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 80024ea:	2200      	movs	r2, #0
 80024ec:	2100      	movs	r1, #0
 80024ee:	200f      	movs	r0, #15
 80024f0:	f000 fc21 	bl	8002d36 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 80024f4:	200f      	movs	r0, #15
 80024f6:	f000 fc3a 	bl	8002d6e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 80024fa:	2200      	movs	r2, #0
 80024fc:	2100      	movs	r1, #0
 80024fe:	2010      	movs	r0, #16
 8002500:	f000 fc19 	bl	8002d36 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8002504:	2010      	movs	r0, #16
 8002506:	f000 fc32 	bl	8002d6e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 800250a:	2200      	movs	r2, #0
 800250c:	2100      	movs	r1, #0
 800250e:	2011      	movs	r0, #17
 8002510:	f000 fc11 	bl	8002d36 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8002514:	2011      	movs	r0, #17
 8002516:	f000 fc2a 	bl	8002d6e <HAL_NVIC_EnableIRQ>

}
 800251a:	bf00      	nop
 800251c:	3708      	adds	r7, #8
 800251e:	46bd      	mov	sp, r7
 8002520:	bd80      	pop	{r7, pc}
 8002522:	bf00      	nop
 8002524:	40021000 	.word	0x40021000

08002528 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	b088      	sub	sp, #32
 800252c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800252e:	f107 0310 	add.w	r3, r7, #16
 8002532:	2200      	movs	r2, #0
 8002534:	601a      	str	r2, [r3, #0]
 8002536:	605a      	str	r2, [r3, #4]
 8002538:	609a      	str	r2, [r3, #8]
 800253a:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800253c:	4b2e      	ldr	r3, [pc, #184]	; (80025f8 <MX_GPIO_Init+0xd0>)
 800253e:	699b      	ldr	r3, [r3, #24]
 8002540:	4a2d      	ldr	r2, [pc, #180]	; (80025f8 <MX_GPIO_Init+0xd0>)
 8002542:	f043 0310 	orr.w	r3, r3, #16
 8002546:	6193      	str	r3, [r2, #24]
 8002548:	4b2b      	ldr	r3, [pc, #172]	; (80025f8 <MX_GPIO_Init+0xd0>)
 800254a:	699b      	ldr	r3, [r3, #24]
 800254c:	f003 0310 	and.w	r3, r3, #16
 8002550:	60fb      	str	r3, [r7, #12]
 8002552:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002554:	4b28      	ldr	r3, [pc, #160]	; (80025f8 <MX_GPIO_Init+0xd0>)
 8002556:	699b      	ldr	r3, [r3, #24]
 8002558:	4a27      	ldr	r2, [pc, #156]	; (80025f8 <MX_GPIO_Init+0xd0>)
 800255a:	f043 0320 	orr.w	r3, r3, #32
 800255e:	6193      	str	r3, [r2, #24]
 8002560:	4b25      	ldr	r3, [pc, #148]	; (80025f8 <MX_GPIO_Init+0xd0>)
 8002562:	699b      	ldr	r3, [r3, #24]
 8002564:	f003 0320 	and.w	r3, r3, #32
 8002568:	60bb      	str	r3, [r7, #8]
 800256a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800256c:	4b22      	ldr	r3, [pc, #136]	; (80025f8 <MX_GPIO_Init+0xd0>)
 800256e:	699b      	ldr	r3, [r3, #24]
 8002570:	4a21      	ldr	r2, [pc, #132]	; (80025f8 <MX_GPIO_Init+0xd0>)
 8002572:	f043 0304 	orr.w	r3, r3, #4
 8002576:	6193      	str	r3, [r2, #24]
 8002578:	4b1f      	ldr	r3, [pc, #124]	; (80025f8 <MX_GPIO_Init+0xd0>)
 800257a:	699b      	ldr	r3, [r3, #24]
 800257c:	f003 0304 	and.w	r3, r3, #4
 8002580:	607b      	str	r3, [r7, #4]
 8002582:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002584:	4b1c      	ldr	r3, [pc, #112]	; (80025f8 <MX_GPIO_Init+0xd0>)
 8002586:	699b      	ldr	r3, [r3, #24]
 8002588:	4a1b      	ldr	r2, [pc, #108]	; (80025f8 <MX_GPIO_Init+0xd0>)
 800258a:	f043 0308 	orr.w	r3, r3, #8
 800258e:	6193      	str	r3, [r2, #24]
 8002590:	4b19      	ldr	r3, [pc, #100]	; (80025f8 <MX_GPIO_Init+0xd0>)
 8002592:	699b      	ldr	r3, [r3, #24]
 8002594:	f003 0308 	and.w	r3, r3, #8
 8002598:	603b      	str	r3, [r7, #0]
 800259a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800259c:	2200      	movs	r2, #0
 800259e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80025a2:	4816      	ldr	r0, [pc, #88]	; (80025fc <MX_GPIO_Init+0xd4>)
 80025a4:	f001 f81c 	bl	80035e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_13, GPIO_PIN_RESET);
 80025a8:	2200      	movs	r2, #0
 80025aa:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 80025ae:	4814      	ldr	r0, [pc, #80]	; (8002600 <MX_GPIO_Init+0xd8>)
 80025b0:	f001 f816 	bl	80035e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80025b4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80025b8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80025ba:	2301      	movs	r3, #1
 80025bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80025be:	2302      	movs	r3, #2
 80025c0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80025c2:	2303      	movs	r3, #3
 80025c4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80025c6:	f107 0310 	add.w	r3, r7, #16
 80025ca:	4619      	mov	r1, r3
 80025cc:	480b      	ldr	r0, [pc, #44]	; (80025fc <MX_GPIO_Init+0xd4>)
 80025ce:	f000 fe8b 	bl	80032e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 80025d2:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80025d6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80025d8:	2301      	movs	r3, #1
 80025da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80025dc:	2302      	movs	r3, #2
 80025de:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80025e0:	2303      	movs	r3, #3
 80025e2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025e4:	f107 0310 	add.w	r3, r7, #16
 80025e8:	4619      	mov	r1, r3
 80025ea:	4805      	ldr	r0, [pc, #20]	; (8002600 <MX_GPIO_Init+0xd8>)
 80025ec:	f000 fe7c 	bl	80032e8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80025f0:	bf00      	nop
 80025f2:	3720      	adds	r7, #32
 80025f4:	46bd      	mov	sp, r7
 80025f6:	bd80      	pop	{r7, pc}
 80025f8:	40021000 	.word	0x40021000
 80025fc:	40011000 	.word	0x40011000
 8002600:	40010c00 	.word	0x40010c00

08002604 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002604:	b480      	push	{r7}
 8002606:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002608:	b672      	cpsid	i
}
 800260a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800260c:	e7fe      	b.n	800260c <Error_Handler+0x8>
	...

08002610 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002610:	b480      	push	{r7}
 8002612:	b085      	sub	sp, #20
 8002614:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002616:	4b15      	ldr	r3, [pc, #84]	; (800266c <HAL_MspInit+0x5c>)
 8002618:	699b      	ldr	r3, [r3, #24]
 800261a:	4a14      	ldr	r2, [pc, #80]	; (800266c <HAL_MspInit+0x5c>)
 800261c:	f043 0301 	orr.w	r3, r3, #1
 8002620:	6193      	str	r3, [r2, #24]
 8002622:	4b12      	ldr	r3, [pc, #72]	; (800266c <HAL_MspInit+0x5c>)
 8002624:	699b      	ldr	r3, [r3, #24]
 8002626:	f003 0301 	and.w	r3, r3, #1
 800262a:	60bb      	str	r3, [r7, #8]
 800262c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800262e:	4b0f      	ldr	r3, [pc, #60]	; (800266c <HAL_MspInit+0x5c>)
 8002630:	69db      	ldr	r3, [r3, #28]
 8002632:	4a0e      	ldr	r2, [pc, #56]	; (800266c <HAL_MspInit+0x5c>)
 8002634:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002638:	61d3      	str	r3, [r2, #28]
 800263a:	4b0c      	ldr	r3, [pc, #48]	; (800266c <HAL_MspInit+0x5c>)
 800263c:	69db      	ldr	r3, [r3, #28]
 800263e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002642:	607b      	str	r3, [r7, #4]
 8002644:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002646:	4b0a      	ldr	r3, [pc, #40]	; (8002670 <HAL_MspInit+0x60>)
 8002648:	685b      	ldr	r3, [r3, #4]
 800264a:	60fb      	str	r3, [r7, #12]
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002652:	60fb      	str	r3, [r7, #12]
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800265a:	60fb      	str	r3, [r7, #12]
 800265c:	4a04      	ldr	r2, [pc, #16]	; (8002670 <HAL_MspInit+0x60>)
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002662:	bf00      	nop
 8002664:	3714      	adds	r7, #20
 8002666:	46bd      	mov	sp, r7
 8002668:	bc80      	pop	{r7}
 800266a:	4770      	bx	lr
 800266c:	40021000 	.word	0x40021000
 8002670:	40010000 	.word	0x40010000

08002674 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	b08a      	sub	sp, #40	; 0x28
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800267c:	f107 0318 	add.w	r3, r7, #24
 8002680:	2200      	movs	r2, #0
 8002682:	601a      	str	r2, [r3, #0]
 8002684:	605a      	str	r2, [r3, #4]
 8002686:	609a      	str	r2, [r3, #8]
 8002688:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	4a8c      	ldr	r2, [pc, #560]	; (80028c0 <HAL_UART_MspInit+0x24c>)
 8002690:	4293      	cmp	r3, r2
 8002692:	f040 8087 	bne.w	80027a4 <HAL_UART_MspInit+0x130>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002696:	4b8b      	ldr	r3, [pc, #556]	; (80028c4 <HAL_UART_MspInit+0x250>)
 8002698:	699b      	ldr	r3, [r3, #24]
 800269a:	4a8a      	ldr	r2, [pc, #552]	; (80028c4 <HAL_UART_MspInit+0x250>)
 800269c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80026a0:	6193      	str	r3, [r2, #24]
 80026a2:	4b88      	ldr	r3, [pc, #544]	; (80028c4 <HAL_UART_MspInit+0x250>)
 80026a4:	699b      	ldr	r3, [r3, #24]
 80026a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026aa:	617b      	str	r3, [r7, #20]
 80026ac:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026ae:	4b85      	ldr	r3, [pc, #532]	; (80028c4 <HAL_UART_MspInit+0x250>)
 80026b0:	699b      	ldr	r3, [r3, #24]
 80026b2:	4a84      	ldr	r2, [pc, #528]	; (80028c4 <HAL_UART_MspInit+0x250>)
 80026b4:	f043 0304 	orr.w	r3, r3, #4
 80026b8:	6193      	str	r3, [r2, #24]
 80026ba:	4b82      	ldr	r3, [pc, #520]	; (80028c4 <HAL_UART_MspInit+0x250>)
 80026bc:	699b      	ldr	r3, [r3, #24]
 80026be:	f003 0304 	and.w	r3, r3, #4
 80026c2:	613b      	str	r3, [r7, #16]
 80026c4:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80026c6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80026ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026cc:	2302      	movs	r3, #2
 80026ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80026d0:	2303      	movs	r3, #3
 80026d2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026d4:	f107 0318 	add.w	r3, r7, #24
 80026d8:	4619      	mov	r1, r3
 80026da:	487b      	ldr	r0, [pc, #492]	; (80028c8 <HAL_UART_MspInit+0x254>)
 80026dc:	f000 fe04 	bl	80032e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80026e0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80026e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80026e6:	2300      	movs	r3, #0
 80026e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026ea:	2300      	movs	r3, #0
 80026ec:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026ee:	f107 0318 	add.w	r3, r7, #24
 80026f2:	4619      	mov	r1, r3
 80026f4:	4874      	ldr	r0, [pc, #464]	; (80028c8 <HAL_UART_MspInit+0x254>)
 80026f6:	f000 fdf7 	bl	80032e8 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 80026fa:	4b74      	ldr	r3, [pc, #464]	; (80028cc <HAL_UART_MspInit+0x258>)
 80026fc:	4a74      	ldr	r2, [pc, #464]	; (80028d0 <HAL_UART_MspInit+0x25c>)
 80026fe:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002700:	4b72      	ldr	r3, [pc, #456]	; (80028cc <HAL_UART_MspInit+0x258>)
 8002702:	2200      	movs	r2, #0
 8002704:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002706:	4b71      	ldr	r3, [pc, #452]	; (80028cc <HAL_UART_MspInit+0x258>)
 8002708:	2200      	movs	r2, #0
 800270a:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800270c:	4b6f      	ldr	r3, [pc, #444]	; (80028cc <HAL_UART_MspInit+0x258>)
 800270e:	2280      	movs	r2, #128	; 0x80
 8002710:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002712:	4b6e      	ldr	r3, [pc, #440]	; (80028cc <HAL_UART_MspInit+0x258>)
 8002714:	2200      	movs	r2, #0
 8002716:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002718:	4b6c      	ldr	r3, [pc, #432]	; (80028cc <HAL_UART_MspInit+0x258>)
 800271a:	2200      	movs	r2, #0
 800271c:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 800271e:	4b6b      	ldr	r3, [pc, #428]	; (80028cc <HAL_UART_MspInit+0x258>)
 8002720:	2200      	movs	r2, #0
 8002722:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002724:	4b69      	ldr	r3, [pc, #420]	; (80028cc <HAL_UART_MspInit+0x258>)
 8002726:	2200      	movs	r2, #0
 8002728:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800272a:	4868      	ldr	r0, [pc, #416]	; (80028cc <HAL_UART_MspInit+0x258>)
 800272c:	f000 fb3a 	bl	8002da4 <HAL_DMA_Init>
 8002730:	4603      	mov	r3, r0
 8002732:	2b00      	cmp	r3, #0
 8002734:	d001      	beq.n	800273a <HAL_UART_MspInit+0xc6>
    {
      Error_Handler();
 8002736:	f7ff ff65 	bl	8002604 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	4a63      	ldr	r2, [pc, #396]	; (80028cc <HAL_UART_MspInit+0x258>)
 800273e:	63da      	str	r2, [r3, #60]	; 0x3c
 8002740:	4a62      	ldr	r2, [pc, #392]	; (80028cc <HAL_UART_MspInit+0x258>)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8002746:	4b63      	ldr	r3, [pc, #396]	; (80028d4 <HAL_UART_MspInit+0x260>)
 8002748:	4a63      	ldr	r2, [pc, #396]	; (80028d8 <HAL_UART_MspInit+0x264>)
 800274a:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800274c:	4b61      	ldr	r3, [pc, #388]	; (80028d4 <HAL_UART_MspInit+0x260>)
 800274e:	2210      	movs	r2, #16
 8002750:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002752:	4b60      	ldr	r3, [pc, #384]	; (80028d4 <HAL_UART_MspInit+0x260>)
 8002754:	2200      	movs	r2, #0
 8002756:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002758:	4b5e      	ldr	r3, [pc, #376]	; (80028d4 <HAL_UART_MspInit+0x260>)
 800275a:	2280      	movs	r2, #128	; 0x80
 800275c:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800275e:	4b5d      	ldr	r3, [pc, #372]	; (80028d4 <HAL_UART_MspInit+0x260>)
 8002760:	2200      	movs	r2, #0
 8002762:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002764:	4b5b      	ldr	r3, [pc, #364]	; (80028d4 <HAL_UART_MspInit+0x260>)
 8002766:	2200      	movs	r2, #0
 8002768:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 800276a:	4b5a      	ldr	r3, [pc, #360]	; (80028d4 <HAL_UART_MspInit+0x260>)
 800276c:	2200      	movs	r2, #0
 800276e:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002770:	4b58      	ldr	r3, [pc, #352]	; (80028d4 <HAL_UART_MspInit+0x260>)
 8002772:	2200      	movs	r2, #0
 8002774:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8002776:	4857      	ldr	r0, [pc, #348]	; (80028d4 <HAL_UART_MspInit+0x260>)
 8002778:	f000 fb14 	bl	8002da4 <HAL_DMA_Init>
 800277c:	4603      	mov	r3, r0
 800277e:	2b00      	cmp	r3, #0
 8002780:	d001      	beq.n	8002786 <HAL_UART_MspInit+0x112>
    {
      Error_Handler();
 8002782:	f7ff ff3f 	bl	8002604 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	4a52      	ldr	r2, [pc, #328]	; (80028d4 <HAL_UART_MspInit+0x260>)
 800278a:	639a      	str	r2, [r3, #56]	; 0x38
 800278c:	4a51      	ldr	r2, [pc, #324]	; (80028d4 <HAL_UART_MspInit+0x260>)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002792:	2200      	movs	r2, #0
 8002794:	2100      	movs	r1, #0
 8002796:	2025      	movs	r0, #37	; 0x25
 8002798:	f000 facd 	bl	8002d36 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800279c:	2025      	movs	r0, #37	; 0x25
 800279e:	f000 fae6 	bl	8002d6e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80027a2:	e089      	b.n	80028b8 <HAL_UART_MspInit+0x244>
  else if(huart->Instance==USART2)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	4a4c      	ldr	r2, [pc, #304]	; (80028dc <HAL_UART_MspInit+0x268>)
 80027aa:	4293      	cmp	r3, r2
 80027ac:	f040 8084 	bne.w	80028b8 <HAL_UART_MspInit+0x244>
    __HAL_RCC_USART2_CLK_ENABLE();
 80027b0:	4b44      	ldr	r3, [pc, #272]	; (80028c4 <HAL_UART_MspInit+0x250>)
 80027b2:	69db      	ldr	r3, [r3, #28]
 80027b4:	4a43      	ldr	r2, [pc, #268]	; (80028c4 <HAL_UART_MspInit+0x250>)
 80027b6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80027ba:	61d3      	str	r3, [r2, #28]
 80027bc:	4b41      	ldr	r3, [pc, #260]	; (80028c4 <HAL_UART_MspInit+0x250>)
 80027be:	69db      	ldr	r3, [r3, #28]
 80027c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027c4:	60fb      	str	r3, [r7, #12]
 80027c6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027c8:	4b3e      	ldr	r3, [pc, #248]	; (80028c4 <HAL_UART_MspInit+0x250>)
 80027ca:	699b      	ldr	r3, [r3, #24]
 80027cc:	4a3d      	ldr	r2, [pc, #244]	; (80028c4 <HAL_UART_MspInit+0x250>)
 80027ce:	f043 0304 	orr.w	r3, r3, #4
 80027d2:	6193      	str	r3, [r2, #24]
 80027d4:	4b3b      	ldr	r3, [pc, #236]	; (80028c4 <HAL_UART_MspInit+0x250>)
 80027d6:	699b      	ldr	r3, [r3, #24]
 80027d8:	f003 0304 	and.w	r3, r3, #4
 80027dc:	60bb      	str	r3, [r7, #8]
 80027de:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80027e0:	2304      	movs	r3, #4
 80027e2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027e4:	2302      	movs	r3, #2
 80027e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80027e8:	2303      	movs	r3, #3
 80027ea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027ec:	f107 0318 	add.w	r3, r7, #24
 80027f0:	4619      	mov	r1, r3
 80027f2:	4835      	ldr	r0, [pc, #212]	; (80028c8 <HAL_UART_MspInit+0x254>)
 80027f4:	f000 fd78 	bl	80032e8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80027f8:	2308      	movs	r3, #8
 80027fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80027fc:	2300      	movs	r3, #0
 80027fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002800:	2300      	movs	r3, #0
 8002802:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002804:	f107 0318 	add.w	r3, r7, #24
 8002808:	4619      	mov	r1, r3
 800280a:	482f      	ldr	r0, [pc, #188]	; (80028c8 <HAL_UART_MspInit+0x254>)
 800280c:	f000 fd6c 	bl	80032e8 <HAL_GPIO_Init>
    hdma_usart2_tx.Instance = DMA1_Channel7;
 8002810:	4b33      	ldr	r3, [pc, #204]	; (80028e0 <HAL_UART_MspInit+0x26c>)
 8002812:	4a34      	ldr	r2, [pc, #208]	; (80028e4 <HAL_UART_MspInit+0x270>)
 8002814:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002816:	4b32      	ldr	r3, [pc, #200]	; (80028e0 <HAL_UART_MspInit+0x26c>)
 8002818:	2210      	movs	r2, #16
 800281a:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800281c:	4b30      	ldr	r3, [pc, #192]	; (80028e0 <HAL_UART_MspInit+0x26c>)
 800281e:	2200      	movs	r2, #0
 8002820:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002822:	4b2f      	ldr	r3, [pc, #188]	; (80028e0 <HAL_UART_MspInit+0x26c>)
 8002824:	2280      	movs	r2, #128	; 0x80
 8002826:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002828:	4b2d      	ldr	r3, [pc, #180]	; (80028e0 <HAL_UART_MspInit+0x26c>)
 800282a:	2200      	movs	r2, #0
 800282c:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800282e:	4b2c      	ldr	r3, [pc, #176]	; (80028e0 <HAL_UART_MspInit+0x26c>)
 8002830:	2200      	movs	r2, #0
 8002832:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8002834:	4b2a      	ldr	r3, [pc, #168]	; (80028e0 <HAL_UART_MspInit+0x26c>)
 8002836:	2200      	movs	r2, #0
 8002838:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800283a:	4b29      	ldr	r3, [pc, #164]	; (80028e0 <HAL_UART_MspInit+0x26c>)
 800283c:	2200      	movs	r2, #0
 800283e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8002840:	4827      	ldr	r0, [pc, #156]	; (80028e0 <HAL_UART_MspInit+0x26c>)
 8002842:	f000 faaf 	bl	8002da4 <HAL_DMA_Init>
 8002846:	4603      	mov	r3, r0
 8002848:	2b00      	cmp	r3, #0
 800284a:	d001      	beq.n	8002850 <HAL_UART_MspInit+0x1dc>
      Error_Handler();
 800284c:	f7ff feda 	bl	8002604 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	4a23      	ldr	r2, [pc, #140]	; (80028e0 <HAL_UART_MspInit+0x26c>)
 8002854:	639a      	str	r2, [r3, #56]	; 0x38
 8002856:	4a22      	ldr	r2, [pc, #136]	; (80028e0 <HAL_UART_MspInit+0x26c>)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	6253      	str	r3, [r2, #36]	; 0x24
    hdma_usart2_rx.Instance = DMA1_Channel6;
 800285c:	4b22      	ldr	r3, [pc, #136]	; (80028e8 <HAL_UART_MspInit+0x274>)
 800285e:	4a23      	ldr	r2, [pc, #140]	; (80028ec <HAL_UART_MspInit+0x278>)
 8002860:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002862:	4b21      	ldr	r3, [pc, #132]	; (80028e8 <HAL_UART_MspInit+0x274>)
 8002864:	2200      	movs	r2, #0
 8002866:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002868:	4b1f      	ldr	r3, [pc, #124]	; (80028e8 <HAL_UART_MspInit+0x274>)
 800286a:	2200      	movs	r2, #0
 800286c:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800286e:	4b1e      	ldr	r3, [pc, #120]	; (80028e8 <HAL_UART_MspInit+0x274>)
 8002870:	2280      	movs	r2, #128	; 0x80
 8002872:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002874:	4b1c      	ldr	r3, [pc, #112]	; (80028e8 <HAL_UART_MspInit+0x274>)
 8002876:	2200      	movs	r2, #0
 8002878:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800287a:	4b1b      	ldr	r3, [pc, #108]	; (80028e8 <HAL_UART_MspInit+0x274>)
 800287c:	2200      	movs	r2, #0
 800287e:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8002880:	4b19      	ldr	r3, [pc, #100]	; (80028e8 <HAL_UART_MspInit+0x274>)
 8002882:	2200      	movs	r2, #0
 8002884:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002886:	4b18      	ldr	r3, [pc, #96]	; (80028e8 <HAL_UART_MspInit+0x274>)
 8002888:	2200      	movs	r2, #0
 800288a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800288c:	4816      	ldr	r0, [pc, #88]	; (80028e8 <HAL_UART_MspInit+0x274>)
 800288e:	f000 fa89 	bl	8002da4 <HAL_DMA_Init>
 8002892:	4603      	mov	r3, r0
 8002894:	2b00      	cmp	r3, #0
 8002896:	d001      	beq.n	800289c <HAL_UART_MspInit+0x228>
      Error_Handler();
 8002898:	f7ff feb4 	bl	8002604 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	4a12      	ldr	r2, [pc, #72]	; (80028e8 <HAL_UART_MspInit+0x274>)
 80028a0:	63da      	str	r2, [r3, #60]	; 0x3c
 80028a2:	4a11      	ldr	r2, [pc, #68]	; (80028e8 <HAL_UART_MspInit+0x274>)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	6253      	str	r3, [r2, #36]	; 0x24
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80028a8:	2200      	movs	r2, #0
 80028aa:	2100      	movs	r1, #0
 80028ac:	2026      	movs	r0, #38	; 0x26
 80028ae:	f000 fa42 	bl	8002d36 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80028b2:	2026      	movs	r0, #38	; 0x26
 80028b4:	f000 fa5b 	bl	8002d6e <HAL_NVIC_EnableIRQ>
}
 80028b8:	bf00      	nop
 80028ba:	3728      	adds	r7, #40	; 0x28
 80028bc:	46bd      	mov	sp, r7
 80028be:	bd80      	pop	{r7, pc}
 80028c0:	40013800 	.word	0x40013800
 80028c4:	40021000 	.word	0x40021000
 80028c8:	40010800 	.word	0x40010800
 80028cc:	20000288 	.word	0x20000288
 80028d0:	40020058 	.word	0x40020058
 80028d4:	200002cc 	.word	0x200002cc
 80028d8:	40020044 	.word	0x40020044
 80028dc:	40004400 	.word	0x40004400
 80028e0:	20000310 	.word	0x20000310
 80028e4:	40020080 	.word	0x40020080
 80028e8:	20000354 	.word	0x20000354
 80028ec:	4002006c 	.word	0x4002006c

080028f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80028f0:	b480      	push	{r7}
 80028f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80028f4:	e7fe      	b.n	80028f4 <NMI_Handler+0x4>

080028f6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80028f6:	b480      	push	{r7}
 80028f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80028fa:	e7fe      	b.n	80028fa <HardFault_Handler+0x4>

080028fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80028fc:	b480      	push	{r7}
 80028fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002900:	e7fe      	b.n	8002900 <MemManage_Handler+0x4>

08002902 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002902:	b480      	push	{r7}
 8002904:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002906:	e7fe      	b.n	8002906 <BusFault_Handler+0x4>

08002908 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002908:	b480      	push	{r7}
 800290a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800290c:	e7fe      	b.n	800290c <UsageFault_Handler+0x4>

0800290e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800290e:	b480      	push	{r7}
 8002910:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002912:	bf00      	nop
 8002914:	46bd      	mov	sp, r7
 8002916:	bc80      	pop	{r7}
 8002918:	4770      	bx	lr

0800291a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800291a:	b480      	push	{r7}
 800291c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800291e:	bf00      	nop
 8002920:	46bd      	mov	sp, r7
 8002922:	bc80      	pop	{r7}
 8002924:	4770      	bx	lr

08002926 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002926:	b480      	push	{r7}
 8002928:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800292a:	bf00      	nop
 800292c:	46bd      	mov	sp, r7
 800292e:	bc80      	pop	{r7}
 8002930:	4770      	bx	lr

08002932 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002932:	b580      	push	{r7, lr}
 8002934:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002936:	f000 f8e7 	bl	8002b08 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800293a:	bf00      	nop
 800293c:	bd80      	pop	{r7, pc}
	...

08002940 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8002940:	b580      	push	{r7, lr}
 8002942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8002944:	4802      	ldr	r0, [pc, #8]	; (8002950 <DMA1_Channel4_IRQHandler+0x10>)
 8002946:	f000 fb9b 	bl	8003080 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 800294a:	bf00      	nop
 800294c:	bd80      	pop	{r7, pc}
 800294e:	bf00      	nop
 8002950:	200002cc 	.word	0x200002cc

08002954 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8002954:	b580      	push	{r7, lr}
 8002956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8002958:	4802      	ldr	r0, [pc, #8]	; (8002964 <DMA1_Channel5_IRQHandler+0x10>)
 800295a:	f000 fb91 	bl	8003080 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 800295e:	bf00      	nop
 8002960:	bd80      	pop	{r7, pc}
 8002962:	bf00      	nop
 8002964:	20000288 	.word	0x20000288

08002968 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 800296c:	4802      	ldr	r0, [pc, #8]	; (8002978 <DMA1_Channel6_IRQHandler+0x10>)
 800296e:	f000 fb87 	bl	8003080 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8002972:	bf00      	nop
 8002974:	bd80      	pop	{r7, pc}
 8002976:	bf00      	nop
 8002978:	20000354 	.word	0x20000354

0800297c <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 800297c:	b580      	push	{r7, lr}
 800297e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8002980:	4802      	ldr	r0, [pc, #8]	; (800298c <DMA1_Channel7_IRQHandler+0x10>)
 8002982:	f000 fb7d 	bl	8003080 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8002986:	bf00      	nop
 8002988:	bd80      	pop	{r7, pc}
 800298a:	bf00      	nop
 800298c:	20000310 	.word	0x20000310

08002990 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
	//HAL_UART_Transmit(&huart1,"USART Transmit\r\n",16,0xFFFF);
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002994:	4802      	ldr	r0, [pc, #8]	; (80029a0 <USART1_IRQHandler+0x10>)
 8002996:	f001 fbcd 	bl	8004134 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800299a:	bf00      	nop
 800299c:	bd80      	pop	{r7, pc}
 800299e:	bf00      	nop
 80029a0:	200001f8 	.word	0x200001f8

080029a4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80029a8:	4802      	ldr	r0, [pc, #8]	; (80029b4 <USART2_IRQHandler+0x10>)
 80029aa:	f001 fbc3 	bl	8004134 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80029ae:	bf00      	nop
 80029b0:	bd80      	pop	{r7, pc}
 80029b2:	bf00      	nop
 80029b4:	20000240 	.word	0x20000240

080029b8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	b086      	sub	sp, #24
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80029c0:	4a14      	ldr	r2, [pc, #80]	; (8002a14 <_sbrk+0x5c>)
 80029c2:	4b15      	ldr	r3, [pc, #84]	; (8002a18 <_sbrk+0x60>)
 80029c4:	1ad3      	subs	r3, r2, r3
 80029c6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80029c8:	697b      	ldr	r3, [r7, #20]
 80029ca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80029cc:	4b13      	ldr	r3, [pc, #76]	; (8002a1c <_sbrk+0x64>)
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d102      	bne.n	80029da <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80029d4:	4b11      	ldr	r3, [pc, #68]	; (8002a1c <_sbrk+0x64>)
 80029d6:	4a12      	ldr	r2, [pc, #72]	; (8002a20 <_sbrk+0x68>)
 80029d8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80029da:	4b10      	ldr	r3, [pc, #64]	; (8002a1c <_sbrk+0x64>)
 80029dc:	681a      	ldr	r2, [r3, #0]
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	4413      	add	r3, r2
 80029e2:	693a      	ldr	r2, [r7, #16]
 80029e4:	429a      	cmp	r2, r3
 80029e6:	d207      	bcs.n	80029f8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80029e8:	f002 f9fc 	bl	8004de4 <__errno>
 80029ec:	4603      	mov	r3, r0
 80029ee:	220c      	movs	r2, #12
 80029f0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80029f2:	f04f 33ff 	mov.w	r3, #4294967295
 80029f6:	e009      	b.n	8002a0c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80029f8:	4b08      	ldr	r3, [pc, #32]	; (8002a1c <_sbrk+0x64>)
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80029fe:	4b07      	ldr	r3, [pc, #28]	; (8002a1c <_sbrk+0x64>)
 8002a00:	681a      	ldr	r2, [r3, #0]
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	4413      	add	r3, r2
 8002a06:	4a05      	ldr	r2, [pc, #20]	; (8002a1c <_sbrk+0x64>)
 8002a08:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002a0a:	68fb      	ldr	r3, [r7, #12]
}
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	3718      	adds	r7, #24
 8002a10:	46bd      	mov	sp, r7
 8002a12:	bd80      	pop	{r7, pc}
 8002a14:	20002800 	.word	0x20002800
 8002a18:	00000400 	.word	0x00000400
 8002a1c:	200009ec 	.word	0x200009ec
 8002a20:	20000a08 	.word	0x20000a08

08002a24 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002a24:	b480      	push	{r7}
 8002a26:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002a28:	bf00      	nop
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	bc80      	pop	{r7}
 8002a2e:	4770      	bx	lr

08002a30 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002a30:	f7ff fff8 	bl	8002a24 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002a34:	480b      	ldr	r0, [pc, #44]	; (8002a64 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8002a36:	490c      	ldr	r1, [pc, #48]	; (8002a68 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002a38:	4a0c      	ldr	r2, [pc, #48]	; (8002a6c <LoopFillZerobss+0x16>)
  movs r3, #0
 8002a3a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002a3c:	e002      	b.n	8002a44 <LoopCopyDataInit>

08002a3e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002a3e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002a40:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002a42:	3304      	adds	r3, #4

08002a44 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002a44:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002a46:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002a48:	d3f9      	bcc.n	8002a3e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002a4a:	4a09      	ldr	r2, [pc, #36]	; (8002a70 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002a4c:	4c09      	ldr	r4, [pc, #36]	; (8002a74 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002a4e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002a50:	e001      	b.n	8002a56 <LoopFillZerobss>

08002a52 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002a52:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002a54:	3204      	adds	r2, #4

08002a56 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002a56:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002a58:	d3fb      	bcc.n	8002a52 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002a5a:	f002 f9c9 	bl	8004df0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002a5e:	f7ff fa2d 	bl	8001ebc <main>
  bx lr
 8002a62:	4770      	bx	lr
  ldr r0, =_sdata
 8002a64:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002a68:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8002a6c:	08005fac 	.word	0x08005fac
  ldr r2, =_sbss
 8002a70:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8002a74:	20000a04 	.word	0x20000a04

08002a78 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002a78:	e7fe      	b.n	8002a78 <ADC1_2_IRQHandler>
	...

08002a7c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002a80:	4b08      	ldr	r3, [pc, #32]	; (8002aa4 <HAL_Init+0x28>)
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	4a07      	ldr	r2, [pc, #28]	; (8002aa4 <HAL_Init+0x28>)
 8002a86:	f043 0310 	orr.w	r3, r3, #16
 8002a8a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002a8c:	2003      	movs	r0, #3
 8002a8e:	f000 f947 	bl	8002d20 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002a92:	200f      	movs	r0, #15
 8002a94:	f000 f808 	bl	8002aa8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002a98:	f7ff fdba 	bl	8002610 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002a9c:	2300      	movs	r3, #0
}
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	bd80      	pop	{r7, pc}
 8002aa2:	bf00      	nop
 8002aa4:	40022000 	.word	0x40022000

08002aa8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b082      	sub	sp, #8
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002ab0:	4b12      	ldr	r3, [pc, #72]	; (8002afc <HAL_InitTick+0x54>)
 8002ab2:	681a      	ldr	r2, [r3, #0]
 8002ab4:	4b12      	ldr	r3, [pc, #72]	; (8002b00 <HAL_InitTick+0x58>)
 8002ab6:	781b      	ldrb	r3, [r3, #0]
 8002ab8:	4619      	mov	r1, r3
 8002aba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002abe:	fbb3 f3f1 	udiv	r3, r3, r1
 8002ac2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	f000 f95f 	bl	8002d8a <HAL_SYSTICK_Config>
 8002acc:	4603      	mov	r3, r0
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d001      	beq.n	8002ad6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002ad2:	2301      	movs	r3, #1
 8002ad4:	e00e      	b.n	8002af4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	2b0f      	cmp	r3, #15
 8002ada:	d80a      	bhi.n	8002af2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002adc:	2200      	movs	r2, #0
 8002ade:	6879      	ldr	r1, [r7, #4]
 8002ae0:	f04f 30ff 	mov.w	r0, #4294967295
 8002ae4:	f000 f927 	bl	8002d36 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002ae8:	4a06      	ldr	r2, [pc, #24]	; (8002b04 <HAL_InitTick+0x5c>)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002aee:	2300      	movs	r3, #0
 8002af0:	e000      	b.n	8002af4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002af2:	2301      	movs	r3, #1
}
 8002af4:	4618      	mov	r0, r3
 8002af6:	3708      	adds	r7, #8
 8002af8:	46bd      	mov	sp, r7
 8002afa:	bd80      	pop	{r7, pc}
 8002afc:	20000164 	.word	0x20000164
 8002b00:	2000016c 	.word	0x2000016c
 8002b04:	20000168 	.word	0x20000168

08002b08 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002b08:	b480      	push	{r7}
 8002b0a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002b0c:	4b05      	ldr	r3, [pc, #20]	; (8002b24 <HAL_IncTick+0x1c>)
 8002b0e:	781b      	ldrb	r3, [r3, #0]
 8002b10:	461a      	mov	r2, r3
 8002b12:	4b05      	ldr	r3, [pc, #20]	; (8002b28 <HAL_IncTick+0x20>)
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	4413      	add	r3, r2
 8002b18:	4a03      	ldr	r2, [pc, #12]	; (8002b28 <HAL_IncTick+0x20>)
 8002b1a:	6013      	str	r3, [r2, #0]
}
 8002b1c:	bf00      	nop
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	bc80      	pop	{r7}
 8002b22:	4770      	bx	lr
 8002b24:	2000016c 	.word	0x2000016c
 8002b28:	200009f0 	.word	0x200009f0

08002b2c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002b2c:	b480      	push	{r7}
 8002b2e:	af00      	add	r7, sp, #0
  return uwTick;
 8002b30:	4b02      	ldr	r3, [pc, #8]	; (8002b3c <HAL_GetTick+0x10>)
 8002b32:	681b      	ldr	r3, [r3, #0]
}
 8002b34:	4618      	mov	r0, r3
 8002b36:	46bd      	mov	sp, r7
 8002b38:	bc80      	pop	{r7}
 8002b3a:	4770      	bx	lr
 8002b3c:	200009f0 	.word	0x200009f0

08002b40 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	b084      	sub	sp, #16
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002b48:	f7ff fff0 	bl	8002b2c <HAL_GetTick>
 8002b4c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b58:	d005      	beq.n	8002b66 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002b5a:	4b0a      	ldr	r3, [pc, #40]	; (8002b84 <HAL_Delay+0x44>)
 8002b5c:	781b      	ldrb	r3, [r3, #0]
 8002b5e:	461a      	mov	r2, r3
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	4413      	add	r3, r2
 8002b64:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002b66:	bf00      	nop
 8002b68:	f7ff ffe0 	bl	8002b2c <HAL_GetTick>
 8002b6c:	4602      	mov	r2, r0
 8002b6e:	68bb      	ldr	r3, [r7, #8]
 8002b70:	1ad3      	subs	r3, r2, r3
 8002b72:	68fa      	ldr	r2, [r7, #12]
 8002b74:	429a      	cmp	r2, r3
 8002b76:	d8f7      	bhi.n	8002b68 <HAL_Delay+0x28>
  {
  }
}
 8002b78:	bf00      	nop
 8002b7a:	bf00      	nop
 8002b7c:	3710      	adds	r7, #16
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	bd80      	pop	{r7, pc}
 8002b82:	bf00      	nop
 8002b84:	2000016c 	.word	0x2000016c

08002b88 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b88:	b480      	push	{r7}
 8002b8a:	b085      	sub	sp, #20
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	f003 0307 	and.w	r3, r3, #7
 8002b96:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002b98:	4b0c      	ldr	r3, [pc, #48]	; (8002bcc <__NVIC_SetPriorityGrouping+0x44>)
 8002b9a:	68db      	ldr	r3, [r3, #12]
 8002b9c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002b9e:	68ba      	ldr	r2, [r7, #8]
 8002ba0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002ba4:	4013      	ands	r3, r2
 8002ba6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002bac:	68bb      	ldr	r3, [r7, #8]
 8002bae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002bb0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002bb4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002bb8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002bba:	4a04      	ldr	r2, [pc, #16]	; (8002bcc <__NVIC_SetPriorityGrouping+0x44>)
 8002bbc:	68bb      	ldr	r3, [r7, #8]
 8002bbe:	60d3      	str	r3, [r2, #12]
}
 8002bc0:	bf00      	nop
 8002bc2:	3714      	adds	r7, #20
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	bc80      	pop	{r7}
 8002bc8:	4770      	bx	lr
 8002bca:	bf00      	nop
 8002bcc:	e000ed00 	.word	0xe000ed00

08002bd0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002bd0:	b480      	push	{r7}
 8002bd2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002bd4:	4b04      	ldr	r3, [pc, #16]	; (8002be8 <__NVIC_GetPriorityGrouping+0x18>)
 8002bd6:	68db      	ldr	r3, [r3, #12]
 8002bd8:	0a1b      	lsrs	r3, r3, #8
 8002bda:	f003 0307 	and.w	r3, r3, #7
}
 8002bde:	4618      	mov	r0, r3
 8002be0:	46bd      	mov	sp, r7
 8002be2:	bc80      	pop	{r7}
 8002be4:	4770      	bx	lr
 8002be6:	bf00      	nop
 8002be8:	e000ed00 	.word	0xe000ed00

08002bec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002bec:	b480      	push	{r7}
 8002bee:	b083      	sub	sp, #12
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	4603      	mov	r3, r0
 8002bf4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002bf6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	db0b      	blt.n	8002c16 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002bfe:	79fb      	ldrb	r3, [r7, #7]
 8002c00:	f003 021f 	and.w	r2, r3, #31
 8002c04:	4906      	ldr	r1, [pc, #24]	; (8002c20 <__NVIC_EnableIRQ+0x34>)
 8002c06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c0a:	095b      	lsrs	r3, r3, #5
 8002c0c:	2001      	movs	r0, #1
 8002c0e:	fa00 f202 	lsl.w	r2, r0, r2
 8002c12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002c16:	bf00      	nop
 8002c18:	370c      	adds	r7, #12
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	bc80      	pop	{r7}
 8002c1e:	4770      	bx	lr
 8002c20:	e000e100 	.word	0xe000e100

08002c24 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002c24:	b480      	push	{r7}
 8002c26:	b083      	sub	sp, #12
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	4603      	mov	r3, r0
 8002c2c:	6039      	str	r1, [r7, #0]
 8002c2e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	db0a      	blt.n	8002c4e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c38:	683b      	ldr	r3, [r7, #0]
 8002c3a:	b2da      	uxtb	r2, r3
 8002c3c:	490c      	ldr	r1, [pc, #48]	; (8002c70 <__NVIC_SetPriority+0x4c>)
 8002c3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c42:	0112      	lsls	r2, r2, #4
 8002c44:	b2d2      	uxtb	r2, r2
 8002c46:	440b      	add	r3, r1
 8002c48:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002c4c:	e00a      	b.n	8002c64 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c4e:	683b      	ldr	r3, [r7, #0]
 8002c50:	b2da      	uxtb	r2, r3
 8002c52:	4908      	ldr	r1, [pc, #32]	; (8002c74 <__NVIC_SetPriority+0x50>)
 8002c54:	79fb      	ldrb	r3, [r7, #7]
 8002c56:	f003 030f 	and.w	r3, r3, #15
 8002c5a:	3b04      	subs	r3, #4
 8002c5c:	0112      	lsls	r2, r2, #4
 8002c5e:	b2d2      	uxtb	r2, r2
 8002c60:	440b      	add	r3, r1
 8002c62:	761a      	strb	r2, [r3, #24]
}
 8002c64:	bf00      	nop
 8002c66:	370c      	adds	r7, #12
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	bc80      	pop	{r7}
 8002c6c:	4770      	bx	lr
 8002c6e:	bf00      	nop
 8002c70:	e000e100 	.word	0xe000e100
 8002c74:	e000ed00 	.word	0xe000ed00

08002c78 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c78:	b480      	push	{r7}
 8002c7a:	b089      	sub	sp, #36	; 0x24
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	60f8      	str	r0, [r7, #12]
 8002c80:	60b9      	str	r1, [r7, #8]
 8002c82:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	f003 0307 	and.w	r3, r3, #7
 8002c8a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002c8c:	69fb      	ldr	r3, [r7, #28]
 8002c8e:	f1c3 0307 	rsb	r3, r3, #7
 8002c92:	2b04      	cmp	r3, #4
 8002c94:	bf28      	it	cs
 8002c96:	2304      	movcs	r3, #4
 8002c98:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002c9a:	69fb      	ldr	r3, [r7, #28]
 8002c9c:	3304      	adds	r3, #4
 8002c9e:	2b06      	cmp	r3, #6
 8002ca0:	d902      	bls.n	8002ca8 <NVIC_EncodePriority+0x30>
 8002ca2:	69fb      	ldr	r3, [r7, #28]
 8002ca4:	3b03      	subs	r3, #3
 8002ca6:	e000      	b.n	8002caa <NVIC_EncodePriority+0x32>
 8002ca8:	2300      	movs	r3, #0
 8002caa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002cac:	f04f 32ff 	mov.w	r2, #4294967295
 8002cb0:	69bb      	ldr	r3, [r7, #24]
 8002cb2:	fa02 f303 	lsl.w	r3, r2, r3
 8002cb6:	43da      	mvns	r2, r3
 8002cb8:	68bb      	ldr	r3, [r7, #8]
 8002cba:	401a      	ands	r2, r3
 8002cbc:	697b      	ldr	r3, [r7, #20]
 8002cbe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002cc0:	f04f 31ff 	mov.w	r1, #4294967295
 8002cc4:	697b      	ldr	r3, [r7, #20]
 8002cc6:	fa01 f303 	lsl.w	r3, r1, r3
 8002cca:	43d9      	mvns	r1, r3
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002cd0:	4313      	orrs	r3, r2
         );
}
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	3724      	adds	r7, #36	; 0x24
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	bc80      	pop	{r7}
 8002cda:	4770      	bx	lr

08002cdc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	b082      	sub	sp, #8
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	3b01      	subs	r3, #1
 8002ce8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002cec:	d301      	bcc.n	8002cf2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002cee:	2301      	movs	r3, #1
 8002cf0:	e00f      	b.n	8002d12 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002cf2:	4a0a      	ldr	r2, [pc, #40]	; (8002d1c <SysTick_Config+0x40>)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	3b01      	subs	r3, #1
 8002cf8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002cfa:	210f      	movs	r1, #15
 8002cfc:	f04f 30ff 	mov.w	r0, #4294967295
 8002d00:	f7ff ff90 	bl	8002c24 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002d04:	4b05      	ldr	r3, [pc, #20]	; (8002d1c <SysTick_Config+0x40>)
 8002d06:	2200      	movs	r2, #0
 8002d08:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002d0a:	4b04      	ldr	r3, [pc, #16]	; (8002d1c <SysTick_Config+0x40>)
 8002d0c:	2207      	movs	r2, #7
 8002d0e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002d10:	2300      	movs	r3, #0
}
 8002d12:	4618      	mov	r0, r3
 8002d14:	3708      	adds	r7, #8
 8002d16:	46bd      	mov	sp, r7
 8002d18:	bd80      	pop	{r7, pc}
 8002d1a:	bf00      	nop
 8002d1c:	e000e010 	.word	0xe000e010

08002d20 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b082      	sub	sp, #8
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002d28:	6878      	ldr	r0, [r7, #4]
 8002d2a:	f7ff ff2d 	bl	8002b88 <__NVIC_SetPriorityGrouping>
}
 8002d2e:	bf00      	nop
 8002d30:	3708      	adds	r7, #8
 8002d32:	46bd      	mov	sp, r7
 8002d34:	bd80      	pop	{r7, pc}

08002d36 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002d36:	b580      	push	{r7, lr}
 8002d38:	b086      	sub	sp, #24
 8002d3a:	af00      	add	r7, sp, #0
 8002d3c:	4603      	mov	r3, r0
 8002d3e:	60b9      	str	r1, [r7, #8]
 8002d40:	607a      	str	r2, [r7, #4]
 8002d42:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002d44:	2300      	movs	r3, #0
 8002d46:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002d48:	f7ff ff42 	bl	8002bd0 <__NVIC_GetPriorityGrouping>
 8002d4c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002d4e:	687a      	ldr	r2, [r7, #4]
 8002d50:	68b9      	ldr	r1, [r7, #8]
 8002d52:	6978      	ldr	r0, [r7, #20]
 8002d54:	f7ff ff90 	bl	8002c78 <NVIC_EncodePriority>
 8002d58:	4602      	mov	r2, r0
 8002d5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d5e:	4611      	mov	r1, r2
 8002d60:	4618      	mov	r0, r3
 8002d62:	f7ff ff5f 	bl	8002c24 <__NVIC_SetPriority>
}
 8002d66:	bf00      	nop
 8002d68:	3718      	adds	r7, #24
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	bd80      	pop	{r7, pc}

08002d6e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d6e:	b580      	push	{r7, lr}
 8002d70:	b082      	sub	sp, #8
 8002d72:	af00      	add	r7, sp, #0
 8002d74:	4603      	mov	r3, r0
 8002d76:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002d78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	f7ff ff35 	bl	8002bec <__NVIC_EnableIRQ>
}
 8002d82:	bf00      	nop
 8002d84:	3708      	adds	r7, #8
 8002d86:	46bd      	mov	sp, r7
 8002d88:	bd80      	pop	{r7, pc}

08002d8a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002d8a:	b580      	push	{r7, lr}
 8002d8c:	b082      	sub	sp, #8
 8002d8e:	af00      	add	r7, sp, #0
 8002d90:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002d92:	6878      	ldr	r0, [r7, #4]
 8002d94:	f7ff ffa2 	bl	8002cdc <SysTick_Config>
 8002d98:	4603      	mov	r3, r0
}
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	3708      	adds	r7, #8
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	bd80      	pop	{r7, pc}
	...

08002da4 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002da4:	b480      	push	{r7}
 8002da6:	b085      	sub	sp, #20
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002dac:	2300      	movs	r3, #0
 8002dae:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d101      	bne.n	8002dba <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002db6:	2301      	movs	r3, #1
 8002db8:	e043      	b.n	8002e42 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	461a      	mov	r2, r3
 8002dc0:	4b22      	ldr	r3, [pc, #136]	; (8002e4c <HAL_DMA_Init+0xa8>)
 8002dc2:	4413      	add	r3, r2
 8002dc4:	4a22      	ldr	r2, [pc, #136]	; (8002e50 <HAL_DMA_Init+0xac>)
 8002dc6:	fba2 2303 	umull	r2, r3, r2, r3
 8002dca:	091b      	lsrs	r3, r3, #4
 8002dcc:	009a      	lsls	r2, r3, #2
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	4a1f      	ldr	r2, [pc, #124]	; (8002e54 <HAL_DMA_Init+0xb0>)
 8002dd6:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	2202      	movs	r2, #2
 8002ddc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002dee:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8002df2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002dfc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	68db      	ldr	r3, [r3, #12]
 8002e02:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e08:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	695b      	ldr	r3, [r3, #20]
 8002e0e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e14:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	69db      	ldr	r3, [r3, #28]
 8002e1a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002e1c:	68fa      	ldr	r2, [r7, #12]
 8002e1e:	4313      	orrs	r3, r2
 8002e20:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	68fa      	ldr	r2, [r7, #12]
 8002e28:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	2201      	movs	r2, #1
 8002e34:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8002e40:	2300      	movs	r3, #0
}
 8002e42:	4618      	mov	r0, r3
 8002e44:	3714      	adds	r7, #20
 8002e46:	46bd      	mov	sp, r7
 8002e48:	bc80      	pop	{r7}
 8002e4a:	4770      	bx	lr
 8002e4c:	bffdfff8 	.word	0xbffdfff8
 8002e50:	cccccccd 	.word	0xcccccccd
 8002e54:	40020000 	.word	0x40020000

08002e58 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	b086      	sub	sp, #24
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	60f8      	str	r0, [r7, #12]
 8002e60:	60b9      	str	r1, [r7, #8]
 8002e62:	607a      	str	r2, [r7, #4]
 8002e64:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002e66:	2300      	movs	r3, #0
 8002e68:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002e70:	2b01      	cmp	r3, #1
 8002e72:	d101      	bne.n	8002e78 <HAL_DMA_Start_IT+0x20>
 8002e74:	2302      	movs	r3, #2
 8002e76:	e04b      	b.n	8002f10 <HAL_DMA_Start_IT+0xb8>
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	2201      	movs	r2, #1
 8002e7c:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002e86:	b2db      	uxtb	r3, r3
 8002e88:	2b01      	cmp	r3, #1
 8002e8a:	d13a      	bne.n	8002f02 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	2202      	movs	r2, #2
 8002e90:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	2200      	movs	r2, #0
 8002e98:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	681a      	ldr	r2, [r3, #0]
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f022 0201 	bic.w	r2, r2, #1
 8002ea8:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002eaa:	683b      	ldr	r3, [r7, #0]
 8002eac:	687a      	ldr	r2, [r7, #4]
 8002eae:	68b9      	ldr	r1, [r7, #8]
 8002eb0:	68f8      	ldr	r0, [r7, #12]
 8002eb2:	f000 f9eb 	bl	800328c <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d008      	beq.n	8002ed0 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	681a      	ldr	r2, [r3, #0]
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f042 020e 	orr.w	r2, r2, #14
 8002ecc:	601a      	str	r2, [r3, #0]
 8002ece:	e00f      	b.n	8002ef0 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	681a      	ldr	r2, [r3, #0]
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f022 0204 	bic.w	r2, r2, #4
 8002ede:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	681a      	ldr	r2, [r3, #0]
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f042 020a 	orr.w	r2, r2, #10
 8002eee:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	681a      	ldr	r2, [r3, #0]
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f042 0201 	orr.w	r2, r2, #1
 8002efe:	601a      	str	r2, [r3, #0]
 8002f00:	e005      	b.n	8002f0e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	2200      	movs	r2, #0
 8002f06:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8002f0a:	2302      	movs	r3, #2
 8002f0c:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8002f0e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002f10:	4618      	mov	r0, r3
 8002f12:	3718      	adds	r7, #24
 8002f14:	46bd      	mov	sp, r7
 8002f16:	bd80      	pop	{r7, pc}

08002f18 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002f18:	b480      	push	{r7}
 8002f1a:	b085      	sub	sp, #20
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002f20:	2300      	movs	r3, #0
 8002f22:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002f2a:	b2db      	uxtb	r3, r3
 8002f2c:	2b02      	cmp	r3, #2
 8002f2e:	d008      	beq.n	8002f42 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	2204      	movs	r2, #4
 8002f34:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	2200      	movs	r2, #0
 8002f3a:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002f3e:	2301      	movs	r3, #1
 8002f40:	e020      	b.n	8002f84 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	681a      	ldr	r2, [r3, #0]
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f022 020e 	bic.w	r2, r2, #14
 8002f50:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	681a      	ldr	r2, [r3, #0]
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f022 0201 	bic.w	r2, r2, #1
 8002f60:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f6a:	2101      	movs	r1, #1
 8002f6c:	fa01 f202 	lsl.w	r2, r1, r2
 8002f70:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	2201      	movs	r2, #1
 8002f76:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8002f82:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f84:	4618      	mov	r0, r3
 8002f86:	3714      	adds	r7, #20
 8002f88:	46bd      	mov	sp, r7
 8002f8a:	bc80      	pop	{r7}
 8002f8c:	4770      	bx	lr
	...

08002f90 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002f90:	b580      	push	{r7, lr}
 8002f92:	b084      	sub	sp, #16
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002f98:	2300      	movs	r3, #0
 8002f9a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002fa2:	b2db      	uxtb	r3, r3
 8002fa4:	2b02      	cmp	r3, #2
 8002fa6:	d005      	beq.n	8002fb4 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	2204      	movs	r2, #4
 8002fac:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002fae:	2301      	movs	r3, #1
 8002fb0:	73fb      	strb	r3, [r7, #15]
 8002fb2:	e051      	b.n	8003058 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	681a      	ldr	r2, [r3, #0]
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f022 020e 	bic.w	r2, r2, #14
 8002fc2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	681a      	ldr	r2, [r3, #0]
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f022 0201 	bic.w	r2, r2, #1
 8002fd2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	4a22      	ldr	r2, [pc, #136]	; (8003064 <HAL_DMA_Abort_IT+0xd4>)
 8002fda:	4293      	cmp	r3, r2
 8002fdc:	d029      	beq.n	8003032 <HAL_DMA_Abort_IT+0xa2>
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	4a21      	ldr	r2, [pc, #132]	; (8003068 <HAL_DMA_Abort_IT+0xd8>)
 8002fe4:	4293      	cmp	r3, r2
 8002fe6:	d022      	beq.n	800302e <HAL_DMA_Abort_IT+0x9e>
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	4a1f      	ldr	r2, [pc, #124]	; (800306c <HAL_DMA_Abort_IT+0xdc>)
 8002fee:	4293      	cmp	r3, r2
 8002ff0:	d01a      	beq.n	8003028 <HAL_DMA_Abort_IT+0x98>
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	4a1e      	ldr	r2, [pc, #120]	; (8003070 <HAL_DMA_Abort_IT+0xe0>)
 8002ff8:	4293      	cmp	r3, r2
 8002ffa:	d012      	beq.n	8003022 <HAL_DMA_Abort_IT+0x92>
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	4a1c      	ldr	r2, [pc, #112]	; (8003074 <HAL_DMA_Abort_IT+0xe4>)
 8003002:	4293      	cmp	r3, r2
 8003004:	d00a      	beq.n	800301c <HAL_DMA_Abort_IT+0x8c>
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	4a1b      	ldr	r2, [pc, #108]	; (8003078 <HAL_DMA_Abort_IT+0xe8>)
 800300c:	4293      	cmp	r3, r2
 800300e:	d102      	bne.n	8003016 <HAL_DMA_Abort_IT+0x86>
 8003010:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003014:	e00e      	b.n	8003034 <HAL_DMA_Abort_IT+0xa4>
 8003016:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800301a:	e00b      	b.n	8003034 <HAL_DMA_Abort_IT+0xa4>
 800301c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003020:	e008      	b.n	8003034 <HAL_DMA_Abort_IT+0xa4>
 8003022:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003026:	e005      	b.n	8003034 <HAL_DMA_Abort_IT+0xa4>
 8003028:	f44f 7380 	mov.w	r3, #256	; 0x100
 800302c:	e002      	b.n	8003034 <HAL_DMA_Abort_IT+0xa4>
 800302e:	2310      	movs	r3, #16
 8003030:	e000      	b.n	8003034 <HAL_DMA_Abort_IT+0xa4>
 8003032:	2301      	movs	r3, #1
 8003034:	4a11      	ldr	r2, [pc, #68]	; (800307c <HAL_DMA_Abort_IT+0xec>)
 8003036:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	2201      	movs	r2, #1
 800303c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2200      	movs	r2, #0
 8003044:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800304c:	2b00      	cmp	r3, #0
 800304e:	d003      	beq.n	8003058 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003054:	6878      	ldr	r0, [r7, #4]
 8003056:	4798      	blx	r3
    } 
  }
  return status;
 8003058:	7bfb      	ldrb	r3, [r7, #15]
}
 800305a:	4618      	mov	r0, r3
 800305c:	3710      	adds	r7, #16
 800305e:	46bd      	mov	sp, r7
 8003060:	bd80      	pop	{r7, pc}
 8003062:	bf00      	nop
 8003064:	40020008 	.word	0x40020008
 8003068:	4002001c 	.word	0x4002001c
 800306c:	40020030 	.word	0x40020030
 8003070:	40020044 	.word	0x40020044
 8003074:	40020058 	.word	0x40020058
 8003078:	4002006c 	.word	0x4002006c
 800307c:	40020000 	.word	0x40020000

08003080 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003080:	b580      	push	{r7, lr}
 8003082:	b084      	sub	sp, #16
 8003084:	af00      	add	r7, sp, #0
 8003086:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800309c:	2204      	movs	r2, #4
 800309e:	409a      	lsls	r2, r3
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	4013      	ands	r3, r2
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d04f      	beq.n	8003148 <HAL_DMA_IRQHandler+0xc8>
 80030a8:	68bb      	ldr	r3, [r7, #8]
 80030aa:	f003 0304 	and.w	r3, r3, #4
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d04a      	beq.n	8003148 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f003 0320 	and.w	r3, r3, #32
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d107      	bne.n	80030d0 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	681a      	ldr	r2, [r3, #0]
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f022 0204 	bic.w	r2, r2, #4
 80030ce:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	4a66      	ldr	r2, [pc, #408]	; (8003270 <HAL_DMA_IRQHandler+0x1f0>)
 80030d6:	4293      	cmp	r3, r2
 80030d8:	d029      	beq.n	800312e <HAL_DMA_IRQHandler+0xae>
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	4a65      	ldr	r2, [pc, #404]	; (8003274 <HAL_DMA_IRQHandler+0x1f4>)
 80030e0:	4293      	cmp	r3, r2
 80030e2:	d022      	beq.n	800312a <HAL_DMA_IRQHandler+0xaa>
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	4a63      	ldr	r2, [pc, #396]	; (8003278 <HAL_DMA_IRQHandler+0x1f8>)
 80030ea:	4293      	cmp	r3, r2
 80030ec:	d01a      	beq.n	8003124 <HAL_DMA_IRQHandler+0xa4>
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	4a62      	ldr	r2, [pc, #392]	; (800327c <HAL_DMA_IRQHandler+0x1fc>)
 80030f4:	4293      	cmp	r3, r2
 80030f6:	d012      	beq.n	800311e <HAL_DMA_IRQHandler+0x9e>
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	4a60      	ldr	r2, [pc, #384]	; (8003280 <HAL_DMA_IRQHandler+0x200>)
 80030fe:	4293      	cmp	r3, r2
 8003100:	d00a      	beq.n	8003118 <HAL_DMA_IRQHandler+0x98>
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	4a5f      	ldr	r2, [pc, #380]	; (8003284 <HAL_DMA_IRQHandler+0x204>)
 8003108:	4293      	cmp	r3, r2
 800310a:	d102      	bne.n	8003112 <HAL_DMA_IRQHandler+0x92>
 800310c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003110:	e00e      	b.n	8003130 <HAL_DMA_IRQHandler+0xb0>
 8003112:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8003116:	e00b      	b.n	8003130 <HAL_DMA_IRQHandler+0xb0>
 8003118:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800311c:	e008      	b.n	8003130 <HAL_DMA_IRQHandler+0xb0>
 800311e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003122:	e005      	b.n	8003130 <HAL_DMA_IRQHandler+0xb0>
 8003124:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003128:	e002      	b.n	8003130 <HAL_DMA_IRQHandler+0xb0>
 800312a:	2340      	movs	r3, #64	; 0x40
 800312c:	e000      	b.n	8003130 <HAL_DMA_IRQHandler+0xb0>
 800312e:	2304      	movs	r3, #4
 8003130:	4a55      	ldr	r2, [pc, #340]	; (8003288 <HAL_DMA_IRQHandler+0x208>)
 8003132:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003138:	2b00      	cmp	r3, #0
 800313a:	f000 8094 	beq.w	8003266 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003142:	6878      	ldr	r0, [r7, #4]
 8003144:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8003146:	e08e      	b.n	8003266 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800314c:	2202      	movs	r2, #2
 800314e:	409a      	lsls	r2, r3
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	4013      	ands	r3, r2
 8003154:	2b00      	cmp	r3, #0
 8003156:	d056      	beq.n	8003206 <HAL_DMA_IRQHandler+0x186>
 8003158:	68bb      	ldr	r3, [r7, #8]
 800315a:	f003 0302 	and.w	r3, r3, #2
 800315e:	2b00      	cmp	r3, #0
 8003160:	d051      	beq.n	8003206 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f003 0320 	and.w	r3, r3, #32
 800316c:	2b00      	cmp	r3, #0
 800316e:	d10b      	bne.n	8003188 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	681a      	ldr	r2, [r3, #0]
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f022 020a 	bic.w	r2, r2, #10
 800317e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2201      	movs	r2, #1
 8003184:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	4a38      	ldr	r2, [pc, #224]	; (8003270 <HAL_DMA_IRQHandler+0x1f0>)
 800318e:	4293      	cmp	r3, r2
 8003190:	d029      	beq.n	80031e6 <HAL_DMA_IRQHandler+0x166>
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	4a37      	ldr	r2, [pc, #220]	; (8003274 <HAL_DMA_IRQHandler+0x1f4>)
 8003198:	4293      	cmp	r3, r2
 800319a:	d022      	beq.n	80031e2 <HAL_DMA_IRQHandler+0x162>
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	4a35      	ldr	r2, [pc, #212]	; (8003278 <HAL_DMA_IRQHandler+0x1f8>)
 80031a2:	4293      	cmp	r3, r2
 80031a4:	d01a      	beq.n	80031dc <HAL_DMA_IRQHandler+0x15c>
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	4a34      	ldr	r2, [pc, #208]	; (800327c <HAL_DMA_IRQHandler+0x1fc>)
 80031ac:	4293      	cmp	r3, r2
 80031ae:	d012      	beq.n	80031d6 <HAL_DMA_IRQHandler+0x156>
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	4a32      	ldr	r2, [pc, #200]	; (8003280 <HAL_DMA_IRQHandler+0x200>)
 80031b6:	4293      	cmp	r3, r2
 80031b8:	d00a      	beq.n	80031d0 <HAL_DMA_IRQHandler+0x150>
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	4a31      	ldr	r2, [pc, #196]	; (8003284 <HAL_DMA_IRQHandler+0x204>)
 80031c0:	4293      	cmp	r3, r2
 80031c2:	d102      	bne.n	80031ca <HAL_DMA_IRQHandler+0x14a>
 80031c4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80031c8:	e00e      	b.n	80031e8 <HAL_DMA_IRQHandler+0x168>
 80031ca:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80031ce:	e00b      	b.n	80031e8 <HAL_DMA_IRQHandler+0x168>
 80031d0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80031d4:	e008      	b.n	80031e8 <HAL_DMA_IRQHandler+0x168>
 80031d6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80031da:	e005      	b.n	80031e8 <HAL_DMA_IRQHandler+0x168>
 80031dc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80031e0:	e002      	b.n	80031e8 <HAL_DMA_IRQHandler+0x168>
 80031e2:	2320      	movs	r3, #32
 80031e4:	e000      	b.n	80031e8 <HAL_DMA_IRQHandler+0x168>
 80031e6:	2302      	movs	r3, #2
 80031e8:	4a27      	ldr	r2, [pc, #156]	; (8003288 <HAL_DMA_IRQHandler+0x208>)
 80031ea:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	2200      	movs	r2, #0
 80031f0:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d034      	beq.n	8003266 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003200:	6878      	ldr	r0, [r7, #4]
 8003202:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8003204:	e02f      	b.n	8003266 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800320a:	2208      	movs	r2, #8
 800320c:	409a      	lsls	r2, r3
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	4013      	ands	r3, r2
 8003212:	2b00      	cmp	r3, #0
 8003214:	d028      	beq.n	8003268 <HAL_DMA_IRQHandler+0x1e8>
 8003216:	68bb      	ldr	r3, [r7, #8]
 8003218:	f003 0308 	and.w	r3, r3, #8
 800321c:	2b00      	cmp	r3, #0
 800321e:	d023      	beq.n	8003268 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	681a      	ldr	r2, [r3, #0]
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f022 020e 	bic.w	r2, r2, #14
 800322e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003238:	2101      	movs	r1, #1
 800323a:	fa01 f202 	lsl.w	r2, r1, r2
 800323e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	2201      	movs	r2, #1
 8003244:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	2201      	movs	r2, #1
 800324a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	2200      	movs	r2, #0
 8003252:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800325a:	2b00      	cmp	r3, #0
 800325c:	d004      	beq.n	8003268 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003262:	6878      	ldr	r0, [r7, #4]
 8003264:	4798      	blx	r3
    }
  }
  return;
 8003266:	bf00      	nop
 8003268:	bf00      	nop
}
 800326a:	3710      	adds	r7, #16
 800326c:	46bd      	mov	sp, r7
 800326e:	bd80      	pop	{r7, pc}
 8003270:	40020008 	.word	0x40020008
 8003274:	4002001c 	.word	0x4002001c
 8003278:	40020030 	.word	0x40020030
 800327c:	40020044 	.word	0x40020044
 8003280:	40020058 	.word	0x40020058
 8003284:	4002006c 	.word	0x4002006c
 8003288:	40020000 	.word	0x40020000

0800328c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800328c:	b480      	push	{r7}
 800328e:	b085      	sub	sp, #20
 8003290:	af00      	add	r7, sp, #0
 8003292:	60f8      	str	r0, [r7, #12]
 8003294:	60b9      	str	r1, [r7, #8]
 8003296:	607a      	str	r2, [r7, #4]
 8003298:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032a2:	2101      	movs	r1, #1
 80032a4:	fa01 f202 	lsl.w	r2, r1, r2
 80032a8:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	683a      	ldr	r2, [r7, #0]
 80032b0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	685b      	ldr	r3, [r3, #4]
 80032b6:	2b10      	cmp	r3, #16
 80032b8:	d108      	bne.n	80032cc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	687a      	ldr	r2, [r7, #4]
 80032c0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	68ba      	ldr	r2, [r7, #8]
 80032c8:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80032ca:	e007      	b.n	80032dc <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	68ba      	ldr	r2, [r7, #8]
 80032d2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	687a      	ldr	r2, [r7, #4]
 80032da:	60da      	str	r2, [r3, #12]
}
 80032dc:	bf00      	nop
 80032de:	3714      	adds	r7, #20
 80032e0:	46bd      	mov	sp, r7
 80032e2:	bc80      	pop	{r7}
 80032e4:	4770      	bx	lr
	...

080032e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80032e8:	b480      	push	{r7}
 80032ea:	b08b      	sub	sp, #44	; 0x2c
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]
 80032f0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80032f2:	2300      	movs	r3, #0
 80032f4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80032f6:	2300      	movs	r3, #0
 80032f8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80032fa:	e161      	b.n	80035c0 <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80032fc:	2201      	movs	r2, #1
 80032fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003300:	fa02 f303 	lsl.w	r3, r2, r3
 8003304:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003306:	683b      	ldr	r3, [r7, #0]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	69fa      	ldr	r2, [r7, #28]
 800330c:	4013      	ands	r3, r2
 800330e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003310:	69ba      	ldr	r2, [r7, #24]
 8003312:	69fb      	ldr	r3, [r7, #28]
 8003314:	429a      	cmp	r2, r3
 8003316:	f040 8150 	bne.w	80035ba <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800331a:	683b      	ldr	r3, [r7, #0]
 800331c:	685b      	ldr	r3, [r3, #4]
 800331e:	4a97      	ldr	r2, [pc, #604]	; (800357c <HAL_GPIO_Init+0x294>)
 8003320:	4293      	cmp	r3, r2
 8003322:	d05e      	beq.n	80033e2 <HAL_GPIO_Init+0xfa>
 8003324:	4a95      	ldr	r2, [pc, #596]	; (800357c <HAL_GPIO_Init+0x294>)
 8003326:	4293      	cmp	r3, r2
 8003328:	d875      	bhi.n	8003416 <HAL_GPIO_Init+0x12e>
 800332a:	4a95      	ldr	r2, [pc, #596]	; (8003580 <HAL_GPIO_Init+0x298>)
 800332c:	4293      	cmp	r3, r2
 800332e:	d058      	beq.n	80033e2 <HAL_GPIO_Init+0xfa>
 8003330:	4a93      	ldr	r2, [pc, #588]	; (8003580 <HAL_GPIO_Init+0x298>)
 8003332:	4293      	cmp	r3, r2
 8003334:	d86f      	bhi.n	8003416 <HAL_GPIO_Init+0x12e>
 8003336:	4a93      	ldr	r2, [pc, #588]	; (8003584 <HAL_GPIO_Init+0x29c>)
 8003338:	4293      	cmp	r3, r2
 800333a:	d052      	beq.n	80033e2 <HAL_GPIO_Init+0xfa>
 800333c:	4a91      	ldr	r2, [pc, #580]	; (8003584 <HAL_GPIO_Init+0x29c>)
 800333e:	4293      	cmp	r3, r2
 8003340:	d869      	bhi.n	8003416 <HAL_GPIO_Init+0x12e>
 8003342:	4a91      	ldr	r2, [pc, #580]	; (8003588 <HAL_GPIO_Init+0x2a0>)
 8003344:	4293      	cmp	r3, r2
 8003346:	d04c      	beq.n	80033e2 <HAL_GPIO_Init+0xfa>
 8003348:	4a8f      	ldr	r2, [pc, #572]	; (8003588 <HAL_GPIO_Init+0x2a0>)
 800334a:	4293      	cmp	r3, r2
 800334c:	d863      	bhi.n	8003416 <HAL_GPIO_Init+0x12e>
 800334e:	4a8f      	ldr	r2, [pc, #572]	; (800358c <HAL_GPIO_Init+0x2a4>)
 8003350:	4293      	cmp	r3, r2
 8003352:	d046      	beq.n	80033e2 <HAL_GPIO_Init+0xfa>
 8003354:	4a8d      	ldr	r2, [pc, #564]	; (800358c <HAL_GPIO_Init+0x2a4>)
 8003356:	4293      	cmp	r3, r2
 8003358:	d85d      	bhi.n	8003416 <HAL_GPIO_Init+0x12e>
 800335a:	2b12      	cmp	r3, #18
 800335c:	d82a      	bhi.n	80033b4 <HAL_GPIO_Init+0xcc>
 800335e:	2b12      	cmp	r3, #18
 8003360:	d859      	bhi.n	8003416 <HAL_GPIO_Init+0x12e>
 8003362:	a201      	add	r2, pc, #4	; (adr r2, 8003368 <HAL_GPIO_Init+0x80>)
 8003364:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003368:	080033e3 	.word	0x080033e3
 800336c:	080033bd 	.word	0x080033bd
 8003370:	080033cf 	.word	0x080033cf
 8003374:	08003411 	.word	0x08003411
 8003378:	08003417 	.word	0x08003417
 800337c:	08003417 	.word	0x08003417
 8003380:	08003417 	.word	0x08003417
 8003384:	08003417 	.word	0x08003417
 8003388:	08003417 	.word	0x08003417
 800338c:	08003417 	.word	0x08003417
 8003390:	08003417 	.word	0x08003417
 8003394:	08003417 	.word	0x08003417
 8003398:	08003417 	.word	0x08003417
 800339c:	08003417 	.word	0x08003417
 80033a0:	08003417 	.word	0x08003417
 80033a4:	08003417 	.word	0x08003417
 80033a8:	08003417 	.word	0x08003417
 80033ac:	080033c5 	.word	0x080033c5
 80033b0:	080033d9 	.word	0x080033d9
 80033b4:	4a76      	ldr	r2, [pc, #472]	; (8003590 <HAL_GPIO_Init+0x2a8>)
 80033b6:	4293      	cmp	r3, r2
 80033b8:	d013      	beq.n	80033e2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80033ba:	e02c      	b.n	8003416 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80033bc:	683b      	ldr	r3, [r7, #0]
 80033be:	68db      	ldr	r3, [r3, #12]
 80033c0:	623b      	str	r3, [r7, #32]
          break;
 80033c2:	e029      	b.n	8003418 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80033c4:	683b      	ldr	r3, [r7, #0]
 80033c6:	68db      	ldr	r3, [r3, #12]
 80033c8:	3304      	adds	r3, #4
 80033ca:	623b      	str	r3, [r7, #32]
          break;
 80033cc:	e024      	b.n	8003418 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80033ce:	683b      	ldr	r3, [r7, #0]
 80033d0:	68db      	ldr	r3, [r3, #12]
 80033d2:	3308      	adds	r3, #8
 80033d4:	623b      	str	r3, [r7, #32]
          break;
 80033d6:	e01f      	b.n	8003418 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80033d8:	683b      	ldr	r3, [r7, #0]
 80033da:	68db      	ldr	r3, [r3, #12]
 80033dc:	330c      	adds	r3, #12
 80033de:	623b      	str	r3, [r7, #32]
          break;
 80033e0:	e01a      	b.n	8003418 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80033e2:	683b      	ldr	r3, [r7, #0]
 80033e4:	689b      	ldr	r3, [r3, #8]
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d102      	bne.n	80033f0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80033ea:	2304      	movs	r3, #4
 80033ec:	623b      	str	r3, [r7, #32]
          break;
 80033ee:	e013      	b.n	8003418 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80033f0:	683b      	ldr	r3, [r7, #0]
 80033f2:	689b      	ldr	r3, [r3, #8]
 80033f4:	2b01      	cmp	r3, #1
 80033f6:	d105      	bne.n	8003404 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80033f8:	2308      	movs	r3, #8
 80033fa:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	69fa      	ldr	r2, [r7, #28]
 8003400:	611a      	str	r2, [r3, #16]
          break;
 8003402:	e009      	b.n	8003418 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003404:	2308      	movs	r3, #8
 8003406:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	69fa      	ldr	r2, [r7, #28]
 800340c:	615a      	str	r2, [r3, #20]
          break;
 800340e:	e003      	b.n	8003418 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003410:	2300      	movs	r3, #0
 8003412:	623b      	str	r3, [r7, #32]
          break;
 8003414:	e000      	b.n	8003418 <HAL_GPIO_Init+0x130>
          break;
 8003416:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003418:	69bb      	ldr	r3, [r7, #24]
 800341a:	2bff      	cmp	r3, #255	; 0xff
 800341c:	d801      	bhi.n	8003422 <HAL_GPIO_Init+0x13a>
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	e001      	b.n	8003426 <HAL_GPIO_Init+0x13e>
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	3304      	adds	r3, #4
 8003426:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003428:	69bb      	ldr	r3, [r7, #24]
 800342a:	2bff      	cmp	r3, #255	; 0xff
 800342c:	d802      	bhi.n	8003434 <HAL_GPIO_Init+0x14c>
 800342e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003430:	009b      	lsls	r3, r3, #2
 8003432:	e002      	b.n	800343a <HAL_GPIO_Init+0x152>
 8003434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003436:	3b08      	subs	r3, #8
 8003438:	009b      	lsls	r3, r3, #2
 800343a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800343c:	697b      	ldr	r3, [r7, #20]
 800343e:	681a      	ldr	r2, [r3, #0]
 8003440:	210f      	movs	r1, #15
 8003442:	693b      	ldr	r3, [r7, #16]
 8003444:	fa01 f303 	lsl.w	r3, r1, r3
 8003448:	43db      	mvns	r3, r3
 800344a:	401a      	ands	r2, r3
 800344c:	6a39      	ldr	r1, [r7, #32]
 800344e:	693b      	ldr	r3, [r7, #16]
 8003450:	fa01 f303 	lsl.w	r3, r1, r3
 8003454:	431a      	orrs	r2, r3
 8003456:	697b      	ldr	r3, [r7, #20]
 8003458:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800345a:	683b      	ldr	r3, [r7, #0]
 800345c:	685b      	ldr	r3, [r3, #4]
 800345e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003462:	2b00      	cmp	r3, #0
 8003464:	f000 80a9 	beq.w	80035ba <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003468:	4b4a      	ldr	r3, [pc, #296]	; (8003594 <HAL_GPIO_Init+0x2ac>)
 800346a:	699b      	ldr	r3, [r3, #24]
 800346c:	4a49      	ldr	r2, [pc, #292]	; (8003594 <HAL_GPIO_Init+0x2ac>)
 800346e:	f043 0301 	orr.w	r3, r3, #1
 8003472:	6193      	str	r3, [r2, #24]
 8003474:	4b47      	ldr	r3, [pc, #284]	; (8003594 <HAL_GPIO_Init+0x2ac>)
 8003476:	699b      	ldr	r3, [r3, #24]
 8003478:	f003 0301 	and.w	r3, r3, #1
 800347c:	60bb      	str	r3, [r7, #8]
 800347e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003480:	4a45      	ldr	r2, [pc, #276]	; (8003598 <HAL_GPIO_Init+0x2b0>)
 8003482:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003484:	089b      	lsrs	r3, r3, #2
 8003486:	3302      	adds	r3, #2
 8003488:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800348c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800348e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003490:	f003 0303 	and.w	r3, r3, #3
 8003494:	009b      	lsls	r3, r3, #2
 8003496:	220f      	movs	r2, #15
 8003498:	fa02 f303 	lsl.w	r3, r2, r3
 800349c:	43db      	mvns	r3, r3
 800349e:	68fa      	ldr	r2, [r7, #12]
 80034a0:	4013      	ands	r3, r2
 80034a2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	4a3d      	ldr	r2, [pc, #244]	; (800359c <HAL_GPIO_Init+0x2b4>)
 80034a8:	4293      	cmp	r3, r2
 80034aa:	d00d      	beq.n	80034c8 <HAL_GPIO_Init+0x1e0>
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	4a3c      	ldr	r2, [pc, #240]	; (80035a0 <HAL_GPIO_Init+0x2b8>)
 80034b0:	4293      	cmp	r3, r2
 80034b2:	d007      	beq.n	80034c4 <HAL_GPIO_Init+0x1dc>
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	4a3b      	ldr	r2, [pc, #236]	; (80035a4 <HAL_GPIO_Init+0x2bc>)
 80034b8:	4293      	cmp	r3, r2
 80034ba:	d101      	bne.n	80034c0 <HAL_GPIO_Init+0x1d8>
 80034bc:	2302      	movs	r3, #2
 80034be:	e004      	b.n	80034ca <HAL_GPIO_Init+0x1e2>
 80034c0:	2303      	movs	r3, #3
 80034c2:	e002      	b.n	80034ca <HAL_GPIO_Init+0x1e2>
 80034c4:	2301      	movs	r3, #1
 80034c6:	e000      	b.n	80034ca <HAL_GPIO_Init+0x1e2>
 80034c8:	2300      	movs	r3, #0
 80034ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034cc:	f002 0203 	and.w	r2, r2, #3
 80034d0:	0092      	lsls	r2, r2, #2
 80034d2:	4093      	lsls	r3, r2
 80034d4:	68fa      	ldr	r2, [r7, #12]
 80034d6:	4313      	orrs	r3, r2
 80034d8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80034da:	492f      	ldr	r1, [pc, #188]	; (8003598 <HAL_GPIO_Init+0x2b0>)
 80034dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034de:	089b      	lsrs	r3, r3, #2
 80034e0:	3302      	adds	r3, #2
 80034e2:	68fa      	ldr	r2, [r7, #12]
 80034e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80034e8:	683b      	ldr	r3, [r7, #0]
 80034ea:	685b      	ldr	r3, [r3, #4]
 80034ec:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d006      	beq.n	8003502 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80034f4:	4b2c      	ldr	r3, [pc, #176]	; (80035a8 <HAL_GPIO_Init+0x2c0>)
 80034f6:	689a      	ldr	r2, [r3, #8]
 80034f8:	492b      	ldr	r1, [pc, #172]	; (80035a8 <HAL_GPIO_Init+0x2c0>)
 80034fa:	69bb      	ldr	r3, [r7, #24]
 80034fc:	4313      	orrs	r3, r2
 80034fe:	608b      	str	r3, [r1, #8]
 8003500:	e006      	b.n	8003510 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003502:	4b29      	ldr	r3, [pc, #164]	; (80035a8 <HAL_GPIO_Init+0x2c0>)
 8003504:	689a      	ldr	r2, [r3, #8]
 8003506:	69bb      	ldr	r3, [r7, #24]
 8003508:	43db      	mvns	r3, r3
 800350a:	4927      	ldr	r1, [pc, #156]	; (80035a8 <HAL_GPIO_Init+0x2c0>)
 800350c:	4013      	ands	r3, r2
 800350e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003510:	683b      	ldr	r3, [r7, #0]
 8003512:	685b      	ldr	r3, [r3, #4]
 8003514:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003518:	2b00      	cmp	r3, #0
 800351a:	d006      	beq.n	800352a <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800351c:	4b22      	ldr	r3, [pc, #136]	; (80035a8 <HAL_GPIO_Init+0x2c0>)
 800351e:	68da      	ldr	r2, [r3, #12]
 8003520:	4921      	ldr	r1, [pc, #132]	; (80035a8 <HAL_GPIO_Init+0x2c0>)
 8003522:	69bb      	ldr	r3, [r7, #24]
 8003524:	4313      	orrs	r3, r2
 8003526:	60cb      	str	r3, [r1, #12]
 8003528:	e006      	b.n	8003538 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800352a:	4b1f      	ldr	r3, [pc, #124]	; (80035a8 <HAL_GPIO_Init+0x2c0>)
 800352c:	68da      	ldr	r2, [r3, #12]
 800352e:	69bb      	ldr	r3, [r7, #24]
 8003530:	43db      	mvns	r3, r3
 8003532:	491d      	ldr	r1, [pc, #116]	; (80035a8 <HAL_GPIO_Init+0x2c0>)
 8003534:	4013      	ands	r3, r2
 8003536:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003538:	683b      	ldr	r3, [r7, #0]
 800353a:	685b      	ldr	r3, [r3, #4]
 800353c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003540:	2b00      	cmp	r3, #0
 8003542:	d006      	beq.n	8003552 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003544:	4b18      	ldr	r3, [pc, #96]	; (80035a8 <HAL_GPIO_Init+0x2c0>)
 8003546:	685a      	ldr	r2, [r3, #4]
 8003548:	4917      	ldr	r1, [pc, #92]	; (80035a8 <HAL_GPIO_Init+0x2c0>)
 800354a:	69bb      	ldr	r3, [r7, #24]
 800354c:	4313      	orrs	r3, r2
 800354e:	604b      	str	r3, [r1, #4]
 8003550:	e006      	b.n	8003560 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003552:	4b15      	ldr	r3, [pc, #84]	; (80035a8 <HAL_GPIO_Init+0x2c0>)
 8003554:	685a      	ldr	r2, [r3, #4]
 8003556:	69bb      	ldr	r3, [r7, #24]
 8003558:	43db      	mvns	r3, r3
 800355a:	4913      	ldr	r1, [pc, #76]	; (80035a8 <HAL_GPIO_Init+0x2c0>)
 800355c:	4013      	ands	r3, r2
 800355e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003560:	683b      	ldr	r3, [r7, #0]
 8003562:	685b      	ldr	r3, [r3, #4]
 8003564:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003568:	2b00      	cmp	r3, #0
 800356a:	d01f      	beq.n	80035ac <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800356c:	4b0e      	ldr	r3, [pc, #56]	; (80035a8 <HAL_GPIO_Init+0x2c0>)
 800356e:	681a      	ldr	r2, [r3, #0]
 8003570:	490d      	ldr	r1, [pc, #52]	; (80035a8 <HAL_GPIO_Init+0x2c0>)
 8003572:	69bb      	ldr	r3, [r7, #24]
 8003574:	4313      	orrs	r3, r2
 8003576:	600b      	str	r3, [r1, #0]
 8003578:	e01f      	b.n	80035ba <HAL_GPIO_Init+0x2d2>
 800357a:	bf00      	nop
 800357c:	10320000 	.word	0x10320000
 8003580:	10310000 	.word	0x10310000
 8003584:	10220000 	.word	0x10220000
 8003588:	10210000 	.word	0x10210000
 800358c:	10120000 	.word	0x10120000
 8003590:	10110000 	.word	0x10110000
 8003594:	40021000 	.word	0x40021000
 8003598:	40010000 	.word	0x40010000
 800359c:	40010800 	.word	0x40010800
 80035a0:	40010c00 	.word	0x40010c00
 80035a4:	40011000 	.word	0x40011000
 80035a8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80035ac:	4b0b      	ldr	r3, [pc, #44]	; (80035dc <HAL_GPIO_Init+0x2f4>)
 80035ae:	681a      	ldr	r2, [r3, #0]
 80035b0:	69bb      	ldr	r3, [r7, #24]
 80035b2:	43db      	mvns	r3, r3
 80035b4:	4909      	ldr	r1, [pc, #36]	; (80035dc <HAL_GPIO_Init+0x2f4>)
 80035b6:	4013      	ands	r3, r2
 80035b8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80035ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035bc:	3301      	adds	r3, #1
 80035be:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80035c0:	683b      	ldr	r3, [r7, #0]
 80035c2:	681a      	ldr	r2, [r3, #0]
 80035c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035c6:	fa22 f303 	lsr.w	r3, r2, r3
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	f47f ae96 	bne.w	80032fc <HAL_GPIO_Init+0x14>
  }
}
 80035d0:	bf00      	nop
 80035d2:	bf00      	nop
 80035d4:	372c      	adds	r7, #44	; 0x2c
 80035d6:	46bd      	mov	sp, r7
 80035d8:	bc80      	pop	{r7}
 80035da:	4770      	bx	lr
 80035dc:	40010400 	.word	0x40010400

080035e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80035e0:	b480      	push	{r7}
 80035e2:	b083      	sub	sp, #12
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]
 80035e8:	460b      	mov	r3, r1
 80035ea:	807b      	strh	r3, [r7, #2]
 80035ec:	4613      	mov	r3, r2
 80035ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80035f0:	787b      	ldrb	r3, [r7, #1]
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d003      	beq.n	80035fe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80035f6:	887a      	ldrh	r2, [r7, #2]
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80035fc:	e003      	b.n	8003606 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80035fe:	887b      	ldrh	r3, [r7, #2]
 8003600:	041a      	lsls	r2, r3, #16
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	611a      	str	r2, [r3, #16]
}
 8003606:	bf00      	nop
 8003608:	370c      	adds	r7, #12
 800360a:	46bd      	mov	sp, r7
 800360c:	bc80      	pop	{r7}
 800360e:	4770      	bx	lr

08003610 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003610:	b480      	push	{r7}
 8003612:	b085      	sub	sp, #20
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]
 8003618:	460b      	mov	r3, r1
 800361a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	68db      	ldr	r3, [r3, #12]
 8003620:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003622:	887a      	ldrh	r2, [r7, #2]
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	4013      	ands	r3, r2
 8003628:	041a      	lsls	r2, r3, #16
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	43d9      	mvns	r1, r3
 800362e:	887b      	ldrh	r3, [r7, #2]
 8003630:	400b      	ands	r3, r1
 8003632:	431a      	orrs	r2, r3
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	611a      	str	r2, [r3, #16]
}
 8003638:	bf00      	nop
 800363a:	3714      	adds	r7, #20
 800363c:	46bd      	mov	sp, r7
 800363e:	bc80      	pop	{r7}
 8003640:	4770      	bx	lr
	...

08003644 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003644:	b580      	push	{r7, lr}
 8003646:	b086      	sub	sp, #24
 8003648:	af00      	add	r7, sp, #0
 800364a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	2b00      	cmp	r3, #0
 8003650:	d101      	bne.n	8003656 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003652:	2301      	movs	r3, #1
 8003654:	e272      	b.n	8003b3c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f003 0301 	and.w	r3, r3, #1
 800365e:	2b00      	cmp	r3, #0
 8003660:	f000 8087 	beq.w	8003772 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003664:	4b92      	ldr	r3, [pc, #584]	; (80038b0 <HAL_RCC_OscConfig+0x26c>)
 8003666:	685b      	ldr	r3, [r3, #4]
 8003668:	f003 030c 	and.w	r3, r3, #12
 800366c:	2b04      	cmp	r3, #4
 800366e:	d00c      	beq.n	800368a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003670:	4b8f      	ldr	r3, [pc, #572]	; (80038b0 <HAL_RCC_OscConfig+0x26c>)
 8003672:	685b      	ldr	r3, [r3, #4]
 8003674:	f003 030c 	and.w	r3, r3, #12
 8003678:	2b08      	cmp	r3, #8
 800367a:	d112      	bne.n	80036a2 <HAL_RCC_OscConfig+0x5e>
 800367c:	4b8c      	ldr	r3, [pc, #560]	; (80038b0 <HAL_RCC_OscConfig+0x26c>)
 800367e:	685b      	ldr	r3, [r3, #4]
 8003680:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003684:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003688:	d10b      	bne.n	80036a2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800368a:	4b89      	ldr	r3, [pc, #548]	; (80038b0 <HAL_RCC_OscConfig+0x26c>)
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003692:	2b00      	cmp	r3, #0
 8003694:	d06c      	beq.n	8003770 <HAL_RCC_OscConfig+0x12c>
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	685b      	ldr	r3, [r3, #4]
 800369a:	2b00      	cmp	r3, #0
 800369c:	d168      	bne.n	8003770 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800369e:	2301      	movs	r3, #1
 80036a0:	e24c      	b.n	8003b3c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	685b      	ldr	r3, [r3, #4]
 80036a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80036aa:	d106      	bne.n	80036ba <HAL_RCC_OscConfig+0x76>
 80036ac:	4b80      	ldr	r3, [pc, #512]	; (80038b0 <HAL_RCC_OscConfig+0x26c>)
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	4a7f      	ldr	r2, [pc, #508]	; (80038b0 <HAL_RCC_OscConfig+0x26c>)
 80036b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036b6:	6013      	str	r3, [r2, #0]
 80036b8:	e02e      	b.n	8003718 <HAL_RCC_OscConfig+0xd4>
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	685b      	ldr	r3, [r3, #4]
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d10c      	bne.n	80036dc <HAL_RCC_OscConfig+0x98>
 80036c2:	4b7b      	ldr	r3, [pc, #492]	; (80038b0 <HAL_RCC_OscConfig+0x26c>)
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	4a7a      	ldr	r2, [pc, #488]	; (80038b0 <HAL_RCC_OscConfig+0x26c>)
 80036c8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80036cc:	6013      	str	r3, [r2, #0]
 80036ce:	4b78      	ldr	r3, [pc, #480]	; (80038b0 <HAL_RCC_OscConfig+0x26c>)
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	4a77      	ldr	r2, [pc, #476]	; (80038b0 <HAL_RCC_OscConfig+0x26c>)
 80036d4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80036d8:	6013      	str	r3, [r2, #0]
 80036da:	e01d      	b.n	8003718 <HAL_RCC_OscConfig+0xd4>
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	685b      	ldr	r3, [r3, #4]
 80036e0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80036e4:	d10c      	bne.n	8003700 <HAL_RCC_OscConfig+0xbc>
 80036e6:	4b72      	ldr	r3, [pc, #456]	; (80038b0 <HAL_RCC_OscConfig+0x26c>)
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	4a71      	ldr	r2, [pc, #452]	; (80038b0 <HAL_RCC_OscConfig+0x26c>)
 80036ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80036f0:	6013      	str	r3, [r2, #0]
 80036f2:	4b6f      	ldr	r3, [pc, #444]	; (80038b0 <HAL_RCC_OscConfig+0x26c>)
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	4a6e      	ldr	r2, [pc, #440]	; (80038b0 <HAL_RCC_OscConfig+0x26c>)
 80036f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036fc:	6013      	str	r3, [r2, #0]
 80036fe:	e00b      	b.n	8003718 <HAL_RCC_OscConfig+0xd4>
 8003700:	4b6b      	ldr	r3, [pc, #428]	; (80038b0 <HAL_RCC_OscConfig+0x26c>)
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	4a6a      	ldr	r2, [pc, #424]	; (80038b0 <HAL_RCC_OscConfig+0x26c>)
 8003706:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800370a:	6013      	str	r3, [r2, #0]
 800370c:	4b68      	ldr	r3, [pc, #416]	; (80038b0 <HAL_RCC_OscConfig+0x26c>)
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	4a67      	ldr	r2, [pc, #412]	; (80038b0 <HAL_RCC_OscConfig+0x26c>)
 8003712:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003716:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	685b      	ldr	r3, [r3, #4]
 800371c:	2b00      	cmp	r3, #0
 800371e:	d013      	beq.n	8003748 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003720:	f7ff fa04 	bl	8002b2c <HAL_GetTick>
 8003724:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003726:	e008      	b.n	800373a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003728:	f7ff fa00 	bl	8002b2c <HAL_GetTick>
 800372c:	4602      	mov	r2, r0
 800372e:	693b      	ldr	r3, [r7, #16]
 8003730:	1ad3      	subs	r3, r2, r3
 8003732:	2b64      	cmp	r3, #100	; 0x64
 8003734:	d901      	bls.n	800373a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003736:	2303      	movs	r3, #3
 8003738:	e200      	b.n	8003b3c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800373a:	4b5d      	ldr	r3, [pc, #372]	; (80038b0 <HAL_RCC_OscConfig+0x26c>)
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003742:	2b00      	cmp	r3, #0
 8003744:	d0f0      	beq.n	8003728 <HAL_RCC_OscConfig+0xe4>
 8003746:	e014      	b.n	8003772 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003748:	f7ff f9f0 	bl	8002b2c <HAL_GetTick>
 800374c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800374e:	e008      	b.n	8003762 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003750:	f7ff f9ec 	bl	8002b2c <HAL_GetTick>
 8003754:	4602      	mov	r2, r0
 8003756:	693b      	ldr	r3, [r7, #16]
 8003758:	1ad3      	subs	r3, r2, r3
 800375a:	2b64      	cmp	r3, #100	; 0x64
 800375c:	d901      	bls.n	8003762 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800375e:	2303      	movs	r3, #3
 8003760:	e1ec      	b.n	8003b3c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003762:	4b53      	ldr	r3, [pc, #332]	; (80038b0 <HAL_RCC_OscConfig+0x26c>)
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800376a:	2b00      	cmp	r3, #0
 800376c:	d1f0      	bne.n	8003750 <HAL_RCC_OscConfig+0x10c>
 800376e:	e000      	b.n	8003772 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003770:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f003 0302 	and.w	r3, r3, #2
 800377a:	2b00      	cmp	r3, #0
 800377c:	d063      	beq.n	8003846 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800377e:	4b4c      	ldr	r3, [pc, #304]	; (80038b0 <HAL_RCC_OscConfig+0x26c>)
 8003780:	685b      	ldr	r3, [r3, #4]
 8003782:	f003 030c 	and.w	r3, r3, #12
 8003786:	2b00      	cmp	r3, #0
 8003788:	d00b      	beq.n	80037a2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800378a:	4b49      	ldr	r3, [pc, #292]	; (80038b0 <HAL_RCC_OscConfig+0x26c>)
 800378c:	685b      	ldr	r3, [r3, #4]
 800378e:	f003 030c 	and.w	r3, r3, #12
 8003792:	2b08      	cmp	r3, #8
 8003794:	d11c      	bne.n	80037d0 <HAL_RCC_OscConfig+0x18c>
 8003796:	4b46      	ldr	r3, [pc, #280]	; (80038b0 <HAL_RCC_OscConfig+0x26c>)
 8003798:	685b      	ldr	r3, [r3, #4]
 800379a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d116      	bne.n	80037d0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80037a2:	4b43      	ldr	r3, [pc, #268]	; (80038b0 <HAL_RCC_OscConfig+0x26c>)
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f003 0302 	and.w	r3, r3, #2
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d005      	beq.n	80037ba <HAL_RCC_OscConfig+0x176>
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	691b      	ldr	r3, [r3, #16]
 80037b2:	2b01      	cmp	r3, #1
 80037b4:	d001      	beq.n	80037ba <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80037b6:	2301      	movs	r3, #1
 80037b8:	e1c0      	b.n	8003b3c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037ba:	4b3d      	ldr	r3, [pc, #244]	; (80038b0 <HAL_RCC_OscConfig+0x26c>)
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	695b      	ldr	r3, [r3, #20]
 80037c6:	00db      	lsls	r3, r3, #3
 80037c8:	4939      	ldr	r1, [pc, #228]	; (80038b0 <HAL_RCC_OscConfig+0x26c>)
 80037ca:	4313      	orrs	r3, r2
 80037cc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80037ce:	e03a      	b.n	8003846 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	691b      	ldr	r3, [r3, #16]
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d020      	beq.n	800381a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80037d8:	4b36      	ldr	r3, [pc, #216]	; (80038b4 <HAL_RCC_OscConfig+0x270>)
 80037da:	2201      	movs	r2, #1
 80037dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037de:	f7ff f9a5 	bl	8002b2c <HAL_GetTick>
 80037e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037e4:	e008      	b.n	80037f8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80037e6:	f7ff f9a1 	bl	8002b2c <HAL_GetTick>
 80037ea:	4602      	mov	r2, r0
 80037ec:	693b      	ldr	r3, [r7, #16]
 80037ee:	1ad3      	subs	r3, r2, r3
 80037f0:	2b02      	cmp	r3, #2
 80037f2:	d901      	bls.n	80037f8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80037f4:	2303      	movs	r3, #3
 80037f6:	e1a1      	b.n	8003b3c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037f8:	4b2d      	ldr	r3, [pc, #180]	; (80038b0 <HAL_RCC_OscConfig+0x26c>)
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f003 0302 	and.w	r3, r3, #2
 8003800:	2b00      	cmp	r3, #0
 8003802:	d0f0      	beq.n	80037e6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003804:	4b2a      	ldr	r3, [pc, #168]	; (80038b0 <HAL_RCC_OscConfig+0x26c>)
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	695b      	ldr	r3, [r3, #20]
 8003810:	00db      	lsls	r3, r3, #3
 8003812:	4927      	ldr	r1, [pc, #156]	; (80038b0 <HAL_RCC_OscConfig+0x26c>)
 8003814:	4313      	orrs	r3, r2
 8003816:	600b      	str	r3, [r1, #0]
 8003818:	e015      	b.n	8003846 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800381a:	4b26      	ldr	r3, [pc, #152]	; (80038b4 <HAL_RCC_OscConfig+0x270>)
 800381c:	2200      	movs	r2, #0
 800381e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003820:	f7ff f984 	bl	8002b2c <HAL_GetTick>
 8003824:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003826:	e008      	b.n	800383a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003828:	f7ff f980 	bl	8002b2c <HAL_GetTick>
 800382c:	4602      	mov	r2, r0
 800382e:	693b      	ldr	r3, [r7, #16]
 8003830:	1ad3      	subs	r3, r2, r3
 8003832:	2b02      	cmp	r3, #2
 8003834:	d901      	bls.n	800383a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003836:	2303      	movs	r3, #3
 8003838:	e180      	b.n	8003b3c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800383a:	4b1d      	ldr	r3, [pc, #116]	; (80038b0 <HAL_RCC_OscConfig+0x26c>)
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f003 0302 	and.w	r3, r3, #2
 8003842:	2b00      	cmp	r3, #0
 8003844:	d1f0      	bne.n	8003828 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f003 0308 	and.w	r3, r3, #8
 800384e:	2b00      	cmp	r3, #0
 8003850:	d03a      	beq.n	80038c8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	699b      	ldr	r3, [r3, #24]
 8003856:	2b00      	cmp	r3, #0
 8003858:	d019      	beq.n	800388e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800385a:	4b17      	ldr	r3, [pc, #92]	; (80038b8 <HAL_RCC_OscConfig+0x274>)
 800385c:	2201      	movs	r2, #1
 800385e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003860:	f7ff f964 	bl	8002b2c <HAL_GetTick>
 8003864:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003866:	e008      	b.n	800387a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003868:	f7ff f960 	bl	8002b2c <HAL_GetTick>
 800386c:	4602      	mov	r2, r0
 800386e:	693b      	ldr	r3, [r7, #16]
 8003870:	1ad3      	subs	r3, r2, r3
 8003872:	2b02      	cmp	r3, #2
 8003874:	d901      	bls.n	800387a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003876:	2303      	movs	r3, #3
 8003878:	e160      	b.n	8003b3c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800387a:	4b0d      	ldr	r3, [pc, #52]	; (80038b0 <HAL_RCC_OscConfig+0x26c>)
 800387c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800387e:	f003 0302 	and.w	r3, r3, #2
 8003882:	2b00      	cmp	r3, #0
 8003884:	d0f0      	beq.n	8003868 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003886:	2001      	movs	r0, #1
 8003888:	f000 face 	bl	8003e28 <RCC_Delay>
 800388c:	e01c      	b.n	80038c8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800388e:	4b0a      	ldr	r3, [pc, #40]	; (80038b8 <HAL_RCC_OscConfig+0x274>)
 8003890:	2200      	movs	r2, #0
 8003892:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003894:	f7ff f94a 	bl	8002b2c <HAL_GetTick>
 8003898:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800389a:	e00f      	b.n	80038bc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800389c:	f7ff f946 	bl	8002b2c <HAL_GetTick>
 80038a0:	4602      	mov	r2, r0
 80038a2:	693b      	ldr	r3, [r7, #16]
 80038a4:	1ad3      	subs	r3, r2, r3
 80038a6:	2b02      	cmp	r3, #2
 80038a8:	d908      	bls.n	80038bc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80038aa:	2303      	movs	r3, #3
 80038ac:	e146      	b.n	8003b3c <HAL_RCC_OscConfig+0x4f8>
 80038ae:	bf00      	nop
 80038b0:	40021000 	.word	0x40021000
 80038b4:	42420000 	.word	0x42420000
 80038b8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80038bc:	4b92      	ldr	r3, [pc, #584]	; (8003b08 <HAL_RCC_OscConfig+0x4c4>)
 80038be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038c0:	f003 0302 	and.w	r3, r3, #2
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d1e9      	bne.n	800389c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f003 0304 	and.w	r3, r3, #4
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	f000 80a6 	beq.w	8003a22 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80038d6:	2300      	movs	r3, #0
 80038d8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80038da:	4b8b      	ldr	r3, [pc, #556]	; (8003b08 <HAL_RCC_OscConfig+0x4c4>)
 80038dc:	69db      	ldr	r3, [r3, #28]
 80038de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d10d      	bne.n	8003902 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80038e6:	4b88      	ldr	r3, [pc, #544]	; (8003b08 <HAL_RCC_OscConfig+0x4c4>)
 80038e8:	69db      	ldr	r3, [r3, #28]
 80038ea:	4a87      	ldr	r2, [pc, #540]	; (8003b08 <HAL_RCC_OscConfig+0x4c4>)
 80038ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80038f0:	61d3      	str	r3, [r2, #28]
 80038f2:	4b85      	ldr	r3, [pc, #532]	; (8003b08 <HAL_RCC_OscConfig+0x4c4>)
 80038f4:	69db      	ldr	r3, [r3, #28]
 80038f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038fa:	60bb      	str	r3, [r7, #8]
 80038fc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80038fe:	2301      	movs	r3, #1
 8003900:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003902:	4b82      	ldr	r3, [pc, #520]	; (8003b0c <HAL_RCC_OscConfig+0x4c8>)
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800390a:	2b00      	cmp	r3, #0
 800390c:	d118      	bne.n	8003940 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800390e:	4b7f      	ldr	r3, [pc, #508]	; (8003b0c <HAL_RCC_OscConfig+0x4c8>)
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	4a7e      	ldr	r2, [pc, #504]	; (8003b0c <HAL_RCC_OscConfig+0x4c8>)
 8003914:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003918:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800391a:	f7ff f907 	bl	8002b2c <HAL_GetTick>
 800391e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003920:	e008      	b.n	8003934 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003922:	f7ff f903 	bl	8002b2c <HAL_GetTick>
 8003926:	4602      	mov	r2, r0
 8003928:	693b      	ldr	r3, [r7, #16]
 800392a:	1ad3      	subs	r3, r2, r3
 800392c:	2b64      	cmp	r3, #100	; 0x64
 800392e:	d901      	bls.n	8003934 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003930:	2303      	movs	r3, #3
 8003932:	e103      	b.n	8003b3c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003934:	4b75      	ldr	r3, [pc, #468]	; (8003b0c <HAL_RCC_OscConfig+0x4c8>)
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800393c:	2b00      	cmp	r3, #0
 800393e:	d0f0      	beq.n	8003922 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	68db      	ldr	r3, [r3, #12]
 8003944:	2b01      	cmp	r3, #1
 8003946:	d106      	bne.n	8003956 <HAL_RCC_OscConfig+0x312>
 8003948:	4b6f      	ldr	r3, [pc, #444]	; (8003b08 <HAL_RCC_OscConfig+0x4c4>)
 800394a:	6a1b      	ldr	r3, [r3, #32]
 800394c:	4a6e      	ldr	r2, [pc, #440]	; (8003b08 <HAL_RCC_OscConfig+0x4c4>)
 800394e:	f043 0301 	orr.w	r3, r3, #1
 8003952:	6213      	str	r3, [r2, #32]
 8003954:	e02d      	b.n	80039b2 <HAL_RCC_OscConfig+0x36e>
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	68db      	ldr	r3, [r3, #12]
 800395a:	2b00      	cmp	r3, #0
 800395c:	d10c      	bne.n	8003978 <HAL_RCC_OscConfig+0x334>
 800395e:	4b6a      	ldr	r3, [pc, #424]	; (8003b08 <HAL_RCC_OscConfig+0x4c4>)
 8003960:	6a1b      	ldr	r3, [r3, #32]
 8003962:	4a69      	ldr	r2, [pc, #420]	; (8003b08 <HAL_RCC_OscConfig+0x4c4>)
 8003964:	f023 0301 	bic.w	r3, r3, #1
 8003968:	6213      	str	r3, [r2, #32]
 800396a:	4b67      	ldr	r3, [pc, #412]	; (8003b08 <HAL_RCC_OscConfig+0x4c4>)
 800396c:	6a1b      	ldr	r3, [r3, #32]
 800396e:	4a66      	ldr	r2, [pc, #408]	; (8003b08 <HAL_RCC_OscConfig+0x4c4>)
 8003970:	f023 0304 	bic.w	r3, r3, #4
 8003974:	6213      	str	r3, [r2, #32]
 8003976:	e01c      	b.n	80039b2 <HAL_RCC_OscConfig+0x36e>
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	68db      	ldr	r3, [r3, #12]
 800397c:	2b05      	cmp	r3, #5
 800397e:	d10c      	bne.n	800399a <HAL_RCC_OscConfig+0x356>
 8003980:	4b61      	ldr	r3, [pc, #388]	; (8003b08 <HAL_RCC_OscConfig+0x4c4>)
 8003982:	6a1b      	ldr	r3, [r3, #32]
 8003984:	4a60      	ldr	r2, [pc, #384]	; (8003b08 <HAL_RCC_OscConfig+0x4c4>)
 8003986:	f043 0304 	orr.w	r3, r3, #4
 800398a:	6213      	str	r3, [r2, #32]
 800398c:	4b5e      	ldr	r3, [pc, #376]	; (8003b08 <HAL_RCC_OscConfig+0x4c4>)
 800398e:	6a1b      	ldr	r3, [r3, #32]
 8003990:	4a5d      	ldr	r2, [pc, #372]	; (8003b08 <HAL_RCC_OscConfig+0x4c4>)
 8003992:	f043 0301 	orr.w	r3, r3, #1
 8003996:	6213      	str	r3, [r2, #32]
 8003998:	e00b      	b.n	80039b2 <HAL_RCC_OscConfig+0x36e>
 800399a:	4b5b      	ldr	r3, [pc, #364]	; (8003b08 <HAL_RCC_OscConfig+0x4c4>)
 800399c:	6a1b      	ldr	r3, [r3, #32]
 800399e:	4a5a      	ldr	r2, [pc, #360]	; (8003b08 <HAL_RCC_OscConfig+0x4c4>)
 80039a0:	f023 0301 	bic.w	r3, r3, #1
 80039a4:	6213      	str	r3, [r2, #32]
 80039a6:	4b58      	ldr	r3, [pc, #352]	; (8003b08 <HAL_RCC_OscConfig+0x4c4>)
 80039a8:	6a1b      	ldr	r3, [r3, #32]
 80039aa:	4a57      	ldr	r2, [pc, #348]	; (8003b08 <HAL_RCC_OscConfig+0x4c4>)
 80039ac:	f023 0304 	bic.w	r3, r3, #4
 80039b0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	68db      	ldr	r3, [r3, #12]
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d015      	beq.n	80039e6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80039ba:	f7ff f8b7 	bl	8002b2c <HAL_GetTick>
 80039be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039c0:	e00a      	b.n	80039d8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80039c2:	f7ff f8b3 	bl	8002b2c <HAL_GetTick>
 80039c6:	4602      	mov	r2, r0
 80039c8:	693b      	ldr	r3, [r7, #16]
 80039ca:	1ad3      	subs	r3, r2, r3
 80039cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80039d0:	4293      	cmp	r3, r2
 80039d2:	d901      	bls.n	80039d8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80039d4:	2303      	movs	r3, #3
 80039d6:	e0b1      	b.n	8003b3c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039d8:	4b4b      	ldr	r3, [pc, #300]	; (8003b08 <HAL_RCC_OscConfig+0x4c4>)
 80039da:	6a1b      	ldr	r3, [r3, #32]
 80039dc:	f003 0302 	and.w	r3, r3, #2
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d0ee      	beq.n	80039c2 <HAL_RCC_OscConfig+0x37e>
 80039e4:	e014      	b.n	8003a10 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80039e6:	f7ff f8a1 	bl	8002b2c <HAL_GetTick>
 80039ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80039ec:	e00a      	b.n	8003a04 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80039ee:	f7ff f89d 	bl	8002b2c <HAL_GetTick>
 80039f2:	4602      	mov	r2, r0
 80039f4:	693b      	ldr	r3, [r7, #16]
 80039f6:	1ad3      	subs	r3, r2, r3
 80039f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80039fc:	4293      	cmp	r3, r2
 80039fe:	d901      	bls.n	8003a04 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003a00:	2303      	movs	r3, #3
 8003a02:	e09b      	b.n	8003b3c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a04:	4b40      	ldr	r3, [pc, #256]	; (8003b08 <HAL_RCC_OscConfig+0x4c4>)
 8003a06:	6a1b      	ldr	r3, [r3, #32]
 8003a08:	f003 0302 	and.w	r3, r3, #2
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d1ee      	bne.n	80039ee <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003a10:	7dfb      	ldrb	r3, [r7, #23]
 8003a12:	2b01      	cmp	r3, #1
 8003a14:	d105      	bne.n	8003a22 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a16:	4b3c      	ldr	r3, [pc, #240]	; (8003b08 <HAL_RCC_OscConfig+0x4c4>)
 8003a18:	69db      	ldr	r3, [r3, #28]
 8003a1a:	4a3b      	ldr	r2, [pc, #236]	; (8003b08 <HAL_RCC_OscConfig+0x4c4>)
 8003a1c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a20:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	69db      	ldr	r3, [r3, #28]
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	f000 8087 	beq.w	8003b3a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003a2c:	4b36      	ldr	r3, [pc, #216]	; (8003b08 <HAL_RCC_OscConfig+0x4c4>)
 8003a2e:	685b      	ldr	r3, [r3, #4]
 8003a30:	f003 030c 	and.w	r3, r3, #12
 8003a34:	2b08      	cmp	r3, #8
 8003a36:	d061      	beq.n	8003afc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	69db      	ldr	r3, [r3, #28]
 8003a3c:	2b02      	cmp	r3, #2
 8003a3e:	d146      	bne.n	8003ace <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a40:	4b33      	ldr	r3, [pc, #204]	; (8003b10 <HAL_RCC_OscConfig+0x4cc>)
 8003a42:	2200      	movs	r2, #0
 8003a44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a46:	f7ff f871 	bl	8002b2c <HAL_GetTick>
 8003a4a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003a4c:	e008      	b.n	8003a60 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a4e:	f7ff f86d 	bl	8002b2c <HAL_GetTick>
 8003a52:	4602      	mov	r2, r0
 8003a54:	693b      	ldr	r3, [r7, #16]
 8003a56:	1ad3      	subs	r3, r2, r3
 8003a58:	2b02      	cmp	r3, #2
 8003a5a:	d901      	bls.n	8003a60 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003a5c:	2303      	movs	r3, #3
 8003a5e:	e06d      	b.n	8003b3c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003a60:	4b29      	ldr	r3, [pc, #164]	; (8003b08 <HAL_RCC_OscConfig+0x4c4>)
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d1f0      	bne.n	8003a4e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	6a1b      	ldr	r3, [r3, #32]
 8003a70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a74:	d108      	bne.n	8003a88 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003a76:	4b24      	ldr	r3, [pc, #144]	; (8003b08 <HAL_RCC_OscConfig+0x4c4>)
 8003a78:	685b      	ldr	r3, [r3, #4]
 8003a7a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	689b      	ldr	r3, [r3, #8]
 8003a82:	4921      	ldr	r1, [pc, #132]	; (8003b08 <HAL_RCC_OscConfig+0x4c4>)
 8003a84:	4313      	orrs	r3, r2
 8003a86:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003a88:	4b1f      	ldr	r3, [pc, #124]	; (8003b08 <HAL_RCC_OscConfig+0x4c4>)
 8003a8a:	685b      	ldr	r3, [r3, #4]
 8003a8c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	6a19      	ldr	r1, [r3, #32]
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a98:	430b      	orrs	r3, r1
 8003a9a:	491b      	ldr	r1, [pc, #108]	; (8003b08 <HAL_RCC_OscConfig+0x4c4>)
 8003a9c:	4313      	orrs	r3, r2
 8003a9e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003aa0:	4b1b      	ldr	r3, [pc, #108]	; (8003b10 <HAL_RCC_OscConfig+0x4cc>)
 8003aa2:	2201      	movs	r2, #1
 8003aa4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003aa6:	f7ff f841 	bl	8002b2c <HAL_GetTick>
 8003aaa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003aac:	e008      	b.n	8003ac0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003aae:	f7ff f83d 	bl	8002b2c <HAL_GetTick>
 8003ab2:	4602      	mov	r2, r0
 8003ab4:	693b      	ldr	r3, [r7, #16]
 8003ab6:	1ad3      	subs	r3, r2, r3
 8003ab8:	2b02      	cmp	r3, #2
 8003aba:	d901      	bls.n	8003ac0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003abc:	2303      	movs	r3, #3
 8003abe:	e03d      	b.n	8003b3c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003ac0:	4b11      	ldr	r3, [pc, #68]	; (8003b08 <HAL_RCC_OscConfig+0x4c4>)
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d0f0      	beq.n	8003aae <HAL_RCC_OscConfig+0x46a>
 8003acc:	e035      	b.n	8003b3a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ace:	4b10      	ldr	r3, [pc, #64]	; (8003b10 <HAL_RCC_OscConfig+0x4cc>)
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ad4:	f7ff f82a 	bl	8002b2c <HAL_GetTick>
 8003ad8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003ada:	e008      	b.n	8003aee <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003adc:	f7ff f826 	bl	8002b2c <HAL_GetTick>
 8003ae0:	4602      	mov	r2, r0
 8003ae2:	693b      	ldr	r3, [r7, #16]
 8003ae4:	1ad3      	subs	r3, r2, r3
 8003ae6:	2b02      	cmp	r3, #2
 8003ae8:	d901      	bls.n	8003aee <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003aea:	2303      	movs	r3, #3
 8003aec:	e026      	b.n	8003b3c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003aee:	4b06      	ldr	r3, [pc, #24]	; (8003b08 <HAL_RCC_OscConfig+0x4c4>)
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d1f0      	bne.n	8003adc <HAL_RCC_OscConfig+0x498>
 8003afa:	e01e      	b.n	8003b3a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	69db      	ldr	r3, [r3, #28]
 8003b00:	2b01      	cmp	r3, #1
 8003b02:	d107      	bne.n	8003b14 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003b04:	2301      	movs	r3, #1
 8003b06:	e019      	b.n	8003b3c <HAL_RCC_OscConfig+0x4f8>
 8003b08:	40021000 	.word	0x40021000
 8003b0c:	40007000 	.word	0x40007000
 8003b10:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003b14:	4b0b      	ldr	r3, [pc, #44]	; (8003b44 <HAL_RCC_OscConfig+0x500>)
 8003b16:	685b      	ldr	r3, [r3, #4]
 8003b18:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	6a1b      	ldr	r3, [r3, #32]
 8003b24:	429a      	cmp	r2, r3
 8003b26:	d106      	bne.n	8003b36 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b32:	429a      	cmp	r2, r3
 8003b34:	d001      	beq.n	8003b3a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003b36:	2301      	movs	r3, #1
 8003b38:	e000      	b.n	8003b3c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003b3a:	2300      	movs	r3, #0
}
 8003b3c:	4618      	mov	r0, r3
 8003b3e:	3718      	adds	r7, #24
 8003b40:	46bd      	mov	sp, r7
 8003b42:	bd80      	pop	{r7, pc}
 8003b44:	40021000 	.word	0x40021000

08003b48 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	b084      	sub	sp, #16
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]
 8003b50:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d101      	bne.n	8003b5c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003b58:	2301      	movs	r3, #1
 8003b5a:	e0d0      	b.n	8003cfe <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003b5c:	4b6a      	ldr	r3, [pc, #424]	; (8003d08 <HAL_RCC_ClockConfig+0x1c0>)
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f003 0307 	and.w	r3, r3, #7
 8003b64:	683a      	ldr	r2, [r7, #0]
 8003b66:	429a      	cmp	r2, r3
 8003b68:	d910      	bls.n	8003b8c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b6a:	4b67      	ldr	r3, [pc, #412]	; (8003d08 <HAL_RCC_ClockConfig+0x1c0>)
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f023 0207 	bic.w	r2, r3, #7
 8003b72:	4965      	ldr	r1, [pc, #404]	; (8003d08 <HAL_RCC_ClockConfig+0x1c0>)
 8003b74:	683b      	ldr	r3, [r7, #0]
 8003b76:	4313      	orrs	r3, r2
 8003b78:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b7a:	4b63      	ldr	r3, [pc, #396]	; (8003d08 <HAL_RCC_ClockConfig+0x1c0>)
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f003 0307 	and.w	r3, r3, #7
 8003b82:	683a      	ldr	r2, [r7, #0]
 8003b84:	429a      	cmp	r2, r3
 8003b86:	d001      	beq.n	8003b8c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003b88:	2301      	movs	r3, #1
 8003b8a:	e0b8      	b.n	8003cfe <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f003 0302 	and.w	r3, r3, #2
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d020      	beq.n	8003bda <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f003 0304 	and.w	r3, r3, #4
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d005      	beq.n	8003bb0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003ba4:	4b59      	ldr	r3, [pc, #356]	; (8003d0c <HAL_RCC_ClockConfig+0x1c4>)
 8003ba6:	685b      	ldr	r3, [r3, #4]
 8003ba8:	4a58      	ldr	r2, [pc, #352]	; (8003d0c <HAL_RCC_ClockConfig+0x1c4>)
 8003baa:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003bae:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f003 0308 	and.w	r3, r3, #8
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d005      	beq.n	8003bc8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003bbc:	4b53      	ldr	r3, [pc, #332]	; (8003d0c <HAL_RCC_ClockConfig+0x1c4>)
 8003bbe:	685b      	ldr	r3, [r3, #4]
 8003bc0:	4a52      	ldr	r2, [pc, #328]	; (8003d0c <HAL_RCC_ClockConfig+0x1c4>)
 8003bc2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003bc6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003bc8:	4b50      	ldr	r3, [pc, #320]	; (8003d0c <HAL_RCC_ClockConfig+0x1c4>)
 8003bca:	685b      	ldr	r3, [r3, #4]
 8003bcc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	689b      	ldr	r3, [r3, #8]
 8003bd4:	494d      	ldr	r1, [pc, #308]	; (8003d0c <HAL_RCC_ClockConfig+0x1c4>)
 8003bd6:	4313      	orrs	r3, r2
 8003bd8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f003 0301 	and.w	r3, r3, #1
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d040      	beq.n	8003c68 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	685b      	ldr	r3, [r3, #4]
 8003bea:	2b01      	cmp	r3, #1
 8003bec:	d107      	bne.n	8003bfe <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003bee:	4b47      	ldr	r3, [pc, #284]	; (8003d0c <HAL_RCC_ClockConfig+0x1c4>)
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d115      	bne.n	8003c26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003bfa:	2301      	movs	r3, #1
 8003bfc:	e07f      	b.n	8003cfe <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	685b      	ldr	r3, [r3, #4]
 8003c02:	2b02      	cmp	r3, #2
 8003c04:	d107      	bne.n	8003c16 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c06:	4b41      	ldr	r3, [pc, #260]	; (8003d0c <HAL_RCC_ClockConfig+0x1c4>)
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d109      	bne.n	8003c26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c12:	2301      	movs	r3, #1
 8003c14:	e073      	b.n	8003cfe <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c16:	4b3d      	ldr	r3, [pc, #244]	; (8003d0c <HAL_RCC_ClockConfig+0x1c4>)
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f003 0302 	and.w	r3, r3, #2
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d101      	bne.n	8003c26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c22:	2301      	movs	r3, #1
 8003c24:	e06b      	b.n	8003cfe <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003c26:	4b39      	ldr	r3, [pc, #228]	; (8003d0c <HAL_RCC_ClockConfig+0x1c4>)
 8003c28:	685b      	ldr	r3, [r3, #4]
 8003c2a:	f023 0203 	bic.w	r2, r3, #3
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	685b      	ldr	r3, [r3, #4]
 8003c32:	4936      	ldr	r1, [pc, #216]	; (8003d0c <HAL_RCC_ClockConfig+0x1c4>)
 8003c34:	4313      	orrs	r3, r2
 8003c36:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003c38:	f7fe ff78 	bl	8002b2c <HAL_GetTick>
 8003c3c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c3e:	e00a      	b.n	8003c56 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c40:	f7fe ff74 	bl	8002b2c <HAL_GetTick>
 8003c44:	4602      	mov	r2, r0
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	1ad3      	subs	r3, r2, r3
 8003c4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c4e:	4293      	cmp	r3, r2
 8003c50:	d901      	bls.n	8003c56 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003c52:	2303      	movs	r3, #3
 8003c54:	e053      	b.n	8003cfe <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c56:	4b2d      	ldr	r3, [pc, #180]	; (8003d0c <HAL_RCC_ClockConfig+0x1c4>)
 8003c58:	685b      	ldr	r3, [r3, #4]
 8003c5a:	f003 020c 	and.w	r2, r3, #12
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	685b      	ldr	r3, [r3, #4]
 8003c62:	009b      	lsls	r3, r3, #2
 8003c64:	429a      	cmp	r2, r3
 8003c66:	d1eb      	bne.n	8003c40 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003c68:	4b27      	ldr	r3, [pc, #156]	; (8003d08 <HAL_RCC_ClockConfig+0x1c0>)
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f003 0307 	and.w	r3, r3, #7
 8003c70:	683a      	ldr	r2, [r7, #0]
 8003c72:	429a      	cmp	r2, r3
 8003c74:	d210      	bcs.n	8003c98 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c76:	4b24      	ldr	r3, [pc, #144]	; (8003d08 <HAL_RCC_ClockConfig+0x1c0>)
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f023 0207 	bic.w	r2, r3, #7
 8003c7e:	4922      	ldr	r1, [pc, #136]	; (8003d08 <HAL_RCC_ClockConfig+0x1c0>)
 8003c80:	683b      	ldr	r3, [r7, #0]
 8003c82:	4313      	orrs	r3, r2
 8003c84:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c86:	4b20      	ldr	r3, [pc, #128]	; (8003d08 <HAL_RCC_ClockConfig+0x1c0>)
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f003 0307 	and.w	r3, r3, #7
 8003c8e:	683a      	ldr	r2, [r7, #0]
 8003c90:	429a      	cmp	r2, r3
 8003c92:	d001      	beq.n	8003c98 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003c94:	2301      	movs	r3, #1
 8003c96:	e032      	b.n	8003cfe <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f003 0304 	and.w	r3, r3, #4
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d008      	beq.n	8003cb6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003ca4:	4b19      	ldr	r3, [pc, #100]	; (8003d0c <HAL_RCC_ClockConfig+0x1c4>)
 8003ca6:	685b      	ldr	r3, [r3, #4]
 8003ca8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	68db      	ldr	r3, [r3, #12]
 8003cb0:	4916      	ldr	r1, [pc, #88]	; (8003d0c <HAL_RCC_ClockConfig+0x1c4>)
 8003cb2:	4313      	orrs	r3, r2
 8003cb4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f003 0308 	and.w	r3, r3, #8
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d009      	beq.n	8003cd6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003cc2:	4b12      	ldr	r3, [pc, #72]	; (8003d0c <HAL_RCC_ClockConfig+0x1c4>)
 8003cc4:	685b      	ldr	r3, [r3, #4]
 8003cc6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	691b      	ldr	r3, [r3, #16]
 8003cce:	00db      	lsls	r3, r3, #3
 8003cd0:	490e      	ldr	r1, [pc, #56]	; (8003d0c <HAL_RCC_ClockConfig+0x1c4>)
 8003cd2:	4313      	orrs	r3, r2
 8003cd4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003cd6:	f000 f821 	bl	8003d1c <HAL_RCC_GetSysClockFreq>
 8003cda:	4602      	mov	r2, r0
 8003cdc:	4b0b      	ldr	r3, [pc, #44]	; (8003d0c <HAL_RCC_ClockConfig+0x1c4>)
 8003cde:	685b      	ldr	r3, [r3, #4]
 8003ce0:	091b      	lsrs	r3, r3, #4
 8003ce2:	f003 030f 	and.w	r3, r3, #15
 8003ce6:	490a      	ldr	r1, [pc, #40]	; (8003d10 <HAL_RCC_ClockConfig+0x1c8>)
 8003ce8:	5ccb      	ldrb	r3, [r1, r3]
 8003cea:	fa22 f303 	lsr.w	r3, r2, r3
 8003cee:	4a09      	ldr	r2, [pc, #36]	; (8003d14 <HAL_RCC_ClockConfig+0x1cc>)
 8003cf0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003cf2:	4b09      	ldr	r3, [pc, #36]	; (8003d18 <HAL_RCC_ClockConfig+0x1d0>)
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	f7fe fed6 	bl	8002aa8 <HAL_InitTick>

  return HAL_OK;
 8003cfc:	2300      	movs	r3, #0
}
 8003cfe:	4618      	mov	r0, r3
 8003d00:	3710      	adds	r7, #16
 8003d02:	46bd      	mov	sp, r7
 8003d04:	bd80      	pop	{r7, pc}
 8003d06:	bf00      	nop
 8003d08:	40022000 	.word	0x40022000
 8003d0c:	40021000 	.word	0x40021000
 8003d10:	08005de4 	.word	0x08005de4
 8003d14:	20000164 	.word	0x20000164
 8003d18:	20000168 	.word	0x20000168

08003d1c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003d1c:	b480      	push	{r7}
 8003d1e:	b087      	sub	sp, #28
 8003d20:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003d22:	2300      	movs	r3, #0
 8003d24:	60fb      	str	r3, [r7, #12]
 8003d26:	2300      	movs	r3, #0
 8003d28:	60bb      	str	r3, [r7, #8]
 8003d2a:	2300      	movs	r3, #0
 8003d2c:	617b      	str	r3, [r7, #20]
 8003d2e:	2300      	movs	r3, #0
 8003d30:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003d32:	2300      	movs	r3, #0
 8003d34:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003d36:	4b1e      	ldr	r3, [pc, #120]	; (8003db0 <HAL_RCC_GetSysClockFreq+0x94>)
 8003d38:	685b      	ldr	r3, [r3, #4]
 8003d3a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	f003 030c 	and.w	r3, r3, #12
 8003d42:	2b04      	cmp	r3, #4
 8003d44:	d002      	beq.n	8003d4c <HAL_RCC_GetSysClockFreq+0x30>
 8003d46:	2b08      	cmp	r3, #8
 8003d48:	d003      	beq.n	8003d52 <HAL_RCC_GetSysClockFreq+0x36>
 8003d4a:	e027      	b.n	8003d9c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003d4c:	4b19      	ldr	r3, [pc, #100]	; (8003db4 <HAL_RCC_GetSysClockFreq+0x98>)
 8003d4e:	613b      	str	r3, [r7, #16]
      break;
 8003d50:	e027      	b.n	8003da2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	0c9b      	lsrs	r3, r3, #18
 8003d56:	f003 030f 	and.w	r3, r3, #15
 8003d5a:	4a17      	ldr	r2, [pc, #92]	; (8003db8 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003d5c:	5cd3      	ldrb	r3, [r2, r3]
 8003d5e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d010      	beq.n	8003d8c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003d6a:	4b11      	ldr	r3, [pc, #68]	; (8003db0 <HAL_RCC_GetSysClockFreq+0x94>)
 8003d6c:	685b      	ldr	r3, [r3, #4]
 8003d6e:	0c5b      	lsrs	r3, r3, #17
 8003d70:	f003 0301 	and.w	r3, r3, #1
 8003d74:	4a11      	ldr	r2, [pc, #68]	; (8003dbc <HAL_RCC_GetSysClockFreq+0xa0>)
 8003d76:	5cd3      	ldrb	r3, [r2, r3]
 8003d78:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	4a0d      	ldr	r2, [pc, #52]	; (8003db4 <HAL_RCC_GetSysClockFreq+0x98>)
 8003d7e:	fb03 f202 	mul.w	r2, r3, r2
 8003d82:	68bb      	ldr	r3, [r7, #8]
 8003d84:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d88:	617b      	str	r3, [r7, #20]
 8003d8a:	e004      	b.n	8003d96 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	4a0c      	ldr	r2, [pc, #48]	; (8003dc0 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003d90:	fb02 f303 	mul.w	r3, r2, r3
 8003d94:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003d96:	697b      	ldr	r3, [r7, #20]
 8003d98:	613b      	str	r3, [r7, #16]
      break;
 8003d9a:	e002      	b.n	8003da2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003d9c:	4b05      	ldr	r3, [pc, #20]	; (8003db4 <HAL_RCC_GetSysClockFreq+0x98>)
 8003d9e:	613b      	str	r3, [r7, #16]
      break;
 8003da0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003da2:	693b      	ldr	r3, [r7, #16]
}
 8003da4:	4618      	mov	r0, r3
 8003da6:	371c      	adds	r7, #28
 8003da8:	46bd      	mov	sp, r7
 8003daa:	bc80      	pop	{r7}
 8003dac:	4770      	bx	lr
 8003dae:	bf00      	nop
 8003db0:	40021000 	.word	0x40021000
 8003db4:	007a1200 	.word	0x007a1200
 8003db8:	08005dfc 	.word	0x08005dfc
 8003dbc:	08005e0c 	.word	0x08005e0c
 8003dc0:	003d0900 	.word	0x003d0900

08003dc4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003dc4:	b480      	push	{r7}
 8003dc6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003dc8:	4b02      	ldr	r3, [pc, #8]	; (8003dd4 <HAL_RCC_GetHCLKFreq+0x10>)
 8003dca:	681b      	ldr	r3, [r3, #0]
}
 8003dcc:	4618      	mov	r0, r3
 8003dce:	46bd      	mov	sp, r7
 8003dd0:	bc80      	pop	{r7}
 8003dd2:	4770      	bx	lr
 8003dd4:	20000164 	.word	0x20000164

08003dd8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003dd8:	b580      	push	{r7, lr}
 8003dda:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003ddc:	f7ff fff2 	bl	8003dc4 <HAL_RCC_GetHCLKFreq>
 8003de0:	4602      	mov	r2, r0
 8003de2:	4b05      	ldr	r3, [pc, #20]	; (8003df8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003de4:	685b      	ldr	r3, [r3, #4]
 8003de6:	0a1b      	lsrs	r3, r3, #8
 8003de8:	f003 0307 	and.w	r3, r3, #7
 8003dec:	4903      	ldr	r1, [pc, #12]	; (8003dfc <HAL_RCC_GetPCLK1Freq+0x24>)
 8003dee:	5ccb      	ldrb	r3, [r1, r3]
 8003df0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003df4:	4618      	mov	r0, r3
 8003df6:	bd80      	pop	{r7, pc}
 8003df8:	40021000 	.word	0x40021000
 8003dfc:	08005df4 	.word	0x08005df4

08003e00 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003e00:	b580      	push	{r7, lr}
 8003e02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003e04:	f7ff ffde 	bl	8003dc4 <HAL_RCC_GetHCLKFreq>
 8003e08:	4602      	mov	r2, r0
 8003e0a:	4b05      	ldr	r3, [pc, #20]	; (8003e20 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003e0c:	685b      	ldr	r3, [r3, #4]
 8003e0e:	0adb      	lsrs	r3, r3, #11
 8003e10:	f003 0307 	and.w	r3, r3, #7
 8003e14:	4903      	ldr	r1, [pc, #12]	; (8003e24 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003e16:	5ccb      	ldrb	r3, [r1, r3]
 8003e18:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e1c:	4618      	mov	r0, r3
 8003e1e:	bd80      	pop	{r7, pc}
 8003e20:	40021000 	.word	0x40021000
 8003e24:	08005df4 	.word	0x08005df4

08003e28 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003e28:	b480      	push	{r7}
 8003e2a:	b085      	sub	sp, #20
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003e30:	4b0a      	ldr	r3, [pc, #40]	; (8003e5c <RCC_Delay+0x34>)
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	4a0a      	ldr	r2, [pc, #40]	; (8003e60 <RCC_Delay+0x38>)
 8003e36:	fba2 2303 	umull	r2, r3, r2, r3
 8003e3a:	0a5b      	lsrs	r3, r3, #9
 8003e3c:	687a      	ldr	r2, [r7, #4]
 8003e3e:	fb02 f303 	mul.w	r3, r2, r3
 8003e42:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003e44:	bf00      	nop
  }
  while (Delay --);
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	1e5a      	subs	r2, r3, #1
 8003e4a:	60fa      	str	r2, [r7, #12]
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d1f9      	bne.n	8003e44 <RCC_Delay+0x1c>
}
 8003e50:	bf00      	nop
 8003e52:	bf00      	nop
 8003e54:	3714      	adds	r7, #20
 8003e56:	46bd      	mov	sp, r7
 8003e58:	bc80      	pop	{r7}
 8003e5a:	4770      	bx	lr
 8003e5c:	20000164 	.word	0x20000164
 8003e60:	10624dd3 	.word	0x10624dd3

08003e64 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003e64:	b580      	push	{r7, lr}
 8003e66:	b082      	sub	sp, #8
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d101      	bne.n	8003e76 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003e72:	2301      	movs	r3, #1
 8003e74:	e042      	b.n	8003efc <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003e7c:	b2db      	uxtb	r3, r3
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d106      	bne.n	8003e90 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	2200      	movs	r2, #0
 8003e86:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003e8a:	6878      	ldr	r0, [r7, #4]
 8003e8c:	f7fe fbf2 	bl	8002674 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	2224      	movs	r2, #36	; 0x24
 8003e94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	68da      	ldr	r2, [r3, #12]
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003ea6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003ea8:	6878      	ldr	r0, [r7, #4]
 8003eaa:	f000 ff09 	bl	8004cc0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	691a      	ldr	r2, [r3, #16]
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003ebc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	695a      	ldr	r2, [r3, #20]
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003ecc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	68da      	ldr	r2, [r3, #12]
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003edc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	2200      	movs	r2, #0
 8003ee2:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	2220      	movs	r2, #32
 8003ee8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	2220      	movs	r2, #32
 8003ef0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	2200      	movs	r2, #0
 8003ef8:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003efa:	2300      	movs	r3, #0
}
 8003efc:	4618      	mov	r0, r3
 8003efe:	3708      	adds	r7, #8
 8003f00:	46bd      	mov	sp, r7
 8003f02:	bd80      	pop	{r7, pc}

08003f04 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003f04:	b580      	push	{r7, lr}
 8003f06:	b08a      	sub	sp, #40	; 0x28
 8003f08:	af02      	add	r7, sp, #8
 8003f0a:	60f8      	str	r0, [r7, #12]
 8003f0c:	60b9      	str	r1, [r7, #8]
 8003f0e:	603b      	str	r3, [r7, #0]
 8003f10:	4613      	mov	r3, r2
 8003f12:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003f14:	2300      	movs	r3, #0
 8003f16:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003f1e:	b2db      	uxtb	r3, r3
 8003f20:	2b20      	cmp	r3, #32
 8003f22:	d16d      	bne.n	8004000 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8003f24:	68bb      	ldr	r3, [r7, #8]
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d002      	beq.n	8003f30 <HAL_UART_Transmit+0x2c>
 8003f2a:	88fb      	ldrh	r3, [r7, #6]
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d101      	bne.n	8003f34 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003f30:	2301      	movs	r3, #1
 8003f32:	e066      	b.n	8004002 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	2200      	movs	r2, #0
 8003f38:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	2221      	movs	r2, #33	; 0x21
 8003f3e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003f42:	f7fe fdf3 	bl	8002b2c <HAL_GetTick>
 8003f46:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	88fa      	ldrh	r2, [r7, #6]
 8003f4c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	88fa      	ldrh	r2, [r7, #6]
 8003f52:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	689b      	ldr	r3, [r3, #8]
 8003f58:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f5c:	d108      	bne.n	8003f70 <HAL_UART_Transmit+0x6c>
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	691b      	ldr	r3, [r3, #16]
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d104      	bne.n	8003f70 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003f66:	2300      	movs	r3, #0
 8003f68:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003f6a:	68bb      	ldr	r3, [r7, #8]
 8003f6c:	61bb      	str	r3, [r7, #24]
 8003f6e:	e003      	b.n	8003f78 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003f70:	68bb      	ldr	r3, [r7, #8]
 8003f72:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003f74:	2300      	movs	r3, #0
 8003f76:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003f78:	e02a      	b.n	8003fd0 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003f7a:	683b      	ldr	r3, [r7, #0]
 8003f7c:	9300      	str	r3, [sp, #0]
 8003f7e:	697b      	ldr	r3, [r7, #20]
 8003f80:	2200      	movs	r2, #0
 8003f82:	2180      	movs	r1, #128	; 0x80
 8003f84:	68f8      	ldr	r0, [r7, #12]
 8003f86:	f000 fc32 	bl	80047ee <UART_WaitOnFlagUntilTimeout>
 8003f8a:	4603      	mov	r3, r0
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d001      	beq.n	8003f94 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8003f90:	2303      	movs	r3, #3
 8003f92:	e036      	b.n	8004002 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8003f94:	69fb      	ldr	r3, [r7, #28]
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d10b      	bne.n	8003fb2 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003f9a:	69bb      	ldr	r3, [r7, #24]
 8003f9c:	881b      	ldrh	r3, [r3, #0]
 8003f9e:	461a      	mov	r2, r3
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003fa8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003faa:	69bb      	ldr	r3, [r7, #24]
 8003fac:	3302      	adds	r3, #2
 8003fae:	61bb      	str	r3, [r7, #24]
 8003fb0:	e007      	b.n	8003fc2 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003fb2:	69fb      	ldr	r3, [r7, #28]
 8003fb4:	781a      	ldrb	r2, [r3, #0]
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003fbc:	69fb      	ldr	r3, [r7, #28]
 8003fbe:	3301      	adds	r3, #1
 8003fc0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003fc6:	b29b      	uxth	r3, r3
 8003fc8:	3b01      	subs	r3, #1
 8003fca:	b29a      	uxth	r2, r3
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003fd4:	b29b      	uxth	r3, r3
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d1cf      	bne.n	8003f7a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003fda:	683b      	ldr	r3, [r7, #0]
 8003fdc:	9300      	str	r3, [sp, #0]
 8003fde:	697b      	ldr	r3, [r7, #20]
 8003fe0:	2200      	movs	r2, #0
 8003fe2:	2140      	movs	r1, #64	; 0x40
 8003fe4:	68f8      	ldr	r0, [r7, #12]
 8003fe6:	f000 fc02 	bl	80047ee <UART_WaitOnFlagUntilTimeout>
 8003fea:	4603      	mov	r3, r0
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d001      	beq.n	8003ff4 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8003ff0:	2303      	movs	r3, #3
 8003ff2:	e006      	b.n	8004002 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	2220      	movs	r2, #32
 8003ff8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8003ffc:	2300      	movs	r3, #0
 8003ffe:	e000      	b.n	8004002 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8004000:	2302      	movs	r3, #2
  }
}
 8004002:	4618      	mov	r0, r3
 8004004:	3720      	adds	r7, #32
 8004006:	46bd      	mov	sp, r7
 8004008:	bd80      	pop	{r7, pc}

0800400a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800400a:	b580      	push	{r7, lr}
 800400c:	b084      	sub	sp, #16
 800400e:	af00      	add	r7, sp, #0
 8004010:	60f8      	str	r0, [r7, #12]
 8004012:	60b9      	str	r1, [r7, #8]
 8004014:	4613      	mov	r3, r2
 8004016:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800401e:	b2db      	uxtb	r3, r3
 8004020:	2b20      	cmp	r3, #32
 8004022:	d112      	bne.n	800404a <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8004024:	68bb      	ldr	r3, [r7, #8]
 8004026:	2b00      	cmp	r3, #0
 8004028:	d002      	beq.n	8004030 <HAL_UART_Receive_IT+0x26>
 800402a:	88fb      	ldrh	r3, [r7, #6]
 800402c:	2b00      	cmp	r3, #0
 800402e:	d101      	bne.n	8004034 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004030:	2301      	movs	r3, #1
 8004032:	e00b      	b.n	800404c <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	2200      	movs	r2, #0
 8004038:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800403a:	88fb      	ldrh	r3, [r7, #6]
 800403c:	461a      	mov	r2, r3
 800403e:	68b9      	ldr	r1, [r7, #8]
 8004040:	68f8      	ldr	r0, [r7, #12]
 8004042:	f000 fc42 	bl	80048ca <UART_Start_Receive_IT>
 8004046:	4603      	mov	r3, r0
 8004048:	e000      	b.n	800404c <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 800404a:	2302      	movs	r3, #2
  }
}
 800404c:	4618      	mov	r0, r3
 800404e:	3710      	adds	r7, #16
 8004050:	46bd      	mov	sp, r7
 8004052:	bd80      	pop	{r7, pc}

08004054 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8004054:	b580      	push	{r7, lr}
 8004056:	b08c      	sub	sp, #48	; 0x30
 8004058:	af00      	add	r7, sp, #0
 800405a:	60f8      	str	r0, [r7, #12]
 800405c:	60b9      	str	r1, [r7, #8]
 800405e:	4613      	mov	r3, r2
 8004060:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004068:	b2db      	uxtb	r3, r3
 800406a:	2b20      	cmp	r3, #32
 800406c:	d156      	bne.n	800411c <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 800406e:	68bb      	ldr	r3, [r7, #8]
 8004070:	2b00      	cmp	r3, #0
 8004072:	d002      	beq.n	800407a <HAL_UART_Transmit_DMA+0x26>
 8004074:	88fb      	ldrh	r3, [r7, #6]
 8004076:	2b00      	cmp	r3, #0
 8004078:	d101      	bne.n	800407e <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800407a:	2301      	movs	r3, #1
 800407c:	e04f      	b.n	800411e <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 800407e:	68ba      	ldr	r2, [r7, #8]
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	88fa      	ldrh	r2, [r7, #6]
 8004088:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	88fa      	ldrh	r2, [r7, #6]
 800408e:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	2200      	movs	r2, #0
 8004094:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	2221      	movs	r2, #33	; 0x21
 800409a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040a2:	4a21      	ldr	r2, [pc, #132]	; (8004128 <HAL_UART_Transmit_DMA+0xd4>)
 80040a4:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040aa:	4a20      	ldr	r2, [pc, #128]	; (800412c <HAL_UART_Transmit_DMA+0xd8>)
 80040ac:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040b2:	4a1f      	ldr	r2, [pc, #124]	; (8004130 <HAL_UART_Transmit_DMA+0xdc>)
 80040b4:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040ba:	2200      	movs	r2, #0
 80040bc:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the UART transmit DMA channel */
    tmp = (const uint32_t *)&pData;
 80040be:	f107 0308 	add.w	r3, r7, #8
 80040c2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80040c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040ca:	6819      	ldr	r1, [r3, #0]
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	3304      	adds	r3, #4
 80040d2:	461a      	mov	r2, r3
 80040d4:	88fb      	ldrh	r3, [r7, #6]
 80040d6:	f7fe febf 	bl	8002e58 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80040e2:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	3314      	adds	r3, #20
 80040ea:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040ec:	69bb      	ldr	r3, [r7, #24]
 80040ee:	e853 3f00 	ldrex	r3, [r3]
 80040f2:	617b      	str	r3, [r7, #20]
   return(result);
 80040f4:	697b      	ldr	r3, [r7, #20]
 80040f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80040fa:	62bb      	str	r3, [r7, #40]	; 0x28
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	3314      	adds	r3, #20
 8004102:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004104:	627a      	str	r2, [r7, #36]	; 0x24
 8004106:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004108:	6a39      	ldr	r1, [r7, #32]
 800410a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800410c:	e841 2300 	strex	r3, r2, [r1]
 8004110:	61fb      	str	r3, [r7, #28]
   return(result);
 8004112:	69fb      	ldr	r3, [r7, #28]
 8004114:	2b00      	cmp	r3, #0
 8004116:	d1e5      	bne.n	80040e4 <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 8004118:	2300      	movs	r3, #0
 800411a:	e000      	b.n	800411e <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 800411c:	2302      	movs	r3, #2
  }
}
 800411e:	4618      	mov	r0, r3
 8004120:	3730      	adds	r7, #48	; 0x30
 8004122:	46bd      	mov	sp, r7
 8004124:	bd80      	pop	{r7, pc}
 8004126:	bf00      	nop
 8004128:	080046a5 	.word	0x080046a5
 800412c:	0800473f 	.word	0x0800473f
 8004130:	0800475b 	.word	0x0800475b

08004134 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004134:	b580      	push	{r7, lr}
 8004136:	b0ba      	sub	sp, #232	; 0xe8
 8004138:	af00      	add	r7, sp, #0
 800413a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	68db      	ldr	r3, [r3, #12]
 800414c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	695b      	ldr	r3, [r3, #20]
 8004156:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800415a:	2300      	movs	r3, #0
 800415c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8004160:	2300      	movs	r3, #0
 8004162:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004166:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800416a:	f003 030f 	and.w	r3, r3, #15
 800416e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8004172:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004176:	2b00      	cmp	r3, #0
 8004178:	d10f      	bne.n	800419a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800417a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800417e:	f003 0320 	and.w	r3, r3, #32
 8004182:	2b00      	cmp	r3, #0
 8004184:	d009      	beq.n	800419a <HAL_UART_IRQHandler+0x66>
 8004186:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800418a:	f003 0320 	and.w	r3, r3, #32
 800418e:	2b00      	cmp	r3, #0
 8004190:	d003      	beq.n	800419a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004192:	6878      	ldr	r0, [r7, #4]
 8004194:	f000 fcd6 	bl	8004b44 <UART_Receive_IT>
      return;
 8004198:	e25b      	b.n	8004652 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800419a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800419e:	2b00      	cmp	r3, #0
 80041a0:	f000 80de 	beq.w	8004360 <HAL_UART_IRQHandler+0x22c>
 80041a4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80041a8:	f003 0301 	and.w	r3, r3, #1
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d106      	bne.n	80041be <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80041b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80041b4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	f000 80d1 	beq.w	8004360 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80041be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80041c2:	f003 0301 	and.w	r3, r3, #1
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d00b      	beq.n	80041e2 <HAL_UART_IRQHandler+0xae>
 80041ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80041ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d005      	beq.n	80041e2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041da:	f043 0201 	orr.w	r2, r3, #1
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80041e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80041e6:	f003 0304 	and.w	r3, r3, #4
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d00b      	beq.n	8004206 <HAL_UART_IRQHandler+0xd2>
 80041ee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80041f2:	f003 0301 	and.w	r3, r3, #1
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d005      	beq.n	8004206 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041fe:	f043 0202 	orr.w	r2, r3, #2
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004206:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800420a:	f003 0302 	and.w	r3, r3, #2
 800420e:	2b00      	cmp	r3, #0
 8004210:	d00b      	beq.n	800422a <HAL_UART_IRQHandler+0xf6>
 8004212:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004216:	f003 0301 	and.w	r3, r3, #1
 800421a:	2b00      	cmp	r3, #0
 800421c:	d005      	beq.n	800422a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004222:	f043 0204 	orr.w	r2, r3, #4
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800422a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800422e:	f003 0308 	and.w	r3, r3, #8
 8004232:	2b00      	cmp	r3, #0
 8004234:	d011      	beq.n	800425a <HAL_UART_IRQHandler+0x126>
 8004236:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800423a:	f003 0320 	and.w	r3, r3, #32
 800423e:	2b00      	cmp	r3, #0
 8004240:	d105      	bne.n	800424e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004242:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004246:	f003 0301 	and.w	r3, r3, #1
 800424a:	2b00      	cmp	r3, #0
 800424c:	d005      	beq.n	800425a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004252:	f043 0208 	orr.w	r2, r3, #8
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800425e:	2b00      	cmp	r3, #0
 8004260:	f000 81f2 	beq.w	8004648 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004264:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004268:	f003 0320 	and.w	r3, r3, #32
 800426c:	2b00      	cmp	r3, #0
 800426e:	d008      	beq.n	8004282 <HAL_UART_IRQHandler+0x14e>
 8004270:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004274:	f003 0320 	and.w	r3, r3, #32
 8004278:	2b00      	cmp	r3, #0
 800427a:	d002      	beq.n	8004282 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800427c:	6878      	ldr	r0, [r7, #4]
 800427e:	f000 fc61 	bl	8004b44 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	695b      	ldr	r3, [r3, #20]
 8004288:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800428c:	2b00      	cmp	r3, #0
 800428e:	bf14      	ite	ne
 8004290:	2301      	movne	r3, #1
 8004292:	2300      	moveq	r3, #0
 8004294:	b2db      	uxtb	r3, r3
 8004296:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800429e:	f003 0308 	and.w	r3, r3, #8
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d103      	bne.n	80042ae <HAL_UART_IRQHandler+0x17a>
 80042a6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d04f      	beq.n	800434e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80042ae:	6878      	ldr	r0, [r7, #4]
 80042b0:	f000 fb6b 	bl	800498a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	695b      	ldr	r3, [r3, #20]
 80042ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d041      	beq.n	8004346 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	3314      	adds	r3, #20
 80042c8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042cc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80042d0:	e853 3f00 	ldrex	r3, [r3]
 80042d4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80042d8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80042dc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80042e0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	3314      	adds	r3, #20
 80042ea:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80042ee:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80042f2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042f6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80042fa:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80042fe:	e841 2300 	strex	r3, r2, [r1]
 8004302:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004306:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800430a:	2b00      	cmp	r3, #0
 800430c:	d1d9      	bne.n	80042c2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004312:	2b00      	cmp	r3, #0
 8004314:	d013      	beq.n	800433e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800431a:	4a7e      	ldr	r2, [pc, #504]	; (8004514 <HAL_UART_IRQHandler+0x3e0>)
 800431c:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004322:	4618      	mov	r0, r3
 8004324:	f7fe fe34 	bl	8002f90 <HAL_DMA_Abort_IT>
 8004328:	4603      	mov	r3, r0
 800432a:	2b00      	cmp	r3, #0
 800432c:	d016      	beq.n	800435c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004332:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004334:	687a      	ldr	r2, [r7, #4]
 8004336:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004338:	4610      	mov	r0, r2
 800433a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800433c:	e00e      	b.n	800435c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800433e:	6878      	ldr	r0, [r7, #4]
 8004340:	f000 f99c 	bl	800467c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004344:	e00a      	b.n	800435c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004346:	6878      	ldr	r0, [r7, #4]
 8004348:	f000 f998 	bl	800467c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800434c:	e006      	b.n	800435c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800434e:	6878      	ldr	r0, [r7, #4]
 8004350:	f000 f994 	bl	800467c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	2200      	movs	r2, #0
 8004358:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 800435a:	e175      	b.n	8004648 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800435c:	bf00      	nop
    return;
 800435e:	e173      	b.n	8004648 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004364:	2b01      	cmp	r3, #1
 8004366:	f040 814f 	bne.w	8004608 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800436a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800436e:	f003 0310 	and.w	r3, r3, #16
 8004372:	2b00      	cmp	r3, #0
 8004374:	f000 8148 	beq.w	8004608 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004378:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800437c:	f003 0310 	and.w	r3, r3, #16
 8004380:	2b00      	cmp	r3, #0
 8004382:	f000 8141 	beq.w	8004608 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004386:	2300      	movs	r3, #0
 8004388:	60bb      	str	r3, [r7, #8]
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	60bb      	str	r3, [r7, #8]
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	685b      	ldr	r3, [r3, #4]
 8004398:	60bb      	str	r3, [r7, #8]
 800439a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	695b      	ldr	r3, [r3, #20]
 80043a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	f000 80b6 	beq.w	8004518 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	685b      	ldr	r3, [r3, #4]
 80043b4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80043b8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80043bc:	2b00      	cmp	r3, #0
 80043be:	f000 8145 	beq.w	800464c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80043c6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80043ca:	429a      	cmp	r2, r3
 80043cc:	f080 813e 	bcs.w	800464c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80043d6:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043dc:	699b      	ldr	r3, [r3, #24]
 80043de:	2b20      	cmp	r3, #32
 80043e0:	f000 8088 	beq.w	80044f4 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	330c      	adds	r3, #12
 80043ea:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043ee:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80043f2:	e853 3f00 	ldrex	r3, [r3]
 80043f6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80043fa:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80043fe:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004402:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	330c      	adds	r3, #12
 800440c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8004410:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004414:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004418:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800441c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004420:	e841 2300 	strex	r3, r2, [r1]
 8004424:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004428:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800442c:	2b00      	cmp	r3, #0
 800442e:	d1d9      	bne.n	80043e4 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	3314      	adds	r3, #20
 8004436:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004438:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800443a:	e853 3f00 	ldrex	r3, [r3]
 800443e:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004440:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004442:	f023 0301 	bic.w	r3, r3, #1
 8004446:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	3314      	adds	r3, #20
 8004450:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004454:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004458:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800445a:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800445c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004460:	e841 2300 	strex	r3, r2, [r1]
 8004464:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004466:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004468:	2b00      	cmp	r3, #0
 800446a:	d1e1      	bne.n	8004430 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	3314      	adds	r3, #20
 8004472:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004474:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004476:	e853 3f00 	ldrex	r3, [r3]
 800447a:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800447c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800447e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004482:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	3314      	adds	r3, #20
 800448c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004490:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004492:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004494:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004496:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004498:	e841 2300 	strex	r3, r2, [r1]
 800449c:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800449e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d1e3      	bne.n	800446c <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	2220      	movs	r2, #32
 80044a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	2200      	movs	r2, #0
 80044b0:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	330c      	adds	r3, #12
 80044b8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80044bc:	e853 3f00 	ldrex	r3, [r3]
 80044c0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80044c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80044c4:	f023 0310 	bic.w	r3, r3, #16
 80044c8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	330c      	adds	r3, #12
 80044d2:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80044d6:	65ba      	str	r2, [r7, #88]	; 0x58
 80044d8:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044da:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80044dc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80044de:	e841 2300 	strex	r3, r2, [r1]
 80044e2:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80044e4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d1e3      	bne.n	80044b2 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044ee:	4618      	mov	r0, r3
 80044f0:	f7fe fd12 	bl	8002f18 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	2202      	movs	r2, #2
 80044f8:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004502:	b29b      	uxth	r3, r3
 8004504:	1ad3      	subs	r3, r2, r3
 8004506:	b29b      	uxth	r3, r3
 8004508:	4619      	mov	r1, r3
 800450a:	6878      	ldr	r0, [r7, #4]
 800450c:	f000 f8bf 	bl	800468e <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004510:	e09c      	b.n	800464c <HAL_UART_IRQHandler+0x518>
 8004512:	bf00      	nop
 8004514:	08004a4f 	.word	0x08004a4f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004520:	b29b      	uxth	r3, r3
 8004522:	1ad3      	subs	r3, r2, r3
 8004524:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800452c:	b29b      	uxth	r3, r3
 800452e:	2b00      	cmp	r3, #0
 8004530:	f000 808e 	beq.w	8004650 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8004534:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004538:	2b00      	cmp	r3, #0
 800453a:	f000 8089 	beq.w	8004650 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	330c      	adds	r3, #12
 8004544:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004546:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004548:	e853 3f00 	ldrex	r3, [r3]
 800454c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800454e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004550:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004554:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	330c      	adds	r3, #12
 800455e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8004562:	647a      	str	r2, [r7, #68]	; 0x44
 8004564:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004566:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004568:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800456a:	e841 2300 	strex	r3, r2, [r1]
 800456e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004570:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004572:	2b00      	cmp	r3, #0
 8004574:	d1e3      	bne.n	800453e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	3314      	adds	r3, #20
 800457c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800457e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004580:	e853 3f00 	ldrex	r3, [r3]
 8004584:	623b      	str	r3, [r7, #32]
   return(result);
 8004586:	6a3b      	ldr	r3, [r7, #32]
 8004588:	f023 0301 	bic.w	r3, r3, #1
 800458c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	3314      	adds	r3, #20
 8004596:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800459a:	633a      	str	r2, [r7, #48]	; 0x30
 800459c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800459e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80045a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80045a2:	e841 2300 	strex	r3, r2, [r1]
 80045a6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80045a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d1e3      	bne.n	8004576 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	2220      	movs	r2, #32
 80045b2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	2200      	movs	r2, #0
 80045ba:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	330c      	adds	r3, #12
 80045c2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045c4:	693b      	ldr	r3, [r7, #16]
 80045c6:	e853 3f00 	ldrex	r3, [r3]
 80045ca:	60fb      	str	r3, [r7, #12]
   return(result);
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	f023 0310 	bic.w	r3, r3, #16
 80045d2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	330c      	adds	r3, #12
 80045dc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80045e0:	61fa      	str	r2, [r7, #28]
 80045e2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045e4:	69b9      	ldr	r1, [r7, #24]
 80045e6:	69fa      	ldr	r2, [r7, #28]
 80045e8:	e841 2300 	strex	r3, r2, [r1]
 80045ec:	617b      	str	r3, [r7, #20]
   return(result);
 80045ee:	697b      	ldr	r3, [r7, #20]
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d1e3      	bne.n	80045bc <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	2202      	movs	r2, #2
 80045f8:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80045fa:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80045fe:	4619      	mov	r1, r3
 8004600:	6878      	ldr	r0, [r7, #4]
 8004602:	f000 f844 	bl	800468e <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004606:	e023      	b.n	8004650 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004608:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800460c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004610:	2b00      	cmp	r3, #0
 8004612:	d009      	beq.n	8004628 <HAL_UART_IRQHandler+0x4f4>
 8004614:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004618:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800461c:	2b00      	cmp	r3, #0
 800461e:	d003      	beq.n	8004628 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8004620:	6878      	ldr	r0, [r7, #4]
 8004622:	f000 fa28 	bl	8004a76 <UART_Transmit_IT>
    return;
 8004626:	e014      	b.n	8004652 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004628:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800462c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004630:	2b00      	cmp	r3, #0
 8004632:	d00e      	beq.n	8004652 <HAL_UART_IRQHandler+0x51e>
 8004634:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004638:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800463c:	2b00      	cmp	r3, #0
 800463e:	d008      	beq.n	8004652 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8004640:	6878      	ldr	r0, [r7, #4]
 8004642:	f000 fa67 	bl	8004b14 <UART_EndTransmit_IT>
    return;
 8004646:	e004      	b.n	8004652 <HAL_UART_IRQHandler+0x51e>
    return;
 8004648:	bf00      	nop
 800464a:	e002      	b.n	8004652 <HAL_UART_IRQHandler+0x51e>
      return;
 800464c:	bf00      	nop
 800464e:	e000      	b.n	8004652 <HAL_UART_IRQHandler+0x51e>
      return;
 8004650:	bf00      	nop
  }
}
 8004652:	37e8      	adds	r7, #232	; 0xe8
 8004654:	46bd      	mov	sp, r7
 8004656:	bd80      	pop	{r7, pc}

08004658 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004658:	b480      	push	{r7}
 800465a:	b083      	sub	sp, #12
 800465c:	af00      	add	r7, sp, #0
 800465e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004660:	bf00      	nop
 8004662:	370c      	adds	r7, #12
 8004664:	46bd      	mov	sp, r7
 8004666:	bc80      	pop	{r7}
 8004668:	4770      	bx	lr

0800466a <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800466a:	b480      	push	{r7}
 800466c:	b083      	sub	sp, #12
 800466e:	af00      	add	r7, sp, #0
 8004670:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8004672:	bf00      	nop
 8004674:	370c      	adds	r7, #12
 8004676:	46bd      	mov	sp, r7
 8004678:	bc80      	pop	{r7}
 800467a:	4770      	bx	lr

0800467c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800467c:	b480      	push	{r7}
 800467e:	b083      	sub	sp, #12
 8004680:	af00      	add	r7, sp, #0
 8004682:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004684:	bf00      	nop
 8004686:	370c      	adds	r7, #12
 8004688:	46bd      	mov	sp, r7
 800468a:	bc80      	pop	{r7}
 800468c:	4770      	bx	lr

0800468e <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800468e:	b480      	push	{r7}
 8004690:	b083      	sub	sp, #12
 8004692:	af00      	add	r7, sp, #0
 8004694:	6078      	str	r0, [r7, #4]
 8004696:	460b      	mov	r3, r1
 8004698:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800469a:	bf00      	nop
 800469c:	370c      	adds	r7, #12
 800469e:	46bd      	mov	sp, r7
 80046a0:	bc80      	pop	{r7}
 80046a2:	4770      	bx	lr

080046a4 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80046a4:	b580      	push	{r7, lr}
 80046a6:	b090      	sub	sp, #64	; 0x40
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046b0:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	f003 0320 	and.w	r3, r3, #32
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d137      	bne.n	8004730 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 80046c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80046c2:	2200      	movs	r2, #0
 80046c4:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80046c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	3314      	adds	r3, #20
 80046cc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046d0:	e853 3f00 	ldrex	r3, [r3]
 80046d4:	623b      	str	r3, [r7, #32]
   return(result);
 80046d6:	6a3b      	ldr	r3, [r7, #32]
 80046d8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80046dc:	63bb      	str	r3, [r7, #56]	; 0x38
 80046de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	3314      	adds	r3, #20
 80046e4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80046e6:	633a      	str	r2, [r7, #48]	; 0x30
 80046e8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046ea:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80046ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80046ee:	e841 2300 	strex	r3, r2, [r1]
 80046f2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80046f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d1e5      	bne.n	80046c6 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80046fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	330c      	adds	r3, #12
 8004700:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004702:	693b      	ldr	r3, [r7, #16]
 8004704:	e853 3f00 	ldrex	r3, [r3]
 8004708:	60fb      	str	r3, [r7, #12]
   return(result);
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004710:	637b      	str	r3, [r7, #52]	; 0x34
 8004712:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	330c      	adds	r3, #12
 8004718:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800471a:	61fa      	str	r2, [r7, #28]
 800471c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800471e:	69b9      	ldr	r1, [r7, #24]
 8004720:	69fa      	ldr	r2, [r7, #28]
 8004722:	e841 2300 	strex	r3, r2, [r1]
 8004726:	617b      	str	r3, [r7, #20]
   return(result);
 8004728:	697b      	ldr	r3, [r7, #20]
 800472a:	2b00      	cmp	r3, #0
 800472c:	d1e5      	bne.n	80046fa <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800472e:	e002      	b.n	8004736 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8004730:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8004732:	f7ff ff91 	bl	8004658 <HAL_UART_TxCpltCallback>
}
 8004736:	bf00      	nop
 8004738:	3740      	adds	r7, #64	; 0x40
 800473a:	46bd      	mov	sp, r7
 800473c:	bd80      	pop	{r7, pc}

0800473e <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800473e:	b580      	push	{r7, lr}
 8004740:	b084      	sub	sp, #16
 8004742:	af00      	add	r7, sp, #0
 8004744:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800474a:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800474c:	68f8      	ldr	r0, [r7, #12]
 800474e:	f7ff ff8c 	bl	800466a <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004752:	bf00      	nop
 8004754:	3710      	adds	r7, #16
 8004756:	46bd      	mov	sp, r7
 8004758:	bd80      	pop	{r7, pc}

0800475a <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800475a:	b580      	push	{r7, lr}
 800475c:	b084      	sub	sp, #16
 800475e:	af00      	add	r7, sp, #0
 8004760:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8004762:	2300      	movs	r3, #0
 8004764:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800476a:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800476c:	68bb      	ldr	r3, [r7, #8]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	695b      	ldr	r3, [r3, #20]
 8004772:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004776:	2b00      	cmp	r3, #0
 8004778:	bf14      	ite	ne
 800477a:	2301      	movne	r3, #1
 800477c:	2300      	moveq	r3, #0
 800477e:	b2db      	uxtb	r3, r3
 8004780:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8004782:	68bb      	ldr	r3, [r7, #8]
 8004784:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004788:	b2db      	uxtb	r3, r3
 800478a:	2b21      	cmp	r3, #33	; 0x21
 800478c:	d108      	bne.n	80047a0 <UART_DMAError+0x46>
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	2b00      	cmp	r3, #0
 8004792:	d005      	beq.n	80047a0 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8004794:	68bb      	ldr	r3, [r7, #8]
 8004796:	2200      	movs	r2, #0
 8004798:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800479a:	68b8      	ldr	r0, [r7, #8]
 800479c:	f000 f8ce 	bl	800493c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80047a0:	68bb      	ldr	r3, [r7, #8]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	695b      	ldr	r3, [r3, #20]
 80047a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	bf14      	ite	ne
 80047ae:	2301      	movne	r3, #1
 80047b0:	2300      	moveq	r3, #0
 80047b2:	b2db      	uxtb	r3, r3
 80047b4:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80047b6:	68bb      	ldr	r3, [r7, #8]
 80047b8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80047bc:	b2db      	uxtb	r3, r3
 80047be:	2b22      	cmp	r3, #34	; 0x22
 80047c0:	d108      	bne.n	80047d4 <UART_DMAError+0x7a>
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d005      	beq.n	80047d4 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80047c8:	68bb      	ldr	r3, [r7, #8]
 80047ca:	2200      	movs	r2, #0
 80047cc:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80047ce:	68b8      	ldr	r0, [r7, #8]
 80047d0:	f000 f8db 	bl	800498a <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80047d4:	68bb      	ldr	r3, [r7, #8]
 80047d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047d8:	f043 0210 	orr.w	r2, r3, #16
 80047dc:	68bb      	ldr	r3, [r7, #8]
 80047de:	645a      	str	r2, [r3, #68]	; 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80047e0:	68b8      	ldr	r0, [r7, #8]
 80047e2:	f7ff ff4b 	bl	800467c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80047e6:	bf00      	nop
 80047e8:	3710      	adds	r7, #16
 80047ea:	46bd      	mov	sp, r7
 80047ec:	bd80      	pop	{r7, pc}

080047ee <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80047ee:	b580      	push	{r7, lr}
 80047f0:	b090      	sub	sp, #64	; 0x40
 80047f2:	af00      	add	r7, sp, #0
 80047f4:	60f8      	str	r0, [r7, #12]
 80047f6:	60b9      	str	r1, [r7, #8]
 80047f8:	603b      	str	r3, [r7, #0]
 80047fa:	4613      	mov	r3, r2
 80047fc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80047fe:	e050      	b.n	80048a2 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004800:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004802:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004806:	d04c      	beq.n	80048a2 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004808:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800480a:	2b00      	cmp	r3, #0
 800480c:	d007      	beq.n	800481e <UART_WaitOnFlagUntilTimeout+0x30>
 800480e:	f7fe f98d 	bl	8002b2c <HAL_GetTick>
 8004812:	4602      	mov	r2, r0
 8004814:	683b      	ldr	r3, [r7, #0]
 8004816:	1ad3      	subs	r3, r2, r3
 8004818:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800481a:	429a      	cmp	r2, r3
 800481c:	d241      	bcs.n	80048a2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	330c      	adds	r3, #12
 8004824:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004826:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004828:	e853 3f00 	ldrex	r3, [r3]
 800482c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800482e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004830:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004834:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	330c      	adds	r3, #12
 800483c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800483e:	637a      	str	r2, [r7, #52]	; 0x34
 8004840:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004842:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004844:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004846:	e841 2300 	strex	r3, r2, [r1]
 800484a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800484c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800484e:	2b00      	cmp	r3, #0
 8004850:	d1e5      	bne.n	800481e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	3314      	adds	r3, #20
 8004858:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800485a:	697b      	ldr	r3, [r7, #20]
 800485c:	e853 3f00 	ldrex	r3, [r3]
 8004860:	613b      	str	r3, [r7, #16]
   return(result);
 8004862:	693b      	ldr	r3, [r7, #16]
 8004864:	f023 0301 	bic.w	r3, r3, #1
 8004868:	63bb      	str	r3, [r7, #56]	; 0x38
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	3314      	adds	r3, #20
 8004870:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004872:	623a      	str	r2, [r7, #32]
 8004874:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004876:	69f9      	ldr	r1, [r7, #28]
 8004878:	6a3a      	ldr	r2, [r7, #32]
 800487a:	e841 2300 	strex	r3, r2, [r1]
 800487e:	61bb      	str	r3, [r7, #24]
   return(result);
 8004880:	69bb      	ldr	r3, [r7, #24]
 8004882:	2b00      	cmp	r3, #0
 8004884:	d1e5      	bne.n	8004852 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	2220      	movs	r2, #32
 800488a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	2220      	movs	r2, #32
 8004892:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	2200      	movs	r2, #0
 800489a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 800489e:	2303      	movs	r3, #3
 80048a0:	e00f      	b.n	80048c2 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	681a      	ldr	r2, [r3, #0]
 80048a8:	68bb      	ldr	r3, [r7, #8]
 80048aa:	4013      	ands	r3, r2
 80048ac:	68ba      	ldr	r2, [r7, #8]
 80048ae:	429a      	cmp	r2, r3
 80048b0:	bf0c      	ite	eq
 80048b2:	2301      	moveq	r3, #1
 80048b4:	2300      	movne	r3, #0
 80048b6:	b2db      	uxtb	r3, r3
 80048b8:	461a      	mov	r2, r3
 80048ba:	79fb      	ldrb	r3, [r7, #7]
 80048bc:	429a      	cmp	r2, r3
 80048be:	d09f      	beq.n	8004800 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80048c0:	2300      	movs	r3, #0
}
 80048c2:	4618      	mov	r0, r3
 80048c4:	3740      	adds	r7, #64	; 0x40
 80048c6:	46bd      	mov	sp, r7
 80048c8:	bd80      	pop	{r7, pc}

080048ca <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80048ca:	b480      	push	{r7}
 80048cc:	b085      	sub	sp, #20
 80048ce:	af00      	add	r7, sp, #0
 80048d0:	60f8      	str	r0, [r7, #12]
 80048d2:	60b9      	str	r1, [r7, #8]
 80048d4:	4613      	mov	r3, r2
 80048d6:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	68ba      	ldr	r2, [r7, #8]
 80048dc:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	88fa      	ldrh	r2, [r7, #6]
 80048e2:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	88fa      	ldrh	r2, [r7, #6]
 80048e8:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	2200      	movs	r2, #0
 80048ee:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	2222      	movs	r2, #34	; 0x22
 80048f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	691b      	ldr	r3, [r3, #16]
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d007      	beq.n	8004910 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	68da      	ldr	r2, [r3, #12]
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800490e:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	695a      	ldr	r2, [r3, #20]
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	f042 0201 	orr.w	r2, r2, #1
 800491e:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	68da      	ldr	r2, [r3, #12]
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f042 0220 	orr.w	r2, r2, #32
 800492e:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004930:	2300      	movs	r3, #0
}
 8004932:	4618      	mov	r0, r3
 8004934:	3714      	adds	r7, #20
 8004936:	46bd      	mov	sp, r7
 8004938:	bc80      	pop	{r7}
 800493a:	4770      	bx	lr

0800493c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800493c:	b480      	push	{r7}
 800493e:	b089      	sub	sp, #36	; 0x24
 8004940:	af00      	add	r7, sp, #0
 8004942:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	330c      	adds	r3, #12
 800494a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	e853 3f00 	ldrex	r3, [r3]
 8004952:	60bb      	str	r3, [r7, #8]
   return(result);
 8004954:	68bb      	ldr	r3, [r7, #8]
 8004956:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800495a:	61fb      	str	r3, [r7, #28]
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	330c      	adds	r3, #12
 8004962:	69fa      	ldr	r2, [r7, #28]
 8004964:	61ba      	str	r2, [r7, #24]
 8004966:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004968:	6979      	ldr	r1, [r7, #20]
 800496a:	69ba      	ldr	r2, [r7, #24]
 800496c:	e841 2300 	strex	r3, r2, [r1]
 8004970:	613b      	str	r3, [r7, #16]
   return(result);
 8004972:	693b      	ldr	r3, [r7, #16]
 8004974:	2b00      	cmp	r3, #0
 8004976:	d1e5      	bne.n	8004944 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	2220      	movs	r2, #32
 800497c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
}
 8004980:	bf00      	nop
 8004982:	3724      	adds	r7, #36	; 0x24
 8004984:	46bd      	mov	sp, r7
 8004986:	bc80      	pop	{r7}
 8004988:	4770      	bx	lr

0800498a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800498a:	b480      	push	{r7}
 800498c:	b095      	sub	sp, #84	; 0x54
 800498e:	af00      	add	r7, sp, #0
 8004990:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	330c      	adds	r3, #12
 8004998:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800499a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800499c:	e853 3f00 	ldrex	r3, [r3]
 80049a0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80049a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049a4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80049a8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	330c      	adds	r3, #12
 80049b0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80049b2:	643a      	str	r2, [r7, #64]	; 0x40
 80049b4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049b6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80049b8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80049ba:	e841 2300 	strex	r3, r2, [r1]
 80049be:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80049c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d1e5      	bne.n	8004992 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	3314      	adds	r3, #20
 80049cc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049ce:	6a3b      	ldr	r3, [r7, #32]
 80049d0:	e853 3f00 	ldrex	r3, [r3]
 80049d4:	61fb      	str	r3, [r7, #28]
   return(result);
 80049d6:	69fb      	ldr	r3, [r7, #28]
 80049d8:	f023 0301 	bic.w	r3, r3, #1
 80049dc:	64bb      	str	r3, [r7, #72]	; 0x48
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	3314      	adds	r3, #20
 80049e4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80049e6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80049e8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049ea:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80049ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80049ee:	e841 2300 	strex	r3, r2, [r1]
 80049f2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80049f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d1e5      	bne.n	80049c6 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049fe:	2b01      	cmp	r3, #1
 8004a00:	d119      	bne.n	8004a36 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	330c      	adds	r3, #12
 8004a08:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	e853 3f00 	ldrex	r3, [r3]
 8004a10:	60bb      	str	r3, [r7, #8]
   return(result);
 8004a12:	68bb      	ldr	r3, [r7, #8]
 8004a14:	f023 0310 	bic.w	r3, r3, #16
 8004a18:	647b      	str	r3, [r7, #68]	; 0x44
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	330c      	adds	r3, #12
 8004a20:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004a22:	61ba      	str	r2, [r7, #24]
 8004a24:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a26:	6979      	ldr	r1, [r7, #20]
 8004a28:	69ba      	ldr	r2, [r7, #24]
 8004a2a:	e841 2300 	strex	r3, r2, [r1]
 8004a2e:	613b      	str	r3, [r7, #16]
   return(result);
 8004a30:	693b      	ldr	r3, [r7, #16]
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d1e5      	bne.n	8004a02 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	2220      	movs	r2, #32
 8004a3a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	2200      	movs	r2, #0
 8004a42:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004a44:	bf00      	nop
 8004a46:	3754      	adds	r7, #84	; 0x54
 8004a48:	46bd      	mov	sp, r7
 8004a4a:	bc80      	pop	{r7}
 8004a4c:	4770      	bx	lr

08004a4e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004a4e:	b580      	push	{r7, lr}
 8004a50:	b084      	sub	sp, #16
 8004a52:	af00      	add	r7, sp, #0
 8004a54:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a5a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	2200      	movs	r2, #0
 8004a60:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	2200      	movs	r2, #0
 8004a66:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004a68:	68f8      	ldr	r0, [r7, #12]
 8004a6a:	f7ff fe07 	bl	800467c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004a6e:	bf00      	nop
 8004a70:	3710      	adds	r7, #16
 8004a72:	46bd      	mov	sp, r7
 8004a74:	bd80      	pop	{r7, pc}

08004a76 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004a76:	b480      	push	{r7}
 8004a78:	b085      	sub	sp, #20
 8004a7a:	af00      	add	r7, sp, #0
 8004a7c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004a84:	b2db      	uxtb	r3, r3
 8004a86:	2b21      	cmp	r3, #33	; 0x21
 8004a88:	d13e      	bne.n	8004b08 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	689b      	ldr	r3, [r3, #8]
 8004a8e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a92:	d114      	bne.n	8004abe <UART_Transmit_IT+0x48>
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	691b      	ldr	r3, [r3, #16]
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d110      	bne.n	8004abe <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	6a1b      	ldr	r3, [r3, #32]
 8004aa0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	881b      	ldrh	r3, [r3, #0]
 8004aa6:	461a      	mov	r2, r3
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004ab0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	6a1b      	ldr	r3, [r3, #32]
 8004ab6:	1c9a      	adds	r2, r3, #2
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	621a      	str	r2, [r3, #32]
 8004abc:	e008      	b.n	8004ad0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	6a1b      	ldr	r3, [r3, #32]
 8004ac2:	1c59      	adds	r1, r3, #1
 8004ac4:	687a      	ldr	r2, [r7, #4]
 8004ac6:	6211      	str	r1, [r2, #32]
 8004ac8:	781a      	ldrb	r2, [r3, #0]
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004ad4:	b29b      	uxth	r3, r3
 8004ad6:	3b01      	subs	r3, #1
 8004ad8:	b29b      	uxth	r3, r3
 8004ada:	687a      	ldr	r2, [r7, #4]
 8004adc:	4619      	mov	r1, r3
 8004ade:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d10f      	bne.n	8004b04 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	68da      	ldr	r2, [r3, #12]
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004af2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	68da      	ldr	r2, [r3, #12]
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004b02:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004b04:	2300      	movs	r3, #0
 8004b06:	e000      	b.n	8004b0a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004b08:	2302      	movs	r3, #2
  }
}
 8004b0a:	4618      	mov	r0, r3
 8004b0c:	3714      	adds	r7, #20
 8004b0e:	46bd      	mov	sp, r7
 8004b10:	bc80      	pop	{r7}
 8004b12:	4770      	bx	lr

08004b14 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004b14:	b580      	push	{r7, lr}
 8004b16:	b082      	sub	sp, #8
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	68da      	ldr	r2, [r3, #12]
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004b2a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	2220      	movs	r2, #32
 8004b30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004b34:	6878      	ldr	r0, [r7, #4]
 8004b36:	f7ff fd8f 	bl	8004658 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004b3a:	2300      	movs	r3, #0
}
 8004b3c:	4618      	mov	r0, r3
 8004b3e:	3708      	adds	r7, #8
 8004b40:	46bd      	mov	sp, r7
 8004b42:	bd80      	pop	{r7, pc}

08004b44 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004b44:	b580      	push	{r7, lr}
 8004b46:	b08c      	sub	sp, #48	; 0x30
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004b52:	b2db      	uxtb	r3, r3
 8004b54:	2b22      	cmp	r3, #34	; 0x22
 8004b56:	f040 80ae 	bne.w	8004cb6 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	689b      	ldr	r3, [r3, #8]
 8004b5e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b62:	d117      	bne.n	8004b94 <UART_Receive_IT+0x50>
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	691b      	ldr	r3, [r3, #16]
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d113      	bne.n	8004b94 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004b6c:	2300      	movs	r3, #0
 8004b6e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b74:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	685b      	ldr	r3, [r3, #4]
 8004b7c:	b29b      	uxth	r3, r3
 8004b7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b82:	b29a      	uxth	r2, r3
 8004b84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b86:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b8c:	1c9a      	adds	r2, r3, #2
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	629a      	str	r2, [r3, #40]	; 0x28
 8004b92:	e026      	b.n	8004be2 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b98:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004b9a:	2300      	movs	r3, #0
 8004b9c:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	689b      	ldr	r3, [r3, #8]
 8004ba2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ba6:	d007      	beq.n	8004bb8 <UART_Receive_IT+0x74>
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	689b      	ldr	r3, [r3, #8]
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d10a      	bne.n	8004bc6 <UART_Receive_IT+0x82>
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	691b      	ldr	r3, [r3, #16]
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d106      	bne.n	8004bc6 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	685b      	ldr	r3, [r3, #4]
 8004bbe:	b2da      	uxtb	r2, r3
 8004bc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bc2:	701a      	strb	r2, [r3, #0]
 8004bc4:	e008      	b.n	8004bd8 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	685b      	ldr	r3, [r3, #4]
 8004bcc:	b2db      	uxtb	r3, r3
 8004bce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004bd2:	b2da      	uxtb	r2, r3
 8004bd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bd6:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bdc:	1c5a      	adds	r2, r3, #1
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004be6:	b29b      	uxth	r3, r3
 8004be8:	3b01      	subs	r3, #1
 8004bea:	b29b      	uxth	r3, r3
 8004bec:	687a      	ldr	r2, [r7, #4]
 8004bee:	4619      	mov	r1, r3
 8004bf0:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d15d      	bne.n	8004cb2 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	68da      	ldr	r2, [r3, #12]
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	f022 0220 	bic.w	r2, r2, #32
 8004c04:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	68da      	ldr	r2, [r3, #12]
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004c14:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	695a      	ldr	r2, [r3, #20]
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	f022 0201 	bic.w	r2, r2, #1
 8004c24:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	2220      	movs	r2, #32
 8004c2a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	2200      	movs	r2, #0
 8004c32:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c38:	2b01      	cmp	r3, #1
 8004c3a:	d135      	bne.n	8004ca8 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	2200      	movs	r2, #0
 8004c40:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	330c      	adds	r3, #12
 8004c48:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c4a:	697b      	ldr	r3, [r7, #20]
 8004c4c:	e853 3f00 	ldrex	r3, [r3]
 8004c50:	613b      	str	r3, [r7, #16]
   return(result);
 8004c52:	693b      	ldr	r3, [r7, #16]
 8004c54:	f023 0310 	bic.w	r3, r3, #16
 8004c58:	627b      	str	r3, [r7, #36]	; 0x24
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	330c      	adds	r3, #12
 8004c60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c62:	623a      	str	r2, [r7, #32]
 8004c64:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c66:	69f9      	ldr	r1, [r7, #28]
 8004c68:	6a3a      	ldr	r2, [r7, #32]
 8004c6a:	e841 2300 	strex	r3, r2, [r1]
 8004c6e:	61bb      	str	r3, [r7, #24]
   return(result);
 8004c70:	69bb      	ldr	r3, [r7, #24]
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d1e5      	bne.n	8004c42 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	f003 0310 	and.w	r3, r3, #16
 8004c80:	2b10      	cmp	r3, #16
 8004c82:	d10a      	bne.n	8004c9a <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004c84:	2300      	movs	r3, #0
 8004c86:	60fb      	str	r3, [r7, #12]
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	60fb      	str	r3, [r7, #12]
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	685b      	ldr	r3, [r3, #4]
 8004c96:	60fb      	str	r3, [r7, #12]
 8004c98:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004c9e:	4619      	mov	r1, r3
 8004ca0:	6878      	ldr	r0, [r7, #4]
 8004ca2:	f7ff fcf4 	bl	800468e <HAL_UARTEx_RxEventCallback>
 8004ca6:	e002      	b.n	8004cae <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004ca8:	6878      	ldr	r0, [r7, #4]
 8004caa:	f7fc ff83 	bl	8001bb4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004cae:	2300      	movs	r3, #0
 8004cb0:	e002      	b.n	8004cb8 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004cb2:	2300      	movs	r3, #0
 8004cb4:	e000      	b.n	8004cb8 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004cb6:	2302      	movs	r3, #2
  }
}
 8004cb8:	4618      	mov	r0, r3
 8004cba:	3730      	adds	r7, #48	; 0x30
 8004cbc:	46bd      	mov	sp, r7
 8004cbe:	bd80      	pop	{r7, pc}

08004cc0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004cc0:	b580      	push	{r7, lr}
 8004cc2:	b084      	sub	sp, #16
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	691b      	ldr	r3, [r3, #16]
 8004cce:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	68da      	ldr	r2, [r3, #12]
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	430a      	orrs	r2, r1
 8004cdc:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	689a      	ldr	r2, [r3, #8]
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	691b      	ldr	r3, [r3, #16]
 8004ce6:	431a      	orrs	r2, r3
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	695b      	ldr	r3, [r3, #20]
 8004cec:	4313      	orrs	r3, r2
 8004cee:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	68db      	ldr	r3, [r3, #12]
 8004cf6:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8004cfa:	f023 030c 	bic.w	r3, r3, #12
 8004cfe:	687a      	ldr	r2, [r7, #4]
 8004d00:	6812      	ldr	r2, [r2, #0]
 8004d02:	68b9      	ldr	r1, [r7, #8]
 8004d04:	430b      	orrs	r3, r1
 8004d06:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	695b      	ldr	r3, [r3, #20]
 8004d0e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	699a      	ldr	r2, [r3, #24]
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	430a      	orrs	r2, r1
 8004d1c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	4a2c      	ldr	r2, [pc, #176]	; (8004dd4 <UART_SetConfig+0x114>)
 8004d24:	4293      	cmp	r3, r2
 8004d26:	d103      	bne.n	8004d30 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004d28:	f7ff f86a 	bl	8003e00 <HAL_RCC_GetPCLK2Freq>
 8004d2c:	60f8      	str	r0, [r7, #12]
 8004d2e:	e002      	b.n	8004d36 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004d30:	f7ff f852 	bl	8003dd8 <HAL_RCC_GetPCLK1Freq>
 8004d34:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004d36:	68fa      	ldr	r2, [r7, #12]
 8004d38:	4613      	mov	r3, r2
 8004d3a:	009b      	lsls	r3, r3, #2
 8004d3c:	4413      	add	r3, r2
 8004d3e:	009a      	lsls	r2, r3, #2
 8004d40:	441a      	add	r2, r3
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	685b      	ldr	r3, [r3, #4]
 8004d46:	009b      	lsls	r3, r3, #2
 8004d48:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d4c:	4a22      	ldr	r2, [pc, #136]	; (8004dd8 <UART_SetConfig+0x118>)
 8004d4e:	fba2 2303 	umull	r2, r3, r2, r3
 8004d52:	095b      	lsrs	r3, r3, #5
 8004d54:	0119      	lsls	r1, r3, #4
 8004d56:	68fa      	ldr	r2, [r7, #12]
 8004d58:	4613      	mov	r3, r2
 8004d5a:	009b      	lsls	r3, r3, #2
 8004d5c:	4413      	add	r3, r2
 8004d5e:	009a      	lsls	r2, r3, #2
 8004d60:	441a      	add	r2, r3
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	685b      	ldr	r3, [r3, #4]
 8004d66:	009b      	lsls	r3, r3, #2
 8004d68:	fbb2 f2f3 	udiv	r2, r2, r3
 8004d6c:	4b1a      	ldr	r3, [pc, #104]	; (8004dd8 <UART_SetConfig+0x118>)
 8004d6e:	fba3 0302 	umull	r0, r3, r3, r2
 8004d72:	095b      	lsrs	r3, r3, #5
 8004d74:	2064      	movs	r0, #100	; 0x64
 8004d76:	fb00 f303 	mul.w	r3, r0, r3
 8004d7a:	1ad3      	subs	r3, r2, r3
 8004d7c:	011b      	lsls	r3, r3, #4
 8004d7e:	3332      	adds	r3, #50	; 0x32
 8004d80:	4a15      	ldr	r2, [pc, #84]	; (8004dd8 <UART_SetConfig+0x118>)
 8004d82:	fba2 2303 	umull	r2, r3, r2, r3
 8004d86:	095b      	lsrs	r3, r3, #5
 8004d88:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004d8c:	4419      	add	r1, r3
 8004d8e:	68fa      	ldr	r2, [r7, #12]
 8004d90:	4613      	mov	r3, r2
 8004d92:	009b      	lsls	r3, r3, #2
 8004d94:	4413      	add	r3, r2
 8004d96:	009a      	lsls	r2, r3, #2
 8004d98:	441a      	add	r2, r3
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	685b      	ldr	r3, [r3, #4]
 8004d9e:	009b      	lsls	r3, r3, #2
 8004da0:	fbb2 f2f3 	udiv	r2, r2, r3
 8004da4:	4b0c      	ldr	r3, [pc, #48]	; (8004dd8 <UART_SetConfig+0x118>)
 8004da6:	fba3 0302 	umull	r0, r3, r3, r2
 8004daa:	095b      	lsrs	r3, r3, #5
 8004dac:	2064      	movs	r0, #100	; 0x64
 8004dae:	fb00 f303 	mul.w	r3, r0, r3
 8004db2:	1ad3      	subs	r3, r2, r3
 8004db4:	011b      	lsls	r3, r3, #4
 8004db6:	3332      	adds	r3, #50	; 0x32
 8004db8:	4a07      	ldr	r2, [pc, #28]	; (8004dd8 <UART_SetConfig+0x118>)
 8004dba:	fba2 2303 	umull	r2, r3, r2, r3
 8004dbe:	095b      	lsrs	r3, r3, #5
 8004dc0:	f003 020f 	and.w	r2, r3, #15
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	440a      	add	r2, r1
 8004dca:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004dcc:	bf00      	nop
 8004dce:	3710      	adds	r7, #16
 8004dd0:	46bd      	mov	sp, r7
 8004dd2:	bd80      	pop	{r7, pc}
 8004dd4:	40013800 	.word	0x40013800
 8004dd8:	51eb851f 	.word	0x51eb851f

08004ddc <atoi>:
 8004ddc:	220a      	movs	r2, #10
 8004dde:	2100      	movs	r1, #0
 8004de0:	f000 ba28 	b.w	8005234 <strtol>

08004de4 <__errno>:
 8004de4:	4b01      	ldr	r3, [pc, #4]	; (8004dec <__errno+0x8>)
 8004de6:	6818      	ldr	r0, [r3, #0]
 8004de8:	4770      	bx	lr
 8004dea:	bf00      	nop
 8004dec:	20000170 	.word	0x20000170

08004df0 <__libc_init_array>:
 8004df0:	b570      	push	{r4, r5, r6, lr}
 8004df2:	2600      	movs	r6, #0
 8004df4:	4d0c      	ldr	r5, [pc, #48]	; (8004e28 <__libc_init_array+0x38>)
 8004df6:	4c0d      	ldr	r4, [pc, #52]	; (8004e2c <__libc_init_array+0x3c>)
 8004df8:	1b64      	subs	r4, r4, r5
 8004dfa:	10a4      	asrs	r4, r4, #2
 8004dfc:	42a6      	cmp	r6, r4
 8004dfe:	d109      	bne.n	8004e14 <__libc_init_array+0x24>
 8004e00:	f000 fd80 	bl	8005904 <_init>
 8004e04:	2600      	movs	r6, #0
 8004e06:	4d0a      	ldr	r5, [pc, #40]	; (8004e30 <__libc_init_array+0x40>)
 8004e08:	4c0a      	ldr	r4, [pc, #40]	; (8004e34 <__libc_init_array+0x44>)
 8004e0a:	1b64      	subs	r4, r4, r5
 8004e0c:	10a4      	asrs	r4, r4, #2
 8004e0e:	42a6      	cmp	r6, r4
 8004e10:	d105      	bne.n	8004e1e <__libc_init_array+0x2e>
 8004e12:	bd70      	pop	{r4, r5, r6, pc}
 8004e14:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e18:	4798      	blx	r3
 8004e1a:	3601      	adds	r6, #1
 8004e1c:	e7ee      	b.n	8004dfc <__libc_init_array+0xc>
 8004e1e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e22:	4798      	blx	r3
 8004e24:	3601      	adds	r6, #1
 8004e26:	e7f2      	b.n	8004e0e <__libc_init_array+0x1e>
 8004e28:	08005fa4 	.word	0x08005fa4
 8004e2c:	08005fa4 	.word	0x08005fa4
 8004e30:	08005fa4 	.word	0x08005fa4
 8004e34:	08005fa8 	.word	0x08005fa8

08004e38 <memcpy>:
 8004e38:	440a      	add	r2, r1
 8004e3a:	4291      	cmp	r1, r2
 8004e3c:	f100 33ff 	add.w	r3, r0, #4294967295
 8004e40:	d100      	bne.n	8004e44 <memcpy+0xc>
 8004e42:	4770      	bx	lr
 8004e44:	b510      	push	{r4, lr}
 8004e46:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004e4a:	4291      	cmp	r1, r2
 8004e4c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004e50:	d1f9      	bne.n	8004e46 <memcpy+0xe>
 8004e52:	bd10      	pop	{r4, pc}

08004e54 <memset>:
 8004e54:	4603      	mov	r3, r0
 8004e56:	4402      	add	r2, r0
 8004e58:	4293      	cmp	r3, r2
 8004e5a:	d100      	bne.n	8004e5e <memset+0xa>
 8004e5c:	4770      	bx	lr
 8004e5e:	f803 1b01 	strb.w	r1, [r3], #1
 8004e62:	e7f9      	b.n	8004e58 <memset+0x4>

08004e64 <_free_r>:
 8004e64:	b538      	push	{r3, r4, r5, lr}
 8004e66:	4605      	mov	r5, r0
 8004e68:	2900      	cmp	r1, #0
 8004e6a:	d040      	beq.n	8004eee <_free_r+0x8a>
 8004e6c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004e70:	1f0c      	subs	r4, r1, #4
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	bfb8      	it	lt
 8004e76:	18e4      	addlt	r4, r4, r3
 8004e78:	f000 f9e6 	bl	8005248 <__malloc_lock>
 8004e7c:	4a1c      	ldr	r2, [pc, #112]	; (8004ef0 <_free_r+0x8c>)
 8004e7e:	6813      	ldr	r3, [r2, #0]
 8004e80:	b933      	cbnz	r3, 8004e90 <_free_r+0x2c>
 8004e82:	6063      	str	r3, [r4, #4]
 8004e84:	6014      	str	r4, [r2, #0]
 8004e86:	4628      	mov	r0, r5
 8004e88:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004e8c:	f000 b9e2 	b.w	8005254 <__malloc_unlock>
 8004e90:	42a3      	cmp	r3, r4
 8004e92:	d908      	bls.n	8004ea6 <_free_r+0x42>
 8004e94:	6820      	ldr	r0, [r4, #0]
 8004e96:	1821      	adds	r1, r4, r0
 8004e98:	428b      	cmp	r3, r1
 8004e9a:	bf01      	itttt	eq
 8004e9c:	6819      	ldreq	r1, [r3, #0]
 8004e9e:	685b      	ldreq	r3, [r3, #4]
 8004ea0:	1809      	addeq	r1, r1, r0
 8004ea2:	6021      	streq	r1, [r4, #0]
 8004ea4:	e7ed      	b.n	8004e82 <_free_r+0x1e>
 8004ea6:	461a      	mov	r2, r3
 8004ea8:	685b      	ldr	r3, [r3, #4]
 8004eaa:	b10b      	cbz	r3, 8004eb0 <_free_r+0x4c>
 8004eac:	42a3      	cmp	r3, r4
 8004eae:	d9fa      	bls.n	8004ea6 <_free_r+0x42>
 8004eb0:	6811      	ldr	r1, [r2, #0]
 8004eb2:	1850      	adds	r0, r2, r1
 8004eb4:	42a0      	cmp	r0, r4
 8004eb6:	d10b      	bne.n	8004ed0 <_free_r+0x6c>
 8004eb8:	6820      	ldr	r0, [r4, #0]
 8004eba:	4401      	add	r1, r0
 8004ebc:	1850      	adds	r0, r2, r1
 8004ebe:	4283      	cmp	r3, r0
 8004ec0:	6011      	str	r1, [r2, #0]
 8004ec2:	d1e0      	bne.n	8004e86 <_free_r+0x22>
 8004ec4:	6818      	ldr	r0, [r3, #0]
 8004ec6:	685b      	ldr	r3, [r3, #4]
 8004ec8:	4401      	add	r1, r0
 8004eca:	6011      	str	r1, [r2, #0]
 8004ecc:	6053      	str	r3, [r2, #4]
 8004ece:	e7da      	b.n	8004e86 <_free_r+0x22>
 8004ed0:	d902      	bls.n	8004ed8 <_free_r+0x74>
 8004ed2:	230c      	movs	r3, #12
 8004ed4:	602b      	str	r3, [r5, #0]
 8004ed6:	e7d6      	b.n	8004e86 <_free_r+0x22>
 8004ed8:	6820      	ldr	r0, [r4, #0]
 8004eda:	1821      	adds	r1, r4, r0
 8004edc:	428b      	cmp	r3, r1
 8004ede:	bf01      	itttt	eq
 8004ee0:	6819      	ldreq	r1, [r3, #0]
 8004ee2:	685b      	ldreq	r3, [r3, #4]
 8004ee4:	1809      	addeq	r1, r1, r0
 8004ee6:	6021      	streq	r1, [r4, #0]
 8004ee8:	6063      	str	r3, [r4, #4]
 8004eea:	6054      	str	r4, [r2, #4]
 8004eec:	e7cb      	b.n	8004e86 <_free_r+0x22>
 8004eee:	bd38      	pop	{r3, r4, r5, pc}
 8004ef0:	200009f4 	.word	0x200009f4

08004ef4 <sbrk_aligned>:
 8004ef4:	b570      	push	{r4, r5, r6, lr}
 8004ef6:	4e0e      	ldr	r6, [pc, #56]	; (8004f30 <sbrk_aligned+0x3c>)
 8004ef8:	460c      	mov	r4, r1
 8004efa:	6831      	ldr	r1, [r6, #0]
 8004efc:	4605      	mov	r5, r0
 8004efe:	b911      	cbnz	r1, 8004f06 <sbrk_aligned+0x12>
 8004f00:	f000 f88c 	bl	800501c <_sbrk_r>
 8004f04:	6030      	str	r0, [r6, #0]
 8004f06:	4621      	mov	r1, r4
 8004f08:	4628      	mov	r0, r5
 8004f0a:	f000 f887 	bl	800501c <_sbrk_r>
 8004f0e:	1c43      	adds	r3, r0, #1
 8004f10:	d00a      	beq.n	8004f28 <sbrk_aligned+0x34>
 8004f12:	1cc4      	adds	r4, r0, #3
 8004f14:	f024 0403 	bic.w	r4, r4, #3
 8004f18:	42a0      	cmp	r0, r4
 8004f1a:	d007      	beq.n	8004f2c <sbrk_aligned+0x38>
 8004f1c:	1a21      	subs	r1, r4, r0
 8004f1e:	4628      	mov	r0, r5
 8004f20:	f000 f87c 	bl	800501c <_sbrk_r>
 8004f24:	3001      	adds	r0, #1
 8004f26:	d101      	bne.n	8004f2c <sbrk_aligned+0x38>
 8004f28:	f04f 34ff 	mov.w	r4, #4294967295
 8004f2c:	4620      	mov	r0, r4
 8004f2e:	bd70      	pop	{r4, r5, r6, pc}
 8004f30:	200009f8 	.word	0x200009f8

08004f34 <_malloc_r>:
 8004f34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004f38:	1ccd      	adds	r5, r1, #3
 8004f3a:	f025 0503 	bic.w	r5, r5, #3
 8004f3e:	3508      	adds	r5, #8
 8004f40:	2d0c      	cmp	r5, #12
 8004f42:	bf38      	it	cc
 8004f44:	250c      	movcc	r5, #12
 8004f46:	2d00      	cmp	r5, #0
 8004f48:	4607      	mov	r7, r0
 8004f4a:	db01      	blt.n	8004f50 <_malloc_r+0x1c>
 8004f4c:	42a9      	cmp	r1, r5
 8004f4e:	d905      	bls.n	8004f5c <_malloc_r+0x28>
 8004f50:	230c      	movs	r3, #12
 8004f52:	2600      	movs	r6, #0
 8004f54:	603b      	str	r3, [r7, #0]
 8004f56:	4630      	mov	r0, r6
 8004f58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004f5c:	4e2e      	ldr	r6, [pc, #184]	; (8005018 <_malloc_r+0xe4>)
 8004f5e:	f000 f973 	bl	8005248 <__malloc_lock>
 8004f62:	6833      	ldr	r3, [r6, #0]
 8004f64:	461c      	mov	r4, r3
 8004f66:	bb34      	cbnz	r4, 8004fb6 <_malloc_r+0x82>
 8004f68:	4629      	mov	r1, r5
 8004f6a:	4638      	mov	r0, r7
 8004f6c:	f7ff ffc2 	bl	8004ef4 <sbrk_aligned>
 8004f70:	1c43      	adds	r3, r0, #1
 8004f72:	4604      	mov	r4, r0
 8004f74:	d14d      	bne.n	8005012 <_malloc_r+0xde>
 8004f76:	6834      	ldr	r4, [r6, #0]
 8004f78:	4626      	mov	r6, r4
 8004f7a:	2e00      	cmp	r6, #0
 8004f7c:	d140      	bne.n	8005000 <_malloc_r+0xcc>
 8004f7e:	6823      	ldr	r3, [r4, #0]
 8004f80:	4631      	mov	r1, r6
 8004f82:	4638      	mov	r0, r7
 8004f84:	eb04 0803 	add.w	r8, r4, r3
 8004f88:	f000 f848 	bl	800501c <_sbrk_r>
 8004f8c:	4580      	cmp	r8, r0
 8004f8e:	d13a      	bne.n	8005006 <_malloc_r+0xd2>
 8004f90:	6821      	ldr	r1, [r4, #0]
 8004f92:	3503      	adds	r5, #3
 8004f94:	1a6d      	subs	r5, r5, r1
 8004f96:	f025 0503 	bic.w	r5, r5, #3
 8004f9a:	3508      	adds	r5, #8
 8004f9c:	2d0c      	cmp	r5, #12
 8004f9e:	bf38      	it	cc
 8004fa0:	250c      	movcc	r5, #12
 8004fa2:	4638      	mov	r0, r7
 8004fa4:	4629      	mov	r1, r5
 8004fa6:	f7ff ffa5 	bl	8004ef4 <sbrk_aligned>
 8004faa:	3001      	adds	r0, #1
 8004fac:	d02b      	beq.n	8005006 <_malloc_r+0xd2>
 8004fae:	6823      	ldr	r3, [r4, #0]
 8004fb0:	442b      	add	r3, r5
 8004fb2:	6023      	str	r3, [r4, #0]
 8004fb4:	e00e      	b.n	8004fd4 <_malloc_r+0xa0>
 8004fb6:	6822      	ldr	r2, [r4, #0]
 8004fb8:	1b52      	subs	r2, r2, r5
 8004fba:	d41e      	bmi.n	8004ffa <_malloc_r+0xc6>
 8004fbc:	2a0b      	cmp	r2, #11
 8004fbe:	d916      	bls.n	8004fee <_malloc_r+0xba>
 8004fc0:	1961      	adds	r1, r4, r5
 8004fc2:	42a3      	cmp	r3, r4
 8004fc4:	6025      	str	r5, [r4, #0]
 8004fc6:	bf18      	it	ne
 8004fc8:	6059      	strne	r1, [r3, #4]
 8004fca:	6863      	ldr	r3, [r4, #4]
 8004fcc:	bf08      	it	eq
 8004fce:	6031      	streq	r1, [r6, #0]
 8004fd0:	5162      	str	r2, [r4, r5]
 8004fd2:	604b      	str	r3, [r1, #4]
 8004fd4:	4638      	mov	r0, r7
 8004fd6:	f104 060b 	add.w	r6, r4, #11
 8004fda:	f000 f93b 	bl	8005254 <__malloc_unlock>
 8004fde:	f026 0607 	bic.w	r6, r6, #7
 8004fe2:	1d23      	adds	r3, r4, #4
 8004fe4:	1af2      	subs	r2, r6, r3
 8004fe6:	d0b6      	beq.n	8004f56 <_malloc_r+0x22>
 8004fe8:	1b9b      	subs	r3, r3, r6
 8004fea:	50a3      	str	r3, [r4, r2]
 8004fec:	e7b3      	b.n	8004f56 <_malloc_r+0x22>
 8004fee:	6862      	ldr	r2, [r4, #4]
 8004ff0:	42a3      	cmp	r3, r4
 8004ff2:	bf0c      	ite	eq
 8004ff4:	6032      	streq	r2, [r6, #0]
 8004ff6:	605a      	strne	r2, [r3, #4]
 8004ff8:	e7ec      	b.n	8004fd4 <_malloc_r+0xa0>
 8004ffa:	4623      	mov	r3, r4
 8004ffc:	6864      	ldr	r4, [r4, #4]
 8004ffe:	e7b2      	b.n	8004f66 <_malloc_r+0x32>
 8005000:	4634      	mov	r4, r6
 8005002:	6876      	ldr	r6, [r6, #4]
 8005004:	e7b9      	b.n	8004f7a <_malloc_r+0x46>
 8005006:	230c      	movs	r3, #12
 8005008:	4638      	mov	r0, r7
 800500a:	603b      	str	r3, [r7, #0]
 800500c:	f000 f922 	bl	8005254 <__malloc_unlock>
 8005010:	e7a1      	b.n	8004f56 <_malloc_r+0x22>
 8005012:	6025      	str	r5, [r4, #0]
 8005014:	e7de      	b.n	8004fd4 <_malloc_r+0xa0>
 8005016:	bf00      	nop
 8005018:	200009f4 	.word	0x200009f4

0800501c <_sbrk_r>:
 800501c:	b538      	push	{r3, r4, r5, lr}
 800501e:	2300      	movs	r3, #0
 8005020:	4d05      	ldr	r5, [pc, #20]	; (8005038 <_sbrk_r+0x1c>)
 8005022:	4604      	mov	r4, r0
 8005024:	4608      	mov	r0, r1
 8005026:	602b      	str	r3, [r5, #0]
 8005028:	f7fd fcc6 	bl	80029b8 <_sbrk>
 800502c:	1c43      	adds	r3, r0, #1
 800502e:	d102      	bne.n	8005036 <_sbrk_r+0x1a>
 8005030:	682b      	ldr	r3, [r5, #0]
 8005032:	b103      	cbz	r3, 8005036 <_sbrk_r+0x1a>
 8005034:	6023      	str	r3, [r4, #0]
 8005036:	bd38      	pop	{r3, r4, r5, pc}
 8005038:	200009fc 	.word	0x200009fc

0800503c <sniprintf>:
 800503c:	b40c      	push	{r2, r3}
 800503e:	b530      	push	{r4, r5, lr}
 8005040:	4b17      	ldr	r3, [pc, #92]	; (80050a0 <sniprintf+0x64>)
 8005042:	1e0c      	subs	r4, r1, #0
 8005044:	681d      	ldr	r5, [r3, #0]
 8005046:	b09d      	sub	sp, #116	; 0x74
 8005048:	da08      	bge.n	800505c <sniprintf+0x20>
 800504a:	238b      	movs	r3, #139	; 0x8b
 800504c:	f04f 30ff 	mov.w	r0, #4294967295
 8005050:	602b      	str	r3, [r5, #0]
 8005052:	b01d      	add	sp, #116	; 0x74
 8005054:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005058:	b002      	add	sp, #8
 800505a:	4770      	bx	lr
 800505c:	f44f 7302 	mov.w	r3, #520	; 0x208
 8005060:	f8ad 3014 	strh.w	r3, [sp, #20]
 8005064:	bf0c      	ite	eq
 8005066:	4623      	moveq	r3, r4
 8005068:	f104 33ff 	addne.w	r3, r4, #4294967295
 800506c:	9304      	str	r3, [sp, #16]
 800506e:	9307      	str	r3, [sp, #28]
 8005070:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005074:	9002      	str	r0, [sp, #8]
 8005076:	9006      	str	r0, [sp, #24]
 8005078:	f8ad 3016 	strh.w	r3, [sp, #22]
 800507c:	4628      	mov	r0, r5
 800507e:	ab21      	add	r3, sp, #132	; 0x84
 8005080:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8005082:	a902      	add	r1, sp, #8
 8005084:	9301      	str	r3, [sp, #4]
 8005086:	f000 f975 	bl	8005374 <_svfiprintf_r>
 800508a:	1c43      	adds	r3, r0, #1
 800508c:	bfbc      	itt	lt
 800508e:	238b      	movlt	r3, #139	; 0x8b
 8005090:	602b      	strlt	r3, [r5, #0]
 8005092:	2c00      	cmp	r4, #0
 8005094:	d0dd      	beq.n	8005052 <sniprintf+0x16>
 8005096:	2200      	movs	r2, #0
 8005098:	9b02      	ldr	r3, [sp, #8]
 800509a:	701a      	strb	r2, [r3, #0]
 800509c:	e7d9      	b.n	8005052 <sniprintf+0x16>
 800509e:	bf00      	nop
 80050a0:	20000170 	.word	0x20000170

080050a4 <siprintf>:
 80050a4:	b40e      	push	{r1, r2, r3}
 80050a6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80050aa:	b500      	push	{lr}
 80050ac:	b09c      	sub	sp, #112	; 0x70
 80050ae:	ab1d      	add	r3, sp, #116	; 0x74
 80050b0:	9002      	str	r0, [sp, #8]
 80050b2:	9006      	str	r0, [sp, #24]
 80050b4:	9107      	str	r1, [sp, #28]
 80050b6:	9104      	str	r1, [sp, #16]
 80050b8:	4808      	ldr	r0, [pc, #32]	; (80050dc <siprintf+0x38>)
 80050ba:	4909      	ldr	r1, [pc, #36]	; (80050e0 <siprintf+0x3c>)
 80050bc:	f853 2b04 	ldr.w	r2, [r3], #4
 80050c0:	9105      	str	r1, [sp, #20]
 80050c2:	6800      	ldr	r0, [r0, #0]
 80050c4:	a902      	add	r1, sp, #8
 80050c6:	9301      	str	r3, [sp, #4]
 80050c8:	f000 f954 	bl	8005374 <_svfiprintf_r>
 80050cc:	2200      	movs	r2, #0
 80050ce:	9b02      	ldr	r3, [sp, #8]
 80050d0:	701a      	strb	r2, [r3, #0]
 80050d2:	b01c      	add	sp, #112	; 0x70
 80050d4:	f85d eb04 	ldr.w	lr, [sp], #4
 80050d8:	b003      	add	sp, #12
 80050da:	4770      	bx	lr
 80050dc:	20000170 	.word	0x20000170
 80050e0:	ffff0208 	.word	0xffff0208

080050e4 <strchr>:
 80050e4:	4603      	mov	r3, r0
 80050e6:	b2c9      	uxtb	r1, r1
 80050e8:	4618      	mov	r0, r3
 80050ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 80050ee:	b112      	cbz	r2, 80050f6 <strchr+0x12>
 80050f0:	428a      	cmp	r2, r1
 80050f2:	d1f9      	bne.n	80050e8 <strchr+0x4>
 80050f4:	4770      	bx	lr
 80050f6:	2900      	cmp	r1, #0
 80050f8:	bf18      	it	ne
 80050fa:	2000      	movne	r0, #0
 80050fc:	4770      	bx	lr

080050fe <strcpy>:
 80050fe:	4603      	mov	r3, r0
 8005100:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005104:	f803 2b01 	strb.w	r2, [r3], #1
 8005108:	2a00      	cmp	r2, #0
 800510a:	d1f9      	bne.n	8005100 <strcpy+0x2>
 800510c:	4770      	bx	lr

0800510e <strstr>:
 800510e:	780a      	ldrb	r2, [r1, #0]
 8005110:	b570      	push	{r4, r5, r6, lr}
 8005112:	b96a      	cbnz	r2, 8005130 <strstr+0x22>
 8005114:	bd70      	pop	{r4, r5, r6, pc}
 8005116:	429a      	cmp	r2, r3
 8005118:	d109      	bne.n	800512e <strstr+0x20>
 800511a:	460c      	mov	r4, r1
 800511c:	4605      	mov	r5, r0
 800511e:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8005122:	2b00      	cmp	r3, #0
 8005124:	d0f6      	beq.n	8005114 <strstr+0x6>
 8005126:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800512a:	429e      	cmp	r6, r3
 800512c:	d0f7      	beq.n	800511e <strstr+0x10>
 800512e:	3001      	adds	r0, #1
 8005130:	7803      	ldrb	r3, [r0, #0]
 8005132:	2b00      	cmp	r3, #0
 8005134:	d1ef      	bne.n	8005116 <strstr+0x8>
 8005136:	4618      	mov	r0, r3
 8005138:	e7ec      	b.n	8005114 <strstr+0x6>
	...

0800513c <_strtol_l.constprop.0>:
 800513c:	2b01      	cmp	r3, #1
 800513e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005142:	4680      	mov	r8, r0
 8005144:	d001      	beq.n	800514a <_strtol_l.constprop.0+0xe>
 8005146:	2b24      	cmp	r3, #36	; 0x24
 8005148:	d906      	bls.n	8005158 <_strtol_l.constprop.0+0x1c>
 800514a:	f7ff fe4b 	bl	8004de4 <__errno>
 800514e:	2316      	movs	r3, #22
 8005150:	6003      	str	r3, [r0, #0]
 8005152:	2000      	movs	r0, #0
 8005154:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005158:	460d      	mov	r5, r1
 800515a:	4f35      	ldr	r7, [pc, #212]	; (8005230 <_strtol_l.constprop.0+0xf4>)
 800515c:	4628      	mov	r0, r5
 800515e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005162:	5de6      	ldrb	r6, [r4, r7]
 8005164:	f016 0608 	ands.w	r6, r6, #8
 8005168:	d1f8      	bne.n	800515c <_strtol_l.constprop.0+0x20>
 800516a:	2c2d      	cmp	r4, #45	; 0x2d
 800516c:	d12f      	bne.n	80051ce <_strtol_l.constprop.0+0x92>
 800516e:	2601      	movs	r6, #1
 8005170:	782c      	ldrb	r4, [r5, #0]
 8005172:	1c85      	adds	r5, r0, #2
 8005174:	2b00      	cmp	r3, #0
 8005176:	d057      	beq.n	8005228 <_strtol_l.constprop.0+0xec>
 8005178:	2b10      	cmp	r3, #16
 800517a:	d109      	bne.n	8005190 <_strtol_l.constprop.0+0x54>
 800517c:	2c30      	cmp	r4, #48	; 0x30
 800517e:	d107      	bne.n	8005190 <_strtol_l.constprop.0+0x54>
 8005180:	7828      	ldrb	r0, [r5, #0]
 8005182:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8005186:	2858      	cmp	r0, #88	; 0x58
 8005188:	d149      	bne.n	800521e <_strtol_l.constprop.0+0xe2>
 800518a:	2310      	movs	r3, #16
 800518c:	786c      	ldrb	r4, [r5, #1]
 800518e:	3502      	adds	r5, #2
 8005190:	2700      	movs	r7, #0
 8005192:	f106 4e00 	add.w	lr, r6, #2147483648	; 0x80000000
 8005196:	f10e 3eff 	add.w	lr, lr, #4294967295
 800519a:	fbbe f9f3 	udiv	r9, lr, r3
 800519e:	4638      	mov	r0, r7
 80051a0:	fb03 ea19 	mls	sl, r3, r9, lr
 80051a4:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 80051a8:	f1bc 0f09 	cmp.w	ip, #9
 80051ac:	d814      	bhi.n	80051d8 <_strtol_l.constprop.0+0x9c>
 80051ae:	4664      	mov	r4, ip
 80051b0:	42a3      	cmp	r3, r4
 80051b2:	dd22      	ble.n	80051fa <_strtol_l.constprop.0+0xbe>
 80051b4:	2f00      	cmp	r7, #0
 80051b6:	db1d      	blt.n	80051f4 <_strtol_l.constprop.0+0xb8>
 80051b8:	4581      	cmp	r9, r0
 80051ba:	d31b      	bcc.n	80051f4 <_strtol_l.constprop.0+0xb8>
 80051bc:	d101      	bne.n	80051c2 <_strtol_l.constprop.0+0x86>
 80051be:	45a2      	cmp	sl, r4
 80051c0:	db18      	blt.n	80051f4 <_strtol_l.constprop.0+0xb8>
 80051c2:	2701      	movs	r7, #1
 80051c4:	fb00 4003 	mla	r0, r0, r3, r4
 80051c8:	f815 4b01 	ldrb.w	r4, [r5], #1
 80051cc:	e7ea      	b.n	80051a4 <_strtol_l.constprop.0+0x68>
 80051ce:	2c2b      	cmp	r4, #43	; 0x2b
 80051d0:	bf04      	itt	eq
 80051d2:	782c      	ldrbeq	r4, [r5, #0]
 80051d4:	1c85      	addeq	r5, r0, #2
 80051d6:	e7cd      	b.n	8005174 <_strtol_l.constprop.0+0x38>
 80051d8:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 80051dc:	f1bc 0f19 	cmp.w	ip, #25
 80051e0:	d801      	bhi.n	80051e6 <_strtol_l.constprop.0+0xaa>
 80051e2:	3c37      	subs	r4, #55	; 0x37
 80051e4:	e7e4      	b.n	80051b0 <_strtol_l.constprop.0+0x74>
 80051e6:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 80051ea:	f1bc 0f19 	cmp.w	ip, #25
 80051ee:	d804      	bhi.n	80051fa <_strtol_l.constprop.0+0xbe>
 80051f0:	3c57      	subs	r4, #87	; 0x57
 80051f2:	e7dd      	b.n	80051b0 <_strtol_l.constprop.0+0x74>
 80051f4:	f04f 37ff 	mov.w	r7, #4294967295
 80051f8:	e7e6      	b.n	80051c8 <_strtol_l.constprop.0+0x8c>
 80051fa:	2f00      	cmp	r7, #0
 80051fc:	da07      	bge.n	800520e <_strtol_l.constprop.0+0xd2>
 80051fe:	2322      	movs	r3, #34	; 0x22
 8005200:	4670      	mov	r0, lr
 8005202:	f8c8 3000 	str.w	r3, [r8]
 8005206:	2a00      	cmp	r2, #0
 8005208:	d0a4      	beq.n	8005154 <_strtol_l.constprop.0+0x18>
 800520a:	1e69      	subs	r1, r5, #1
 800520c:	e005      	b.n	800521a <_strtol_l.constprop.0+0xde>
 800520e:	b106      	cbz	r6, 8005212 <_strtol_l.constprop.0+0xd6>
 8005210:	4240      	negs	r0, r0
 8005212:	2a00      	cmp	r2, #0
 8005214:	d09e      	beq.n	8005154 <_strtol_l.constprop.0+0x18>
 8005216:	2f00      	cmp	r7, #0
 8005218:	d1f7      	bne.n	800520a <_strtol_l.constprop.0+0xce>
 800521a:	6011      	str	r1, [r2, #0]
 800521c:	e79a      	b.n	8005154 <_strtol_l.constprop.0+0x18>
 800521e:	2430      	movs	r4, #48	; 0x30
 8005220:	2b00      	cmp	r3, #0
 8005222:	d1b5      	bne.n	8005190 <_strtol_l.constprop.0+0x54>
 8005224:	2308      	movs	r3, #8
 8005226:	e7b3      	b.n	8005190 <_strtol_l.constprop.0+0x54>
 8005228:	2c30      	cmp	r4, #48	; 0x30
 800522a:	d0a9      	beq.n	8005180 <_strtol_l.constprop.0+0x44>
 800522c:	230a      	movs	r3, #10
 800522e:	e7af      	b.n	8005190 <_strtol_l.constprop.0+0x54>
 8005230:	08005e0f 	.word	0x08005e0f

08005234 <strtol>:
 8005234:	4613      	mov	r3, r2
 8005236:	460a      	mov	r2, r1
 8005238:	4601      	mov	r1, r0
 800523a:	4802      	ldr	r0, [pc, #8]	; (8005244 <strtol+0x10>)
 800523c:	6800      	ldr	r0, [r0, #0]
 800523e:	f7ff bf7d 	b.w	800513c <_strtol_l.constprop.0>
 8005242:	bf00      	nop
 8005244:	20000170 	.word	0x20000170

08005248 <__malloc_lock>:
 8005248:	4801      	ldr	r0, [pc, #4]	; (8005250 <__malloc_lock+0x8>)
 800524a:	f000 bb29 	b.w	80058a0 <__retarget_lock_acquire_recursive>
 800524e:	bf00      	nop
 8005250:	20000a00 	.word	0x20000a00

08005254 <__malloc_unlock>:
 8005254:	4801      	ldr	r0, [pc, #4]	; (800525c <__malloc_unlock+0x8>)
 8005256:	f000 bb24 	b.w	80058a2 <__retarget_lock_release_recursive>
 800525a:	bf00      	nop
 800525c:	20000a00 	.word	0x20000a00

08005260 <_realloc_r>:
 8005260:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005264:	4680      	mov	r8, r0
 8005266:	4614      	mov	r4, r2
 8005268:	460e      	mov	r6, r1
 800526a:	b921      	cbnz	r1, 8005276 <_realloc_r+0x16>
 800526c:	4611      	mov	r1, r2
 800526e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005272:	f7ff be5f 	b.w	8004f34 <_malloc_r>
 8005276:	b92a      	cbnz	r2, 8005284 <_realloc_r+0x24>
 8005278:	f7ff fdf4 	bl	8004e64 <_free_r>
 800527c:	4625      	mov	r5, r4
 800527e:	4628      	mov	r0, r5
 8005280:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005284:	f000 fb36 	bl	80058f4 <_malloc_usable_size_r>
 8005288:	4284      	cmp	r4, r0
 800528a:	4607      	mov	r7, r0
 800528c:	d802      	bhi.n	8005294 <_realloc_r+0x34>
 800528e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005292:	d812      	bhi.n	80052ba <_realloc_r+0x5a>
 8005294:	4621      	mov	r1, r4
 8005296:	4640      	mov	r0, r8
 8005298:	f7ff fe4c 	bl	8004f34 <_malloc_r>
 800529c:	4605      	mov	r5, r0
 800529e:	2800      	cmp	r0, #0
 80052a0:	d0ed      	beq.n	800527e <_realloc_r+0x1e>
 80052a2:	42bc      	cmp	r4, r7
 80052a4:	4622      	mov	r2, r4
 80052a6:	4631      	mov	r1, r6
 80052a8:	bf28      	it	cs
 80052aa:	463a      	movcs	r2, r7
 80052ac:	f7ff fdc4 	bl	8004e38 <memcpy>
 80052b0:	4631      	mov	r1, r6
 80052b2:	4640      	mov	r0, r8
 80052b4:	f7ff fdd6 	bl	8004e64 <_free_r>
 80052b8:	e7e1      	b.n	800527e <_realloc_r+0x1e>
 80052ba:	4635      	mov	r5, r6
 80052bc:	e7df      	b.n	800527e <_realloc_r+0x1e>

080052be <__ssputs_r>:
 80052be:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80052c2:	688e      	ldr	r6, [r1, #8]
 80052c4:	4682      	mov	sl, r0
 80052c6:	429e      	cmp	r6, r3
 80052c8:	460c      	mov	r4, r1
 80052ca:	4690      	mov	r8, r2
 80052cc:	461f      	mov	r7, r3
 80052ce:	d838      	bhi.n	8005342 <__ssputs_r+0x84>
 80052d0:	898a      	ldrh	r2, [r1, #12]
 80052d2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80052d6:	d032      	beq.n	800533e <__ssputs_r+0x80>
 80052d8:	6825      	ldr	r5, [r4, #0]
 80052da:	6909      	ldr	r1, [r1, #16]
 80052dc:	3301      	adds	r3, #1
 80052de:	eba5 0901 	sub.w	r9, r5, r1
 80052e2:	6965      	ldr	r5, [r4, #20]
 80052e4:	444b      	add	r3, r9
 80052e6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80052ea:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80052ee:	106d      	asrs	r5, r5, #1
 80052f0:	429d      	cmp	r5, r3
 80052f2:	bf38      	it	cc
 80052f4:	461d      	movcc	r5, r3
 80052f6:	0553      	lsls	r3, r2, #21
 80052f8:	d531      	bpl.n	800535e <__ssputs_r+0xa0>
 80052fa:	4629      	mov	r1, r5
 80052fc:	f7ff fe1a 	bl	8004f34 <_malloc_r>
 8005300:	4606      	mov	r6, r0
 8005302:	b950      	cbnz	r0, 800531a <__ssputs_r+0x5c>
 8005304:	230c      	movs	r3, #12
 8005306:	f04f 30ff 	mov.w	r0, #4294967295
 800530a:	f8ca 3000 	str.w	r3, [sl]
 800530e:	89a3      	ldrh	r3, [r4, #12]
 8005310:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005314:	81a3      	strh	r3, [r4, #12]
 8005316:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800531a:	464a      	mov	r2, r9
 800531c:	6921      	ldr	r1, [r4, #16]
 800531e:	f7ff fd8b 	bl	8004e38 <memcpy>
 8005322:	89a3      	ldrh	r3, [r4, #12]
 8005324:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005328:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800532c:	81a3      	strh	r3, [r4, #12]
 800532e:	6126      	str	r6, [r4, #16]
 8005330:	444e      	add	r6, r9
 8005332:	6026      	str	r6, [r4, #0]
 8005334:	463e      	mov	r6, r7
 8005336:	6165      	str	r5, [r4, #20]
 8005338:	eba5 0509 	sub.w	r5, r5, r9
 800533c:	60a5      	str	r5, [r4, #8]
 800533e:	42be      	cmp	r6, r7
 8005340:	d900      	bls.n	8005344 <__ssputs_r+0x86>
 8005342:	463e      	mov	r6, r7
 8005344:	4632      	mov	r2, r6
 8005346:	4641      	mov	r1, r8
 8005348:	6820      	ldr	r0, [r4, #0]
 800534a:	f000 fab9 	bl	80058c0 <memmove>
 800534e:	68a3      	ldr	r3, [r4, #8]
 8005350:	2000      	movs	r0, #0
 8005352:	1b9b      	subs	r3, r3, r6
 8005354:	60a3      	str	r3, [r4, #8]
 8005356:	6823      	ldr	r3, [r4, #0]
 8005358:	4433      	add	r3, r6
 800535a:	6023      	str	r3, [r4, #0]
 800535c:	e7db      	b.n	8005316 <__ssputs_r+0x58>
 800535e:	462a      	mov	r2, r5
 8005360:	f7ff ff7e 	bl	8005260 <_realloc_r>
 8005364:	4606      	mov	r6, r0
 8005366:	2800      	cmp	r0, #0
 8005368:	d1e1      	bne.n	800532e <__ssputs_r+0x70>
 800536a:	4650      	mov	r0, sl
 800536c:	6921      	ldr	r1, [r4, #16]
 800536e:	f7ff fd79 	bl	8004e64 <_free_r>
 8005372:	e7c7      	b.n	8005304 <__ssputs_r+0x46>

08005374 <_svfiprintf_r>:
 8005374:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005378:	4698      	mov	r8, r3
 800537a:	898b      	ldrh	r3, [r1, #12]
 800537c:	4607      	mov	r7, r0
 800537e:	061b      	lsls	r3, r3, #24
 8005380:	460d      	mov	r5, r1
 8005382:	4614      	mov	r4, r2
 8005384:	b09d      	sub	sp, #116	; 0x74
 8005386:	d50e      	bpl.n	80053a6 <_svfiprintf_r+0x32>
 8005388:	690b      	ldr	r3, [r1, #16]
 800538a:	b963      	cbnz	r3, 80053a6 <_svfiprintf_r+0x32>
 800538c:	2140      	movs	r1, #64	; 0x40
 800538e:	f7ff fdd1 	bl	8004f34 <_malloc_r>
 8005392:	6028      	str	r0, [r5, #0]
 8005394:	6128      	str	r0, [r5, #16]
 8005396:	b920      	cbnz	r0, 80053a2 <_svfiprintf_r+0x2e>
 8005398:	230c      	movs	r3, #12
 800539a:	603b      	str	r3, [r7, #0]
 800539c:	f04f 30ff 	mov.w	r0, #4294967295
 80053a0:	e0d1      	b.n	8005546 <_svfiprintf_r+0x1d2>
 80053a2:	2340      	movs	r3, #64	; 0x40
 80053a4:	616b      	str	r3, [r5, #20]
 80053a6:	2300      	movs	r3, #0
 80053a8:	9309      	str	r3, [sp, #36]	; 0x24
 80053aa:	2320      	movs	r3, #32
 80053ac:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80053b0:	2330      	movs	r3, #48	; 0x30
 80053b2:	f04f 0901 	mov.w	r9, #1
 80053b6:	f8cd 800c 	str.w	r8, [sp, #12]
 80053ba:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8005560 <_svfiprintf_r+0x1ec>
 80053be:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80053c2:	4623      	mov	r3, r4
 80053c4:	469a      	mov	sl, r3
 80053c6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80053ca:	b10a      	cbz	r2, 80053d0 <_svfiprintf_r+0x5c>
 80053cc:	2a25      	cmp	r2, #37	; 0x25
 80053ce:	d1f9      	bne.n	80053c4 <_svfiprintf_r+0x50>
 80053d0:	ebba 0b04 	subs.w	fp, sl, r4
 80053d4:	d00b      	beq.n	80053ee <_svfiprintf_r+0x7a>
 80053d6:	465b      	mov	r3, fp
 80053d8:	4622      	mov	r2, r4
 80053da:	4629      	mov	r1, r5
 80053dc:	4638      	mov	r0, r7
 80053de:	f7ff ff6e 	bl	80052be <__ssputs_r>
 80053e2:	3001      	adds	r0, #1
 80053e4:	f000 80aa 	beq.w	800553c <_svfiprintf_r+0x1c8>
 80053e8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80053ea:	445a      	add	r2, fp
 80053ec:	9209      	str	r2, [sp, #36]	; 0x24
 80053ee:	f89a 3000 	ldrb.w	r3, [sl]
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	f000 80a2 	beq.w	800553c <_svfiprintf_r+0x1c8>
 80053f8:	2300      	movs	r3, #0
 80053fa:	f04f 32ff 	mov.w	r2, #4294967295
 80053fe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005402:	f10a 0a01 	add.w	sl, sl, #1
 8005406:	9304      	str	r3, [sp, #16]
 8005408:	9307      	str	r3, [sp, #28]
 800540a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800540e:	931a      	str	r3, [sp, #104]	; 0x68
 8005410:	4654      	mov	r4, sl
 8005412:	2205      	movs	r2, #5
 8005414:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005418:	4851      	ldr	r0, [pc, #324]	; (8005560 <_svfiprintf_r+0x1ec>)
 800541a:	f000 fa43 	bl	80058a4 <memchr>
 800541e:	9a04      	ldr	r2, [sp, #16]
 8005420:	b9d8      	cbnz	r0, 800545a <_svfiprintf_r+0xe6>
 8005422:	06d0      	lsls	r0, r2, #27
 8005424:	bf44      	itt	mi
 8005426:	2320      	movmi	r3, #32
 8005428:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800542c:	0711      	lsls	r1, r2, #28
 800542e:	bf44      	itt	mi
 8005430:	232b      	movmi	r3, #43	; 0x2b
 8005432:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005436:	f89a 3000 	ldrb.w	r3, [sl]
 800543a:	2b2a      	cmp	r3, #42	; 0x2a
 800543c:	d015      	beq.n	800546a <_svfiprintf_r+0xf6>
 800543e:	4654      	mov	r4, sl
 8005440:	2000      	movs	r0, #0
 8005442:	f04f 0c0a 	mov.w	ip, #10
 8005446:	9a07      	ldr	r2, [sp, #28]
 8005448:	4621      	mov	r1, r4
 800544a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800544e:	3b30      	subs	r3, #48	; 0x30
 8005450:	2b09      	cmp	r3, #9
 8005452:	d94e      	bls.n	80054f2 <_svfiprintf_r+0x17e>
 8005454:	b1b0      	cbz	r0, 8005484 <_svfiprintf_r+0x110>
 8005456:	9207      	str	r2, [sp, #28]
 8005458:	e014      	b.n	8005484 <_svfiprintf_r+0x110>
 800545a:	eba0 0308 	sub.w	r3, r0, r8
 800545e:	fa09 f303 	lsl.w	r3, r9, r3
 8005462:	4313      	orrs	r3, r2
 8005464:	46a2      	mov	sl, r4
 8005466:	9304      	str	r3, [sp, #16]
 8005468:	e7d2      	b.n	8005410 <_svfiprintf_r+0x9c>
 800546a:	9b03      	ldr	r3, [sp, #12]
 800546c:	1d19      	adds	r1, r3, #4
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	9103      	str	r1, [sp, #12]
 8005472:	2b00      	cmp	r3, #0
 8005474:	bfbb      	ittet	lt
 8005476:	425b      	neglt	r3, r3
 8005478:	f042 0202 	orrlt.w	r2, r2, #2
 800547c:	9307      	strge	r3, [sp, #28]
 800547e:	9307      	strlt	r3, [sp, #28]
 8005480:	bfb8      	it	lt
 8005482:	9204      	strlt	r2, [sp, #16]
 8005484:	7823      	ldrb	r3, [r4, #0]
 8005486:	2b2e      	cmp	r3, #46	; 0x2e
 8005488:	d10c      	bne.n	80054a4 <_svfiprintf_r+0x130>
 800548a:	7863      	ldrb	r3, [r4, #1]
 800548c:	2b2a      	cmp	r3, #42	; 0x2a
 800548e:	d135      	bne.n	80054fc <_svfiprintf_r+0x188>
 8005490:	9b03      	ldr	r3, [sp, #12]
 8005492:	3402      	adds	r4, #2
 8005494:	1d1a      	adds	r2, r3, #4
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	9203      	str	r2, [sp, #12]
 800549a:	2b00      	cmp	r3, #0
 800549c:	bfb8      	it	lt
 800549e:	f04f 33ff 	movlt.w	r3, #4294967295
 80054a2:	9305      	str	r3, [sp, #20]
 80054a4:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8005564 <_svfiprintf_r+0x1f0>
 80054a8:	2203      	movs	r2, #3
 80054aa:	4650      	mov	r0, sl
 80054ac:	7821      	ldrb	r1, [r4, #0]
 80054ae:	f000 f9f9 	bl	80058a4 <memchr>
 80054b2:	b140      	cbz	r0, 80054c6 <_svfiprintf_r+0x152>
 80054b4:	2340      	movs	r3, #64	; 0x40
 80054b6:	eba0 000a 	sub.w	r0, r0, sl
 80054ba:	fa03 f000 	lsl.w	r0, r3, r0
 80054be:	9b04      	ldr	r3, [sp, #16]
 80054c0:	3401      	adds	r4, #1
 80054c2:	4303      	orrs	r3, r0
 80054c4:	9304      	str	r3, [sp, #16]
 80054c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80054ca:	2206      	movs	r2, #6
 80054cc:	4826      	ldr	r0, [pc, #152]	; (8005568 <_svfiprintf_r+0x1f4>)
 80054ce:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80054d2:	f000 f9e7 	bl	80058a4 <memchr>
 80054d6:	2800      	cmp	r0, #0
 80054d8:	d038      	beq.n	800554c <_svfiprintf_r+0x1d8>
 80054da:	4b24      	ldr	r3, [pc, #144]	; (800556c <_svfiprintf_r+0x1f8>)
 80054dc:	bb1b      	cbnz	r3, 8005526 <_svfiprintf_r+0x1b2>
 80054de:	9b03      	ldr	r3, [sp, #12]
 80054e0:	3307      	adds	r3, #7
 80054e2:	f023 0307 	bic.w	r3, r3, #7
 80054e6:	3308      	adds	r3, #8
 80054e8:	9303      	str	r3, [sp, #12]
 80054ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80054ec:	4433      	add	r3, r6
 80054ee:	9309      	str	r3, [sp, #36]	; 0x24
 80054f0:	e767      	b.n	80053c2 <_svfiprintf_r+0x4e>
 80054f2:	460c      	mov	r4, r1
 80054f4:	2001      	movs	r0, #1
 80054f6:	fb0c 3202 	mla	r2, ip, r2, r3
 80054fa:	e7a5      	b.n	8005448 <_svfiprintf_r+0xd4>
 80054fc:	2300      	movs	r3, #0
 80054fe:	f04f 0c0a 	mov.w	ip, #10
 8005502:	4619      	mov	r1, r3
 8005504:	3401      	adds	r4, #1
 8005506:	9305      	str	r3, [sp, #20]
 8005508:	4620      	mov	r0, r4
 800550a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800550e:	3a30      	subs	r2, #48	; 0x30
 8005510:	2a09      	cmp	r2, #9
 8005512:	d903      	bls.n	800551c <_svfiprintf_r+0x1a8>
 8005514:	2b00      	cmp	r3, #0
 8005516:	d0c5      	beq.n	80054a4 <_svfiprintf_r+0x130>
 8005518:	9105      	str	r1, [sp, #20]
 800551a:	e7c3      	b.n	80054a4 <_svfiprintf_r+0x130>
 800551c:	4604      	mov	r4, r0
 800551e:	2301      	movs	r3, #1
 8005520:	fb0c 2101 	mla	r1, ip, r1, r2
 8005524:	e7f0      	b.n	8005508 <_svfiprintf_r+0x194>
 8005526:	ab03      	add	r3, sp, #12
 8005528:	9300      	str	r3, [sp, #0]
 800552a:	462a      	mov	r2, r5
 800552c:	4638      	mov	r0, r7
 800552e:	4b10      	ldr	r3, [pc, #64]	; (8005570 <_svfiprintf_r+0x1fc>)
 8005530:	a904      	add	r1, sp, #16
 8005532:	f3af 8000 	nop.w
 8005536:	1c42      	adds	r2, r0, #1
 8005538:	4606      	mov	r6, r0
 800553a:	d1d6      	bne.n	80054ea <_svfiprintf_r+0x176>
 800553c:	89ab      	ldrh	r3, [r5, #12]
 800553e:	065b      	lsls	r3, r3, #25
 8005540:	f53f af2c 	bmi.w	800539c <_svfiprintf_r+0x28>
 8005544:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005546:	b01d      	add	sp, #116	; 0x74
 8005548:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800554c:	ab03      	add	r3, sp, #12
 800554e:	9300      	str	r3, [sp, #0]
 8005550:	462a      	mov	r2, r5
 8005552:	4638      	mov	r0, r7
 8005554:	4b06      	ldr	r3, [pc, #24]	; (8005570 <_svfiprintf_r+0x1fc>)
 8005556:	a904      	add	r1, sp, #16
 8005558:	f000 f87c 	bl	8005654 <_printf_i>
 800555c:	e7eb      	b.n	8005536 <_svfiprintf_r+0x1c2>
 800555e:	bf00      	nop
 8005560:	08005f0f 	.word	0x08005f0f
 8005564:	08005f15 	.word	0x08005f15
 8005568:	08005f19 	.word	0x08005f19
 800556c:	00000000 	.word	0x00000000
 8005570:	080052bf 	.word	0x080052bf

08005574 <_printf_common>:
 8005574:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005578:	4616      	mov	r6, r2
 800557a:	4699      	mov	r9, r3
 800557c:	688a      	ldr	r2, [r1, #8]
 800557e:	690b      	ldr	r3, [r1, #16]
 8005580:	4607      	mov	r7, r0
 8005582:	4293      	cmp	r3, r2
 8005584:	bfb8      	it	lt
 8005586:	4613      	movlt	r3, r2
 8005588:	6033      	str	r3, [r6, #0]
 800558a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800558e:	460c      	mov	r4, r1
 8005590:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005594:	b10a      	cbz	r2, 800559a <_printf_common+0x26>
 8005596:	3301      	adds	r3, #1
 8005598:	6033      	str	r3, [r6, #0]
 800559a:	6823      	ldr	r3, [r4, #0]
 800559c:	0699      	lsls	r1, r3, #26
 800559e:	bf42      	ittt	mi
 80055a0:	6833      	ldrmi	r3, [r6, #0]
 80055a2:	3302      	addmi	r3, #2
 80055a4:	6033      	strmi	r3, [r6, #0]
 80055a6:	6825      	ldr	r5, [r4, #0]
 80055a8:	f015 0506 	ands.w	r5, r5, #6
 80055ac:	d106      	bne.n	80055bc <_printf_common+0x48>
 80055ae:	f104 0a19 	add.w	sl, r4, #25
 80055b2:	68e3      	ldr	r3, [r4, #12]
 80055b4:	6832      	ldr	r2, [r6, #0]
 80055b6:	1a9b      	subs	r3, r3, r2
 80055b8:	42ab      	cmp	r3, r5
 80055ba:	dc28      	bgt.n	800560e <_printf_common+0x9a>
 80055bc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80055c0:	1e13      	subs	r3, r2, #0
 80055c2:	6822      	ldr	r2, [r4, #0]
 80055c4:	bf18      	it	ne
 80055c6:	2301      	movne	r3, #1
 80055c8:	0692      	lsls	r2, r2, #26
 80055ca:	d42d      	bmi.n	8005628 <_printf_common+0xb4>
 80055cc:	4649      	mov	r1, r9
 80055ce:	4638      	mov	r0, r7
 80055d0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80055d4:	47c0      	blx	r8
 80055d6:	3001      	adds	r0, #1
 80055d8:	d020      	beq.n	800561c <_printf_common+0xa8>
 80055da:	6823      	ldr	r3, [r4, #0]
 80055dc:	68e5      	ldr	r5, [r4, #12]
 80055de:	f003 0306 	and.w	r3, r3, #6
 80055e2:	2b04      	cmp	r3, #4
 80055e4:	bf18      	it	ne
 80055e6:	2500      	movne	r5, #0
 80055e8:	6832      	ldr	r2, [r6, #0]
 80055ea:	f04f 0600 	mov.w	r6, #0
 80055ee:	68a3      	ldr	r3, [r4, #8]
 80055f0:	bf08      	it	eq
 80055f2:	1aad      	subeq	r5, r5, r2
 80055f4:	6922      	ldr	r2, [r4, #16]
 80055f6:	bf08      	it	eq
 80055f8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80055fc:	4293      	cmp	r3, r2
 80055fe:	bfc4      	itt	gt
 8005600:	1a9b      	subgt	r3, r3, r2
 8005602:	18ed      	addgt	r5, r5, r3
 8005604:	341a      	adds	r4, #26
 8005606:	42b5      	cmp	r5, r6
 8005608:	d11a      	bne.n	8005640 <_printf_common+0xcc>
 800560a:	2000      	movs	r0, #0
 800560c:	e008      	b.n	8005620 <_printf_common+0xac>
 800560e:	2301      	movs	r3, #1
 8005610:	4652      	mov	r2, sl
 8005612:	4649      	mov	r1, r9
 8005614:	4638      	mov	r0, r7
 8005616:	47c0      	blx	r8
 8005618:	3001      	adds	r0, #1
 800561a:	d103      	bne.n	8005624 <_printf_common+0xb0>
 800561c:	f04f 30ff 	mov.w	r0, #4294967295
 8005620:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005624:	3501      	adds	r5, #1
 8005626:	e7c4      	b.n	80055b2 <_printf_common+0x3e>
 8005628:	2030      	movs	r0, #48	; 0x30
 800562a:	18e1      	adds	r1, r4, r3
 800562c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005630:	1c5a      	adds	r2, r3, #1
 8005632:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005636:	4422      	add	r2, r4
 8005638:	3302      	adds	r3, #2
 800563a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800563e:	e7c5      	b.n	80055cc <_printf_common+0x58>
 8005640:	2301      	movs	r3, #1
 8005642:	4622      	mov	r2, r4
 8005644:	4649      	mov	r1, r9
 8005646:	4638      	mov	r0, r7
 8005648:	47c0      	blx	r8
 800564a:	3001      	adds	r0, #1
 800564c:	d0e6      	beq.n	800561c <_printf_common+0xa8>
 800564e:	3601      	adds	r6, #1
 8005650:	e7d9      	b.n	8005606 <_printf_common+0x92>
	...

08005654 <_printf_i>:
 8005654:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005658:	7e0f      	ldrb	r7, [r1, #24]
 800565a:	4691      	mov	r9, r2
 800565c:	2f78      	cmp	r7, #120	; 0x78
 800565e:	4680      	mov	r8, r0
 8005660:	460c      	mov	r4, r1
 8005662:	469a      	mov	sl, r3
 8005664:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005666:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800566a:	d807      	bhi.n	800567c <_printf_i+0x28>
 800566c:	2f62      	cmp	r7, #98	; 0x62
 800566e:	d80a      	bhi.n	8005686 <_printf_i+0x32>
 8005670:	2f00      	cmp	r7, #0
 8005672:	f000 80d9 	beq.w	8005828 <_printf_i+0x1d4>
 8005676:	2f58      	cmp	r7, #88	; 0x58
 8005678:	f000 80a4 	beq.w	80057c4 <_printf_i+0x170>
 800567c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005680:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005684:	e03a      	b.n	80056fc <_printf_i+0xa8>
 8005686:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800568a:	2b15      	cmp	r3, #21
 800568c:	d8f6      	bhi.n	800567c <_printf_i+0x28>
 800568e:	a101      	add	r1, pc, #4	; (adr r1, 8005694 <_printf_i+0x40>)
 8005690:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005694:	080056ed 	.word	0x080056ed
 8005698:	08005701 	.word	0x08005701
 800569c:	0800567d 	.word	0x0800567d
 80056a0:	0800567d 	.word	0x0800567d
 80056a4:	0800567d 	.word	0x0800567d
 80056a8:	0800567d 	.word	0x0800567d
 80056ac:	08005701 	.word	0x08005701
 80056b0:	0800567d 	.word	0x0800567d
 80056b4:	0800567d 	.word	0x0800567d
 80056b8:	0800567d 	.word	0x0800567d
 80056bc:	0800567d 	.word	0x0800567d
 80056c0:	0800580f 	.word	0x0800580f
 80056c4:	08005731 	.word	0x08005731
 80056c8:	080057f1 	.word	0x080057f1
 80056cc:	0800567d 	.word	0x0800567d
 80056d0:	0800567d 	.word	0x0800567d
 80056d4:	08005831 	.word	0x08005831
 80056d8:	0800567d 	.word	0x0800567d
 80056dc:	08005731 	.word	0x08005731
 80056e0:	0800567d 	.word	0x0800567d
 80056e4:	0800567d 	.word	0x0800567d
 80056e8:	080057f9 	.word	0x080057f9
 80056ec:	682b      	ldr	r3, [r5, #0]
 80056ee:	1d1a      	adds	r2, r3, #4
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	602a      	str	r2, [r5, #0]
 80056f4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80056f8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80056fc:	2301      	movs	r3, #1
 80056fe:	e0a4      	b.n	800584a <_printf_i+0x1f6>
 8005700:	6820      	ldr	r0, [r4, #0]
 8005702:	6829      	ldr	r1, [r5, #0]
 8005704:	0606      	lsls	r6, r0, #24
 8005706:	f101 0304 	add.w	r3, r1, #4
 800570a:	d50a      	bpl.n	8005722 <_printf_i+0xce>
 800570c:	680e      	ldr	r6, [r1, #0]
 800570e:	602b      	str	r3, [r5, #0]
 8005710:	2e00      	cmp	r6, #0
 8005712:	da03      	bge.n	800571c <_printf_i+0xc8>
 8005714:	232d      	movs	r3, #45	; 0x2d
 8005716:	4276      	negs	r6, r6
 8005718:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800571c:	230a      	movs	r3, #10
 800571e:	485e      	ldr	r0, [pc, #376]	; (8005898 <_printf_i+0x244>)
 8005720:	e019      	b.n	8005756 <_printf_i+0x102>
 8005722:	680e      	ldr	r6, [r1, #0]
 8005724:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005728:	602b      	str	r3, [r5, #0]
 800572a:	bf18      	it	ne
 800572c:	b236      	sxthne	r6, r6
 800572e:	e7ef      	b.n	8005710 <_printf_i+0xbc>
 8005730:	682b      	ldr	r3, [r5, #0]
 8005732:	6820      	ldr	r0, [r4, #0]
 8005734:	1d19      	adds	r1, r3, #4
 8005736:	6029      	str	r1, [r5, #0]
 8005738:	0601      	lsls	r1, r0, #24
 800573a:	d501      	bpl.n	8005740 <_printf_i+0xec>
 800573c:	681e      	ldr	r6, [r3, #0]
 800573e:	e002      	b.n	8005746 <_printf_i+0xf2>
 8005740:	0646      	lsls	r6, r0, #25
 8005742:	d5fb      	bpl.n	800573c <_printf_i+0xe8>
 8005744:	881e      	ldrh	r6, [r3, #0]
 8005746:	2f6f      	cmp	r7, #111	; 0x6f
 8005748:	bf0c      	ite	eq
 800574a:	2308      	moveq	r3, #8
 800574c:	230a      	movne	r3, #10
 800574e:	4852      	ldr	r0, [pc, #328]	; (8005898 <_printf_i+0x244>)
 8005750:	2100      	movs	r1, #0
 8005752:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005756:	6865      	ldr	r5, [r4, #4]
 8005758:	2d00      	cmp	r5, #0
 800575a:	bfa8      	it	ge
 800575c:	6821      	ldrge	r1, [r4, #0]
 800575e:	60a5      	str	r5, [r4, #8]
 8005760:	bfa4      	itt	ge
 8005762:	f021 0104 	bicge.w	r1, r1, #4
 8005766:	6021      	strge	r1, [r4, #0]
 8005768:	b90e      	cbnz	r6, 800576e <_printf_i+0x11a>
 800576a:	2d00      	cmp	r5, #0
 800576c:	d04d      	beq.n	800580a <_printf_i+0x1b6>
 800576e:	4615      	mov	r5, r2
 8005770:	fbb6 f1f3 	udiv	r1, r6, r3
 8005774:	fb03 6711 	mls	r7, r3, r1, r6
 8005778:	5dc7      	ldrb	r7, [r0, r7]
 800577a:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800577e:	4637      	mov	r7, r6
 8005780:	42bb      	cmp	r3, r7
 8005782:	460e      	mov	r6, r1
 8005784:	d9f4      	bls.n	8005770 <_printf_i+0x11c>
 8005786:	2b08      	cmp	r3, #8
 8005788:	d10b      	bne.n	80057a2 <_printf_i+0x14e>
 800578a:	6823      	ldr	r3, [r4, #0]
 800578c:	07de      	lsls	r6, r3, #31
 800578e:	d508      	bpl.n	80057a2 <_printf_i+0x14e>
 8005790:	6923      	ldr	r3, [r4, #16]
 8005792:	6861      	ldr	r1, [r4, #4]
 8005794:	4299      	cmp	r1, r3
 8005796:	bfde      	ittt	le
 8005798:	2330      	movle	r3, #48	; 0x30
 800579a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800579e:	f105 35ff 	addle.w	r5, r5, #4294967295
 80057a2:	1b52      	subs	r2, r2, r5
 80057a4:	6122      	str	r2, [r4, #16]
 80057a6:	464b      	mov	r3, r9
 80057a8:	4621      	mov	r1, r4
 80057aa:	4640      	mov	r0, r8
 80057ac:	f8cd a000 	str.w	sl, [sp]
 80057b0:	aa03      	add	r2, sp, #12
 80057b2:	f7ff fedf 	bl	8005574 <_printf_common>
 80057b6:	3001      	adds	r0, #1
 80057b8:	d14c      	bne.n	8005854 <_printf_i+0x200>
 80057ba:	f04f 30ff 	mov.w	r0, #4294967295
 80057be:	b004      	add	sp, #16
 80057c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80057c4:	4834      	ldr	r0, [pc, #208]	; (8005898 <_printf_i+0x244>)
 80057c6:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80057ca:	6829      	ldr	r1, [r5, #0]
 80057cc:	6823      	ldr	r3, [r4, #0]
 80057ce:	f851 6b04 	ldr.w	r6, [r1], #4
 80057d2:	6029      	str	r1, [r5, #0]
 80057d4:	061d      	lsls	r5, r3, #24
 80057d6:	d514      	bpl.n	8005802 <_printf_i+0x1ae>
 80057d8:	07df      	lsls	r7, r3, #31
 80057da:	bf44      	itt	mi
 80057dc:	f043 0320 	orrmi.w	r3, r3, #32
 80057e0:	6023      	strmi	r3, [r4, #0]
 80057e2:	b91e      	cbnz	r6, 80057ec <_printf_i+0x198>
 80057e4:	6823      	ldr	r3, [r4, #0]
 80057e6:	f023 0320 	bic.w	r3, r3, #32
 80057ea:	6023      	str	r3, [r4, #0]
 80057ec:	2310      	movs	r3, #16
 80057ee:	e7af      	b.n	8005750 <_printf_i+0xfc>
 80057f0:	6823      	ldr	r3, [r4, #0]
 80057f2:	f043 0320 	orr.w	r3, r3, #32
 80057f6:	6023      	str	r3, [r4, #0]
 80057f8:	2378      	movs	r3, #120	; 0x78
 80057fa:	4828      	ldr	r0, [pc, #160]	; (800589c <_printf_i+0x248>)
 80057fc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005800:	e7e3      	b.n	80057ca <_printf_i+0x176>
 8005802:	0659      	lsls	r1, r3, #25
 8005804:	bf48      	it	mi
 8005806:	b2b6      	uxthmi	r6, r6
 8005808:	e7e6      	b.n	80057d8 <_printf_i+0x184>
 800580a:	4615      	mov	r5, r2
 800580c:	e7bb      	b.n	8005786 <_printf_i+0x132>
 800580e:	682b      	ldr	r3, [r5, #0]
 8005810:	6826      	ldr	r6, [r4, #0]
 8005812:	1d18      	adds	r0, r3, #4
 8005814:	6961      	ldr	r1, [r4, #20]
 8005816:	6028      	str	r0, [r5, #0]
 8005818:	0635      	lsls	r5, r6, #24
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	d501      	bpl.n	8005822 <_printf_i+0x1ce>
 800581e:	6019      	str	r1, [r3, #0]
 8005820:	e002      	b.n	8005828 <_printf_i+0x1d4>
 8005822:	0670      	lsls	r0, r6, #25
 8005824:	d5fb      	bpl.n	800581e <_printf_i+0x1ca>
 8005826:	8019      	strh	r1, [r3, #0]
 8005828:	2300      	movs	r3, #0
 800582a:	4615      	mov	r5, r2
 800582c:	6123      	str	r3, [r4, #16]
 800582e:	e7ba      	b.n	80057a6 <_printf_i+0x152>
 8005830:	682b      	ldr	r3, [r5, #0]
 8005832:	2100      	movs	r1, #0
 8005834:	1d1a      	adds	r2, r3, #4
 8005836:	602a      	str	r2, [r5, #0]
 8005838:	681d      	ldr	r5, [r3, #0]
 800583a:	6862      	ldr	r2, [r4, #4]
 800583c:	4628      	mov	r0, r5
 800583e:	f000 f831 	bl	80058a4 <memchr>
 8005842:	b108      	cbz	r0, 8005848 <_printf_i+0x1f4>
 8005844:	1b40      	subs	r0, r0, r5
 8005846:	6060      	str	r0, [r4, #4]
 8005848:	6863      	ldr	r3, [r4, #4]
 800584a:	6123      	str	r3, [r4, #16]
 800584c:	2300      	movs	r3, #0
 800584e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005852:	e7a8      	b.n	80057a6 <_printf_i+0x152>
 8005854:	462a      	mov	r2, r5
 8005856:	4649      	mov	r1, r9
 8005858:	4640      	mov	r0, r8
 800585a:	6923      	ldr	r3, [r4, #16]
 800585c:	47d0      	blx	sl
 800585e:	3001      	adds	r0, #1
 8005860:	d0ab      	beq.n	80057ba <_printf_i+0x166>
 8005862:	6823      	ldr	r3, [r4, #0]
 8005864:	079b      	lsls	r3, r3, #30
 8005866:	d413      	bmi.n	8005890 <_printf_i+0x23c>
 8005868:	68e0      	ldr	r0, [r4, #12]
 800586a:	9b03      	ldr	r3, [sp, #12]
 800586c:	4298      	cmp	r0, r3
 800586e:	bfb8      	it	lt
 8005870:	4618      	movlt	r0, r3
 8005872:	e7a4      	b.n	80057be <_printf_i+0x16a>
 8005874:	2301      	movs	r3, #1
 8005876:	4632      	mov	r2, r6
 8005878:	4649      	mov	r1, r9
 800587a:	4640      	mov	r0, r8
 800587c:	47d0      	blx	sl
 800587e:	3001      	adds	r0, #1
 8005880:	d09b      	beq.n	80057ba <_printf_i+0x166>
 8005882:	3501      	adds	r5, #1
 8005884:	68e3      	ldr	r3, [r4, #12]
 8005886:	9903      	ldr	r1, [sp, #12]
 8005888:	1a5b      	subs	r3, r3, r1
 800588a:	42ab      	cmp	r3, r5
 800588c:	dcf2      	bgt.n	8005874 <_printf_i+0x220>
 800588e:	e7eb      	b.n	8005868 <_printf_i+0x214>
 8005890:	2500      	movs	r5, #0
 8005892:	f104 0619 	add.w	r6, r4, #25
 8005896:	e7f5      	b.n	8005884 <_printf_i+0x230>
 8005898:	08005f20 	.word	0x08005f20
 800589c:	08005f31 	.word	0x08005f31

080058a0 <__retarget_lock_acquire_recursive>:
 80058a0:	4770      	bx	lr

080058a2 <__retarget_lock_release_recursive>:
 80058a2:	4770      	bx	lr

080058a4 <memchr>:
 80058a4:	4603      	mov	r3, r0
 80058a6:	b510      	push	{r4, lr}
 80058a8:	b2c9      	uxtb	r1, r1
 80058aa:	4402      	add	r2, r0
 80058ac:	4293      	cmp	r3, r2
 80058ae:	4618      	mov	r0, r3
 80058b0:	d101      	bne.n	80058b6 <memchr+0x12>
 80058b2:	2000      	movs	r0, #0
 80058b4:	e003      	b.n	80058be <memchr+0x1a>
 80058b6:	7804      	ldrb	r4, [r0, #0]
 80058b8:	3301      	adds	r3, #1
 80058ba:	428c      	cmp	r4, r1
 80058bc:	d1f6      	bne.n	80058ac <memchr+0x8>
 80058be:	bd10      	pop	{r4, pc}

080058c0 <memmove>:
 80058c0:	4288      	cmp	r0, r1
 80058c2:	b510      	push	{r4, lr}
 80058c4:	eb01 0402 	add.w	r4, r1, r2
 80058c8:	d902      	bls.n	80058d0 <memmove+0x10>
 80058ca:	4284      	cmp	r4, r0
 80058cc:	4623      	mov	r3, r4
 80058ce:	d807      	bhi.n	80058e0 <memmove+0x20>
 80058d0:	1e43      	subs	r3, r0, #1
 80058d2:	42a1      	cmp	r1, r4
 80058d4:	d008      	beq.n	80058e8 <memmove+0x28>
 80058d6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80058da:	f803 2f01 	strb.w	r2, [r3, #1]!
 80058de:	e7f8      	b.n	80058d2 <memmove+0x12>
 80058e0:	4601      	mov	r1, r0
 80058e2:	4402      	add	r2, r0
 80058e4:	428a      	cmp	r2, r1
 80058e6:	d100      	bne.n	80058ea <memmove+0x2a>
 80058e8:	bd10      	pop	{r4, pc}
 80058ea:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80058ee:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80058f2:	e7f7      	b.n	80058e4 <memmove+0x24>

080058f4 <_malloc_usable_size_r>:
 80058f4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80058f8:	1f18      	subs	r0, r3, #4
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	bfbc      	itt	lt
 80058fe:	580b      	ldrlt	r3, [r1, r0]
 8005900:	18c0      	addlt	r0, r0, r3
 8005902:	4770      	bx	lr

08005904 <_init>:
 8005904:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005906:	bf00      	nop
 8005908:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800590a:	bc08      	pop	{r3}
 800590c:	469e      	mov	lr, r3
 800590e:	4770      	bx	lr

08005910 <_fini>:
 8005910:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005912:	bf00      	nop
 8005914:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005916:	bc08      	pop	{r3}
 8005918:	469e      	mov	lr, r3
 800591a:	4770      	bx	lr
