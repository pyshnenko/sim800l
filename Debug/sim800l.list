
sim800l.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004a6c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000948  08004b78  08004b78  00014b78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080054c0  080054c0  00020088  2**0
                  CONTENTS
  4 .ARM          00000000  080054c0  080054c0  00020088  2**0
                  CONTENTS
  5 .preinit_array 00000000  080054c0  080054c0  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080054c0  080054c0  000154c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080054c4  080054c4  000154c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  080054c8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000b3c  20000088  08005550  00020088  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000bc4  08005550  00020bc4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bce2  00000000  00000000  000200b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ec3  00000000  00000000  0002bd93  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ac0  00000000  00000000  0002dc58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a10  00000000  00000000  0002e718  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017771  00000000  00000000  0002f128  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e1cd  00000000  00000000  00046899  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000830eb  00000000  00000000  00054a66  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d7b51  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002ffc  00000000  00000000  000d7ba4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000088 	.word	0x20000088
 8000128:	00000000 	.word	0x00000000
 800012c:	08004b60 	.word	0x08004b60

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000008c 	.word	0x2000008c
 8000148:	08004b60 	.word	0x08004b60

0800014c <s800LSend>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void s800LSend(uint8_t *text, int nums) {
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
 8000154:	6039      	str	r1, [r7, #0]
	HAL_UART_Transmit(&huart2, text, nums, 0xFFFF);
 8000156:	683b      	ldr	r3, [r7, #0]
 8000158:	b29a      	uxth	r2, r3
 800015a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800015e:	6879      	ldr	r1, [r7, #4]
 8000160:	480e      	ldr	r0, [pc, #56]	; (800019c <s800LSend+0x50>)
 8000162:	f003 f8b5 	bl	80032d0 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, (uint8_t*)"\r\n", 2, 0xFFFF);
 8000166:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800016a:	2202      	movs	r2, #2
 800016c:	490c      	ldr	r1, [pc, #48]	; (80001a0 <s800LSend+0x54>)
 800016e:	480b      	ldr	r0, [pc, #44]	; (800019c <s800LSend+0x50>)
 8000170:	f003 f8ae 	bl	80032d0 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, text, nums, 0xFFFF);
 8000174:	683b      	ldr	r3, [r7, #0]
 8000176:	b29a      	uxth	r2, r3
 8000178:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800017c:	6879      	ldr	r1, [r7, #4]
 800017e:	4809      	ldr	r0, [pc, #36]	; (80001a4 <s800LSend+0x58>)
 8000180:	f003 f8a6 	bl	80032d0 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, (uint8_t*)"\r\n", 2, 0xFFFF);
 8000184:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000188:	2202      	movs	r2, #2
 800018a:	4905      	ldr	r1, [pc, #20]	; (80001a0 <s800LSend+0x54>)
 800018c:	4805      	ldr	r0, [pc, #20]	; (80001a4 <s800LSend+0x58>)
 800018e:	f003 f89f 	bl	80032d0 <HAL_UART_Transmit>
	return;
 8000192:	bf00      	nop
}
 8000194:	3708      	adds	r7, #8
 8000196:	46bd      	mov	sp, r7
 8000198:	bd80      	pop	{r7, pc}
 800019a:	bf00      	nop
 800019c:	20000140 	.word	0x20000140
 80001a0:	08004b78 	.word	0x08004b78
 80001a4:	200000f8 	.word	0x200000f8

080001a8 <s800lMessAdd>:

int s800lMessAdd(uint8_t* text) {
 80001a8:	b480      	push	{r7}
 80001aa:	b085      	sub	sp, #20
 80001ac:	af00      	add	r7, sp, #0
 80001ae:	6078      	str	r0, [r7, #4]
	int i = 0;
 80001b0:	2300      	movs	r3, #0
 80001b2:	60fb      	str	r3, [r7, #12]
	for (i; i<250; i++) {
 80001b4:	e00a      	b.n	80001cc <s800lMessAdd+0x24>
		if (text[i]=='!') return i;
 80001b6:	68fb      	ldr	r3, [r7, #12]
 80001b8:	687a      	ldr	r2, [r7, #4]
 80001ba:	4413      	add	r3, r2
 80001bc:	781b      	ldrb	r3, [r3, #0]
 80001be:	2b21      	cmp	r3, #33	; 0x21
 80001c0:	d101      	bne.n	80001c6 <s800lMessAdd+0x1e>
 80001c2:	68fb      	ldr	r3, [r7, #12]
 80001c4:	e005      	b.n	80001d2 <s800lMessAdd+0x2a>
	for (i; i<250; i++) {
 80001c6:	68fb      	ldr	r3, [r7, #12]
 80001c8:	3301      	adds	r3, #1
 80001ca:	60fb      	str	r3, [r7, #12]
 80001cc:	68fb      	ldr	r3, [r7, #12]
 80001ce:	2bf9      	cmp	r3, #249	; 0xf9
 80001d0:	ddf1      	ble.n	80001b6 <s800lMessAdd+0xe>
	}
}
 80001d2:	4618      	mov	r0, r3
 80001d4:	3714      	adds	r7, #20
 80001d6:	46bd      	mov	sp, r7
 80001d8:	bc80      	pop	{r7}
 80001da:	4770      	bx	lr

080001dc <txATcommand>:

void txATcommand() {
 80001dc:	b580      	push	{r7, lr}
 80001de:	f5ad 7d1e 	sub.w	sp, sp, #632	; 0x278
 80001e2:	af02      	add	r7, sp, #8
	//HAL_Delay(500);
	switch (step) {
 80001e4:	4b87      	ldr	r3, [pc, #540]	; (8000404 <txATcommand+0x228>)
 80001e6:	681b      	ldr	r3, [r3, #0]
 80001e8:	2b19      	cmp	r3, #25
 80001ea:	f200 8106 	bhi.w	80003fa <txATcommand+0x21e>
 80001ee:	a201      	add	r2, pc, #4	; (adr r2, 80001f4 <txATcommand+0x18>)
 80001f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80001f4:	0800025d 	.word	0x0800025d
 80001f8:	0800026d 	.word	0x0800026d
 80001fc:	0800027d 	.word	0x0800027d
 8000200:	0800028d 	.word	0x0800028d
 8000204:	0800029d 	.word	0x0800029d
 8000208:	080002ad 	.word	0x080002ad
 800020c:	0800031f 	.word	0x0800031f
 8000210:	0800032f 	.word	0x0800032f
 8000214:	0800033f 	.word	0x0800033f
 8000218:	0800034f 	.word	0x0800034f
 800021c:	080003fb 	.word	0x080003fb
 8000220:	080003fb 	.word	0x080003fb
 8000224:	080003fb 	.word	0x080003fb
 8000228:	080003fb 	.word	0x080003fb
 800022c:	080003fb 	.word	0x080003fb
 8000230:	080003fb 	.word	0x080003fb
 8000234:	080003fb 	.word	0x080003fb
 8000238:	080003fb 	.word	0x080003fb
 800023c:	080003fb 	.word	0x080003fb
 8000240:	080003fb 	.word	0x080003fb
 8000244:	0800035f 	.word	0x0800035f
 8000248:	0800036f 	.word	0x0800036f
 800024c:	080003af 	.word	0x080003af
 8000250:	080003bf 	.word	0x080003bf
 8000254:	080003cf 	.word	0x080003cf
 8000258:	080003df 	.word	0x080003df
		case 0: {
			ready=false;
 800025c:	4b6a      	ldr	r3, [pc, #424]	; (8000408 <txATcommand+0x22c>)
 800025e:	2200      	movs	r2, #0
 8000260:	701a      	strb	r2, [r3, #0]
			s800LSend((uint8_t*)"ATE0", 4);
 8000262:	2104      	movs	r1, #4
 8000264:	4869      	ldr	r0, [pc, #420]	; (800040c <txATcommand+0x230>)
 8000266:	f7ff ff71 	bl	800014c <s800LSend>
			break;
 800026a:	e0c5      	b.n	80003f8 <txATcommand+0x21c>
		}
		case 1: {
			ready=false;
 800026c:	4b66      	ldr	r3, [pc, #408]	; (8000408 <txATcommand+0x22c>)
 800026e:	2200      	movs	r2, #0
 8000270:	701a      	strb	r2, [r3, #0]
			s800LSend((uint8_t*)"AT+CREG?", 8);
 8000272:	2108      	movs	r1, #8
 8000274:	4866      	ldr	r0, [pc, #408]	; (8000410 <txATcommand+0x234>)
 8000276:	f7ff ff69 	bl	800014c <s800LSend>
			break;
 800027a:	e0bd      	b.n	80003f8 <txATcommand+0x21c>
		}
		case 2: {
			ready=false;
 800027c:	4b62      	ldr	r3, [pc, #392]	; (8000408 <txATcommand+0x22c>)
 800027e:	2200      	movs	r2, #0
 8000280:	701a      	strb	r2, [r3, #0]
			s800LSend((uint8_t*)"AT+SAPBR=1,1", 12);
 8000282:	210c      	movs	r1, #12
 8000284:	4863      	ldr	r0, [pc, #396]	; (8000414 <txATcommand+0x238>)
 8000286:	f7ff ff61 	bl	800014c <s800LSend>
			break;
 800028a:	e0b5      	b.n	80003f8 <txATcommand+0x21c>
		}
		case 3: {
			ready=false;
 800028c:	4b5e      	ldr	r3, [pc, #376]	; (8000408 <txATcommand+0x22c>)
 800028e:	2200      	movs	r2, #0
 8000290:	701a      	strb	r2, [r3, #0]
			s800LSend((uint8_t*)"AT+HTTPINIT", 11);
 8000292:	210b      	movs	r1, #11
 8000294:	4860      	ldr	r0, [pc, #384]	; (8000418 <txATcommand+0x23c>)
 8000296:	f7ff ff59 	bl	800014c <s800LSend>
			break;
 800029a:	e0ad      	b.n	80003f8 <txATcommand+0x21c>
		}
		case 4: {
			ready=false;
 800029c:	4b5a      	ldr	r3, [pc, #360]	; (8000408 <txATcommand+0x22c>)
 800029e:	2200      	movs	r2, #0
 80002a0:	701a      	strb	r2, [r3, #0]
			s800LSend((uint8_t*)"AT+HTTPPARA=\"CID\",1",19);
 80002a2:	2113      	movs	r1, #19
 80002a4:	485d      	ldr	r0, [pc, #372]	; (800041c <txATcommand+0x240>)
 80002a6:	f7ff ff51 	bl	800014c <s800LSend>
			break;
 80002aa:	e0a5      	b.n	80003f8 <txATcommand+0x21c>
		}
		case 5: {
			ready=false;
 80002ac:	4b56      	ldr	r3, [pc, #344]	; (8000408 <txATcommand+0x22c>)
 80002ae:	2200      	movs	r2, #0
 80002b0:	701a      	strb	r2, [r3, #0]
			uint8_t end[] = "\"!";
 80002b2:	4a5b      	ldr	r2, [pc, #364]	; (8000420 <txATcommand+0x244>)
 80002b4:	f507 731b 	add.w	r3, r7, #620	; 0x26c
 80002b8:	6812      	ldr	r2, [r2, #0]
 80002ba:	4611      	mov	r1, r2
 80002bc:	8019      	strh	r1, [r3, #0]
 80002be:	3302      	adds	r3, #2
 80002c0:	0c12      	lsrs	r2, r2, #16
 80002c2:	701a      	strb	r2, [r3, #0]
			uint8_t mess[] = "AT+HTTPPARA=\"URL\",\"http://simple.spamigor.ru/api/test?a=send%20from%20stm32mod&sms=";
 80002c4:	f507 731c 	add.w	r3, r7, #624	; 0x270
 80002c8:	f5a3 731b 	sub.w	r3, r3, #620	; 0x26c
 80002cc:	4a55      	ldr	r2, [pc, #340]	; (8000424 <txATcommand+0x248>)
 80002ce:	4618      	mov	r0, r3
 80002d0:	4611      	mov	r1, r2
 80002d2:	2354      	movs	r3, #84	; 0x54
 80002d4:	461a      	mov	r2, r3
 80002d6:	f003 ff85 	bl	80041e4 <memcpy>
			uint8_t ext[250];
			uint8_t ext2[250];
			snprintf(ext, 250, "%s%s", mess, smsText);
 80002da:	1d3b      	adds	r3, r7, #4
 80002dc:	f107 0058 	add.w	r0, r7, #88	; 0x58
 80002e0:	4a51      	ldr	r2, [pc, #324]	; (8000428 <txATcommand+0x24c>)
 80002e2:	9200      	str	r2, [sp, #0]
 80002e4:	4a51      	ldr	r2, [pc, #324]	; (800042c <txATcommand+0x250>)
 80002e6:	21fa      	movs	r1, #250	; 0xfa
 80002e8:	f003 ff92 	bl	8004210 <sniprintf>
			snprintf(ext2, 250, "%s%s", ext, end);
 80002ec:	f107 0258 	add.w	r2, r7, #88	; 0x58
 80002f0:	f507 70aa 	add.w	r0, r7, #340	; 0x154
 80002f4:	f507 731b 	add.w	r3, r7, #620	; 0x26c
 80002f8:	9300      	str	r3, [sp, #0]
 80002fa:	4613      	mov	r3, r2
 80002fc:	4a4b      	ldr	r2, [pc, #300]	; (800042c <txATcommand+0x250>)
 80002fe:	21fa      	movs	r1, #250	; 0xfa
 8000300:	f003 ff86 	bl	8004210 <sniprintf>
			s800LSend(ext2, s800lMessAdd(ext2));
 8000304:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 8000308:	4618      	mov	r0, r3
 800030a:	f7ff ff4d 	bl	80001a8 <s800lMessAdd>
 800030e:	4602      	mov	r2, r0
 8000310:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 8000314:	4611      	mov	r1, r2
 8000316:	4618      	mov	r0, r3
 8000318:	f7ff ff18 	bl	800014c <s800LSend>
			break;
 800031c:	e06c      	b.n	80003f8 <txATcommand+0x21c>
		}
		case 6: {
			ready=false;
 800031e:	4b3a      	ldr	r3, [pc, #232]	; (8000408 <txATcommand+0x22c>)
 8000320:	2200      	movs	r2, #0
 8000322:	701a      	strb	r2, [r3, #0]
			s800LSend((uint8_t*)"AT+HTTPACTION=0",15);
 8000324:	210f      	movs	r1, #15
 8000326:	4842      	ldr	r0, [pc, #264]	; (8000430 <txATcommand+0x254>)
 8000328:	f7ff ff10 	bl	800014c <s800LSend>
			break;
 800032c:	e064      	b.n	80003f8 <txATcommand+0x21c>
		}
		case 7: {
			ready=false;
 800032e:	4b36      	ldr	r3, [pc, #216]	; (8000408 <txATcommand+0x22c>)
 8000330:	2200      	movs	r2, #0
 8000332:	701a      	strb	r2, [r3, #0]
			s800LSend((uint8_t*)"AT+HTTPREAD",11);
 8000334:	210b      	movs	r1, #11
 8000336:	483f      	ldr	r0, [pc, #252]	; (8000434 <txATcommand+0x258>)
 8000338:	f7ff ff08 	bl	800014c <s800LSend>
			break;
 800033c:	e05c      	b.n	80003f8 <txATcommand+0x21c>
		}
		case 8: {
			ready=false;
 800033e:	4b32      	ldr	r3, [pc, #200]	; (8000408 <txATcommand+0x22c>)
 8000340:	2200      	movs	r2, #0
 8000342:	701a      	strb	r2, [r3, #0]
			s800LSend((uint8_t*)"AT+HTTPTERM",11);
 8000344:	210b      	movs	r1, #11
 8000346:	483c      	ldr	r0, [pc, #240]	; (8000438 <txATcommand+0x25c>)
 8000348:	f7ff ff00 	bl	800014c <s800LSend>
			break;
 800034c:	e054      	b.n	80003f8 <txATcommand+0x21c>
		}
		case 9: {
			ready=false;
 800034e:	4b2e      	ldr	r3, [pc, #184]	; (8000408 <txATcommand+0x22c>)
 8000350:	2200      	movs	r2, #0
 8000352:	701a      	strb	r2, [r3, #0]
			s800LSend((uint8_t*)"AT+SAPBR=0,1", 12);
 8000354:	210c      	movs	r1, #12
 8000356:	4839      	ldr	r0, [pc, #228]	; (800043c <txATcommand+0x260>)
 8000358:	f7ff fef8 	bl	800014c <s800LSend>
			break;
 800035c:	e04c      	b.n	80003f8 <txATcommand+0x21c>
		}
		case 20: {
			ready = false;
 800035e:	4b2a      	ldr	r3, [pc, #168]	; (8000408 <txATcommand+0x22c>)
 8000360:	2200      	movs	r2, #0
 8000362:	701a      	strb	r2, [r3, #0]
			s800LSend((uint8_t*)"AT+CMGF=1", 9);
 8000364:	2109      	movs	r1, #9
 8000366:	4836      	ldr	r0, [pc, #216]	; (8000440 <txATcommand+0x264>)
 8000368:	f7ff fef0 	bl	800014c <s800LSend>
			break;
 800036c:	e044      	b.n	80003f8 <txATcommand+0x21c>
		}
		case 21: {
			ready=false;
 800036e:	4b26      	ldr	r3, [pc, #152]	; (8000408 <txATcommand+0x22c>)
 8000370:	2200      	movs	r2, #0
 8000372:	701a      	strb	r2, [r3, #0]
			uint8_t ext[15];
			uint8_t at[] = "AT+CMGR=";
 8000374:	4a33      	ldr	r2, [pc, #204]	; (8000444 <txATcommand+0x268>)
 8000376:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800037a:	ca07      	ldmia	r2, {r0, r1, r2}
 800037c:	c303      	stmia	r3!, {r0, r1}
 800037e:	701a      	strb	r2, [r3, #0]
			snprintf(ext, 15, "%s%s", at, smsNum);
 8000380:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8000384:	f507 7017 	add.w	r0, r7, #604	; 0x25c
 8000388:	4a2f      	ldr	r2, [pc, #188]	; (8000448 <txATcommand+0x26c>)
 800038a:	9200      	str	r2, [sp, #0]
 800038c:	4a27      	ldr	r2, [pc, #156]	; (800042c <txATcommand+0x250>)
 800038e:	210f      	movs	r1, #15
 8000390:	f003 ff3e 	bl	8004210 <sniprintf>
			s800LSend(ext, s800lMessAdd(ext));
 8000394:	f507 7317 	add.w	r3, r7, #604	; 0x25c
 8000398:	4618      	mov	r0, r3
 800039a:	f7ff ff05 	bl	80001a8 <s800lMessAdd>
 800039e:	4602      	mov	r2, r0
 80003a0:	f507 7317 	add.w	r3, r7, #604	; 0x25c
 80003a4:	4611      	mov	r1, r2
 80003a6:	4618      	mov	r0, r3
 80003a8:	f7ff fed0 	bl	800014c <s800LSend>
			break;
 80003ac:	e024      	b.n	80003f8 <txATcommand+0x21c>
		}
		case 22: {
			ready = false;
 80003ae:	4b16      	ldr	r3, [pc, #88]	; (8000408 <txATcommand+0x22c>)
 80003b0:	2200      	movs	r2, #0
 80003b2:	701a      	strb	r2, [r3, #0]
			s800LSend((uint8_t*)"AT+CMGDA=\"DEL ALL\"", 18);
 80003b4:	2112      	movs	r1, #18
 80003b6:	4825      	ldr	r0, [pc, #148]	; (800044c <txATcommand+0x270>)
 80003b8:	f7ff fec8 	bl	800014c <s800LSend>
			break;
 80003bc:	e01c      	b.n	80003f8 <txATcommand+0x21c>
		}
		case 23: {
			ready = false;
 80003be:	4b12      	ldr	r3, [pc, #72]	; (8000408 <txATcommand+0x22c>)
 80003c0:	2200      	movs	r2, #0
 80003c2:	701a      	strb	r2, [r3, #0]
			s800LSend((uint8_t*)"AT+CMGS=\"+79999811066\"", 22);
 80003c4:	2116      	movs	r1, #22
 80003c6:	4822      	ldr	r0, [pc, #136]	; (8000450 <txATcommand+0x274>)
 80003c8:	f7ff fec0 	bl	800014c <s800LSend>
			break;
 80003cc:	e014      	b.n	80003f8 <txATcommand+0x21c>
		}
		case 24: {
			ready = false;
 80003ce:	4b0e      	ldr	r3, [pc, #56]	; (8000408 <txATcommand+0x22c>)
 80003d0:	2200      	movs	r2, #0
 80003d2:	701a      	strb	r2, [r3, #0]
			s800LSend((uint8_t*)"stm32 is working", 16);
 80003d4:	2110      	movs	r1, #16
 80003d6:	481f      	ldr	r0, [pc, #124]	; (8000454 <txATcommand+0x278>)
 80003d8:	f7ff feb8 	bl	800014c <s800LSend>
			break;
 80003dc:	e00c      	b.n	80003f8 <txATcommand+0x21c>
		}
		case 25: {
			ready = false;
 80003de:	4b0a      	ldr	r3, [pc, #40]	; (8000408 <txATcommand+0x22c>)
 80003e0:	2200      	movs	r2, #0
 80003e2:	701a      	strb	r2, [r3, #0]
			uint8_t ggg = 0x1A;
 80003e4:	231a      	movs	r3, #26
 80003e6:	f887 326f 	strb.w	r3, [r7, #623]	; 0x26f
			s800LSend(ggg, 16);
 80003ea:	f897 326f 	ldrb.w	r3, [r7, #623]	; 0x26f
 80003ee:	2110      	movs	r1, #16
 80003f0:	4618      	mov	r0, r3
 80003f2:	f7ff feab 	bl	800014c <s800LSend>
			break;
 80003f6:	bf00      	nop
		}
	}
	return;
 80003f8:	bf00      	nop
 80003fa:	bf00      	nop
}
 80003fc:	f507 771c 	add.w	r7, r7, #624	; 0x270
 8000400:	46bd      	mov	sp, r7
 8000402:	bd80      	pop	{r7, pc}
 8000404:	20000794 	.word	0x20000794
 8000408:	2000079c 	.word	0x2000079c
 800040c:	08004b7c 	.word	0x08004b7c
 8000410:	08004b84 	.word	0x08004b84
 8000414:	08004b90 	.word	0x08004b90
 8000418:	08004ba0 	.word	0x08004ba0
 800041c:	08004bac 	.word	0x08004bac
 8000420:	08004c4c 	.word	0x08004c4c
 8000424:	08004c50 	.word	0x08004c50
 8000428:	20000010 	.word	0x20000010
 800042c:	08004bc0 	.word	0x08004bc0
 8000430:	08004bc8 	.word	0x08004bc8
 8000434:	08004bd8 	.word	0x08004bd8
 8000438:	08004be4 	.word	0x08004be4
 800043c:	08004bf0 	.word	0x08004bf0
 8000440:	08004c00 	.word	0x08004c00
 8000444:	08004ca4 	.word	0x08004ca4
 8000448:	2000078c 	.word	0x2000078c
 800044c:	08004c0c 	.word	0x08004c0c
 8000450:	08004c20 	.word	0x08004c20
 8000454:	08004c38 	.word	0x08004c38

08000458 <rxATcommand>:

void rxATcommand(uint8_t* text) {
 8000458:	b580      	push	{r7, lr}
 800045a:	b086      	sub	sp, #24
 800045c:	af00      	add	r7, sp, #0
 800045e:	6078      	str	r0, [r7, #4]
	switch (step) {
 8000460:	4ba4      	ldr	r3, [pc, #656]	; (80006f4 <rxATcommand+0x29c>)
 8000462:	681b      	ldr	r3, [r3, #0]
 8000464:	2b19      	cmp	r3, #25
 8000466:	f200 8207 	bhi.w	8000878 <rxATcommand+0x420>
 800046a:	a201      	add	r2, pc, #4	; (adr r2, 8000470 <rxATcommand+0x18>)
 800046c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000470:	080004d9 	.word	0x080004d9
 8000474:	08000523 	.word	0x08000523
 8000478:	0800057d 	.word	0x0800057d
 800047c:	080005ab 	.word	0x080005ab
 8000480:	080005d9 	.word	0x080005d9
 8000484:	08000607 	.word	0x08000607
 8000488:	08000635 	.word	0x08000635
 800048c:	08000673 	.word	0x08000673
 8000490:	080006a1 	.word	0x080006a1
 8000494:	080006af 	.word	0x080006af
 8000498:	080006d9 	.word	0x080006d9
 800049c:	08000879 	.word	0x08000879
 80004a0:	08000879 	.word	0x08000879
 80004a4:	08000879 	.word	0x08000879
 80004a8:	08000879 	.word	0x08000879
 80004ac:	08000879 	.word	0x08000879
 80004b0:	08000879 	.word	0x08000879
 80004b4:	08000879 	.word	0x08000879
 80004b8:	08000879 	.word	0x08000879
 80004bc:	08000879 	.word	0x08000879
 80004c0:	0800078d 	.word	0x0800078d
 80004c4:	080007bb 	.word	0x080007bb
 80004c8:	08000813 	.word	0x08000813
 80004cc:	08000825 	.word	0x08000825
 80004d0:	08000837 	.word	0x08000837
 80004d4:	08000849 	.word	0x08000849
		case 0: {
			if (strstr((char*)text, (char*)"OK")) {
 80004d8:	4987      	ldr	r1, [pc, #540]	; (80006f8 <rxATcommand+0x2a0>)
 80004da:	6878      	ldr	r0, [r7, #4]
 80004dc:	f003 fedf 	bl	800429e <strstr>
 80004e0:	4603      	mov	r3, r0
 80004e2:	2b00      	cmp	r3, #0
 80004e4:	d008      	beq.n	80004f8 <rxATcommand+0xa0>
				step++;
 80004e6:	4b83      	ldr	r3, [pc, #524]	; (80006f4 <rxATcommand+0x29c>)
 80004e8:	681b      	ldr	r3, [r3, #0]
 80004ea:	3301      	adds	r3, #1
 80004ec:	4a81      	ldr	r2, [pc, #516]	; (80006f4 <rxATcommand+0x29c>)
 80004ee:	6013      	str	r3, [r2, #0]
				ready=true;
 80004f0:	4b82      	ldr	r3, [pc, #520]	; (80006fc <rxATcommand+0x2a4>)
 80004f2:	2201      	movs	r2, #1
 80004f4:	701a      	strb	r2, [r3, #0]
			}
			else {
				step=0;
				ready=true;
			}
			break;
 80004f6:	e1bf      	b.n	8000878 <rxATcommand+0x420>
			else if (strstr((char*)text, (char*)"CMTI")) {
 80004f8:	4981      	ldr	r1, [pc, #516]	; (8000700 <rxATcommand+0x2a8>)
 80004fa:	6878      	ldr	r0, [r7, #4]
 80004fc:	f003 fecf 	bl	800429e <strstr>
 8000500:	4603      	mov	r3, r0
 8000502:	2b00      	cmp	r3, #0
 8000504:	d006      	beq.n	8000514 <rxATcommand+0xbc>
				step=20;
 8000506:	4b7b      	ldr	r3, [pc, #492]	; (80006f4 <rxATcommand+0x29c>)
 8000508:	2214      	movs	r2, #20
 800050a:	601a      	str	r2, [r3, #0]
				ready=true;
 800050c:	4b7b      	ldr	r3, [pc, #492]	; (80006fc <rxATcommand+0x2a4>)
 800050e:	2201      	movs	r2, #1
 8000510:	701a      	strb	r2, [r3, #0]
			break;
 8000512:	e1b1      	b.n	8000878 <rxATcommand+0x420>
				step=0;
 8000514:	4b77      	ldr	r3, [pc, #476]	; (80006f4 <rxATcommand+0x29c>)
 8000516:	2200      	movs	r2, #0
 8000518:	601a      	str	r2, [r3, #0]
				ready=true;
 800051a:	4b78      	ldr	r3, [pc, #480]	; (80006fc <rxATcommand+0x2a4>)
 800051c:	2201      	movs	r2, #1
 800051e:	701a      	strb	r2, [r3, #0]
			break;
 8000520:	e1aa      	b.n	8000878 <rxATcommand+0x420>
		}
		case 1: {
			if (strstr((char*)text, (char*)"OK")) {
 8000522:	4975      	ldr	r1, [pc, #468]	; (80006f8 <rxATcommand+0x2a0>)
 8000524:	6878      	ldr	r0, [r7, #4]
 8000526:	f003 feba 	bl	800429e <strstr>
 800052a:	4603      	mov	r3, r0
 800052c:	2b00      	cmp	r3, #0
 800052e:	d008      	beq.n	8000542 <rxATcommand+0xea>
				step++;
 8000530:	4b70      	ldr	r3, [pc, #448]	; (80006f4 <rxATcommand+0x29c>)
 8000532:	681b      	ldr	r3, [r3, #0]
 8000534:	3301      	adds	r3, #1
 8000536:	4a6f      	ldr	r2, [pc, #444]	; (80006f4 <rxATcommand+0x29c>)
 8000538:	6013      	str	r3, [r2, #0]
				ready=true;
 800053a:	4b70      	ldr	r3, [pc, #448]	; (80006fc <rxATcommand+0x2a4>)
 800053c:	2201      	movs	r2, #1
 800053e:	701a      	strb	r2, [r3, #0]
				break;
 8000540:	e19a      	b.n	8000878 <rxATcommand+0x420>
			}
			else {
				step=9;
 8000542:	4b6c      	ldr	r3, [pc, #432]	; (80006f4 <rxATcommand+0x29c>)
 8000544:	2209      	movs	r2, #9
 8000546:	601a      	str	r2, [r3, #0]
				ready=true;
 8000548:	4b6c      	ldr	r3, [pc, #432]	; (80006fc <rxATcommand+0x2a4>)
 800054a:	2201      	movs	r2, #1
 800054c:	701a      	strb	r2, [r3, #0]
			}
			if (text[0]!='\r'){
 800054e:	687b      	ldr	r3, [r7, #4]
 8000550:	781b      	ldrb	r3, [r3, #0]
 8000552:	2b0d      	cmp	r3, #13
 8000554:	f000 818d 	beq.w	8000872 <rxATcommand+0x41a>
				if (strstr((char*)text, (char*)"0,1")) {
 8000558:	496a      	ldr	r1, [pc, #424]	; (8000704 <rxATcommand+0x2ac>)
 800055a:	6878      	ldr	r0, [r7, #4]
 800055c:	f003 fe9f 	bl	800429e <strstr>
 8000560:	4603      	mov	r3, r0
 8000562:	2b00      	cmp	r3, #0
 8000564:	d006      	beq.n	8000574 <rxATcommand+0x11c>
					step=2;
 8000566:	4b63      	ldr	r3, [pc, #396]	; (80006f4 <rxATcommand+0x29c>)
 8000568:	2202      	movs	r2, #2
 800056a:	601a      	str	r2, [r3, #0]
					ready=true;
 800056c:	4b63      	ldr	r3, [pc, #396]	; (80006fc <rxATcommand+0x2a4>)
 800056e:	2201      	movs	r2, #1
 8000570:	701a      	strb	r2, [r3, #0]
				}
				else ready=true;
			}
			break;
 8000572:	e17e      	b.n	8000872 <rxATcommand+0x41a>
				else ready=true;
 8000574:	4b61      	ldr	r3, [pc, #388]	; (80006fc <rxATcommand+0x2a4>)
 8000576:	2201      	movs	r2, #1
 8000578:	701a      	strb	r2, [r3, #0]
			break;
 800057a:	e17a      	b.n	8000872 <rxATcommand+0x41a>
		}
		case 2: {
			if (strstr((char*)text, (char*)"OK")) {
 800057c:	495e      	ldr	r1, [pc, #376]	; (80006f8 <rxATcommand+0x2a0>)
 800057e:	6878      	ldr	r0, [r7, #4]
 8000580:	f003 fe8d 	bl	800429e <strstr>
 8000584:	4603      	mov	r3, r0
 8000586:	2b00      	cmp	r3, #0
 8000588:	d008      	beq.n	800059c <rxATcommand+0x144>
				step++;
 800058a:	4b5a      	ldr	r3, [pc, #360]	; (80006f4 <rxATcommand+0x29c>)
 800058c:	681b      	ldr	r3, [r3, #0]
 800058e:	3301      	adds	r3, #1
 8000590:	4a58      	ldr	r2, [pc, #352]	; (80006f4 <rxATcommand+0x29c>)
 8000592:	6013      	str	r3, [r2, #0]
				ready=true;
 8000594:	4b59      	ldr	r3, [pc, #356]	; (80006fc <rxATcommand+0x2a4>)
 8000596:	2201      	movs	r2, #1
 8000598:	701a      	strb	r2, [r3, #0]
			}
			else {
				step=8;
				ready=true;
			}
			break;
 800059a:	e16d      	b.n	8000878 <rxATcommand+0x420>
				step=8;
 800059c:	4b55      	ldr	r3, [pc, #340]	; (80006f4 <rxATcommand+0x29c>)
 800059e:	2208      	movs	r2, #8
 80005a0:	601a      	str	r2, [r3, #0]
				ready=true;
 80005a2:	4b56      	ldr	r3, [pc, #344]	; (80006fc <rxATcommand+0x2a4>)
 80005a4:	2201      	movs	r2, #1
 80005a6:	701a      	strb	r2, [r3, #0]
			break;
 80005a8:	e166      	b.n	8000878 <rxATcommand+0x420>
		}
		case 3: {
			if (strstr((char*)text, (char*)"OK")) {
 80005aa:	4953      	ldr	r1, [pc, #332]	; (80006f8 <rxATcommand+0x2a0>)
 80005ac:	6878      	ldr	r0, [r7, #4]
 80005ae:	f003 fe76 	bl	800429e <strstr>
 80005b2:	4603      	mov	r3, r0
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	d008      	beq.n	80005ca <rxATcommand+0x172>
				step++;
 80005b8:	4b4e      	ldr	r3, [pc, #312]	; (80006f4 <rxATcommand+0x29c>)
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	3301      	adds	r3, #1
 80005be:	4a4d      	ldr	r2, [pc, #308]	; (80006f4 <rxATcommand+0x29c>)
 80005c0:	6013      	str	r3, [r2, #0]
				ready=true;
 80005c2:	4b4e      	ldr	r3, [pc, #312]	; (80006fc <rxATcommand+0x2a4>)
 80005c4:	2201      	movs	r2, #1
 80005c6:	701a      	strb	r2, [r3, #0]
			}
			else {
				step=8;
				ready=true;
			}
			break;
 80005c8:	e156      	b.n	8000878 <rxATcommand+0x420>
				step=8;
 80005ca:	4b4a      	ldr	r3, [pc, #296]	; (80006f4 <rxATcommand+0x29c>)
 80005cc:	2208      	movs	r2, #8
 80005ce:	601a      	str	r2, [r3, #0]
				ready=true;
 80005d0:	4b4a      	ldr	r3, [pc, #296]	; (80006fc <rxATcommand+0x2a4>)
 80005d2:	2201      	movs	r2, #1
 80005d4:	701a      	strb	r2, [r3, #0]
			break;
 80005d6:	e14f      	b.n	8000878 <rxATcommand+0x420>
		}
		case 4: {
			if (strstr((char*)text, (char*)"OK")) {
 80005d8:	4947      	ldr	r1, [pc, #284]	; (80006f8 <rxATcommand+0x2a0>)
 80005da:	6878      	ldr	r0, [r7, #4]
 80005dc:	f003 fe5f 	bl	800429e <strstr>
 80005e0:	4603      	mov	r3, r0
 80005e2:	2b00      	cmp	r3, #0
 80005e4:	d008      	beq.n	80005f8 <rxATcommand+0x1a0>
				step++;
 80005e6:	4b43      	ldr	r3, [pc, #268]	; (80006f4 <rxATcommand+0x29c>)
 80005e8:	681b      	ldr	r3, [r3, #0]
 80005ea:	3301      	adds	r3, #1
 80005ec:	4a41      	ldr	r2, [pc, #260]	; (80006f4 <rxATcommand+0x29c>)
 80005ee:	6013      	str	r3, [r2, #0]
				ready=true;
 80005f0:	4b42      	ldr	r3, [pc, #264]	; (80006fc <rxATcommand+0x2a4>)
 80005f2:	2201      	movs	r2, #1
 80005f4:	701a      	strb	r2, [r3, #0]
			}
			else {
				step=8;
				ready=true;
			}
			break;
 80005f6:	e13f      	b.n	8000878 <rxATcommand+0x420>
				step=8;
 80005f8:	4b3e      	ldr	r3, [pc, #248]	; (80006f4 <rxATcommand+0x29c>)
 80005fa:	2208      	movs	r2, #8
 80005fc:	601a      	str	r2, [r3, #0]
				ready=true;
 80005fe:	4b3f      	ldr	r3, [pc, #252]	; (80006fc <rxATcommand+0x2a4>)
 8000600:	2201      	movs	r2, #1
 8000602:	701a      	strb	r2, [r3, #0]
			break;
 8000604:	e138      	b.n	8000878 <rxATcommand+0x420>
		}
		case 5: {
			if (strstr((char*)text, (char*)"OK")) {
 8000606:	493c      	ldr	r1, [pc, #240]	; (80006f8 <rxATcommand+0x2a0>)
 8000608:	6878      	ldr	r0, [r7, #4]
 800060a:	f003 fe48 	bl	800429e <strstr>
 800060e:	4603      	mov	r3, r0
 8000610:	2b00      	cmp	r3, #0
 8000612:	d008      	beq.n	8000626 <rxATcommand+0x1ce>
				step++;
 8000614:	4b37      	ldr	r3, [pc, #220]	; (80006f4 <rxATcommand+0x29c>)
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	3301      	adds	r3, #1
 800061a:	4a36      	ldr	r2, [pc, #216]	; (80006f4 <rxATcommand+0x29c>)
 800061c:	6013      	str	r3, [r2, #0]
				ready=true;
 800061e:	4b37      	ldr	r3, [pc, #220]	; (80006fc <rxATcommand+0x2a4>)
 8000620:	2201      	movs	r2, #1
 8000622:	701a      	strb	r2, [r3, #0]
			}
			else {
				step=8;
				ready=true;
			}
			break;
 8000624:	e128      	b.n	8000878 <rxATcommand+0x420>
				step=8;
 8000626:	4b33      	ldr	r3, [pc, #204]	; (80006f4 <rxATcommand+0x29c>)
 8000628:	2208      	movs	r2, #8
 800062a:	601a      	str	r2, [r3, #0]
				ready=true;
 800062c:	4b33      	ldr	r3, [pc, #204]	; (80006fc <rxATcommand+0x2a4>)
 800062e:	2201      	movs	r2, #1
 8000630:	701a      	strb	r2, [r3, #0]
			break;
 8000632:	e121      	b.n	8000878 <rxATcommand+0x420>
		}
		case 6: {
			if (strstr((char*)text, (char*)"200")) {
 8000634:	4934      	ldr	r1, [pc, #208]	; (8000708 <rxATcommand+0x2b0>)
 8000636:	6878      	ldr	r0, [r7, #4]
 8000638:	f003 fe31 	bl	800429e <strstr>
 800063c:	4603      	mov	r3, r0
 800063e:	2b00      	cmp	r3, #0
 8000640:	d008      	beq.n	8000654 <rxATcommand+0x1fc>
				step++;
 8000642:	4b2c      	ldr	r3, [pc, #176]	; (80006f4 <rxATcommand+0x29c>)
 8000644:	681b      	ldr	r3, [r3, #0]
 8000646:	3301      	adds	r3, #1
 8000648:	4a2a      	ldr	r2, [pc, #168]	; (80006f4 <rxATcommand+0x29c>)
 800064a:	6013      	str	r3, [r2, #0]
				ready=true;
 800064c:	4b2b      	ldr	r3, [pc, #172]	; (80006fc <rxATcommand+0x2a4>)
 800064e:	2201      	movs	r2, #1
 8000650:	701a      	strb	r2, [r3, #0]
			}
			else if (strstr((char*)text, (char*)"0,60")) {
				step=8;
				ready=true;
			}
			break;
 8000652:	e110      	b.n	8000876 <rxATcommand+0x41e>
			else if (strstr((char*)text, (char*)"0,60")) {
 8000654:	492d      	ldr	r1, [pc, #180]	; (800070c <rxATcommand+0x2b4>)
 8000656:	6878      	ldr	r0, [r7, #4]
 8000658:	f003 fe21 	bl	800429e <strstr>
 800065c:	4603      	mov	r3, r0
 800065e:	2b00      	cmp	r3, #0
 8000660:	f000 8109 	beq.w	8000876 <rxATcommand+0x41e>
				step=8;
 8000664:	4b23      	ldr	r3, [pc, #140]	; (80006f4 <rxATcommand+0x29c>)
 8000666:	2208      	movs	r2, #8
 8000668:	601a      	str	r2, [r3, #0]
				ready=true;
 800066a:	4b24      	ldr	r3, [pc, #144]	; (80006fc <rxATcommand+0x2a4>)
 800066c:	2201      	movs	r2, #1
 800066e:	701a      	strb	r2, [r3, #0]
			break;
 8000670:	e101      	b.n	8000876 <rxATcommand+0x41e>
		}
		case 7: {
			if (strstr((char*)text, (char*)"OK")) {
 8000672:	4921      	ldr	r1, [pc, #132]	; (80006f8 <rxATcommand+0x2a0>)
 8000674:	6878      	ldr	r0, [r7, #4]
 8000676:	f003 fe12 	bl	800429e <strstr>
 800067a:	4603      	mov	r3, r0
 800067c:	2b00      	cmp	r3, #0
 800067e:	d008      	beq.n	8000692 <rxATcommand+0x23a>
				step++;
 8000680:	4b1c      	ldr	r3, [pc, #112]	; (80006f4 <rxATcommand+0x29c>)
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	3301      	adds	r3, #1
 8000686:	4a1b      	ldr	r2, [pc, #108]	; (80006f4 <rxATcommand+0x29c>)
 8000688:	6013      	str	r3, [r2, #0]
				ready=true;
 800068a:	4b1c      	ldr	r3, [pc, #112]	; (80006fc <rxATcommand+0x2a4>)
 800068c:	2201      	movs	r2, #1
 800068e:	701a      	strb	r2, [r3, #0]
			}
			else {
				step=8;
				ready=true;
			}
			break;
 8000690:	e0f2      	b.n	8000878 <rxATcommand+0x420>
				step=8;
 8000692:	4b18      	ldr	r3, [pc, #96]	; (80006f4 <rxATcommand+0x29c>)
 8000694:	2208      	movs	r2, #8
 8000696:	601a      	str	r2, [r3, #0]
				ready=true;
 8000698:	4b18      	ldr	r3, [pc, #96]	; (80006fc <rxATcommand+0x2a4>)
 800069a:	2201      	movs	r2, #1
 800069c:	701a      	strb	r2, [r3, #0]
			break;
 800069e:	e0eb      	b.n	8000878 <rxATcommand+0x420>
		}
		case 8: {
			step=9;
 80006a0:	4b14      	ldr	r3, [pc, #80]	; (80006f4 <rxATcommand+0x29c>)
 80006a2:	2209      	movs	r2, #9
 80006a4:	601a      	str	r2, [r3, #0]
			ready=true;
 80006a6:	4b15      	ldr	r3, [pc, #84]	; (80006fc <rxATcommand+0x2a4>)
 80006a8:	2201      	movs	r2, #1
 80006aa:	701a      	strb	r2, [r3, #0]
			break;
 80006ac:	e0e4      	b.n	8000878 <rxATcommand+0x420>
		}
		case 9: {
			if (strstr((char*)text, (char*)"OK")) {
 80006ae:	4912      	ldr	r1, [pc, #72]	; (80006f8 <rxATcommand+0x2a0>)
 80006b0:	6878      	ldr	r0, [r7, #4]
 80006b2:	f003 fdf4 	bl	800429e <strstr>
 80006b6:	4603      	mov	r3, r0
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d006      	beq.n	80006ca <rxATcommand+0x272>
				step=10;
 80006bc:	4b0d      	ldr	r3, [pc, #52]	; (80006f4 <rxATcommand+0x29c>)
 80006be:	220a      	movs	r2, #10
 80006c0:	601a      	str	r2, [r3, #0]
				ready=true;
 80006c2:	4b0e      	ldr	r3, [pc, #56]	; (80006fc <rxATcommand+0x2a4>)
 80006c4:	2201      	movs	r2, #1
 80006c6:	701a      	strb	r2, [r3, #0]
			}
			else {
				step=0;
				ready=true;
			}
			break;
 80006c8:	e0d6      	b.n	8000878 <rxATcommand+0x420>
				step=0;
 80006ca:	4b0a      	ldr	r3, [pc, #40]	; (80006f4 <rxATcommand+0x29c>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	601a      	str	r2, [r3, #0]
				ready=true;
 80006d0:	4b0a      	ldr	r3, [pc, #40]	; (80006fc <rxATcommand+0x2a4>)
 80006d2:	2201      	movs	r2, #1
 80006d4:	701a      	strb	r2, [r3, #0]
			break;
 80006d6:	e0cf      	b.n	8000878 <rxATcommand+0x420>
		}
		case 10: {
			if (strstr((char*)text, (char*)"CMTI")) {
 80006d8:	4909      	ldr	r1, [pc, #36]	; (8000700 <rxATcommand+0x2a8>)
 80006da:	6878      	ldr	r0, [r7, #4]
 80006dc:	f003 fddf 	bl	800429e <strstr>
 80006e0:	4603      	mov	r3, r0
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d04b      	beq.n	800077e <rxATcommand+0x326>
				bool start = false;
 80006e6:	2300      	movs	r3, #0
 80006e8:	75fb      	strb	r3, [r7, #23]
				int j = 0;
 80006ea:	2300      	movs	r3, #0
 80006ec:	613b      	str	r3, [r7, #16]
				for (int i = 0; i<250; i++) {
 80006ee:	2300      	movs	r3, #0
 80006f0:	60fb      	str	r3, [r7, #12]
 80006f2:	e03a      	b.n	800076a <rxATcommand+0x312>
 80006f4:	20000794 	.word	0x20000794
 80006f8:	08004cb0 	.word	0x08004cb0
 80006fc:	2000079c 	.word	0x2000079c
 8000700:	08004cb4 	.word	0x08004cb4
 8000704:	08004cbc 	.word	0x08004cbc
 8000708:	08004cc0 	.word	0x08004cc0
 800070c:	08004cc4 	.word	0x08004cc4
					if (start) {
 8000710:	7dfb      	ldrb	r3, [r7, #23]
 8000712:	2b00      	cmp	r3, #0
 8000714:	d01e      	beq.n	8000754 <rxATcommand+0x2fc>
						if ((text[i]=='\r')||(text[i]=='\n')) {
 8000716:	68fb      	ldr	r3, [r7, #12]
 8000718:	687a      	ldr	r2, [r7, #4]
 800071a:	4413      	add	r3, r2
 800071c:	781b      	ldrb	r3, [r3, #0]
 800071e:	2b0d      	cmp	r3, #13
 8000720:	d005      	beq.n	800072e <rxATcommand+0x2d6>
 8000722:	68fb      	ldr	r3, [r7, #12]
 8000724:	687a      	ldr	r2, [r7, #4]
 8000726:	4413      	add	r3, r2
 8000728:	781b      	ldrb	r3, [r3, #0]
 800072a:	2b0a      	cmp	r3, #10
 800072c:	d105      	bne.n	800073a <rxATcommand+0x2e2>
							smsNum[j]='!';  //стоп-символ
 800072e:	4a54      	ldr	r2, [pc, #336]	; (8000880 <rxATcommand+0x428>)
 8000730:	693b      	ldr	r3, [r7, #16]
 8000732:	4413      	add	r3, r2
 8000734:	2221      	movs	r2, #33	; 0x21
 8000736:	701a      	strb	r2, [r3, #0]
							break;
 8000738:	e01a      	b.n	8000770 <rxATcommand+0x318>
						}
						else {
							smsNum[j]=text[i];
 800073a:	68fb      	ldr	r3, [r7, #12]
 800073c:	687a      	ldr	r2, [r7, #4]
 800073e:	4413      	add	r3, r2
 8000740:	7819      	ldrb	r1, [r3, #0]
 8000742:	4a4f      	ldr	r2, [pc, #316]	; (8000880 <rxATcommand+0x428>)
 8000744:	693b      	ldr	r3, [r7, #16]
 8000746:	4413      	add	r3, r2
 8000748:	460a      	mov	r2, r1
 800074a:	701a      	strb	r2, [r3, #0]
							j++;
 800074c:	693b      	ldr	r3, [r7, #16]
 800074e:	3301      	adds	r3, #1
 8000750:	613b      	str	r3, [r7, #16]
 8000752:	e007      	b.n	8000764 <rxATcommand+0x30c>
						}
					}
					else {
						if (text[i]==',') start = true;
 8000754:	68fb      	ldr	r3, [r7, #12]
 8000756:	687a      	ldr	r2, [r7, #4]
 8000758:	4413      	add	r3, r2
 800075a:	781b      	ldrb	r3, [r3, #0]
 800075c:	2b2c      	cmp	r3, #44	; 0x2c
 800075e:	d101      	bne.n	8000764 <rxATcommand+0x30c>
 8000760:	2301      	movs	r3, #1
 8000762:	75fb      	strb	r3, [r7, #23]
				for (int i = 0; i<250; i++) {
 8000764:	68fb      	ldr	r3, [r7, #12]
 8000766:	3301      	adds	r3, #1
 8000768:	60fb      	str	r3, [r7, #12]
 800076a:	68fb      	ldr	r3, [r7, #12]
 800076c:	2bf9      	cmp	r3, #249	; 0xf9
 800076e:	ddcf      	ble.n	8000710 <rxATcommand+0x2b8>
					}
				}
				step=20;
 8000770:	4b44      	ldr	r3, [pc, #272]	; (8000884 <rxATcommand+0x42c>)
 8000772:	2214      	movs	r2, #20
 8000774:	601a      	str	r2, [r3, #0]
				ready=true;
 8000776:	4b44      	ldr	r3, [pc, #272]	; (8000888 <rxATcommand+0x430>)
 8000778:	2201      	movs	r2, #1
 800077a:	701a      	strb	r2, [r3, #0]
			}
			else {
				step=10;
				ready=true;
			}
			break;
 800077c:	e07c      	b.n	8000878 <rxATcommand+0x420>
				step=10;
 800077e:	4b41      	ldr	r3, [pc, #260]	; (8000884 <rxATcommand+0x42c>)
 8000780:	220a      	movs	r2, #10
 8000782:	601a      	str	r2, [r3, #0]
				ready=true;
 8000784:	4b40      	ldr	r3, [pc, #256]	; (8000888 <rxATcommand+0x430>)
 8000786:	2201      	movs	r2, #1
 8000788:	701a      	strb	r2, [r3, #0]
			break;
 800078a:	e075      	b.n	8000878 <rxATcommand+0x420>
		}
		case 20: {
			if (strstr((char*)text, (char*)"OK")) {
 800078c:	493f      	ldr	r1, [pc, #252]	; (800088c <rxATcommand+0x434>)
 800078e:	6878      	ldr	r0, [r7, #4]
 8000790:	f003 fd85 	bl	800429e <strstr>
 8000794:	4603      	mov	r3, r0
 8000796:	2b00      	cmp	r3, #0
 8000798:	d008      	beq.n	80007ac <rxATcommand+0x354>
				step++;
 800079a:	4b3a      	ldr	r3, [pc, #232]	; (8000884 <rxATcommand+0x42c>)
 800079c:	681b      	ldr	r3, [r3, #0]
 800079e:	3301      	adds	r3, #1
 80007a0:	4a38      	ldr	r2, [pc, #224]	; (8000884 <rxATcommand+0x42c>)
 80007a2:	6013      	str	r3, [r2, #0]
				ready=true;
 80007a4:	4b38      	ldr	r3, [pc, #224]	; (8000888 <rxATcommand+0x430>)
 80007a6:	2201      	movs	r2, #1
 80007a8:	701a      	strb	r2, [r3, #0]
			}
			else {
				step=10;
				ready=true;
			}
			break;
 80007aa:	e065      	b.n	8000878 <rxATcommand+0x420>
				step=10;
 80007ac:	4b35      	ldr	r3, [pc, #212]	; (8000884 <rxATcommand+0x42c>)
 80007ae:	220a      	movs	r2, #10
 80007b0:	601a      	str	r2, [r3, #0]
				ready=true;
 80007b2:	4b35      	ldr	r3, [pc, #212]	; (8000888 <rxATcommand+0x430>)
 80007b4:	2201      	movs	r2, #1
 80007b6:	701a      	strb	r2, [r3, #0]
			break;
 80007b8:	e05e      	b.n	8000878 <rxATcommand+0x420>
		}
		case 21: {
			memset(smsText, 0, sizeof(smsText));
 80007ba:	2206      	movs	r2, #6
 80007bc:	2100      	movs	r1, #0
 80007be:	4834      	ldr	r0, [pc, #208]	; (8000890 <rxATcommand+0x438>)
 80007c0:	f003 fd1e 	bl	8004200 <memset>
			for (int i = 0; i<250; i++) {
 80007c4:	2300      	movs	r3, #0
 80007c6:	60bb      	str	r3, [r7, #8]
 80007c8:	e017      	b.n	80007fa <rxATcommand+0x3a2>
				if ((oldModem3[i]=='\r')||(oldModem3[i]=='\n')) break;
 80007ca:	4a32      	ldr	r2, [pc, #200]	; (8000894 <rxATcommand+0x43c>)
 80007cc:	68bb      	ldr	r3, [r7, #8]
 80007ce:	4413      	add	r3, r2
 80007d0:	781b      	ldrb	r3, [r3, #0]
 80007d2:	2b0d      	cmp	r3, #13
 80007d4:	d014      	beq.n	8000800 <rxATcommand+0x3a8>
 80007d6:	4a2f      	ldr	r2, [pc, #188]	; (8000894 <rxATcommand+0x43c>)
 80007d8:	68bb      	ldr	r3, [r7, #8]
 80007da:	4413      	add	r3, r2
 80007dc:	781b      	ldrb	r3, [r3, #0]
 80007de:	2b0a      	cmp	r3, #10
 80007e0:	d00e      	beq.n	8000800 <rxATcommand+0x3a8>
				else smsText[i] = oldModem3[i];
 80007e2:	4a2c      	ldr	r2, [pc, #176]	; (8000894 <rxATcommand+0x43c>)
 80007e4:	68bb      	ldr	r3, [r7, #8]
 80007e6:	4413      	add	r3, r2
 80007e8:	7819      	ldrb	r1, [r3, #0]
 80007ea:	4a29      	ldr	r2, [pc, #164]	; (8000890 <rxATcommand+0x438>)
 80007ec:	68bb      	ldr	r3, [r7, #8]
 80007ee:	4413      	add	r3, r2
 80007f0:	460a      	mov	r2, r1
 80007f2:	701a      	strb	r2, [r3, #0]
			for (int i = 0; i<250; i++) {
 80007f4:	68bb      	ldr	r3, [r7, #8]
 80007f6:	3301      	adds	r3, #1
 80007f8:	60bb      	str	r3, [r7, #8]
 80007fa:	68bb      	ldr	r3, [r7, #8]
 80007fc:	2bf9      	cmp	r3, #249	; 0xf9
 80007fe:	dde4      	ble.n	80007ca <rxATcommand+0x372>
			}
			step++;
 8000800:	4b20      	ldr	r3, [pc, #128]	; (8000884 <rxATcommand+0x42c>)
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	3301      	adds	r3, #1
 8000806:	4a1f      	ldr	r2, [pc, #124]	; (8000884 <rxATcommand+0x42c>)
 8000808:	6013      	str	r3, [r2, #0]
			ready=true;
 800080a:	4b1f      	ldr	r3, [pc, #124]	; (8000888 <rxATcommand+0x430>)
 800080c:	2201      	movs	r2, #1
 800080e:	701a      	strb	r2, [r3, #0]
			break;
 8000810:	e032      	b.n	8000878 <rxATcommand+0x420>
		}
		case 22: {
			step++;
 8000812:	4b1c      	ldr	r3, [pc, #112]	; (8000884 <rxATcommand+0x42c>)
 8000814:	681b      	ldr	r3, [r3, #0]
 8000816:	3301      	adds	r3, #1
 8000818:	4a1a      	ldr	r2, [pc, #104]	; (8000884 <rxATcommand+0x42c>)
 800081a:	6013      	str	r3, [r2, #0]
			ready=true;
 800081c:	4b1a      	ldr	r3, [pc, #104]	; (8000888 <rxATcommand+0x430>)
 800081e:	2201      	movs	r2, #1
 8000820:	701a      	strb	r2, [r3, #0]
			break;
 8000822:	e029      	b.n	8000878 <rxATcommand+0x420>
		}
		case 23: {
			step++;
 8000824:	4b17      	ldr	r3, [pc, #92]	; (8000884 <rxATcommand+0x42c>)
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	3301      	adds	r3, #1
 800082a:	4a16      	ldr	r2, [pc, #88]	; (8000884 <rxATcommand+0x42c>)
 800082c:	6013      	str	r3, [r2, #0]
			ready=true;
 800082e:	4b16      	ldr	r3, [pc, #88]	; (8000888 <rxATcommand+0x430>)
 8000830:	2201      	movs	r2, #1
 8000832:	701a      	strb	r2, [r3, #0]
			break;
 8000834:	e020      	b.n	8000878 <rxATcommand+0x420>
		}
		case 24: {
			step++;
 8000836:	4b13      	ldr	r3, [pc, #76]	; (8000884 <rxATcommand+0x42c>)
 8000838:	681b      	ldr	r3, [r3, #0]
 800083a:	3301      	adds	r3, #1
 800083c:	4a11      	ldr	r2, [pc, #68]	; (8000884 <rxATcommand+0x42c>)
 800083e:	6013      	str	r3, [r2, #0]
			ready=true;
 8000840:	4b11      	ldr	r3, [pc, #68]	; (8000888 <rxATcommand+0x430>)
 8000842:	2201      	movs	r2, #1
 8000844:	701a      	strb	r2, [r3, #0]
			break;
 8000846:	e017      	b.n	8000878 <rxATcommand+0x420>
		}
		case 25: {
			if (strstr((char*)text, (char*)"OK")) {
 8000848:	4910      	ldr	r1, [pc, #64]	; (800088c <rxATcommand+0x434>)
 800084a:	6878      	ldr	r0, [r7, #4]
 800084c:	f003 fd27 	bl	800429e <strstr>
 8000850:	4603      	mov	r3, r0
 8000852:	2b00      	cmp	r3, #0
 8000854:	d006      	beq.n	8000864 <rxATcommand+0x40c>
				step=0;
 8000856:	4b0b      	ldr	r3, [pc, #44]	; (8000884 <rxATcommand+0x42c>)
 8000858:	2200      	movs	r2, #0
 800085a:	601a      	str	r2, [r3, #0]
				ready=true;
 800085c:	4b0a      	ldr	r3, [pc, #40]	; (8000888 <rxATcommand+0x430>)
 800085e:	2201      	movs	r2, #1
 8000860:	701a      	strb	r2, [r3, #0]
			}
			else {
				step=10;
				ready=true;
			}
			break;
 8000862:	e009      	b.n	8000878 <rxATcommand+0x420>
				step=10;
 8000864:	4b07      	ldr	r3, [pc, #28]	; (8000884 <rxATcommand+0x42c>)
 8000866:	220a      	movs	r2, #10
 8000868:	601a      	str	r2, [r3, #0]
				ready=true;
 800086a:	4b07      	ldr	r3, [pc, #28]	; (8000888 <rxATcommand+0x430>)
 800086c:	2201      	movs	r2, #1
 800086e:	701a      	strb	r2, [r3, #0]
			break;
 8000870:	e002      	b.n	8000878 <rxATcommand+0x420>
			break;
 8000872:	bf00      	nop
 8000874:	e000      	b.n	8000878 <rxATcommand+0x420>
			break;
 8000876:	bf00      	nop
		}
	}
}
 8000878:	bf00      	nop
 800087a:	3718      	adds	r7, #24
 800087c:	46bd      	mov	sp, r7
 800087e:	bd80      	pop	{r7, pc}
 8000880:	2000078c 	.word	0x2000078c
 8000884:	20000794 	.word	0x20000794
 8000888:	2000079c 	.word	0x2000079c
 800088c:	08004cb0 	.word	0x08004cb0
 8000890:	20000010 	.word	0x20000010
 8000894:	20000690 	.word	0x20000690

08000898 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000898:	b580      	push	{r7, lr}
 800089a:	b086      	sub	sp, #24
 800089c:	af00      	add	r7, sp, #0
 800089e:	6078      	str	r0, [r7, #4]
	if (huart == &huart2) {
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	4a53      	ldr	r2, [pc, #332]	; (80009f0 <HAL_UART_RxCpltCallback+0x158>)
 80008a4:	4293      	cmp	r3, r2
 80008a6:	d173      	bne.n	8000990 <HAL_UART_RxCpltCallback+0xf8>
		//HAL_UART_Transmit_DMA(&huart1,str,1);
		if (str[0]!='\n') {
 80008a8:	4b52      	ldr	r3, [pc, #328]	; (80009f4 <HAL_UART_RxCpltCallback+0x15c>)
 80008aa:	781b      	ldrb	r3, [r3, #0]
 80008ac:	2b0a      	cmp	r3, #10
 80008ae:	d00b      	beq.n	80008c8 <HAL_UART_RxCpltCallback+0x30>
			modemString2[modemStringLength2] = str[0];
 80008b0:	4b51      	ldr	r3, [pc, #324]	; (80009f8 <HAL_UART_RxCpltCallback+0x160>)
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	4a4f      	ldr	r2, [pc, #316]	; (80009f4 <HAL_UART_RxCpltCallback+0x15c>)
 80008b6:	7811      	ldrb	r1, [r2, #0]
 80008b8:	4a50      	ldr	r2, [pc, #320]	; (80009fc <HAL_UART_RxCpltCallback+0x164>)
 80008ba:	54d1      	strb	r1, [r2, r3]
			modemStringLength2++;
 80008bc:	4b4e      	ldr	r3, [pc, #312]	; (80009f8 <HAL_UART_RxCpltCallback+0x160>)
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	3301      	adds	r3, #1
 80008c2:	4a4d      	ldr	r2, [pc, #308]	; (80009f8 <HAL_UART_RxCpltCallback+0x160>)
 80008c4:	6013      	str	r3, [r2, #0]
 80008c6:	e05d      	b.n	8000984 <HAL_UART_RxCpltCallback+0xec>
		}
		else {
			modemString2[modemStringLength2] = str[0];
 80008c8:	4b4b      	ldr	r3, [pc, #300]	; (80009f8 <HAL_UART_RxCpltCallback+0x160>)
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	4a49      	ldr	r2, [pc, #292]	; (80009f4 <HAL_UART_RxCpltCallback+0x15c>)
 80008ce:	7811      	ldrb	r1, [r2, #0]
 80008d0:	4a4a      	ldr	r2, [pc, #296]	; (80009fc <HAL_UART_RxCpltCallback+0x164>)
 80008d2:	54d1      	strb	r1, [r2, r3]
			modemStringLength2++;
 80008d4:	4b48      	ldr	r3, [pc, #288]	; (80009f8 <HAL_UART_RxCpltCallback+0x160>)
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	3301      	adds	r3, #1
 80008da:	4a47      	ldr	r2, [pc, #284]	; (80009f8 <HAL_UART_RxCpltCallback+0x160>)
 80008dc:	6013      	str	r3, [r2, #0]
			HAL_UART_Transmit_DMA(&huart1, modemString2, modemStringLength2);
 80008de:	4b46      	ldr	r3, [pc, #280]	; (80009f8 <HAL_UART_RxCpltCallback+0x160>)
 80008e0:	681b      	ldr	r3, [r3, #0]
 80008e2:	b29b      	uxth	r3, r3
 80008e4:	461a      	mov	r2, r3
 80008e6:	4945      	ldr	r1, [pc, #276]	; (80009fc <HAL_UART_RxCpltCallback+0x164>)
 80008e8:	4845      	ldr	r0, [pc, #276]	; (8000a00 <HAL_UART_RxCpltCallback+0x168>)
 80008ea:	f002 fda1 	bl	8003430 <HAL_UART_Transmit_DMA>
			for (int i = modemStringLength2; i<250; i++)modemString2[i]=(uint8_t)0x00;
 80008ee:	4b42      	ldr	r3, [pc, #264]	; (80009f8 <HAL_UART_RxCpltCallback+0x160>)
 80008f0:	681b      	ldr	r3, [r3, #0]
 80008f2:	617b      	str	r3, [r7, #20]
 80008f4:	e007      	b.n	8000906 <HAL_UART_RxCpltCallback+0x6e>
 80008f6:	4a41      	ldr	r2, [pc, #260]	; (80009fc <HAL_UART_RxCpltCallback+0x164>)
 80008f8:	697b      	ldr	r3, [r7, #20]
 80008fa:	4413      	add	r3, r2
 80008fc:	2200      	movs	r2, #0
 80008fe:	701a      	strb	r2, [r3, #0]
 8000900:	697b      	ldr	r3, [r7, #20]
 8000902:	3301      	adds	r3, #1
 8000904:	617b      	str	r3, [r7, #20]
 8000906:	697b      	ldr	r3, [r7, #20]
 8000908:	2bf9      	cmp	r3, #249	; 0xf9
 800090a:	ddf4      	ble.n	80008f6 <HAL_UART_RxCpltCallback+0x5e>
			//strncpy((uint8_t*)oldModem3, (uint8_t*)oldModem2, 250);
			for (int i = 0; i<250; i++) oldModem3[i] = oldModem2[i];
 800090c:	2300      	movs	r3, #0
 800090e:	613b      	str	r3, [r7, #16]
 8000910:	e00b      	b.n	800092a <HAL_UART_RxCpltCallback+0x92>
 8000912:	4a3c      	ldr	r2, [pc, #240]	; (8000a04 <HAL_UART_RxCpltCallback+0x16c>)
 8000914:	693b      	ldr	r3, [r7, #16]
 8000916:	4413      	add	r3, r2
 8000918:	7819      	ldrb	r1, [r3, #0]
 800091a:	4a3b      	ldr	r2, [pc, #236]	; (8000a08 <HAL_UART_RxCpltCallback+0x170>)
 800091c:	693b      	ldr	r3, [r7, #16]
 800091e:	4413      	add	r3, r2
 8000920:	460a      	mov	r2, r1
 8000922:	701a      	strb	r2, [r3, #0]
 8000924:	693b      	ldr	r3, [r7, #16]
 8000926:	3301      	adds	r3, #1
 8000928:	613b      	str	r3, [r7, #16]
 800092a:	693b      	ldr	r3, [r7, #16]
 800092c:	2bf9      	cmp	r3, #249	; 0xf9
 800092e:	ddf0      	ble.n	8000912 <HAL_UART_RxCpltCallback+0x7a>
			//strncpy((uint8_t*)oldModem2, (uint8_t*)oldModem, 250);
			for (int i = 0; i<250; i++) oldModem2[i] = oldModem[i];
 8000930:	2300      	movs	r3, #0
 8000932:	60fb      	str	r3, [r7, #12]
 8000934:	e00b      	b.n	800094e <HAL_UART_RxCpltCallback+0xb6>
 8000936:	4a35      	ldr	r2, [pc, #212]	; (8000a0c <HAL_UART_RxCpltCallback+0x174>)
 8000938:	68fb      	ldr	r3, [r7, #12]
 800093a:	4413      	add	r3, r2
 800093c:	7819      	ldrb	r1, [r3, #0]
 800093e:	4a31      	ldr	r2, [pc, #196]	; (8000a04 <HAL_UART_RxCpltCallback+0x16c>)
 8000940:	68fb      	ldr	r3, [r7, #12]
 8000942:	4413      	add	r3, r2
 8000944:	460a      	mov	r2, r1
 8000946:	701a      	strb	r2, [r3, #0]
 8000948:	68fb      	ldr	r3, [r7, #12]
 800094a:	3301      	adds	r3, #1
 800094c:	60fb      	str	r3, [r7, #12]
 800094e:	68fb      	ldr	r3, [r7, #12]
 8000950:	2bf9      	cmp	r3, #249	; 0xf9
 8000952:	ddf0      	ble.n	8000936 <HAL_UART_RxCpltCallback+0x9e>
			//strncpy((uint8_t*)oldModem, (uint8_t*)modemString2,250);
			for (int i = 0; i<250; i++) oldModem[i] = modemString2[i];
 8000954:	2300      	movs	r3, #0
 8000956:	60bb      	str	r3, [r7, #8]
 8000958:	e00b      	b.n	8000972 <HAL_UART_RxCpltCallback+0xda>
 800095a:	4a28      	ldr	r2, [pc, #160]	; (80009fc <HAL_UART_RxCpltCallback+0x164>)
 800095c:	68bb      	ldr	r3, [r7, #8]
 800095e:	4413      	add	r3, r2
 8000960:	7819      	ldrb	r1, [r3, #0]
 8000962:	4a2a      	ldr	r2, [pc, #168]	; (8000a0c <HAL_UART_RxCpltCallback+0x174>)
 8000964:	68bb      	ldr	r3, [r7, #8]
 8000966:	4413      	add	r3, r2
 8000968:	460a      	mov	r2, r1
 800096a:	701a      	strb	r2, [r3, #0]
 800096c:	68bb      	ldr	r3, [r7, #8]
 800096e:	3301      	adds	r3, #1
 8000970:	60bb      	str	r3, [r7, #8]
 8000972:	68bb      	ldr	r3, [r7, #8]
 8000974:	2bf9      	cmp	r3, #249	; 0xf9
 8000976:	ddf0      	ble.n	800095a <HAL_UART_RxCpltCallback+0xc2>
			/*for (int j = 0; j<250; j++)
				if ((modemString2[j]=='\n')||(modemString2[j]=='\r'))
					modemString2[j]=(uint8_t)0;*/
			modemStringLength2 = 0;
 8000978:	4b1f      	ldr	r3, [pc, #124]	; (80009f8 <HAL_UART_RxCpltCallback+0x160>)
 800097a:	2200      	movs	r2, #0
 800097c:	601a      	str	r2, [r3, #0]
			rxNew=true;
 800097e:	4b24      	ldr	r3, [pc, #144]	; (8000a10 <HAL_UART_RxCpltCallback+0x178>)
 8000980:	2201      	movs	r2, #1
 8000982:	601a      	str	r2, [r3, #0]
		}
		HAL_UART_Receive_IT(&huart2,str,1);
 8000984:	2201      	movs	r2, #1
 8000986:	491b      	ldr	r1, [pc, #108]	; (80009f4 <HAL_UART_RxCpltCallback+0x15c>)
 8000988:	4819      	ldr	r0, [pc, #100]	; (80009f0 <HAL_UART_RxCpltCallback+0x158>)
 800098a:	f002 fd2c 	bl	80033e6 <HAL_UART_Receive_IT>
			modemStringLength1 = 0;

		}
		HAL_UART_Receive_IT(&huart1,str2,1);
	}
}
 800098e:	e02a      	b.n	80009e6 <HAL_UART_RxCpltCallback+0x14e>
		if (str2[0]!='\n') {
 8000990:	4b20      	ldr	r3, [pc, #128]	; (8000a14 <HAL_UART_RxCpltCallback+0x17c>)
 8000992:	781b      	ldrb	r3, [r3, #0]
 8000994:	2b0a      	cmp	r3, #10
 8000996:	d00b      	beq.n	80009b0 <HAL_UART_RxCpltCallback+0x118>
			modemString1[modemStringLength1] = str2[0];
 8000998:	4b1f      	ldr	r3, [pc, #124]	; (8000a18 <HAL_UART_RxCpltCallback+0x180>)
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	4a1d      	ldr	r2, [pc, #116]	; (8000a14 <HAL_UART_RxCpltCallback+0x17c>)
 800099e:	7811      	ldrb	r1, [r2, #0]
 80009a0:	4a1e      	ldr	r2, [pc, #120]	; (8000a1c <HAL_UART_RxCpltCallback+0x184>)
 80009a2:	54d1      	strb	r1, [r2, r3]
			modemStringLength1++;
 80009a4:	4b1c      	ldr	r3, [pc, #112]	; (8000a18 <HAL_UART_RxCpltCallback+0x180>)
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	3301      	adds	r3, #1
 80009aa:	4a1b      	ldr	r2, [pc, #108]	; (8000a18 <HAL_UART_RxCpltCallback+0x180>)
 80009ac:	6013      	str	r3, [r2, #0]
 80009ae:	e015      	b.n	80009dc <HAL_UART_RxCpltCallback+0x144>
			modemString1[modemStringLength1] = str2[0];
 80009b0:	4b19      	ldr	r3, [pc, #100]	; (8000a18 <HAL_UART_RxCpltCallback+0x180>)
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	4a17      	ldr	r2, [pc, #92]	; (8000a14 <HAL_UART_RxCpltCallback+0x17c>)
 80009b6:	7811      	ldrb	r1, [r2, #0]
 80009b8:	4a18      	ldr	r2, [pc, #96]	; (8000a1c <HAL_UART_RxCpltCallback+0x184>)
 80009ba:	54d1      	strb	r1, [r2, r3]
			modemStringLength1++;
 80009bc:	4b16      	ldr	r3, [pc, #88]	; (8000a18 <HAL_UART_RxCpltCallback+0x180>)
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	3301      	adds	r3, #1
 80009c2:	4a15      	ldr	r2, [pc, #84]	; (8000a18 <HAL_UART_RxCpltCallback+0x180>)
 80009c4:	6013      	str	r3, [r2, #0]
			HAL_UART_Transmit_DMA(&huart2, modemString1, modemStringLength1);
 80009c6:	4b14      	ldr	r3, [pc, #80]	; (8000a18 <HAL_UART_RxCpltCallback+0x180>)
 80009c8:	681b      	ldr	r3, [r3, #0]
 80009ca:	b29b      	uxth	r3, r3
 80009cc:	461a      	mov	r2, r3
 80009ce:	4913      	ldr	r1, [pc, #76]	; (8000a1c <HAL_UART_RxCpltCallback+0x184>)
 80009d0:	4807      	ldr	r0, [pc, #28]	; (80009f0 <HAL_UART_RxCpltCallback+0x158>)
 80009d2:	f002 fd2d 	bl	8003430 <HAL_UART_Transmit_DMA>
			modemStringLength1 = 0;
 80009d6:	4b10      	ldr	r3, [pc, #64]	; (8000a18 <HAL_UART_RxCpltCallback+0x180>)
 80009d8:	2200      	movs	r2, #0
 80009da:	601a      	str	r2, [r3, #0]
		HAL_UART_Receive_IT(&huart1,str2,1);
 80009dc:	2201      	movs	r2, #1
 80009de:	490d      	ldr	r1, [pc, #52]	; (8000a14 <HAL_UART_RxCpltCallback+0x17c>)
 80009e0:	4807      	ldr	r0, [pc, #28]	; (8000a00 <HAL_UART_RxCpltCallback+0x168>)
 80009e2:	f002 fd00 	bl	80033e6 <HAL_UART_Receive_IT>
}
 80009e6:	bf00      	nop
 80009e8:	3718      	adds	r7, #24
 80009ea:	46bd      	mov	sp, r7
 80009ec:	bd80      	pop	{r7, pc}
 80009ee:	bf00      	nop
 80009f0:	20000140 	.word	0x20000140
 80009f4:	20000008 	.word	0x20000008
 80009f8:	20000394 	.word	0x20000394
 80009fc:	20000298 	.word	0x20000298
 8000a00:	200000f8 	.word	0x200000f8
 8000a04:	20000594 	.word	0x20000594
 8000a08:	20000690 	.word	0x20000690
 8000a0c:	20000498 	.word	0x20000498
 8000a10:	20000798 	.word	0x20000798
 8000a14:	2000000c 	.word	0x2000000c
 8000a18:	20000494 	.word	0x20000494
 8000a1c:	20000398 	.word	0x20000398

08000a20 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b0b4      	sub	sp, #208	; 0xd0
 8000a24:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a26:	f001 f8cb 	bl	8001bc0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a2a:	f000 f8cd 	bl	8000bc8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a2e:	f000 f9c9 	bl	8000dc4 <MX_GPIO_Init>
  MX_DMA_Init();
 8000a32:	f000 f991 	bl	8000d58 <MX_DMA_Init>
  MX_I2C1_Init();
 8000a36:	f000 f90d 	bl	8000c54 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8000a3a:	f000 f939 	bl	8000cb0 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000a3e:	f000 f961 	bl	8000d04 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  SSD1306_Init();
 8000a42:	f000 fa1d 	bl	8000e80 <SSD1306_Init>
  SSD1306_GotoXY(0, 44); //Устанавливаем курсор в позицию 0;44. Сначала по горизонтали, потом вертикали.
 8000a46:	212c      	movs	r1, #44	; 0x2c
 8000a48:	2000      	movs	r0, #0
 8000a4a:	f000 fb99 	bl	8001180 <SSD1306_GotoXY>
  SSD1306_Puts("Hello, habrahabr!!", &Font_7x10, SSD1306_COLOR_WHITE); //пишем надпись в выставленной позиции шрифтом "Font_7x10" белым цветом.
 8000a4e:	2201      	movs	r2, #1
 8000a50:	494c      	ldr	r1, [pc, #304]	; (8000b84 <main+0x164>)
 8000a52:	484d      	ldr	r0, [pc, #308]	; (8000b88 <main+0x168>)
 8000a54:	f000 fc2a 	bl	80012ac <SSD1306_Puts>
  SSD1306_DrawCircle(10, 33, 7, SSD1306_COLOR_WHITE);
 8000a58:	2301      	movs	r3, #1
 8000a5a:	2207      	movs	r2, #7
 8000a5c:	2121      	movs	r1, #33	; 0x21
 8000a5e:	200a      	movs	r0, #10
 8000a60:	f000 fc49 	bl	80012f6 <SSD1306_DrawCircle>
  SSD1306_UpdateScreen();
 8000a64:	f000 fae2 	bl	800102c <SSD1306_UpdateScreen>

  HAL_UART_Transmit(&huart1,(uint8_t*)"start\r\n",7,0xFFFF);
 8000a68:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000a6c:	2207      	movs	r2, #7
 8000a6e:	4947      	ldr	r1, [pc, #284]	; (8000b8c <main+0x16c>)
 8000a70:	4847      	ldr	r0, [pc, #284]	; (8000b90 <main+0x170>)
 8000a72:	f002 fc2d 	bl	80032d0 <HAL_UART_Transmit>
  HAL_UART_Transmit(&huart2,(uint8_t*)"AT+CSQ\r\n",8,0xFFFF);
 8000a76:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000a7a:	2208      	movs	r2, #8
 8000a7c:	4945      	ldr	r1, [pc, #276]	; (8000b94 <main+0x174>)
 8000a7e:	4846      	ldr	r0, [pc, #280]	; (8000b98 <main+0x178>)
 8000a80:	f002 fc26 	bl	80032d0 <HAL_UART_Transmit>
  s800LSend((uint8_t*)"AT+HTTPREAD",11);
  HAL_Delay(1000);
  s800LSend((uint8_t*)"AT+HTTPTERM",11);
  HAL_Delay(1000);
  s800LSend((uint8_t*)"AT+SAPBR=0,1",12);*/
  HAL_UART_Receive_IT(&huart2,str,1);
 8000a84:	2201      	movs	r2, #1
 8000a86:	4945      	ldr	r1, [pc, #276]	; (8000b9c <main+0x17c>)
 8000a88:	4843      	ldr	r0, [pc, #268]	; (8000b98 <main+0x178>)
 8000a8a:	f002 fcac 	bl	80033e6 <HAL_UART_Receive_IT>

  HAL_Delay(2000);
 8000a8e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000a92:	f001 f8f7 	bl	8001c84 <HAL_Delay>
  ready=true;
 8000a96:	4b42      	ldr	r3, [pc, #264]	; (8000ba0 <main+0x180>)
 8000a98:	2201      	movs	r2, #1
 8000a9a:	701a      	strb	r2, [r3, #0]



  HAL_UART_Receive_IT(&huart1,str2,1);
 8000a9c:	2201      	movs	r2, #1
 8000a9e:	4941      	ldr	r1, [pc, #260]	; (8000ba4 <main+0x184>)
 8000aa0:	483b      	ldr	r0, [pc, #236]	; (8000b90 <main+0x170>)
 8000aa2:	f002 fca0 	bl	80033e6 <HAL_UART_Receive_IT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if (ready) txATcommand();
 8000aa6:	4b3e      	ldr	r3, [pc, #248]	; (8000ba0 <main+0x180>)
 8000aa8:	781b      	ldrb	r3, [r3, #0]
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d001      	beq.n	8000ab2 <main+0x92>
 8000aae:	f7ff fb95 	bl	80001dc <txATcommand>
	  if (strstr(modemString2, "\r\n")) {
 8000ab2:	493d      	ldr	r1, [pc, #244]	; (8000ba8 <main+0x188>)
 8000ab4:	483d      	ldr	r0, [pc, #244]	; (8000bac <main+0x18c>)
 8000ab6:	f003 fbf2 	bl	800429e <strstr>
 8000aba:	4603      	mov	r3, r0
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d04f      	beq.n	8000b60 <main+0x140>
		for (k; k<250; k++) if (oldModem3[k]=='\n') break;
		uint8_t subBuf[i], subBuf2[j], subBuf3[k];
		strncpy(subBuf, oldModem, i-1);
		strncpy(subBuf2, oldModem2, j-1);
		strncpy(subBuf3, oldModem3, k-1);*/
		SSD1306_Init();
 8000ac0:	f000 f9de 	bl	8000e80 <SSD1306_Init>
		SSD1306_GotoXY(0, 10);
 8000ac4:	210a      	movs	r1, #10
 8000ac6:	2000      	movs	r0, #0
 8000ac8:	f000 fb5a 	bl	8001180 <SSD1306_GotoXY>
		uint8_t* ssold3[50];
		int i = 0;
 8000acc:	2300      	movs	r3, #0
 8000ace:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
		for (i = 0; i<50; i++) if (oldModem3=='\n') break;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8000ad8:	e007      	b.n	8000aea <main+0xca>
 8000ada:	4b35      	ldr	r3, [pc, #212]	; (8000bb0 <main+0x190>)
 8000adc:	2b0a      	cmp	r3, #10
 8000ade:	d009      	beq.n	8000af4 <main+0xd4>
 8000ae0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8000ae4:	3301      	adds	r3, #1
 8000ae6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8000aea:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8000aee:	2b31      	cmp	r3, #49	; 0x31
 8000af0:	ddf3      	ble.n	8000ada <main+0xba>
 8000af2:	e000      	b.n	8000af6 <main+0xd6>
 8000af4:	bf00      	nop
		strncpy(ssold3, oldModem3, i-2);
 8000af6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8000afa:	3b02      	subs	r3, #2
 8000afc:	461a      	mov	r2, r3
 8000afe:	1d3b      	adds	r3, r7, #4
 8000b00:	492b      	ldr	r1, [pc, #172]	; (8000bb0 <main+0x190>)
 8000b02:	4618      	mov	r0, r3
 8000b04:	f003 fbb8 	bl	8004278 <strncpy>
		SSD1306_Puts(ssold3, &Font_7x10, SSD1306_COLOR_WHITE);
 8000b08:	1d3b      	adds	r3, r7, #4
 8000b0a:	2201      	movs	r2, #1
 8000b0c:	491d      	ldr	r1, [pc, #116]	; (8000b84 <main+0x164>)
 8000b0e:	4618      	mov	r0, r3
 8000b10:	f000 fbcc 	bl	80012ac <SSD1306_Puts>
		SSD1306_GotoXY(0, 25);
 8000b14:	2119      	movs	r1, #25
 8000b16:	2000      	movs	r0, #0
 8000b18:	f000 fb32 	bl	8001180 <SSD1306_GotoXY>
		SSD1306_Puts(oldModem2, &Font_7x10, SSD1306_COLOR_WHITE);
 8000b1c:	2201      	movs	r2, #1
 8000b1e:	4919      	ldr	r1, [pc, #100]	; (8000b84 <main+0x164>)
 8000b20:	4824      	ldr	r0, [pc, #144]	; (8000bb4 <main+0x194>)
 8000b22:	f000 fbc3 	bl	80012ac <SSD1306_Puts>
		SSD1306_GotoXY(0, 40);
 8000b26:	2128      	movs	r1, #40	; 0x28
 8000b28:	2000      	movs	r0, #0
 8000b2a:	f000 fb29 	bl	8001180 <SSD1306_GotoXY>
		SSD1306_Puts(oldModem, &Font_7x10, SSD1306_COLOR_WHITE);
 8000b2e:	2201      	movs	r2, #1
 8000b30:	4914      	ldr	r1, [pc, #80]	; (8000b84 <main+0x164>)
 8000b32:	4821      	ldr	r0, [pc, #132]	; (8000bb8 <main+0x198>)
 8000b34:	f000 fbba 	bl	80012ac <SSD1306_Puts>
		SSD1306_UpdateScreen();
 8000b38:	f000 fa78 	bl	800102c <SSD1306_UpdateScreen>
		if (rxNew) {
 8000b3c:	4b1f      	ldr	r3, [pc, #124]	; (8000bbc <main+0x19c>)
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d00d      	beq.n	8000b60 <main+0x140>
			if ((step==1))
 8000b44:	4b1e      	ldr	r3, [pc, #120]	; (8000bc0 <main+0x1a0>)
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	2b01      	cmp	r3, #1
 8000b4a:	d103      	bne.n	8000b54 <main+0x134>
				rxATcommand(oldModem3);
 8000b4c:	4818      	ldr	r0, [pc, #96]	; (8000bb0 <main+0x190>)
 8000b4e:	f7ff fc83 	bl	8000458 <rxATcommand>
 8000b52:	e002      	b.n	8000b5a <main+0x13a>
			else rxATcommand(oldModem);
 8000b54:	4818      	ldr	r0, [pc, #96]	; (8000bb8 <main+0x198>)
 8000b56:	f7ff fc7f 	bl	8000458 <rxATcommand>
			rxNew = false;
 8000b5a:	4b18      	ldr	r3, [pc, #96]	; (8000bbc <main+0x19c>)
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	601a      	str	r2, [r3, #0]
	  /*if (strstr(modemString, "\n")) {
		  HAL_UART_Transmit(&huart1, modemString, modemStringLength, 0xFFFF);
		  modemStringLength = 0;
		  memset(modemString,0,100);
	  }*/
	 if (step>=10) HAL_Delay(1000);
 8000b60:	4b17      	ldr	r3, [pc, #92]	; (8000bc0 <main+0x1a0>)
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	2b09      	cmp	r3, #9
 8000b66:	dd04      	ble.n	8000b72 <main+0x152>
 8000b68:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000b6c:	f001 f88a 	bl	8001c84 <HAL_Delay>
 8000b70:	e002      	b.n	8000b78 <main+0x158>
	 else HAL_Delay(250);
 8000b72:	20fa      	movs	r0, #250	; 0xfa
 8000b74:	f001 f886 	bl	8001c84 <HAL_Delay>

	  //HAL_UART_Transmit(&huart1,modemString,10,0xFFFF);
	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8000b78:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b7c:	4811      	ldr	r0, [pc, #68]	; (8000bc4 <main+0x1a4>)
 8000b7e:	f001 fde9 	bl	8002754 <HAL_GPIO_TogglePin>
	  if (ready) txATcommand();
 8000b82:	e790      	b.n	8000aa6 <main+0x86>
 8000b84:	20000000 	.word	0x20000000
 8000b88:	08004ccc 	.word	0x08004ccc
 8000b8c:	08004ce0 	.word	0x08004ce0
 8000b90:	200000f8 	.word	0x200000f8
 8000b94:	08004ce8 	.word	0x08004ce8
 8000b98:	20000140 	.word	0x20000140
 8000b9c:	20000008 	.word	0x20000008
 8000ba0:	2000079c 	.word	0x2000079c
 8000ba4:	2000000c 	.word	0x2000000c
 8000ba8:	08004b78 	.word	0x08004b78
 8000bac:	20000298 	.word	0x20000298
 8000bb0:	20000690 	.word	0x20000690
 8000bb4:	20000594 	.word	0x20000594
 8000bb8:	20000498 	.word	0x20000498
 8000bbc:	20000798 	.word	0x20000798
 8000bc0:	20000794 	.word	0x20000794
 8000bc4:	40011000 	.word	0x40011000

08000bc8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b090      	sub	sp, #64	; 0x40
 8000bcc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bce:	f107 0318 	add.w	r3, r7, #24
 8000bd2:	2228      	movs	r2, #40	; 0x28
 8000bd4:	2100      	movs	r1, #0
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	f003 fb12 	bl	8004200 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bdc:	1d3b      	adds	r3, r7, #4
 8000bde:	2200      	movs	r2, #0
 8000be0:	601a      	str	r2, [r3, #0]
 8000be2:	605a      	str	r2, [r3, #4]
 8000be4:	609a      	str	r2, [r3, #8]
 8000be6:	60da      	str	r2, [r3, #12]
 8000be8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000bea:	2301      	movs	r3, #1
 8000bec:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000bee:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000bf2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000bf8:	2301      	movs	r3, #1
 8000bfa:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000bfc:	2302      	movs	r3, #2
 8000bfe:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c00:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c04:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000c06:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000c0a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c0c:	f107 0318 	add.w	r3, r7, #24
 8000c10:	4618      	mov	r0, r3
 8000c12:	f001 fefd 	bl	8002a10 <HAL_RCC_OscConfig>
 8000c16:	4603      	mov	r3, r0
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d001      	beq.n	8000c20 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000c1c:	f000 f92a 	bl	8000e74 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c20:	230f      	movs	r3, #15
 8000c22:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c24:	2302      	movs	r3, #2
 8000c26:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000c2c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c30:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c32:	2300      	movs	r3, #0
 8000c34:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000c36:	1d3b      	adds	r3, r7, #4
 8000c38:	2102      	movs	r1, #2
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	f002 f96a 	bl	8002f14 <HAL_RCC_ClockConfig>
 8000c40:	4603      	mov	r3, r0
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d001      	beq.n	8000c4a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000c46:	f000 f915 	bl	8000e74 <Error_Handler>
  }
}
 8000c4a:	bf00      	nop
 8000c4c:	3740      	adds	r7, #64	; 0x40
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	bd80      	pop	{r7, pc}
	...

08000c54 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000c58:	4b12      	ldr	r3, [pc, #72]	; (8000ca4 <MX_I2C1_Init+0x50>)
 8000c5a:	4a13      	ldr	r2, [pc, #76]	; (8000ca8 <MX_I2C1_Init+0x54>)
 8000c5c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000c5e:	4b11      	ldr	r3, [pc, #68]	; (8000ca4 <MX_I2C1_Init+0x50>)
 8000c60:	4a12      	ldr	r2, [pc, #72]	; (8000cac <MX_I2C1_Init+0x58>)
 8000c62:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000c64:	4b0f      	ldr	r3, [pc, #60]	; (8000ca4 <MX_I2C1_Init+0x50>)
 8000c66:	2200      	movs	r2, #0
 8000c68:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000c6a:	4b0e      	ldr	r3, [pc, #56]	; (8000ca4 <MX_I2C1_Init+0x50>)
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000c70:	4b0c      	ldr	r3, [pc, #48]	; (8000ca4 <MX_I2C1_Init+0x50>)
 8000c72:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000c76:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000c78:	4b0a      	ldr	r3, [pc, #40]	; (8000ca4 <MX_I2C1_Init+0x50>)
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000c7e:	4b09      	ldr	r3, [pc, #36]	; (8000ca4 <MX_I2C1_Init+0x50>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000c84:	4b07      	ldr	r3, [pc, #28]	; (8000ca4 <MX_I2C1_Init+0x50>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000c8a:	4b06      	ldr	r3, [pc, #24]	; (8000ca4 <MX_I2C1_Init+0x50>)
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000c90:	4804      	ldr	r0, [pc, #16]	; (8000ca4 <MX_I2C1_Init+0x50>)
 8000c92:	f001 fd79 	bl	8002788 <HAL_I2C_Init>
 8000c96:	4603      	mov	r3, r0
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d001      	beq.n	8000ca0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000c9c:	f000 f8ea 	bl	8000e74 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000ca0:	bf00      	nop
 8000ca2:	bd80      	pop	{r7, pc}
 8000ca4:	200000a4 	.word	0x200000a4
 8000ca8:	40005400 	.word	0x40005400
 8000cac:	000186a0 	.word	0x000186a0

08000cb0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000cb4:	4b11      	ldr	r3, [pc, #68]	; (8000cfc <MX_USART1_UART_Init+0x4c>)
 8000cb6:	4a12      	ldr	r2, [pc, #72]	; (8000d00 <MX_USART1_UART_Init+0x50>)
 8000cb8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000cba:	4b10      	ldr	r3, [pc, #64]	; (8000cfc <MX_USART1_UART_Init+0x4c>)
 8000cbc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000cc0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000cc2:	4b0e      	ldr	r3, [pc, #56]	; (8000cfc <MX_USART1_UART_Init+0x4c>)
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000cc8:	4b0c      	ldr	r3, [pc, #48]	; (8000cfc <MX_USART1_UART_Init+0x4c>)
 8000cca:	2200      	movs	r2, #0
 8000ccc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000cce:	4b0b      	ldr	r3, [pc, #44]	; (8000cfc <MX_USART1_UART_Init+0x4c>)
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000cd4:	4b09      	ldr	r3, [pc, #36]	; (8000cfc <MX_USART1_UART_Init+0x4c>)
 8000cd6:	220c      	movs	r2, #12
 8000cd8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000cda:	4b08      	ldr	r3, [pc, #32]	; (8000cfc <MX_USART1_UART_Init+0x4c>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ce0:	4b06      	ldr	r3, [pc, #24]	; (8000cfc <MX_USART1_UART_Init+0x4c>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000ce6:	4805      	ldr	r0, [pc, #20]	; (8000cfc <MX_USART1_UART_Init+0x4c>)
 8000ce8:	f002 faa2 	bl	8003230 <HAL_UART_Init>
 8000cec:	4603      	mov	r3, r0
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d001      	beq.n	8000cf6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000cf2:	f000 f8bf 	bl	8000e74 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000cf6:	bf00      	nop
 8000cf8:	bd80      	pop	{r7, pc}
 8000cfa:	bf00      	nop
 8000cfc:	200000f8 	.word	0x200000f8
 8000d00:	40013800 	.word	0x40013800

08000d04 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000d08:	4b11      	ldr	r3, [pc, #68]	; (8000d50 <MX_USART2_UART_Init+0x4c>)
 8000d0a:	4a12      	ldr	r2, [pc, #72]	; (8000d54 <MX_USART2_UART_Init+0x50>)
 8000d0c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000d0e:	4b10      	ldr	r3, [pc, #64]	; (8000d50 <MX_USART2_UART_Init+0x4c>)
 8000d10:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000d14:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000d16:	4b0e      	ldr	r3, [pc, #56]	; (8000d50 <MX_USART2_UART_Init+0x4c>)
 8000d18:	2200      	movs	r2, #0
 8000d1a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000d1c:	4b0c      	ldr	r3, [pc, #48]	; (8000d50 <MX_USART2_UART_Init+0x4c>)
 8000d1e:	2200      	movs	r2, #0
 8000d20:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000d22:	4b0b      	ldr	r3, [pc, #44]	; (8000d50 <MX_USART2_UART_Init+0x4c>)
 8000d24:	2200      	movs	r2, #0
 8000d26:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000d28:	4b09      	ldr	r3, [pc, #36]	; (8000d50 <MX_USART2_UART_Init+0x4c>)
 8000d2a:	220c      	movs	r2, #12
 8000d2c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d2e:	4b08      	ldr	r3, [pc, #32]	; (8000d50 <MX_USART2_UART_Init+0x4c>)
 8000d30:	2200      	movs	r2, #0
 8000d32:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d34:	4b06      	ldr	r3, [pc, #24]	; (8000d50 <MX_USART2_UART_Init+0x4c>)
 8000d36:	2200      	movs	r2, #0
 8000d38:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000d3a:	4805      	ldr	r0, [pc, #20]	; (8000d50 <MX_USART2_UART_Init+0x4c>)
 8000d3c:	f002 fa78 	bl	8003230 <HAL_UART_Init>
 8000d40:	4603      	mov	r3, r0
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d001      	beq.n	8000d4a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000d46:	f000 f895 	bl	8000e74 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000d4a:	bf00      	nop
 8000d4c:	bd80      	pop	{r7, pc}
 8000d4e:	bf00      	nop
 8000d50:	20000140 	.word	0x20000140
 8000d54:	40004400 	.word	0x40004400

08000d58 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b082      	sub	sp, #8
 8000d5c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000d5e:	4b18      	ldr	r3, [pc, #96]	; (8000dc0 <MX_DMA_Init+0x68>)
 8000d60:	695b      	ldr	r3, [r3, #20]
 8000d62:	4a17      	ldr	r2, [pc, #92]	; (8000dc0 <MX_DMA_Init+0x68>)
 8000d64:	f043 0301 	orr.w	r3, r3, #1
 8000d68:	6153      	str	r3, [r2, #20]
 8000d6a:	4b15      	ldr	r3, [pc, #84]	; (8000dc0 <MX_DMA_Init+0x68>)
 8000d6c:	695b      	ldr	r3, [r3, #20]
 8000d6e:	f003 0301 	and.w	r3, r3, #1
 8000d72:	607b      	str	r3, [r7, #4]
 8000d74:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8000d76:	2200      	movs	r2, #0
 8000d78:	2100      	movs	r1, #0
 8000d7a:	200e      	movs	r0, #14
 8000d7c:	f001 f87d 	bl	8001e7a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8000d80:	200e      	movs	r0, #14
 8000d82:	f001 f896 	bl	8001eb2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8000d86:	2200      	movs	r2, #0
 8000d88:	2100      	movs	r1, #0
 8000d8a:	200f      	movs	r0, #15
 8000d8c:	f001 f875 	bl	8001e7a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8000d90:	200f      	movs	r0, #15
 8000d92:	f001 f88e 	bl	8001eb2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8000d96:	2200      	movs	r2, #0
 8000d98:	2100      	movs	r1, #0
 8000d9a:	2010      	movs	r0, #16
 8000d9c:	f001 f86d 	bl	8001e7a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8000da0:	2010      	movs	r0, #16
 8000da2:	f001 f886 	bl	8001eb2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 8000da6:	2200      	movs	r2, #0
 8000da8:	2100      	movs	r1, #0
 8000daa:	2011      	movs	r0, #17
 8000dac:	f001 f865 	bl	8001e7a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8000db0:	2011      	movs	r0, #17
 8000db2:	f001 f87e 	bl	8001eb2 <HAL_NVIC_EnableIRQ>

}
 8000db6:	bf00      	nop
 8000db8:	3708      	adds	r7, #8
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bd80      	pop	{r7, pc}
 8000dbe:	bf00      	nop
 8000dc0:	40021000 	.word	0x40021000

08000dc4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b088      	sub	sp, #32
 8000dc8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dca:	f107 0310 	add.w	r3, r7, #16
 8000dce:	2200      	movs	r2, #0
 8000dd0:	601a      	str	r2, [r3, #0]
 8000dd2:	605a      	str	r2, [r3, #4]
 8000dd4:	609a      	str	r2, [r3, #8]
 8000dd6:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000dd8:	4b24      	ldr	r3, [pc, #144]	; (8000e6c <MX_GPIO_Init+0xa8>)
 8000dda:	699b      	ldr	r3, [r3, #24]
 8000ddc:	4a23      	ldr	r2, [pc, #140]	; (8000e6c <MX_GPIO_Init+0xa8>)
 8000dde:	f043 0310 	orr.w	r3, r3, #16
 8000de2:	6193      	str	r3, [r2, #24]
 8000de4:	4b21      	ldr	r3, [pc, #132]	; (8000e6c <MX_GPIO_Init+0xa8>)
 8000de6:	699b      	ldr	r3, [r3, #24]
 8000de8:	f003 0310 	and.w	r3, r3, #16
 8000dec:	60fb      	str	r3, [r7, #12]
 8000dee:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000df0:	4b1e      	ldr	r3, [pc, #120]	; (8000e6c <MX_GPIO_Init+0xa8>)
 8000df2:	699b      	ldr	r3, [r3, #24]
 8000df4:	4a1d      	ldr	r2, [pc, #116]	; (8000e6c <MX_GPIO_Init+0xa8>)
 8000df6:	f043 0320 	orr.w	r3, r3, #32
 8000dfa:	6193      	str	r3, [r2, #24]
 8000dfc:	4b1b      	ldr	r3, [pc, #108]	; (8000e6c <MX_GPIO_Init+0xa8>)
 8000dfe:	699b      	ldr	r3, [r3, #24]
 8000e00:	f003 0320 	and.w	r3, r3, #32
 8000e04:	60bb      	str	r3, [r7, #8]
 8000e06:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e08:	4b18      	ldr	r3, [pc, #96]	; (8000e6c <MX_GPIO_Init+0xa8>)
 8000e0a:	699b      	ldr	r3, [r3, #24]
 8000e0c:	4a17      	ldr	r2, [pc, #92]	; (8000e6c <MX_GPIO_Init+0xa8>)
 8000e0e:	f043 0304 	orr.w	r3, r3, #4
 8000e12:	6193      	str	r3, [r2, #24]
 8000e14:	4b15      	ldr	r3, [pc, #84]	; (8000e6c <MX_GPIO_Init+0xa8>)
 8000e16:	699b      	ldr	r3, [r3, #24]
 8000e18:	f003 0304 	and.w	r3, r3, #4
 8000e1c:	607b      	str	r3, [r7, #4]
 8000e1e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e20:	4b12      	ldr	r3, [pc, #72]	; (8000e6c <MX_GPIO_Init+0xa8>)
 8000e22:	699b      	ldr	r3, [r3, #24]
 8000e24:	4a11      	ldr	r2, [pc, #68]	; (8000e6c <MX_GPIO_Init+0xa8>)
 8000e26:	f043 0308 	orr.w	r3, r3, #8
 8000e2a:	6193      	str	r3, [r2, #24]
 8000e2c:	4b0f      	ldr	r3, [pc, #60]	; (8000e6c <MX_GPIO_Init+0xa8>)
 8000e2e:	699b      	ldr	r3, [r3, #24]
 8000e30:	f003 0308 	and.w	r3, r3, #8
 8000e34:	603b      	str	r3, [r7, #0]
 8000e36:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000e38:	2200      	movs	r2, #0
 8000e3a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e3e:	480c      	ldr	r0, [pc, #48]	; (8000e70 <MX_GPIO_Init+0xac>)
 8000e40:	f001 fc70 	bl	8002724 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000e44:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e48:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e4a:	2301      	movs	r3, #1
 8000e4c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000e4e:	2302      	movs	r3, #2
 8000e50:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e52:	2303      	movs	r3, #3
 8000e54:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e56:	f107 0310 	add.w	r3, r7, #16
 8000e5a:	4619      	mov	r1, r3
 8000e5c:	4804      	ldr	r0, [pc, #16]	; (8000e70 <MX_GPIO_Init+0xac>)
 8000e5e:	f001 fae5 	bl	800242c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000e62:	bf00      	nop
 8000e64:	3720      	adds	r7, #32
 8000e66:	46bd      	mov	sp, r7
 8000e68:	bd80      	pop	{r7, pc}
 8000e6a:	bf00      	nop
 8000e6c:	40021000 	.word	0x40021000
 8000e70:	40011000 	.word	0x40011000

08000e74 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e74:	b480      	push	{r7}
 8000e76:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e78:	b672      	cpsid	i
}
 8000e7a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e7c:	e7fe      	b.n	8000e7c <Error_Handler+0x8>
	...

08000e80 <SSD1306_Init>:
} SSD1306_t;

/* Private variable */
static SSD1306_t SSD1306;

uint8_t SSD1306_Init(void) {
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b082      	sub	sp, #8
 8000e84:	af00      	add	r7, sp, #0

	/* Init I2C */
	//ssd1306_I2C_Init();
	
	/* Check if LCD connected to I2C */
	if (!ssd1306_I2C_IsDeviceConnected(SSD1306_I2C, SSD1306_I2C_ADDR)) {
 8000e86:	2178      	movs	r1, #120	; 0x78
 8000e88:	4866      	ldr	r0, [pc, #408]	; (8001024 <SSD1306_Init+0x1a4>)
 8000e8a:	f000 fc17 	bl	80016bc <ssd1306_I2C_IsDeviceConnected>
 8000e8e:	4603      	mov	r3, r0
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d101      	bne.n	8000e98 <SSD1306_Init+0x18>
		/* Return false */
		return 0;
 8000e94:	2300      	movs	r3, #0
 8000e96:	e0c0      	b.n	800101a <SSD1306_Init+0x19a>
	}
	
	/* A little delay */
	uint32_t p = 2500;
 8000e98:	f640 13c4 	movw	r3, #2500	; 0x9c4
 8000e9c:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000e9e:	e002      	b.n	8000ea6 <SSD1306_Init+0x26>
		p--;
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	3b01      	subs	r3, #1
 8000ea4:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d1f9      	bne.n	8000ea0 <SSD1306_Init+0x20>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 8000eac:	23ae      	movs	r3, #174	; 0xae
 8000eae:	2200      	movs	r2, #0
 8000eb0:	2178      	movs	r1, #120	; 0x78
 8000eb2:	485c      	ldr	r0, [pc, #368]	; (8001024 <SSD1306_Init+0x1a4>)
 8000eb4:	f000 fbb0 	bl	8001618 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 8000eb8:	2320      	movs	r3, #32
 8000eba:	2200      	movs	r2, #0
 8000ebc:	2178      	movs	r1, #120	; 0x78
 8000ebe:	4859      	ldr	r0, [pc, #356]	; (8001024 <SSD1306_Init+0x1a4>)
 8000ec0:	f000 fbaa 	bl	8001618 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8000ec4:	2310      	movs	r3, #16
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	2178      	movs	r1, #120	; 0x78
 8000eca:	4856      	ldr	r0, [pc, #344]	; (8001024 <SSD1306_Init+0x1a4>)
 8000ecc:	f000 fba4 	bl	8001618 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8000ed0:	23b0      	movs	r3, #176	; 0xb0
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	2178      	movs	r1, #120	; 0x78
 8000ed6:	4853      	ldr	r0, [pc, #332]	; (8001024 <SSD1306_Init+0x1a4>)
 8000ed8:	f000 fb9e 	bl	8001618 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 8000edc:	23c8      	movs	r3, #200	; 0xc8
 8000ede:	2200      	movs	r2, #0
 8000ee0:	2178      	movs	r1, #120	; 0x78
 8000ee2:	4850      	ldr	r0, [pc, #320]	; (8001024 <SSD1306_Init+0x1a4>)
 8000ee4:	f000 fb98 	bl	8001618 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8000ee8:	2300      	movs	r3, #0
 8000eea:	2200      	movs	r2, #0
 8000eec:	2178      	movs	r1, #120	; 0x78
 8000eee:	484d      	ldr	r0, [pc, #308]	; (8001024 <SSD1306_Init+0x1a4>)
 8000ef0:	f000 fb92 	bl	8001618 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 8000ef4:	2310      	movs	r3, #16
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	2178      	movs	r1, #120	; 0x78
 8000efa:	484a      	ldr	r0, [pc, #296]	; (8001024 <SSD1306_Init+0x1a4>)
 8000efc:	f000 fb8c 	bl	8001618 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8000f00:	2340      	movs	r3, #64	; 0x40
 8000f02:	2200      	movs	r2, #0
 8000f04:	2178      	movs	r1, #120	; 0x78
 8000f06:	4847      	ldr	r0, [pc, #284]	; (8001024 <SSD1306_Init+0x1a4>)
 8000f08:	f000 fb86 	bl	8001618 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8000f0c:	2381      	movs	r3, #129	; 0x81
 8000f0e:	2200      	movs	r2, #0
 8000f10:	2178      	movs	r1, #120	; 0x78
 8000f12:	4844      	ldr	r0, [pc, #272]	; (8001024 <SSD1306_Init+0x1a4>)
 8000f14:	f000 fb80 	bl	8001618 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8000f18:	23ff      	movs	r3, #255	; 0xff
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	2178      	movs	r1, #120	; 0x78
 8000f1e:	4841      	ldr	r0, [pc, #260]	; (8001024 <SSD1306_Init+0x1a4>)
 8000f20:	f000 fb7a 	bl	8001618 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 8000f24:	23a1      	movs	r3, #161	; 0xa1
 8000f26:	2200      	movs	r2, #0
 8000f28:	2178      	movs	r1, #120	; 0x78
 8000f2a:	483e      	ldr	r0, [pc, #248]	; (8001024 <SSD1306_Init+0x1a4>)
 8000f2c:	f000 fb74 	bl	8001618 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8000f30:	23a6      	movs	r3, #166	; 0xa6
 8000f32:	2200      	movs	r2, #0
 8000f34:	2178      	movs	r1, #120	; 0x78
 8000f36:	483b      	ldr	r0, [pc, #236]	; (8001024 <SSD1306_Init+0x1a4>)
 8000f38:	f000 fb6e 	bl	8001618 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 8000f3c:	23a8      	movs	r3, #168	; 0xa8
 8000f3e:	2200      	movs	r2, #0
 8000f40:	2178      	movs	r1, #120	; 0x78
 8000f42:	4838      	ldr	r0, [pc, #224]	; (8001024 <SSD1306_Init+0x1a4>)
 8000f44:	f000 fb68 	bl	8001618 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8000f48:	233f      	movs	r3, #63	; 0x3f
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	2178      	movs	r1, #120	; 0x78
 8000f4e:	4835      	ldr	r0, [pc, #212]	; (8001024 <SSD1306_Init+0x1a4>)
 8000f50:	f000 fb62 	bl	8001618 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8000f54:	23a4      	movs	r3, #164	; 0xa4
 8000f56:	2200      	movs	r2, #0
 8000f58:	2178      	movs	r1, #120	; 0x78
 8000f5a:	4832      	ldr	r0, [pc, #200]	; (8001024 <SSD1306_Init+0x1a4>)
 8000f5c:	f000 fb5c 	bl	8001618 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8000f60:	23d3      	movs	r3, #211	; 0xd3
 8000f62:	2200      	movs	r2, #0
 8000f64:	2178      	movs	r1, #120	; 0x78
 8000f66:	482f      	ldr	r0, [pc, #188]	; (8001024 <SSD1306_Init+0x1a4>)
 8000f68:	f000 fb56 	bl	8001618 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	2200      	movs	r2, #0
 8000f70:	2178      	movs	r1, #120	; 0x78
 8000f72:	482c      	ldr	r0, [pc, #176]	; (8001024 <SSD1306_Init+0x1a4>)
 8000f74:	f000 fb50 	bl	8001618 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8000f78:	23d5      	movs	r3, #213	; 0xd5
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	2178      	movs	r1, #120	; 0x78
 8000f7e:	4829      	ldr	r0, [pc, #164]	; (8001024 <SSD1306_Init+0x1a4>)
 8000f80:	f000 fb4a 	bl	8001618 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 8000f84:	23f0      	movs	r3, #240	; 0xf0
 8000f86:	2200      	movs	r2, #0
 8000f88:	2178      	movs	r1, #120	; 0x78
 8000f8a:	4826      	ldr	r0, [pc, #152]	; (8001024 <SSD1306_Init+0x1a4>)
 8000f8c:	f000 fb44 	bl	8001618 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8000f90:	23d9      	movs	r3, #217	; 0xd9
 8000f92:	2200      	movs	r2, #0
 8000f94:	2178      	movs	r1, #120	; 0x78
 8000f96:	4823      	ldr	r0, [pc, #140]	; (8001024 <SSD1306_Init+0x1a4>)
 8000f98:	f000 fb3e 	bl	8001618 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 8000f9c:	2322      	movs	r3, #34	; 0x22
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	2178      	movs	r1, #120	; 0x78
 8000fa2:	4820      	ldr	r0, [pc, #128]	; (8001024 <SSD1306_Init+0x1a4>)
 8000fa4:	f000 fb38 	bl	8001618 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8000fa8:	23da      	movs	r3, #218	; 0xda
 8000faa:	2200      	movs	r2, #0
 8000fac:	2178      	movs	r1, #120	; 0x78
 8000fae:	481d      	ldr	r0, [pc, #116]	; (8001024 <SSD1306_Init+0x1a4>)
 8000fb0:	f000 fb32 	bl	8001618 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 8000fb4:	2312      	movs	r3, #18
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	2178      	movs	r1, #120	; 0x78
 8000fba:	481a      	ldr	r0, [pc, #104]	; (8001024 <SSD1306_Init+0x1a4>)
 8000fbc:	f000 fb2c 	bl	8001618 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8000fc0:	23db      	movs	r3, #219	; 0xdb
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	2178      	movs	r1, #120	; 0x78
 8000fc6:	4817      	ldr	r0, [pc, #92]	; (8001024 <SSD1306_Init+0x1a4>)
 8000fc8:	f000 fb26 	bl	8001618 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 8000fcc:	2320      	movs	r3, #32
 8000fce:	2200      	movs	r2, #0
 8000fd0:	2178      	movs	r1, #120	; 0x78
 8000fd2:	4814      	ldr	r0, [pc, #80]	; (8001024 <SSD1306_Init+0x1a4>)
 8000fd4:	f000 fb20 	bl	8001618 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8000fd8:	238d      	movs	r3, #141	; 0x8d
 8000fda:	2200      	movs	r2, #0
 8000fdc:	2178      	movs	r1, #120	; 0x78
 8000fde:	4811      	ldr	r0, [pc, #68]	; (8001024 <SSD1306_Init+0x1a4>)
 8000fe0:	f000 fb1a 	bl	8001618 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 8000fe4:	2314      	movs	r3, #20
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	2178      	movs	r1, #120	; 0x78
 8000fea:	480e      	ldr	r0, [pc, #56]	; (8001024 <SSD1306_Init+0x1a4>)
 8000fec:	f000 fb14 	bl	8001618 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8000ff0:	23af      	movs	r3, #175	; 0xaf
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	2178      	movs	r1, #120	; 0x78
 8000ff6:	480b      	ldr	r0, [pc, #44]	; (8001024 <SSD1306_Init+0x1a4>)
 8000ff8:	f000 fb0e 	bl	8001618 <ssd1306_I2C_Write>
	
	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8000ffc:	2000      	movs	r0, #0
 8000ffe:	f000 f849 	bl	8001094 <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen();
 8001002:	f000 f813 	bl	800102c <SSD1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 8001006:	4b08      	ldr	r3, [pc, #32]	; (8001028 <SSD1306_Init+0x1a8>)
 8001008:	2200      	movs	r2, #0
 800100a:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 800100c:	4b06      	ldr	r3, [pc, #24]	; (8001028 <SSD1306_Init+0x1a8>)
 800100e:	2200      	movs	r2, #0
 8001010:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 8001012:	4b05      	ldr	r3, [pc, #20]	; (8001028 <SSD1306_Init+0x1a8>)
 8001014:	2201      	movs	r2, #1
 8001016:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 8001018:	2301      	movs	r3, #1
}
 800101a:	4618      	mov	r0, r3
 800101c:	3708      	adds	r7, #8
 800101e:	46bd      	mov	sp, r7
 8001020:	bd80      	pop	{r7, pc}
 8001022:	bf00      	nop
 8001024:	40005400 	.word	0x40005400
 8001028:	20000ba0 	.word	0x20000ba0

0800102c <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 800102c:	b580      	push	{r7, lr}
 800102e:	b084      	sub	sp, #16
 8001030:	af02      	add	r7, sp, #8
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 8001032:	2300      	movs	r3, #0
 8001034:	71fb      	strb	r3, [r7, #7]
 8001036:	e021      	b.n	800107c <SSD1306_UpdateScreen+0x50>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8001038:	79fb      	ldrb	r3, [r7, #7]
 800103a:	3b50      	subs	r3, #80	; 0x50
 800103c:	b2db      	uxtb	r3, r3
 800103e:	2200      	movs	r2, #0
 8001040:	2178      	movs	r1, #120	; 0x78
 8001042:	4812      	ldr	r0, [pc, #72]	; (800108c <SSD1306_UpdateScreen+0x60>)
 8001044:	f000 fae8 	bl	8001618 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8001048:	2300      	movs	r3, #0
 800104a:	2200      	movs	r2, #0
 800104c:	2178      	movs	r1, #120	; 0x78
 800104e:	480f      	ldr	r0, [pc, #60]	; (800108c <SSD1306_UpdateScreen+0x60>)
 8001050:	f000 fae2 	bl	8001618 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 8001054:	2310      	movs	r3, #16
 8001056:	2200      	movs	r2, #0
 8001058:	2178      	movs	r1, #120	; 0x78
 800105a:	480c      	ldr	r0, [pc, #48]	; (800108c <SSD1306_UpdateScreen+0x60>)
 800105c:	f000 fadc 	bl	8001618 <ssd1306_I2C_Write>
		//HAL_UART_Transmit(&huart1, (uint8_t*) "I2C_Writ12\r\n", 12, 0xFFFF);
		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C, SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8001060:	79fb      	ldrb	r3, [r7, #7]
 8001062:	01db      	lsls	r3, r3, #7
 8001064:	4a0a      	ldr	r2, [pc, #40]	; (8001090 <SSD1306_UpdateScreen+0x64>)
 8001066:	4413      	add	r3, r2
 8001068:	2280      	movs	r2, #128	; 0x80
 800106a:	9200      	str	r2, [sp, #0]
 800106c:	2240      	movs	r2, #64	; 0x40
 800106e:	2178      	movs	r1, #120	; 0x78
 8001070:	4806      	ldr	r0, [pc, #24]	; (800108c <SSD1306_UpdateScreen+0x60>)
 8001072:	f000 fa14 	bl	800149e <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8001076:	79fb      	ldrb	r3, [r7, #7]
 8001078:	3301      	adds	r3, #1
 800107a:	71fb      	strb	r3, [r7, #7]
 800107c:	79fb      	ldrb	r3, [r7, #7]
 800107e:	2b07      	cmp	r3, #7
 8001080:	d9da      	bls.n	8001038 <SSD1306_UpdateScreen+0xc>
		//HAL_UART_Transmit(&huart1, (uint8_t*) "I2C_Writ13\r\n", 12, 0xFFFF);
	}
}
 8001082:	bf00      	nop
 8001084:	bf00      	nop
 8001086:	3708      	adds	r7, #8
 8001088:	46bd      	mov	sp, r7
 800108a:	bd80      	pop	{r7, pc}
 800108c:	40005400 	.word	0x40005400
 8001090:	200007a0 	.word	0x200007a0

08001094 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8001094:	b580      	push	{r7, lr}
 8001096:	b082      	sub	sp, #8
 8001098:	af00      	add	r7, sp, #0
 800109a:	4603      	mov	r3, r0
 800109c:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 800109e:	79fb      	ldrb	r3, [r7, #7]
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d101      	bne.n	80010a8 <SSD1306_Fill+0x14>
 80010a4:	2300      	movs	r3, #0
 80010a6:	e000      	b.n	80010aa <SSD1306_Fill+0x16>
 80010a8:	23ff      	movs	r3, #255	; 0xff
 80010aa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80010ae:	4619      	mov	r1, r3
 80010b0:	4803      	ldr	r0, [pc, #12]	; (80010c0 <SSD1306_Fill+0x2c>)
 80010b2:	f003 f8a5 	bl	8004200 <memset>
}
 80010b6:	bf00      	nop
 80010b8:	3708      	adds	r7, #8
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}
 80010be:	bf00      	nop
 80010c0:	200007a0 	.word	0x200007a0

080010c4 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 80010c4:	b480      	push	{r7}
 80010c6:	b083      	sub	sp, #12
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	4603      	mov	r3, r0
 80010cc:	80fb      	strh	r3, [r7, #6]
 80010ce:	460b      	mov	r3, r1
 80010d0:	80bb      	strh	r3, [r7, #4]
 80010d2:	4613      	mov	r3, r2
 80010d4:	70fb      	strb	r3, [r7, #3]
	if (
 80010d6:	88fb      	ldrh	r3, [r7, #6]
 80010d8:	2b7f      	cmp	r3, #127	; 0x7f
 80010da:	d848      	bhi.n	800116e <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 80010dc:	88bb      	ldrh	r3, [r7, #4]
 80010de:	2b3f      	cmp	r3, #63	; 0x3f
 80010e0:	d845      	bhi.n	800116e <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 80010e2:	4b25      	ldr	r3, [pc, #148]	; (8001178 <SSD1306_DrawPixel+0xb4>)
 80010e4:	791b      	ldrb	r3, [r3, #4]
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d006      	beq.n	80010f8 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 80010ea:	78fb      	ldrb	r3, [r7, #3]
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	bf0c      	ite	eq
 80010f0:	2301      	moveq	r3, #1
 80010f2:	2300      	movne	r3, #0
 80010f4:	b2db      	uxtb	r3, r3
 80010f6:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 80010f8:	78fb      	ldrb	r3, [r7, #3]
 80010fa:	2b01      	cmp	r3, #1
 80010fc:	d11a      	bne.n	8001134 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80010fe:	88fa      	ldrh	r2, [r7, #6]
 8001100:	88bb      	ldrh	r3, [r7, #4]
 8001102:	08db      	lsrs	r3, r3, #3
 8001104:	b298      	uxth	r0, r3
 8001106:	4603      	mov	r3, r0
 8001108:	01db      	lsls	r3, r3, #7
 800110a:	4413      	add	r3, r2
 800110c:	4a1b      	ldr	r2, [pc, #108]	; (800117c <SSD1306_DrawPixel+0xb8>)
 800110e:	5cd3      	ldrb	r3, [r2, r3]
 8001110:	b25a      	sxtb	r2, r3
 8001112:	88bb      	ldrh	r3, [r7, #4]
 8001114:	f003 0307 	and.w	r3, r3, #7
 8001118:	2101      	movs	r1, #1
 800111a:	fa01 f303 	lsl.w	r3, r1, r3
 800111e:	b25b      	sxtb	r3, r3
 8001120:	4313      	orrs	r3, r2
 8001122:	b259      	sxtb	r1, r3
 8001124:	88fa      	ldrh	r2, [r7, #6]
 8001126:	4603      	mov	r3, r0
 8001128:	01db      	lsls	r3, r3, #7
 800112a:	4413      	add	r3, r2
 800112c:	b2c9      	uxtb	r1, r1
 800112e:	4a13      	ldr	r2, [pc, #76]	; (800117c <SSD1306_DrawPixel+0xb8>)
 8001130:	54d1      	strb	r1, [r2, r3]
 8001132:	e01d      	b.n	8001170 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001134:	88fa      	ldrh	r2, [r7, #6]
 8001136:	88bb      	ldrh	r3, [r7, #4]
 8001138:	08db      	lsrs	r3, r3, #3
 800113a:	b298      	uxth	r0, r3
 800113c:	4603      	mov	r3, r0
 800113e:	01db      	lsls	r3, r3, #7
 8001140:	4413      	add	r3, r2
 8001142:	4a0e      	ldr	r2, [pc, #56]	; (800117c <SSD1306_DrawPixel+0xb8>)
 8001144:	5cd3      	ldrb	r3, [r2, r3]
 8001146:	b25a      	sxtb	r2, r3
 8001148:	88bb      	ldrh	r3, [r7, #4]
 800114a:	f003 0307 	and.w	r3, r3, #7
 800114e:	2101      	movs	r1, #1
 8001150:	fa01 f303 	lsl.w	r3, r1, r3
 8001154:	b25b      	sxtb	r3, r3
 8001156:	43db      	mvns	r3, r3
 8001158:	b25b      	sxtb	r3, r3
 800115a:	4013      	ands	r3, r2
 800115c:	b259      	sxtb	r1, r3
 800115e:	88fa      	ldrh	r2, [r7, #6]
 8001160:	4603      	mov	r3, r0
 8001162:	01db      	lsls	r3, r3, #7
 8001164:	4413      	add	r3, r2
 8001166:	b2c9      	uxtb	r1, r1
 8001168:	4a04      	ldr	r2, [pc, #16]	; (800117c <SSD1306_DrawPixel+0xb8>)
 800116a:	54d1      	strb	r1, [r2, r3]
 800116c:	e000      	b.n	8001170 <SSD1306_DrawPixel+0xac>
		return;
 800116e:	bf00      	nop
	}
}
 8001170:	370c      	adds	r7, #12
 8001172:	46bd      	mov	sp, r7
 8001174:	bc80      	pop	{r7}
 8001176:	4770      	bx	lr
 8001178:	20000ba0 	.word	0x20000ba0
 800117c:	200007a0 	.word	0x200007a0

08001180 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8001180:	b480      	push	{r7}
 8001182:	b083      	sub	sp, #12
 8001184:	af00      	add	r7, sp, #0
 8001186:	4603      	mov	r3, r0
 8001188:	460a      	mov	r2, r1
 800118a:	80fb      	strh	r3, [r7, #6]
 800118c:	4613      	mov	r3, r2
 800118e:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8001190:	4a05      	ldr	r2, [pc, #20]	; (80011a8 <SSD1306_GotoXY+0x28>)
 8001192:	88fb      	ldrh	r3, [r7, #6]
 8001194:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 8001196:	4a04      	ldr	r2, [pc, #16]	; (80011a8 <SSD1306_GotoXY+0x28>)
 8001198:	88bb      	ldrh	r3, [r7, #4]
 800119a:	8053      	strh	r3, [r2, #2]
}
 800119c:	bf00      	nop
 800119e:	370c      	adds	r7, #12
 80011a0:	46bd      	mov	sp, r7
 80011a2:	bc80      	pop	{r7}
 80011a4:	4770      	bx	lr
 80011a6:	bf00      	nop
 80011a8:	20000ba0 	.word	0x20000ba0

080011ac <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b086      	sub	sp, #24
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	4603      	mov	r3, r0
 80011b4:	6039      	str	r1, [r7, #0]
 80011b6:	71fb      	strb	r3, [r7, #7]
 80011b8:	4613      	mov	r3, r2
 80011ba:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 80011bc:	4b3a      	ldr	r3, [pc, #232]	; (80012a8 <SSD1306_Putc+0xfc>)
 80011be:	881b      	ldrh	r3, [r3, #0]
 80011c0:	461a      	mov	r2, r3
 80011c2:	683b      	ldr	r3, [r7, #0]
 80011c4:	781b      	ldrb	r3, [r3, #0]
 80011c6:	4413      	add	r3, r2
	if (
 80011c8:	2b7f      	cmp	r3, #127	; 0x7f
 80011ca:	dc07      	bgt.n	80011dc <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 80011cc:	4b36      	ldr	r3, [pc, #216]	; (80012a8 <SSD1306_Putc+0xfc>)
 80011ce:	885b      	ldrh	r3, [r3, #2]
 80011d0:	461a      	mov	r2, r3
 80011d2:	683b      	ldr	r3, [r7, #0]
 80011d4:	785b      	ldrb	r3, [r3, #1]
 80011d6:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 80011d8:	2b3f      	cmp	r3, #63	; 0x3f
 80011da:	dd01      	ble.n	80011e0 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 80011dc:	2300      	movs	r3, #0
 80011de:	e05e      	b.n	800129e <SSD1306_Putc+0xf2>
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 80011e0:	2300      	movs	r3, #0
 80011e2:	617b      	str	r3, [r7, #20]
 80011e4:	e04b      	b.n	800127e <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 80011e6:	683b      	ldr	r3, [r7, #0]
 80011e8:	685a      	ldr	r2, [r3, #4]
 80011ea:	79fb      	ldrb	r3, [r7, #7]
 80011ec:	3b20      	subs	r3, #32
 80011ee:	6839      	ldr	r1, [r7, #0]
 80011f0:	7849      	ldrb	r1, [r1, #1]
 80011f2:	fb01 f303 	mul.w	r3, r1, r3
 80011f6:	4619      	mov	r1, r3
 80011f8:	697b      	ldr	r3, [r7, #20]
 80011fa:	440b      	add	r3, r1
 80011fc:	005b      	lsls	r3, r3, #1
 80011fe:	4413      	add	r3, r2
 8001200:	881b      	ldrh	r3, [r3, #0]
 8001202:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8001204:	2300      	movs	r3, #0
 8001206:	613b      	str	r3, [r7, #16]
 8001208:	e030      	b.n	800126c <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 800120a:	68fa      	ldr	r2, [r7, #12]
 800120c:	693b      	ldr	r3, [r7, #16]
 800120e:	fa02 f303 	lsl.w	r3, r2, r3
 8001212:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001216:	2b00      	cmp	r3, #0
 8001218:	d010      	beq.n	800123c <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 800121a:	4b23      	ldr	r3, [pc, #140]	; (80012a8 <SSD1306_Putc+0xfc>)
 800121c:	881a      	ldrh	r2, [r3, #0]
 800121e:	693b      	ldr	r3, [r7, #16]
 8001220:	b29b      	uxth	r3, r3
 8001222:	4413      	add	r3, r2
 8001224:	b298      	uxth	r0, r3
 8001226:	4b20      	ldr	r3, [pc, #128]	; (80012a8 <SSD1306_Putc+0xfc>)
 8001228:	885a      	ldrh	r2, [r3, #2]
 800122a:	697b      	ldr	r3, [r7, #20]
 800122c:	b29b      	uxth	r3, r3
 800122e:	4413      	add	r3, r2
 8001230:	b29b      	uxth	r3, r3
 8001232:	79ba      	ldrb	r2, [r7, #6]
 8001234:	4619      	mov	r1, r3
 8001236:	f7ff ff45 	bl	80010c4 <SSD1306_DrawPixel>
 800123a:	e014      	b.n	8001266 <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 800123c:	4b1a      	ldr	r3, [pc, #104]	; (80012a8 <SSD1306_Putc+0xfc>)
 800123e:	881a      	ldrh	r2, [r3, #0]
 8001240:	693b      	ldr	r3, [r7, #16]
 8001242:	b29b      	uxth	r3, r3
 8001244:	4413      	add	r3, r2
 8001246:	b298      	uxth	r0, r3
 8001248:	4b17      	ldr	r3, [pc, #92]	; (80012a8 <SSD1306_Putc+0xfc>)
 800124a:	885a      	ldrh	r2, [r3, #2]
 800124c:	697b      	ldr	r3, [r7, #20]
 800124e:	b29b      	uxth	r3, r3
 8001250:	4413      	add	r3, r2
 8001252:	b299      	uxth	r1, r3
 8001254:	79bb      	ldrb	r3, [r7, #6]
 8001256:	2b00      	cmp	r3, #0
 8001258:	bf0c      	ite	eq
 800125a:	2301      	moveq	r3, #1
 800125c:	2300      	movne	r3, #0
 800125e:	b2db      	uxtb	r3, r3
 8001260:	461a      	mov	r2, r3
 8001262:	f7ff ff2f 	bl	80010c4 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8001266:	693b      	ldr	r3, [r7, #16]
 8001268:	3301      	adds	r3, #1
 800126a:	613b      	str	r3, [r7, #16]
 800126c:	683b      	ldr	r3, [r7, #0]
 800126e:	781b      	ldrb	r3, [r3, #0]
 8001270:	461a      	mov	r2, r3
 8001272:	693b      	ldr	r3, [r7, #16]
 8001274:	4293      	cmp	r3, r2
 8001276:	d3c8      	bcc.n	800120a <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8001278:	697b      	ldr	r3, [r7, #20]
 800127a:	3301      	adds	r3, #1
 800127c:	617b      	str	r3, [r7, #20]
 800127e:	683b      	ldr	r3, [r7, #0]
 8001280:	785b      	ldrb	r3, [r3, #1]
 8001282:	461a      	mov	r2, r3
 8001284:	697b      	ldr	r3, [r7, #20]
 8001286:	4293      	cmp	r3, r2
 8001288:	d3ad      	bcc.n	80011e6 <SSD1306_Putc+0x3a>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 800128a:	4b07      	ldr	r3, [pc, #28]	; (80012a8 <SSD1306_Putc+0xfc>)
 800128c:	881a      	ldrh	r2, [r3, #0]
 800128e:	683b      	ldr	r3, [r7, #0]
 8001290:	781b      	ldrb	r3, [r3, #0]
 8001292:	b29b      	uxth	r3, r3
 8001294:	4413      	add	r3, r2
 8001296:	b29a      	uxth	r2, r3
 8001298:	4b03      	ldr	r3, [pc, #12]	; (80012a8 <SSD1306_Putc+0xfc>)
 800129a:	801a      	strh	r2, [r3, #0]
	
	/* Return character written */
	return ch;
 800129c:	79fb      	ldrb	r3, [r7, #7]
}
 800129e:	4618      	mov	r0, r3
 80012a0:	3718      	adds	r7, #24
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bd80      	pop	{r7, pc}
 80012a6:	bf00      	nop
 80012a8:	20000ba0 	.word	0x20000ba0

080012ac <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b084      	sub	sp, #16
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	60f8      	str	r0, [r7, #12]
 80012b4:	60b9      	str	r1, [r7, #8]
 80012b6:	4613      	mov	r3, r2
 80012b8:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 80012ba:	e012      	b.n	80012e2 <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	781b      	ldrb	r3, [r3, #0]
 80012c0:	79fa      	ldrb	r2, [r7, #7]
 80012c2:	68b9      	ldr	r1, [r7, #8]
 80012c4:	4618      	mov	r0, r3
 80012c6:	f7ff ff71 	bl	80011ac <SSD1306_Putc>
 80012ca:	4603      	mov	r3, r0
 80012cc:	461a      	mov	r2, r3
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	781b      	ldrb	r3, [r3, #0]
 80012d2:	429a      	cmp	r2, r3
 80012d4:	d002      	beq.n	80012dc <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	781b      	ldrb	r3, [r3, #0]
 80012da:	e008      	b.n	80012ee <SSD1306_Puts+0x42>
		}
		
		/* Increase string pointer */
		str++;
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	3301      	adds	r3, #1
 80012e0:	60fb      	str	r3, [r7, #12]
	while (*str) {
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	781b      	ldrb	r3, [r3, #0]
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d1e8      	bne.n	80012bc <SSD1306_Puts+0x10>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	781b      	ldrb	r3, [r3, #0]
}
 80012ee:	4618      	mov	r0, r3
 80012f0:	3710      	adds	r7, #16
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd80      	pop	{r7, pc}

080012f6 <SSD1306_DrawCircle>:
		x += xinc2;
		y += yinc2;
	}
}

void SSD1306_DrawCircle(int16_t x0, int16_t y0, int16_t r, SSD1306_COLOR_t c) {
 80012f6:	b590      	push	{r4, r7, lr}
 80012f8:	b087      	sub	sp, #28
 80012fa:	af00      	add	r7, sp, #0
 80012fc:	4604      	mov	r4, r0
 80012fe:	4608      	mov	r0, r1
 8001300:	4611      	mov	r1, r2
 8001302:	461a      	mov	r2, r3
 8001304:	4623      	mov	r3, r4
 8001306:	80fb      	strh	r3, [r7, #6]
 8001308:	4603      	mov	r3, r0
 800130a:	80bb      	strh	r3, [r7, #4]
 800130c:	460b      	mov	r3, r1
 800130e:	807b      	strh	r3, [r7, #2]
 8001310:	4613      	mov	r3, r2
 8001312:	707b      	strb	r3, [r7, #1]
	int16_t f = 1 - r;
 8001314:	887b      	ldrh	r3, [r7, #2]
 8001316:	f1c3 0301 	rsb	r3, r3, #1
 800131a:	b29b      	uxth	r3, r3
 800131c:	82fb      	strh	r3, [r7, #22]
	int16_t ddF_x = 1;
 800131e:	2301      	movs	r3, #1
 8001320:	82bb      	strh	r3, [r7, #20]
	int16_t ddF_y = -2 * r;
 8001322:	887b      	ldrh	r3, [r7, #2]
 8001324:	461a      	mov	r2, r3
 8001326:	03d2      	lsls	r2, r2, #15
 8001328:	1ad3      	subs	r3, r2, r3
 800132a:	005b      	lsls	r3, r3, #1
 800132c:	b29b      	uxth	r3, r3
 800132e:	827b      	strh	r3, [r7, #18]
	int16_t x = 0;
 8001330:	2300      	movs	r3, #0
 8001332:	823b      	strh	r3, [r7, #16]
	int16_t y = r;
 8001334:	887b      	ldrh	r3, [r7, #2]
 8001336:	81fb      	strh	r3, [r7, #14]

    SSD1306_DrawPixel(x0, y0 + r, c);
 8001338:	88f8      	ldrh	r0, [r7, #6]
 800133a:	88ba      	ldrh	r2, [r7, #4]
 800133c:	887b      	ldrh	r3, [r7, #2]
 800133e:	4413      	add	r3, r2
 8001340:	b29b      	uxth	r3, r3
 8001342:	787a      	ldrb	r2, [r7, #1]
 8001344:	4619      	mov	r1, r3
 8001346:	f7ff febd 	bl	80010c4 <SSD1306_DrawPixel>
    SSD1306_DrawPixel(x0, y0 - r, c);
 800134a:	88f8      	ldrh	r0, [r7, #6]
 800134c:	88ba      	ldrh	r2, [r7, #4]
 800134e:	887b      	ldrh	r3, [r7, #2]
 8001350:	1ad3      	subs	r3, r2, r3
 8001352:	b29b      	uxth	r3, r3
 8001354:	787a      	ldrb	r2, [r7, #1]
 8001356:	4619      	mov	r1, r3
 8001358:	f7ff feb4 	bl	80010c4 <SSD1306_DrawPixel>
    SSD1306_DrawPixel(x0 + r, y0, c);
 800135c:	88fa      	ldrh	r2, [r7, #6]
 800135e:	887b      	ldrh	r3, [r7, #2]
 8001360:	4413      	add	r3, r2
 8001362:	b29b      	uxth	r3, r3
 8001364:	88b9      	ldrh	r1, [r7, #4]
 8001366:	787a      	ldrb	r2, [r7, #1]
 8001368:	4618      	mov	r0, r3
 800136a:	f7ff feab 	bl	80010c4 <SSD1306_DrawPixel>
    SSD1306_DrawPixel(x0 - r, y0, c);
 800136e:	88fa      	ldrh	r2, [r7, #6]
 8001370:	887b      	ldrh	r3, [r7, #2]
 8001372:	1ad3      	subs	r3, r2, r3
 8001374:	b29b      	uxth	r3, r3
 8001376:	88b9      	ldrh	r1, [r7, #4]
 8001378:	787a      	ldrb	r2, [r7, #1]
 800137a:	4618      	mov	r0, r3
 800137c:	f7ff fea2 	bl	80010c4 <SSD1306_DrawPixel>

    while (x < y) {
 8001380:	e081      	b.n	8001486 <SSD1306_DrawCircle+0x190>
        if (f >= 0) {
 8001382:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001386:	2b00      	cmp	r3, #0
 8001388:	db0e      	blt.n	80013a8 <SSD1306_DrawCircle+0xb2>
            y--;
 800138a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800138e:	b29b      	uxth	r3, r3
 8001390:	3b01      	subs	r3, #1
 8001392:	b29b      	uxth	r3, r3
 8001394:	81fb      	strh	r3, [r7, #14]
            ddF_y += 2;
 8001396:	8a7b      	ldrh	r3, [r7, #18]
 8001398:	3302      	adds	r3, #2
 800139a:	b29b      	uxth	r3, r3
 800139c:	827b      	strh	r3, [r7, #18]
            f += ddF_y;
 800139e:	8afa      	ldrh	r2, [r7, #22]
 80013a0:	8a7b      	ldrh	r3, [r7, #18]
 80013a2:	4413      	add	r3, r2
 80013a4:	b29b      	uxth	r3, r3
 80013a6:	82fb      	strh	r3, [r7, #22]
        }
        x++;
 80013a8:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80013ac:	b29b      	uxth	r3, r3
 80013ae:	3301      	adds	r3, #1
 80013b0:	b29b      	uxth	r3, r3
 80013b2:	823b      	strh	r3, [r7, #16]
        ddF_x += 2;
 80013b4:	8abb      	ldrh	r3, [r7, #20]
 80013b6:	3302      	adds	r3, #2
 80013b8:	b29b      	uxth	r3, r3
 80013ba:	82bb      	strh	r3, [r7, #20]
        f += ddF_x;
 80013bc:	8afa      	ldrh	r2, [r7, #22]
 80013be:	8abb      	ldrh	r3, [r7, #20]
 80013c0:	4413      	add	r3, r2
 80013c2:	b29b      	uxth	r3, r3
 80013c4:	82fb      	strh	r3, [r7, #22]

        SSD1306_DrawPixel(x0 + x, y0 + y, c);
 80013c6:	88fa      	ldrh	r2, [r7, #6]
 80013c8:	8a3b      	ldrh	r3, [r7, #16]
 80013ca:	4413      	add	r3, r2
 80013cc:	b298      	uxth	r0, r3
 80013ce:	88ba      	ldrh	r2, [r7, #4]
 80013d0:	89fb      	ldrh	r3, [r7, #14]
 80013d2:	4413      	add	r3, r2
 80013d4:	b29b      	uxth	r3, r3
 80013d6:	787a      	ldrb	r2, [r7, #1]
 80013d8:	4619      	mov	r1, r3
 80013da:	f7ff fe73 	bl	80010c4 <SSD1306_DrawPixel>
        SSD1306_DrawPixel(x0 - x, y0 + y, c);
 80013de:	88fa      	ldrh	r2, [r7, #6]
 80013e0:	8a3b      	ldrh	r3, [r7, #16]
 80013e2:	1ad3      	subs	r3, r2, r3
 80013e4:	b298      	uxth	r0, r3
 80013e6:	88ba      	ldrh	r2, [r7, #4]
 80013e8:	89fb      	ldrh	r3, [r7, #14]
 80013ea:	4413      	add	r3, r2
 80013ec:	b29b      	uxth	r3, r3
 80013ee:	787a      	ldrb	r2, [r7, #1]
 80013f0:	4619      	mov	r1, r3
 80013f2:	f7ff fe67 	bl	80010c4 <SSD1306_DrawPixel>
        SSD1306_DrawPixel(x0 + x, y0 - y, c);
 80013f6:	88fa      	ldrh	r2, [r7, #6]
 80013f8:	8a3b      	ldrh	r3, [r7, #16]
 80013fa:	4413      	add	r3, r2
 80013fc:	b298      	uxth	r0, r3
 80013fe:	88ba      	ldrh	r2, [r7, #4]
 8001400:	89fb      	ldrh	r3, [r7, #14]
 8001402:	1ad3      	subs	r3, r2, r3
 8001404:	b29b      	uxth	r3, r3
 8001406:	787a      	ldrb	r2, [r7, #1]
 8001408:	4619      	mov	r1, r3
 800140a:	f7ff fe5b 	bl	80010c4 <SSD1306_DrawPixel>
        SSD1306_DrawPixel(x0 - x, y0 - y, c);
 800140e:	88fa      	ldrh	r2, [r7, #6]
 8001410:	8a3b      	ldrh	r3, [r7, #16]
 8001412:	1ad3      	subs	r3, r2, r3
 8001414:	b298      	uxth	r0, r3
 8001416:	88ba      	ldrh	r2, [r7, #4]
 8001418:	89fb      	ldrh	r3, [r7, #14]
 800141a:	1ad3      	subs	r3, r2, r3
 800141c:	b29b      	uxth	r3, r3
 800141e:	787a      	ldrb	r2, [r7, #1]
 8001420:	4619      	mov	r1, r3
 8001422:	f7ff fe4f 	bl	80010c4 <SSD1306_DrawPixel>

        SSD1306_DrawPixel(x0 + y, y0 + x, c);
 8001426:	88fa      	ldrh	r2, [r7, #6]
 8001428:	89fb      	ldrh	r3, [r7, #14]
 800142a:	4413      	add	r3, r2
 800142c:	b298      	uxth	r0, r3
 800142e:	88ba      	ldrh	r2, [r7, #4]
 8001430:	8a3b      	ldrh	r3, [r7, #16]
 8001432:	4413      	add	r3, r2
 8001434:	b29b      	uxth	r3, r3
 8001436:	787a      	ldrb	r2, [r7, #1]
 8001438:	4619      	mov	r1, r3
 800143a:	f7ff fe43 	bl	80010c4 <SSD1306_DrawPixel>
        SSD1306_DrawPixel(x0 - y, y0 + x, c);
 800143e:	88fa      	ldrh	r2, [r7, #6]
 8001440:	89fb      	ldrh	r3, [r7, #14]
 8001442:	1ad3      	subs	r3, r2, r3
 8001444:	b298      	uxth	r0, r3
 8001446:	88ba      	ldrh	r2, [r7, #4]
 8001448:	8a3b      	ldrh	r3, [r7, #16]
 800144a:	4413      	add	r3, r2
 800144c:	b29b      	uxth	r3, r3
 800144e:	787a      	ldrb	r2, [r7, #1]
 8001450:	4619      	mov	r1, r3
 8001452:	f7ff fe37 	bl	80010c4 <SSD1306_DrawPixel>
        SSD1306_DrawPixel(x0 + y, y0 - x, c);
 8001456:	88fa      	ldrh	r2, [r7, #6]
 8001458:	89fb      	ldrh	r3, [r7, #14]
 800145a:	4413      	add	r3, r2
 800145c:	b298      	uxth	r0, r3
 800145e:	88ba      	ldrh	r2, [r7, #4]
 8001460:	8a3b      	ldrh	r3, [r7, #16]
 8001462:	1ad3      	subs	r3, r2, r3
 8001464:	b29b      	uxth	r3, r3
 8001466:	787a      	ldrb	r2, [r7, #1]
 8001468:	4619      	mov	r1, r3
 800146a:	f7ff fe2b 	bl	80010c4 <SSD1306_DrawPixel>
        SSD1306_DrawPixel(x0 - y, y0 - x, c);
 800146e:	88fa      	ldrh	r2, [r7, #6]
 8001470:	89fb      	ldrh	r3, [r7, #14]
 8001472:	1ad3      	subs	r3, r2, r3
 8001474:	b298      	uxth	r0, r3
 8001476:	88ba      	ldrh	r2, [r7, #4]
 8001478:	8a3b      	ldrh	r3, [r7, #16]
 800147a:	1ad3      	subs	r3, r2, r3
 800147c:	b29b      	uxth	r3, r3
 800147e:	787a      	ldrb	r2, [r7, #1]
 8001480:	4619      	mov	r1, r3
 8001482:	f7ff fe1f 	bl	80010c4 <SSD1306_DrawPixel>
    while (x < y) {
 8001486:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 800148a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800148e:	429a      	cmp	r2, r3
 8001490:	f6ff af77 	blt.w	8001382 <SSD1306_DrawCircle+0x8c>
    }
}
 8001494:	bf00      	nop
 8001496:	bf00      	nop
 8001498:	371c      	adds	r7, #28
 800149a:	46bd      	mov	sp, r7
 800149c:	bd90      	pop	{r4, r7, pc}

0800149e <ssd1306_I2C_WriteMulti>:





void ssd1306_I2C_WriteMulti(I2C_TypeDef* I2Cx, uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 800149e:	b580      	push	{r7, lr}
 80014a0:	b086      	sub	sp, #24
 80014a2:	af00      	add	r7, sp, #0
 80014a4:	60f8      	str	r0, [r7, #12]
 80014a6:	607b      	str	r3, [r7, #4]
 80014a8:	460b      	mov	r3, r1
 80014aa:	72fb      	strb	r3, [r7, #11]
 80014ac:	4613      	mov	r3, r2
 80014ae:	72bb      	strb	r3, [r7, #10]
	uint8_t i;
	ssd1306_I2C_Start(I2Cx, address, I2C_TRANSMITTER_MODE, I2C_ACK_DISABLE);
 80014b0:	7af9      	ldrb	r1, [r7, #11]
 80014b2:	2300      	movs	r3, #0
 80014b4:	2200      	movs	r2, #0
 80014b6:	68f8      	ldr	r0, [r7, #12]
 80014b8:	f000 f820 	bl	80014fc <ssd1306_I2C_Start>
	ssd1306_I2C_WriteData(I2Cx, reg);
 80014bc:	7abb      	ldrb	r3, [r7, #10]
 80014be:	4619      	mov	r1, r3
 80014c0:	68f8      	ldr	r0, [r7, #12]
 80014c2:	f000 f885 	bl	80015d0 <ssd1306_I2C_WriteData>
	for (i = 0; i < count; i++) {
 80014c6:	2300      	movs	r3, #0
 80014c8:	75fb      	strb	r3, [r7, #23]
 80014ca:	e00a      	b.n	80014e2 <ssd1306_I2C_WriteMulti+0x44>
		ssd1306_I2C_WriteData(I2Cx, data[i]);
 80014cc:	7dfb      	ldrb	r3, [r7, #23]
 80014ce:	687a      	ldr	r2, [r7, #4]
 80014d0:	4413      	add	r3, r2
 80014d2:	781b      	ldrb	r3, [r3, #0]
 80014d4:	4619      	mov	r1, r3
 80014d6:	68f8      	ldr	r0, [r7, #12]
 80014d8:	f000 f87a 	bl	80015d0 <ssd1306_I2C_WriteData>
	for (i = 0; i < count; i++) {
 80014dc:	7dfb      	ldrb	r3, [r7, #23]
 80014de:	3301      	adds	r3, #1
 80014e0:	75fb      	strb	r3, [r7, #23]
 80014e2:	7dfb      	ldrb	r3, [r7, #23]
 80014e4:	b29b      	uxth	r3, r3
 80014e6:	8c3a      	ldrh	r2, [r7, #32]
 80014e8:	429a      	cmp	r2, r3
 80014ea:	d8ef      	bhi.n	80014cc <ssd1306_I2C_WriteMulti+0x2e>
	}
	ssd1306_I2C_Stop(I2Cx);
 80014ec:	68f8      	ldr	r0, [r7, #12]
 80014ee:	f000 f8b7 	bl	8001660 <ssd1306_I2C_Stop>
}
 80014f2:	bf00      	nop
 80014f4:	3718      	adds	r7, #24
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bd80      	pop	{r7, pc}
	...

080014fc <ssd1306_I2C_Start>:




/* Private functions */
int16_t ssd1306_I2C_Start(I2C_TypeDef* I2Cx, uint8_t address, uint8_t direction, uint8_t ack) {
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b082      	sub	sp, #8
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
 8001504:	4608      	mov	r0, r1
 8001506:	4611      	mov	r1, r2
 8001508:	461a      	mov	r2, r3
 800150a:	4603      	mov	r3, r0
 800150c:	70fb      	strb	r3, [r7, #3]
 800150e:	460b      	mov	r3, r1
 8001510:	70bb      	strb	r3, [r7, #2]
 8001512:	4613      	mov	r3, r2
 8001514:	707b      	strb	r3, [r7, #1]
	/* Generate I2C start pulse */
	I2Cx->CR1 |= I2C_CR1_START;
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	601a      	str	r2, [r3, #0]
	
	/* Wait till I2C is busy */
	ssd1306_I2C_Timeout = ssd1306_I2C_TIMEOUT;
 8001522:	4b2a      	ldr	r3, [pc, #168]	; (80015cc <ssd1306_I2C_Start+0xd0>)
 8001524:	f644 6220 	movw	r2, #20000	; 0x4e20
 8001528:	601a      	str	r2, [r3, #0]
	while (!(I2Cx->SR1 & I2C_SR1_SB)) {
 800152a:	e00a      	b.n	8001542 <ssd1306_I2C_Start+0x46>
		if (--ssd1306_I2C_Timeout == 0x00) {
 800152c:	4b27      	ldr	r3, [pc, #156]	; (80015cc <ssd1306_I2C_Start+0xd0>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	3b01      	subs	r3, #1
 8001532:	4a26      	ldr	r2, [pc, #152]	; (80015cc <ssd1306_I2C_Start+0xd0>)
 8001534:	6013      	str	r3, [r2, #0]
 8001536:	4b25      	ldr	r3, [pc, #148]	; (80015cc <ssd1306_I2C_Start+0xd0>)
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	2b00      	cmp	r3, #0
 800153c:	d101      	bne.n	8001542 <ssd1306_I2C_Start+0x46>
			return 1;
 800153e:	2301      	movs	r3, #1
 8001540:	e040      	b.n	80015c4 <ssd1306_I2C_Start+0xc8>
	while (!(I2Cx->SR1 & I2C_SR1_SB)) {
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	695b      	ldr	r3, [r3, #20]
 8001546:	f003 0301 	and.w	r3, r3, #1
 800154a:	2b00      	cmp	r3, #0
 800154c:	d0ee      	beq.n	800152c <ssd1306_I2C_Start+0x30>
		}
	}

	/* Enable ack if we select it */
	if (ack) {
 800154e:	787b      	ldrb	r3, [r7, #1]
 8001550:	2b00      	cmp	r3, #0
 8001552:	d005      	beq.n	8001560 <ssd1306_I2C_Start+0x64>
		I2Cx->CR1 |= I2C_CR1_ACK;
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	601a      	str	r2, [r3, #0]
	}

	/* Send write/read bit */
	if (direction == I2C_TRANSMITTER_MODE) {
 8001560:	78bb      	ldrb	r3, [r7, #2]
 8001562:	2b00      	cmp	r3, #0
 8001564:	d11a      	bne.n	800159c <ssd1306_I2C_Start+0xa0>
		/* Send address with zero last bit */
		I2Cx->DR = address & ~I2C_OAR1_ADD0;
 8001566:	78fb      	ldrb	r3, [r7, #3]
 8001568:	f023 0201 	bic.w	r2, r3, #1
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	611a      	str	r2, [r3, #16]
		
		/* Wait till finished */
		ssd1306_I2C_Timeout = ssd1306_I2C_TIMEOUT;
 8001570:	4b16      	ldr	r3, [pc, #88]	; (80015cc <ssd1306_I2C_Start+0xd0>)
 8001572:	f644 6220 	movw	r2, #20000	; 0x4e20
 8001576:	601a      	str	r2, [r3, #0]
		while (!(I2Cx->SR1 & I2C_SR1_ADDR)) {
 8001578:	e00a      	b.n	8001590 <ssd1306_I2C_Start+0x94>
			if (--ssd1306_I2C_Timeout == 0x00) {
 800157a:	4b14      	ldr	r3, [pc, #80]	; (80015cc <ssd1306_I2C_Start+0xd0>)
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	3b01      	subs	r3, #1
 8001580:	4a12      	ldr	r2, [pc, #72]	; (80015cc <ssd1306_I2C_Start+0xd0>)
 8001582:	6013      	str	r3, [r2, #0]
 8001584:	4b11      	ldr	r3, [pc, #68]	; (80015cc <ssd1306_I2C_Start+0xd0>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	2b00      	cmp	r3, #0
 800158a:	d101      	bne.n	8001590 <ssd1306_I2C_Start+0x94>
				return 1;
 800158c:	2301      	movs	r3, #1
 800158e:	e019      	b.n	80015c4 <ssd1306_I2C_Start+0xc8>
		while (!(I2Cx->SR1 & I2C_SR1_ADDR)) {
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	695b      	ldr	r3, [r3, #20]
 8001594:	f003 0302 	and.w	r3, r3, #2
 8001598:	2b00      	cmp	r3, #0
 800159a:	d0ee      	beq.n	800157a <ssd1306_I2C_Start+0x7e>
			}
		}
	}
	if (direction == I2C_RECEIVER_MODE) {
 800159c:	78bb      	ldrb	r3, [r7, #2]
 800159e:	2b01      	cmp	r3, #1
 80015a0:	d10d      	bne.n	80015be <ssd1306_I2C_Start+0xc2>
		/* Send address with 1 last bit */
		I2Cx->DR = address | I2C_OAR1_ADD0;
 80015a2:	78fb      	ldrb	r3, [r7, #3]
 80015a4:	f043 0301 	orr.w	r3, r3, #1
 80015a8:	b2db      	uxtb	r3, r3
 80015aa:	461a      	mov	r2, r3
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	611a      	str	r2, [r3, #16]
		
		/* Wait till finished */
		ssd1306_I2C_Timeout = ssd1306_I2C_TIMEOUT;
 80015b0:	4b06      	ldr	r3, [pc, #24]	; (80015cc <ssd1306_I2C_Start+0xd0>)
 80015b2:	f644 6220 	movw	r2, #20000	; 0x4e20
 80015b6:	601a      	str	r2, [r3, #0]

		HAL_Delay(1);
 80015b8:	2001      	movs	r0, #1
 80015ba:	f000 fb63 	bl	8001c84 <HAL_Delay>
			}
		}*/
	}
	
	/* Read status register to clear ADDR flag */
	I2Cx->SR2;
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	699b      	ldr	r3, [r3, #24]
	
	/* Return 0, everything ok */
	return 0;
 80015c2:	2300      	movs	r3, #0
}
 80015c4:	4618      	mov	r0, r3
 80015c6:	3708      	adds	r7, #8
 80015c8:	46bd      	mov	sp, r7
 80015ca:	bd80      	pop	{r7, pc}
 80015cc:	20000ba8 	.word	0x20000ba8

080015d0 <ssd1306_I2C_WriteData>:

void ssd1306_I2C_WriteData(I2C_TypeDef* I2Cx, uint8_t data) {
 80015d0:	b480      	push	{r7}
 80015d2:	b083      	sub	sp, #12
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
 80015d8:	460b      	mov	r3, r1
 80015da:	70fb      	strb	r3, [r7, #3]
	/* Wait till I2C is not busy anymore */
	ssd1306_I2C_Timeout = ssd1306_I2C_TIMEOUT;
 80015dc:	4b0d      	ldr	r3, [pc, #52]	; (8001614 <ssd1306_I2C_WriteData+0x44>)
 80015de:	f644 6220 	movw	r2, #20000	; 0x4e20
 80015e2:	601a      	str	r2, [r3, #0]
	while (!(I2Cx->SR1 & I2C_SR1_TXE) && ssd1306_I2C_Timeout) {
 80015e4:	e004      	b.n	80015f0 <ssd1306_I2C_WriteData+0x20>
		ssd1306_I2C_Timeout--;
 80015e6:	4b0b      	ldr	r3, [pc, #44]	; (8001614 <ssd1306_I2C_WriteData+0x44>)
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	3b01      	subs	r3, #1
 80015ec:	4a09      	ldr	r2, [pc, #36]	; (8001614 <ssd1306_I2C_WriteData+0x44>)
 80015ee:	6013      	str	r3, [r2, #0]
	while (!(I2Cx->SR1 & I2C_SR1_TXE) && ssd1306_I2C_Timeout) {
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	695b      	ldr	r3, [r3, #20]
 80015f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d103      	bne.n	8001604 <ssd1306_I2C_WriteData+0x34>
 80015fc:	4b05      	ldr	r3, [pc, #20]	; (8001614 <ssd1306_I2C_WriteData+0x44>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	2b00      	cmp	r3, #0
 8001602:	d1f0      	bne.n	80015e6 <ssd1306_I2C_WriteData+0x16>
	}

	/* Send I2C data */
	I2Cx->DR = data;
 8001604:	78fa      	ldrb	r2, [r7, #3]
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	611a      	str	r2, [r3, #16]
}
 800160a:	bf00      	nop
 800160c:	370c      	adds	r7, #12
 800160e:	46bd      	mov	sp, r7
 8001610:	bc80      	pop	{r7}
 8001612:	4770      	bx	lr
 8001614:	20000ba8 	.word	0x20000ba8

08001618 <ssd1306_I2C_Write>:

void ssd1306_I2C_Write(I2C_TypeDef* I2Cx, uint8_t address, uint8_t reg, uint8_t data) {
 8001618:	b580      	push	{r7, lr}
 800161a:	b082      	sub	sp, #8
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
 8001620:	4608      	mov	r0, r1
 8001622:	4611      	mov	r1, r2
 8001624:	461a      	mov	r2, r3
 8001626:	4603      	mov	r3, r0
 8001628:	70fb      	strb	r3, [r7, #3]
 800162a:	460b      	mov	r3, r1
 800162c:	70bb      	strb	r3, [r7, #2]
 800162e:	4613      	mov	r3, r2
 8001630:	707b      	strb	r3, [r7, #1]
	//HAL_UART_Transmit(&huart1, (uint8_t*) "I2C_Write\r\n", 11, 0xFFFF);
	ssd1306_I2C_Start(I2Cx, address, I2C_TRANSMITTER_MODE, I2C_ACK_DISABLE);
 8001632:	78f9      	ldrb	r1, [r7, #3]
 8001634:	2300      	movs	r3, #0
 8001636:	2200      	movs	r2, #0
 8001638:	6878      	ldr	r0, [r7, #4]
 800163a:	f7ff ff5f 	bl	80014fc <ssd1306_I2C_Start>
	//HAL_UART_Transmit(&huart1, (uint8_t*) "I2C_Write2\r\n", 12, 0xFFFF);
	ssd1306_I2C_WriteData(I2Cx, reg);
 800163e:	78bb      	ldrb	r3, [r7, #2]
 8001640:	4619      	mov	r1, r3
 8001642:	6878      	ldr	r0, [r7, #4]
 8001644:	f7ff ffc4 	bl	80015d0 <ssd1306_I2C_WriteData>
	//HAL_UART_Transmit(&huart1, (uint8_t*) "I2C_Write3\r\n", 12, 0xFFFF);
	ssd1306_I2C_WriteData(I2Cx, data);
 8001648:	787b      	ldrb	r3, [r7, #1]
 800164a:	4619      	mov	r1, r3
 800164c:	6878      	ldr	r0, [r7, #4]
 800164e:	f7ff ffbf 	bl	80015d0 <ssd1306_I2C_WriteData>
	//HAL_UART_Transmit(&huart1, (uint8_t*) "I2C_Write4\r\n", 12, 0xFFFF);
	ssd1306_I2C_Stop(I2Cx);
 8001652:	6878      	ldr	r0, [r7, #4]
 8001654:	f000 f804 	bl	8001660 <ssd1306_I2C_Stop>
	//HAL_UART_Transmit(&huart1, (uint8_t*) "I2C_Write5\r\n", 12, 0xFFFF);
}
 8001658:	bf00      	nop
 800165a:	3708      	adds	r7, #8
 800165c:	46bd      	mov	sp, r7
 800165e:	bd80      	pop	{r7, pc}

08001660 <ssd1306_I2C_Stop>:


uint8_t ssd1306_I2C_Stop(I2C_TypeDef* I2Cx) {
 8001660:	b480      	push	{r7}
 8001662:	b083      	sub	sp, #12
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
	/* Wait till transmitter not empty */
	ssd1306_I2C_Timeout = ssd1306_I2C_TIMEOUT;
 8001668:	4b13      	ldr	r3, [pc, #76]	; (80016b8 <ssd1306_I2C_Stop+0x58>)
 800166a:	f644 6220 	movw	r2, #20000	; 0x4e20
 800166e:	601a      	str	r2, [r3, #0]
	while (((!(I2Cx->SR1 & I2C_SR1_TXE)) || (!(I2Cx->SR1 & I2C_SR1_BTF)))) {
 8001670:	e00a      	b.n	8001688 <ssd1306_I2C_Stop+0x28>
		if (--ssd1306_I2C_Timeout == 0x00) {
 8001672:	4b11      	ldr	r3, [pc, #68]	; (80016b8 <ssd1306_I2C_Stop+0x58>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	3b01      	subs	r3, #1
 8001678:	4a0f      	ldr	r2, [pc, #60]	; (80016b8 <ssd1306_I2C_Stop+0x58>)
 800167a:	6013      	str	r3, [r2, #0]
 800167c:	4b0e      	ldr	r3, [pc, #56]	; (80016b8 <ssd1306_I2C_Stop+0x58>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	2b00      	cmp	r3, #0
 8001682:	d101      	bne.n	8001688 <ssd1306_I2C_Stop+0x28>
			return 1;
 8001684:	2301      	movs	r3, #1
 8001686:	e012      	b.n	80016ae <ssd1306_I2C_Stop+0x4e>
	while (((!(I2Cx->SR1 & I2C_SR1_TXE)) || (!(I2Cx->SR1 & I2C_SR1_BTF)))) {
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	695b      	ldr	r3, [r3, #20]
 800168c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001690:	2b00      	cmp	r3, #0
 8001692:	d0ee      	beq.n	8001672 <ssd1306_I2C_Stop+0x12>
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	695b      	ldr	r3, [r3, #20]
 8001698:	f003 0304 	and.w	r3, r3, #4
 800169c:	2b00      	cmp	r3, #0
 800169e:	d0e8      	beq.n	8001672 <ssd1306_I2C_Stop+0x12>
		}
	}
	
	/* Generate stop */
	I2Cx->CR1 |= I2C_CR1_STOP;
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	601a      	str	r2, [r3, #0]
	
	/* Return 0, everything ok */
	return 0;
 80016ac:	2300      	movs	r3, #0
}
 80016ae:	4618      	mov	r0, r3
 80016b0:	370c      	adds	r7, #12
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bc80      	pop	{r7}
 80016b6:	4770      	bx	lr
 80016b8:	20000ba8 	.word	0x20000ba8

080016bc <ssd1306_I2C_IsDeviceConnected>:

uint8_t ssd1306_I2C_IsDeviceConnected(I2C_TypeDef* I2Cx, uint8_t address) {
 80016bc:	b580      	push	{r7, lr}
 80016be:	b084      	sub	sp, #16
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
 80016c4:	460b      	mov	r3, r1
 80016c6:	70fb      	strb	r3, [r7, #3]
	uint8_t connected = 0;
 80016c8:	2300      	movs	r3, #0
 80016ca:	73fb      	strb	r3, [r7, #15]
	/* Try to start, function will return 0 in case device will send ACK */
	if (!ssd1306_I2C_Start(I2Cx, address, I2C_TRANSMITTER_MODE, I2C_ACK_ENABLE)) {
 80016cc:	78f9      	ldrb	r1, [r7, #3]
 80016ce:	2301      	movs	r3, #1
 80016d0:	2200      	movs	r2, #0
 80016d2:	6878      	ldr	r0, [r7, #4]
 80016d4:	f7ff ff12 	bl	80014fc <ssd1306_I2C_Start>
 80016d8:	4603      	mov	r3, r0
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d101      	bne.n	80016e2 <ssd1306_I2C_IsDeviceConnected+0x26>
		connected = 1;
 80016de:	2301      	movs	r3, #1
 80016e0:	73fb      	strb	r3, [r7, #15]
	}

	/* STOP I2C */
	ssd1306_I2C_Stop(I2Cx);
 80016e2:	6878      	ldr	r0, [r7, #4]
 80016e4:	f7ff ffbc 	bl	8001660 <ssd1306_I2C_Stop>

	/* Return status */
	return connected;
 80016e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80016ea:	4618      	mov	r0, r3
 80016ec:	3710      	adds	r7, #16
 80016ee:	46bd      	mov	sp, r7
 80016f0:	bd80      	pop	{r7, pc}
	...

080016f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016f4:	b480      	push	{r7}
 80016f6:	b083      	sub	sp, #12
 80016f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80016fa:	4b0e      	ldr	r3, [pc, #56]	; (8001734 <HAL_MspInit+0x40>)
 80016fc:	699b      	ldr	r3, [r3, #24]
 80016fe:	4a0d      	ldr	r2, [pc, #52]	; (8001734 <HAL_MspInit+0x40>)
 8001700:	f043 0301 	orr.w	r3, r3, #1
 8001704:	6193      	str	r3, [r2, #24]
 8001706:	4b0b      	ldr	r3, [pc, #44]	; (8001734 <HAL_MspInit+0x40>)
 8001708:	699b      	ldr	r3, [r3, #24]
 800170a:	f003 0301 	and.w	r3, r3, #1
 800170e:	607b      	str	r3, [r7, #4]
 8001710:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001712:	4b08      	ldr	r3, [pc, #32]	; (8001734 <HAL_MspInit+0x40>)
 8001714:	69db      	ldr	r3, [r3, #28]
 8001716:	4a07      	ldr	r2, [pc, #28]	; (8001734 <HAL_MspInit+0x40>)
 8001718:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800171c:	61d3      	str	r3, [r2, #28]
 800171e:	4b05      	ldr	r3, [pc, #20]	; (8001734 <HAL_MspInit+0x40>)
 8001720:	69db      	ldr	r3, [r3, #28]
 8001722:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001726:	603b      	str	r3, [r7, #0]
 8001728:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800172a:	bf00      	nop
 800172c:	370c      	adds	r7, #12
 800172e:	46bd      	mov	sp, r7
 8001730:	bc80      	pop	{r7}
 8001732:	4770      	bx	lr
 8001734:	40021000 	.word	0x40021000

08001738 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b088      	sub	sp, #32
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001740:	f107 0310 	add.w	r3, r7, #16
 8001744:	2200      	movs	r2, #0
 8001746:	601a      	str	r2, [r3, #0]
 8001748:	605a      	str	r2, [r3, #4]
 800174a:	609a      	str	r2, [r3, #8]
 800174c:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	4a16      	ldr	r2, [pc, #88]	; (80017ac <HAL_I2C_MspInit+0x74>)
 8001754:	4293      	cmp	r3, r2
 8001756:	d125      	bne.n	80017a4 <HAL_I2C_MspInit+0x6c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001758:	4b15      	ldr	r3, [pc, #84]	; (80017b0 <HAL_I2C_MspInit+0x78>)
 800175a:	699b      	ldr	r3, [r3, #24]
 800175c:	4a14      	ldr	r2, [pc, #80]	; (80017b0 <HAL_I2C_MspInit+0x78>)
 800175e:	f043 0308 	orr.w	r3, r3, #8
 8001762:	6193      	str	r3, [r2, #24]
 8001764:	4b12      	ldr	r3, [pc, #72]	; (80017b0 <HAL_I2C_MspInit+0x78>)
 8001766:	699b      	ldr	r3, [r3, #24]
 8001768:	f003 0308 	and.w	r3, r3, #8
 800176c:	60fb      	str	r3, [r7, #12]
 800176e:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001770:	23c0      	movs	r3, #192	; 0xc0
 8001772:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001774:	2312      	movs	r3, #18
 8001776:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001778:	2300      	movs	r3, #0
 800177a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800177c:	2303      	movs	r3, #3
 800177e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001780:	f107 0310 	add.w	r3, r7, #16
 8001784:	4619      	mov	r1, r3
 8001786:	480b      	ldr	r0, [pc, #44]	; (80017b4 <HAL_I2C_MspInit+0x7c>)
 8001788:	f000 fe50 	bl	800242c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800178c:	4b08      	ldr	r3, [pc, #32]	; (80017b0 <HAL_I2C_MspInit+0x78>)
 800178e:	69db      	ldr	r3, [r3, #28]
 8001790:	4a07      	ldr	r2, [pc, #28]	; (80017b0 <HAL_I2C_MspInit+0x78>)
 8001792:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001796:	61d3      	str	r3, [r2, #28]
 8001798:	4b05      	ldr	r3, [pc, #20]	; (80017b0 <HAL_I2C_MspInit+0x78>)
 800179a:	69db      	ldr	r3, [r3, #28]
 800179c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80017a0:	60bb      	str	r3, [r7, #8]
 80017a2:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80017a4:	bf00      	nop
 80017a6:	3720      	adds	r7, #32
 80017a8:	46bd      	mov	sp, r7
 80017aa:	bd80      	pop	{r7, pc}
 80017ac:	40005400 	.word	0x40005400
 80017b0:	40021000 	.word	0x40021000
 80017b4:	40010c00 	.word	0x40010c00

080017b8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b08a      	sub	sp, #40	; 0x28
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017c0:	f107 0318 	add.w	r3, r7, #24
 80017c4:	2200      	movs	r2, #0
 80017c6:	601a      	str	r2, [r3, #0]
 80017c8:	605a      	str	r2, [r3, #4]
 80017ca:	609a      	str	r2, [r3, #8]
 80017cc:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	4a8c      	ldr	r2, [pc, #560]	; (8001a04 <HAL_UART_MspInit+0x24c>)
 80017d4:	4293      	cmp	r3, r2
 80017d6:	f040 8087 	bne.w	80018e8 <HAL_UART_MspInit+0x130>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80017da:	4b8b      	ldr	r3, [pc, #556]	; (8001a08 <HAL_UART_MspInit+0x250>)
 80017dc:	699b      	ldr	r3, [r3, #24]
 80017de:	4a8a      	ldr	r2, [pc, #552]	; (8001a08 <HAL_UART_MspInit+0x250>)
 80017e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017e4:	6193      	str	r3, [r2, #24]
 80017e6:	4b88      	ldr	r3, [pc, #544]	; (8001a08 <HAL_UART_MspInit+0x250>)
 80017e8:	699b      	ldr	r3, [r3, #24]
 80017ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80017ee:	617b      	str	r3, [r7, #20]
 80017f0:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017f2:	4b85      	ldr	r3, [pc, #532]	; (8001a08 <HAL_UART_MspInit+0x250>)
 80017f4:	699b      	ldr	r3, [r3, #24]
 80017f6:	4a84      	ldr	r2, [pc, #528]	; (8001a08 <HAL_UART_MspInit+0x250>)
 80017f8:	f043 0304 	orr.w	r3, r3, #4
 80017fc:	6193      	str	r3, [r2, #24]
 80017fe:	4b82      	ldr	r3, [pc, #520]	; (8001a08 <HAL_UART_MspInit+0x250>)
 8001800:	699b      	ldr	r3, [r3, #24]
 8001802:	f003 0304 	and.w	r3, r3, #4
 8001806:	613b      	str	r3, [r7, #16]
 8001808:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800180a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800180e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001810:	2302      	movs	r3, #2
 8001812:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001814:	2303      	movs	r3, #3
 8001816:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001818:	f107 0318 	add.w	r3, r7, #24
 800181c:	4619      	mov	r1, r3
 800181e:	487b      	ldr	r0, [pc, #492]	; (8001a0c <HAL_UART_MspInit+0x254>)
 8001820:	f000 fe04 	bl	800242c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001824:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001828:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800182a:	2300      	movs	r3, #0
 800182c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800182e:	2300      	movs	r3, #0
 8001830:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001832:	f107 0318 	add.w	r3, r7, #24
 8001836:	4619      	mov	r1, r3
 8001838:	4874      	ldr	r0, [pc, #464]	; (8001a0c <HAL_UART_MspInit+0x254>)
 800183a:	f000 fdf7 	bl	800242c <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 800183e:	4b74      	ldr	r3, [pc, #464]	; (8001a10 <HAL_UART_MspInit+0x258>)
 8001840:	4a74      	ldr	r2, [pc, #464]	; (8001a14 <HAL_UART_MspInit+0x25c>)
 8001842:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001844:	4b72      	ldr	r3, [pc, #456]	; (8001a10 <HAL_UART_MspInit+0x258>)
 8001846:	2200      	movs	r2, #0
 8001848:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800184a:	4b71      	ldr	r3, [pc, #452]	; (8001a10 <HAL_UART_MspInit+0x258>)
 800184c:	2200      	movs	r2, #0
 800184e:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001850:	4b6f      	ldr	r3, [pc, #444]	; (8001a10 <HAL_UART_MspInit+0x258>)
 8001852:	2280      	movs	r2, #128	; 0x80
 8001854:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001856:	4b6e      	ldr	r3, [pc, #440]	; (8001a10 <HAL_UART_MspInit+0x258>)
 8001858:	2200      	movs	r2, #0
 800185a:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800185c:	4b6c      	ldr	r3, [pc, #432]	; (8001a10 <HAL_UART_MspInit+0x258>)
 800185e:	2200      	movs	r2, #0
 8001860:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8001862:	4b6b      	ldr	r3, [pc, #428]	; (8001a10 <HAL_UART_MspInit+0x258>)
 8001864:	2200      	movs	r2, #0
 8001866:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001868:	4b69      	ldr	r3, [pc, #420]	; (8001a10 <HAL_UART_MspInit+0x258>)
 800186a:	2200      	movs	r2, #0
 800186c:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800186e:	4868      	ldr	r0, [pc, #416]	; (8001a10 <HAL_UART_MspInit+0x258>)
 8001870:	f000 fb3a 	bl	8001ee8 <HAL_DMA_Init>
 8001874:	4603      	mov	r3, r0
 8001876:	2b00      	cmp	r3, #0
 8001878:	d001      	beq.n	800187e <HAL_UART_MspInit+0xc6>
    {
      Error_Handler();
 800187a:	f7ff fafb 	bl	8000e74 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	4a63      	ldr	r2, [pc, #396]	; (8001a10 <HAL_UART_MspInit+0x258>)
 8001882:	63da      	str	r2, [r3, #60]	; 0x3c
 8001884:	4a62      	ldr	r2, [pc, #392]	; (8001a10 <HAL_UART_MspInit+0x258>)
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 800188a:	4b63      	ldr	r3, [pc, #396]	; (8001a18 <HAL_UART_MspInit+0x260>)
 800188c:	4a63      	ldr	r2, [pc, #396]	; (8001a1c <HAL_UART_MspInit+0x264>)
 800188e:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001890:	4b61      	ldr	r3, [pc, #388]	; (8001a18 <HAL_UART_MspInit+0x260>)
 8001892:	2210      	movs	r2, #16
 8001894:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001896:	4b60      	ldr	r3, [pc, #384]	; (8001a18 <HAL_UART_MspInit+0x260>)
 8001898:	2200      	movs	r2, #0
 800189a:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800189c:	4b5e      	ldr	r3, [pc, #376]	; (8001a18 <HAL_UART_MspInit+0x260>)
 800189e:	2280      	movs	r2, #128	; 0x80
 80018a0:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80018a2:	4b5d      	ldr	r3, [pc, #372]	; (8001a18 <HAL_UART_MspInit+0x260>)
 80018a4:	2200      	movs	r2, #0
 80018a6:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80018a8:	4b5b      	ldr	r3, [pc, #364]	; (8001a18 <HAL_UART_MspInit+0x260>)
 80018aa:	2200      	movs	r2, #0
 80018ac:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 80018ae:	4b5a      	ldr	r3, [pc, #360]	; (8001a18 <HAL_UART_MspInit+0x260>)
 80018b0:	2200      	movs	r2, #0
 80018b2:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80018b4:	4b58      	ldr	r3, [pc, #352]	; (8001a18 <HAL_UART_MspInit+0x260>)
 80018b6:	2200      	movs	r2, #0
 80018b8:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80018ba:	4857      	ldr	r0, [pc, #348]	; (8001a18 <HAL_UART_MspInit+0x260>)
 80018bc:	f000 fb14 	bl	8001ee8 <HAL_DMA_Init>
 80018c0:	4603      	mov	r3, r0
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d001      	beq.n	80018ca <HAL_UART_MspInit+0x112>
    {
      Error_Handler();
 80018c6:	f7ff fad5 	bl	8000e74 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	4a52      	ldr	r2, [pc, #328]	; (8001a18 <HAL_UART_MspInit+0x260>)
 80018ce:	639a      	str	r2, [r3, #56]	; 0x38
 80018d0:	4a51      	ldr	r2, [pc, #324]	; (8001a18 <HAL_UART_MspInit+0x260>)
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80018d6:	2200      	movs	r2, #0
 80018d8:	2100      	movs	r1, #0
 80018da:	2025      	movs	r0, #37	; 0x25
 80018dc:	f000 facd 	bl	8001e7a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80018e0:	2025      	movs	r0, #37	; 0x25
 80018e2:	f000 fae6 	bl	8001eb2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80018e6:	e089      	b.n	80019fc <HAL_UART_MspInit+0x244>
  else if(huart->Instance==USART2)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	4a4c      	ldr	r2, [pc, #304]	; (8001a20 <HAL_UART_MspInit+0x268>)
 80018ee:	4293      	cmp	r3, r2
 80018f0:	f040 8084 	bne.w	80019fc <HAL_UART_MspInit+0x244>
    __HAL_RCC_USART2_CLK_ENABLE();
 80018f4:	4b44      	ldr	r3, [pc, #272]	; (8001a08 <HAL_UART_MspInit+0x250>)
 80018f6:	69db      	ldr	r3, [r3, #28]
 80018f8:	4a43      	ldr	r2, [pc, #268]	; (8001a08 <HAL_UART_MspInit+0x250>)
 80018fa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018fe:	61d3      	str	r3, [r2, #28]
 8001900:	4b41      	ldr	r3, [pc, #260]	; (8001a08 <HAL_UART_MspInit+0x250>)
 8001902:	69db      	ldr	r3, [r3, #28]
 8001904:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001908:	60fb      	str	r3, [r7, #12]
 800190a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800190c:	4b3e      	ldr	r3, [pc, #248]	; (8001a08 <HAL_UART_MspInit+0x250>)
 800190e:	699b      	ldr	r3, [r3, #24]
 8001910:	4a3d      	ldr	r2, [pc, #244]	; (8001a08 <HAL_UART_MspInit+0x250>)
 8001912:	f043 0304 	orr.w	r3, r3, #4
 8001916:	6193      	str	r3, [r2, #24]
 8001918:	4b3b      	ldr	r3, [pc, #236]	; (8001a08 <HAL_UART_MspInit+0x250>)
 800191a:	699b      	ldr	r3, [r3, #24]
 800191c:	f003 0304 	and.w	r3, r3, #4
 8001920:	60bb      	str	r3, [r7, #8]
 8001922:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001924:	2304      	movs	r3, #4
 8001926:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001928:	2302      	movs	r3, #2
 800192a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800192c:	2303      	movs	r3, #3
 800192e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001930:	f107 0318 	add.w	r3, r7, #24
 8001934:	4619      	mov	r1, r3
 8001936:	4835      	ldr	r0, [pc, #212]	; (8001a0c <HAL_UART_MspInit+0x254>)
 8001938:	f000 fd78 	bl	800242c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800193c:	2308      	movs	r3, #8
 800193e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001940:	2300      	movs	r3, #0
 8001942:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001944:	2300      	movs	r3, #0
 8001946:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001948:	f107 0318 	add.w	r3, r7, #24
 800194c:	4619      	mov	r1, r3
 800194e:	482f      	ldr	r0, [pc, #188]	; (8001a0c <HAL_UART_MspInit+0x254>)
 8001950:	f000 fd6c 	bl	800242c <HAL_GPIO_Init>
    hdma_usart2_tx.Instance = DMA1_Channel7;
 8001954:	4b33      	ldr	r3, [pc, #204]	; (8001a24 <HAL_UART_MspInit+0x26c>)
 8001956:	4a34      	ldr	r2, [pc, #208]	; (8001a28 <HAL_UART_MspInit+0x270>)
 8001958:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800195a:	4b32      	ldr	r3, [pc, #200]	; (8001a24 <HAL_UART_MspInit+0x26c>)
 800195c:	2210      	movs	r2, #16
 800195e:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001960:	4b30      	ldr	r3, [pc, #192]	; (8001a24 <HAL_UART_MspInit+0x26c>)
 8001962:	2200      	movs	r2, #0
 8001964:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001966:	4b2f      	ldr	r3, [pc, #188]	; (8001a24 <HAL_UART_MspInit+0x26c>)
 8001968:	2280      	movs	r2, #128	; 0x80
 800196a:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800196c:	4b2d      	ldr	r3, [pc, #180]	; (8001a24 <HAL_UART_MspInit+0x26c>)
 800196e:	2200      	movs	r2, #0
 8001970:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001972:	4b2c      	ldr	r3, [pc, #176]	; (8001a24 <HAL_UART_MspInit+0x26c>)
 8001974:	2200      	movs	r2, #0
 8001976:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8001978:	4b2a      	ldr	r3, [pc, #168]	; (8001a24 <HAL_UART_MspInit+0x26c>)
 800197a:	2200      	movs	r2, #0
 800197c:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800197e:	4b29      	ldr	r3, [pc, #164]	; (8001a24 <HAL_UART_MspInit+0x26c>)
 8001980:	2200      	movs	r2, #0
 8001982:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8001984:	4827      	ldr	r0, [pc, #156]	; (8001a24 <HAL_UART_MspInit+0x26c>)
 8001986:	f000 faaf 	bl	8001ee8 <HAL_DMA_Init>
 800198a:	4603      	mov	r3, r0
 800198c:	2b00      	cmp	r3, #0
 800198e:	d001      	beq.n	8001994 <HAL_UART_MspInit+0x1dc>
      Error_Handler();
 8001990:	f7ff fa70 	bl	8000e74 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	4a23      	ldr	r2, [pc, #140]	; (8001a24 <HAL_UART_MspInit+0x26c>)
 8001998:	639a      	str	r2, [r3, #56]	; 0x38
 800199a:	4a22      	ldr	r2, [pc, #136]	; (8001a24 <HAL_UART_MspInit+0x26c>)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	6253      	str	r3, [r2, #36]	; 0x24
    hdma_usart2_rx.Instance = DMA1_Channel6;
 80019a0:	4b22      	ldr	r3, [pc, #136]	; (8001a2c <HAL_UART_MspInit+0x274>)
 80019a2:	4a23      	ldr	r2, [pc, #140]	; (8001a30 <HAL_UART_MspInit+0x278>)
 80019a4:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80019a6:	4b21      	ldr	r3, [pc, #132]	; (8001a2c <HAL_UART_MspInit+0x274>)
 80019a8:	2200      	movs	r2, #0
 80019aa:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80019ac:	4b1f      	ldr	r3, [pc, #124]	; (8001a2c <HAL_UART_MspInit+0x274>)
 80019ae:	2200      	movs	r2, #0
 80019b0:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80019b2:	4b1e      	ldr	r3, [pc, #120]	; (8001a2c <HAL_UART_MspInit+0x274>)
 80019b4:	2280      	movs	r2, #128	; 0x80
 80019b6:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80019b8:	4b1c      	ldr	r3, [pc, #112]	; (8001a2c <HAL_UART_MspInit+0x274>)
 80019ba:	2200      	movs	r2, #0
 80019bc:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80019be:	4b1b      	ldr	r3, [pc, #108]	; (8001a2c <HAL_UART_MspInit+0x274>)
 80019c0:	2200      	movs	r2, #0
 80019c2:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 80019c4:	4b19      	ldr	r3, [pc, #100]	; (8001a2c <HAL_UART_MspInit+0x274>)
 80019c6:	2200      	movs	r2, #0
 80019c8:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80019ca:	4b18      	ldr	r3, [pc, #96]	; (8001a2c <HAL_UART_MspInit+0x274>)
 80019cc:	2200      	movs	r2, #0
 80019ce:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80019d0:	4816      	ldr	r0, [pc, #88]	; (8001a2c <HAL_UART_MspInit+0x274>)
 80019d2:	f000 fa89 	bl	8001ee8 <HAL_DMA_Init>
 80019d6:	4603      	mov	r3, r0
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d001      	beq.n	80019e0 <HAL_UART_MspInit+0x228>
      Error_Handler();
 80019dc:	f7ff fa4a 	bl	8000e74 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	4a12      	ldr	r2, [pc, #72]	; (8001a2c <HAL_UART_MspInit+0x274>)
 80019e4:	63da      	str	r2, [r3, #60]	; 0x3c
 80019e6:	4a11      	ldr	r2, [pc, #68]	; (8001a2c <HAL_UART_MspInit+0x274>)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	6253      	str	r3, [r2, #36]	; 0x24
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80019ec:	2200      	movs	r2, #0
 80019ee:	2100      	movs	r1, #0
 80019f0:	2026      	movs	r0, #38	; 0x26
 80019f2:	f000 fa42 	bl	8001e7a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80019f6:	2026      	movs	r0, #38	; 0x26
 80019f8:	f000 fa5b 	bl	8001eb2 <HAL_NVIC_EnableIRQ>
}
 80019fc:	bf00      	nop
 80019fe:	3728      	adds	r7, #40	; 0x28
 8001a00:	46bd      	mov	sp, r7
 8001a02:	bd80      	pop	{r7, pc}
 8001a04:	40013800 	.word	0x40013800
 8001a08:	40021000 	.word	0x40021000
 8001a0c:	40010800 	.word	0x40010800
 8001a10:	20000188 	.word	0x20000188
 8001a14:	40020058 	.word	0x40020058
 8001a18:	200001cc 	.word	0x200001cc
 8001a1c:	40020044 	.word	0x40020044
 8001a20:	40004400 	.word	0x40004400
 8001a24:	20000210 	.word	0x20000210
 8001a28:	40020080 	.word	0x40020080
 8001a2c:	20000254 	.word	0x20000254
 8001a30:	4002006c 	.word	0x4002006c

08001a34 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a34:	b480      	push	{r7}
 8001a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001a38:	e7fe      	b.n	8001a38 <NMI_Handler+0x4>

08001a3a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a3a:	b480      	push	{r7}
 8001a3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a3e:	e7fe      	b.n	8001a3e <HardFault_Handler+0x4>

08001a40 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a40:	b480      	push	{r7}
 8001a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a44:	e7fe      	b.n	8001a44 <MemManage_Handler+0x4>

08001a46 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a46:	b480      	push	{r7}
 8001a48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a4a:	e7fe      	b.n	8001a4a <BusFault_Handler+0x4>

08001a4c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a50:	e7fe      	b.n	8001a50 <UsageFault_Handler+0x4>

08001a52 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a52:	b480      	push	{r7}
 8001a54:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a56:	bf00      	nop
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	bc80      	pop	{r7}
 8001a5c:	4770      	bx	lr

08001a5e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a5e:	b480      	push	{r7}
 8001a60:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a62:	bf00      	nop
 8001a64:	46bd      	mov	sp, r7
 8001a66:	bc80      	pop	{r7}
 8001a68:	4770      	bx	lr

08001a6a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a6a:	b480      	push	{r7}
 8001a6c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a6e:	bf00      	nop
 8001a70:	46bd      	mov	sp, r7
 8001a72:	bc80      	pop	{r7}
 8001a74:	4770      	bx	lr

08001a76 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a76:	b580      	push	{r7, lr}
 8001a78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a7a:	f000 f8e7 	bl	8001c4c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a7e:	bf00      	nop
 8001a80:	bd80      	pop	{r7, pc}
	...

08001a84 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8001a88:	4802      	ldr	r0, [pc, #8]	; (8001a94 <DMA1_Channel4_IRQHandler+0x10>)
 8001a8a:	f000 fb9b 	bl	80021c4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8001a8e:	bf00      	nop
 8001a90:	bd80      	pop	{r7, pc}
 8001a92:	bf00      	nop
 8001a94:	200001cc 	.word	0x200001cc

08001a98 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001a9c:	4802      	ldr	r0, [pc, #8]	; (8001aa8 <DMA1_Channel5_IRQHandler+0x10>)
 8001a9e:	f000 fb91 	bl	80021c4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8001aa2:	bf00      	nop
 8001aa4:	bd80      	pop	{r7, pc}
 8001aa6:	bf00      	nop
 8001aa8:	20000188 	.word	0x20000188

08001aac <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001ab0:	4802      	ldr	r0, [pc, #8]	; (8001abc <DMA1_Channel6_IRQHandler+0x10>)
 8001ab2:	f000 fb87 	bl	80021c4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8001ab6:	bf00      	nop
 8001ab8:	bd80      	pop	{r7, pc}
 8001aba:	bf00      	nop
 8001abc:	20000254 	.word	0x20000254

08001ac0 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8001ac4:	4802      	ldr	r0, [pc, #8]	; (8001ad0 <DMA1_Channel7_IRQHandler+0x10>)
 8001ac6:	f000 fb7d 	bl	80021c4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8001aca:	bf00      	nop
 8001acc:	bd80      	pop	{r7, pc}
 8001ace:	bf00      	nop
 8001ad0:	20000210 	.word	0x20000210

08001ad4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
	//HAL_UART_Transmit(&huart1,"USART Transmit\r\n",16,0xFFFF);
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001ad8:	4802      	ldr	r0, [pc, #8]	; (8001ae4 <USART1_IRQHandler+0x10>)
 8001ada:	f001 fd19 	bl	8003510 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001ade:	bf00      	nop
 8001ae0:	bd80      	pop	{r7, pc}
 8001ae2:	bf00      	nop
 8001ae4:	200000f8 	.word	0x200000f8

08001ae8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001aec:	4802      	ldr	r0, [pc, #8]	; (8001af8 <USART2_IRQHandler+0x10>)
 8001aee:	f001 fd0f 	bl	8003510 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001af2:	bf00      	nop
 8001af4:	bd80      	pop	{r7, pc}
 8001af6:	bf00      	nop
 8001af8:	20000140 	.word	0x20000140

08001afc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b086      	sub	sp, #24
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b04:	4a14      	ldr	r2, [pc, #80]	; (8001b58 <_sbrk+0x5c>)
 8001b06:	4b15      	ldr	r3, [pc, #84]	; (8001b5c <_sbrk+0x60>)
 8001b08:	1ad3      	subs	r3, r2, r3
 8001b0a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b0c:	697b      	ldr	r3, [r7, #20]
 8001b0e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b10:	4b13      	ldr	r3, [pc, #76]	; (8001b60 <_sbrk+0x64>)
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d102      	bne.n	8001b1e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b18:	4b11      	ldr	r3, [pc, #68]	; (8001b60 <_sbrk+0x64>)
 8001b1a:	4a12      	ldr	r2, [pc, #72]	; (8001b64 <_sbrk+0x68>)
 8001b1c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b1e:	4b10      	ldr	r3, [pc, #64]	; (8001b60 <_sbrk+0x64>)
 8001b20:	681a      	ldr	r2, [r3, #0]
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	4413      	add	r3, r2
 8001b26:	693a      	ldr	r2, [r7, #16]
 8001b28:	429a      	cmp	r2, r3
 8001b2a:	d207      	bcs.n	8001b3c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b2c:	f002 fb30 	bl	8004190 <__errno>
 8001b30:	4603      	mov	r3, r0
 8001b32:	220c      	movs	r2, #12
 8001b34:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b36:	f04f 33ff 	mov.w	r3, #4294967295
 8001b3a:	e009      	b.n	8001b50 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b3c:	4b08      	ldr	r3, [pc, #32]	; (8001b60 <_sbrk+0x64>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b42:	4b07      	ldr	r3, [pc, #28]	; (8001b60 <_sbrk+0x64>)
 8001b44:	681a      	ldr	r2, [r3, #0]
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	4413      	add	r3, r2
 8001b4a:	4a05      	ldr	r2, [pc, #20]	; (8001b60 <_sbrk+0x64>)
 8001b4c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b4e:	68fb      	ldr	r3, [r7, #12]
}
 8001b50:	4618      	mov	r0, r3
 8001b52:	3718      	adds	r7, #24
 8001b54:	46bd      	mov	sp, r7
 8001b56:	bd80      	pop	{r7, pc}
 8001b58:	20002800 	.word	0x20002800
 8001b5c:	00000400 	.word	0x00000400
 8001b60:	20000bac 	.word	0x20000bac
 8001b64:	20000bc8 	.word	0x20000bc8

08001b68 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b6c:	bf00      	nop
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	bc80      	pop	{r7}
 8001b72:	4770      	bx	lr

08001b74 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001b74:	f7ff fff8 	bl	8001b68 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001b78:	480b      	ldr	r0, [pc, #44]	; (8001ba8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001b7a:	490c      	ldr	r1, [pc, #48]	; (8001bac <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001b7c:	4a0c      	ldr	r2, [pc, #48]	; (8001bb0 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001b7e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b80:	e002      	b.n	8001b88 <LoopCopyDataInit>

08001b82 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b82:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b84:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b86:	3304      	adds	r3, #4

08001b88 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b88:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b8a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b8c:	d3f9      	bcc.n	8001b82 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b8e:	4a09      	ldr	r2, [pc, #36]	; (8001bb4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001b90:	4c09      	ldr	r4, [pc, #36]	; (8001bb8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001b92:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b94:	e001      	b.n	8001b9a <LoopFillZerobss>

08001b96 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b96:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b98:	3204      	adds	r2, #4

08001b9a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b9a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b9c:	d3fb      	bcc.n	8001b96 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001b9e:	f002 fafd 	bl	800419c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001ba2:	f7fe ff3d 	bl	8000a20 <main>
  bx lr
 8001ba6:	4770      	bx	lr
  ldr r0, =_sdata
 8001ba8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001bac:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 8001bb0:	080054c8 	.word	0x080054c8
  ldr r2, =_sbss
 8001bb4:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 8001bb8:	20000bc4 	.word	0x20000bc4

08001bbc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001bbc:	e7fe      	b.n	8001bbc <ADC1_2_IRQHandler>
	...

08001bc0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001bc4:	4b08      	ldr	r3, [pc, #32]	; (8001be8 <HAL_Init+0x28>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	4a07      	ldr	r2, [pc, #28]	; (8001be8 <HAL_Init+0x28>)
 8001bca:	f043 0310 	orr.w	r3, r3, #16
 8001bce:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001bd0:	2003      	movs	r0, #3
 8001bd2:	f000 f947 	bl	8001e64 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001bd6:	200f      	movs	r0, #15
 8001bd8:	f000 f808 	bl	8001bec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001bdc:	f7ff fd8a 	bl	80016f4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001be0:	2300      	movs	r3, #0
}
 8001be2:	4618      	mov	r0, r3
 8001be4:	bd80      	pop	{r7, pc}
 8001be6:	bf00      	nop
 8001be8:	40022000 	.word	0x40022000

08001bec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b082      	sub	sp, #8
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001bf4:	4b12      	ldr	r3, [pc, #72]	; (8001c40 <HAL_InitTick+0x54>)
 8001bf6:	681a      	ldr	r2, [r3, #0]
 8001bf8:	4b12      	ldr	r3, [pc, #72]	; (8001c44 <HAL_InitTick+0x58>)
 8001bfa:	781b      	ldrb	r3, [r3, #0]
 8001bfc:	4619      	mov	r1, r3
 8001bfe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c02:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c06:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	f000 f95f 	bl	8001ece <HAL_SYSTICK_Config>
 8001c10:	4603      	mov	r3, r0
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d001      	beq.n	8001c1a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001c16:	2301      	movs	r3, #1
 8001c18:	e00e      	b.n	8001c38 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	2b0f      	cmp	r3, #15
 8001c1e:	d80a      	bhi.n	8001c36 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c20:	2200      	movs	r2, #0
 8001c22:	6879      	ldr	r1, [r7, #4]
 8001c24:	f04f 30ff 	mov.w	r0, #4294967295
 8001c28:	f000 f927 	bl	8001e7a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c2c:	4a06      	ldr	r2, [pc, #24]	; (8001c48 <HAL_InitTick+0x5c>)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c32:	2300      	movs	r3, #0
 8001c34:	e000      	b.n	8001c38 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001c36:	2301      	movs	r3, #1
}
 8001c38:	4618      	mov	r0, r3
 8001c3a:	3708      	adds	r7, #8
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	bd80      	pop	{r7, pc}
 8001c40:	20000018 	.word	0x20000018
 8001c44:	20000020 	.word	0x20000020
 8001c48:	2000001c 	.word	0x2000001c

08001c4c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c50:	4b05      	ldr	r3, [pc, #20]	; (8001c68 <HAL_IncTick+0x1c>)
 8001c52:	781b      	ldrb	r3, [r3, #0]
 8001c54:	461a      	mov	r2, r3
 8001c56:	4b05      	ldr	r3, [pc, #20]	; (8001c6c <HAL_IncTick+0x20>)
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	4413      	add	r3, r2
 8001c5c:	4a03      	ldr	r2, [pc, #12]	; (8001c6c <HAL_IncTick+0x20>)
 8001c5e:	6013      	str	r3, [r2, #0]
}
 8001c60:	bf00      	nop
 8001c62:	46bd      	mov	sp, r7
 8001c64:	bc80      	pop	{r7}
 8001c66:	4770      	bx	lr
 8001c68:	20000020 	.word	0x20000020
 8001c6c:	20000bb0 	.word	0x20000bb0

08001c70 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c70:	b480      	push	{r7}
 8001c72:	af00      	add	r7, sp, #0
  return uwTick;
 8001c74:	4b02      	ldr	r3, [pc, #8]	; (8001c80 <HAL_GetTick+0x10>)
 8001c76:	681b      	ldr	r3, [r3, #0]
}
 8001c78:	4618      	mov	r0, r3
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bc80      	pop	{r7}
 8001c7e:	4770      	bx	lr
 8001c80:	20000bb0 	.word	0x20000bb0

08001c84 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b084      	sub	sp, #16
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c8c:	f7ff fff0 	bl	8001c70 <HAL_GetTick>
 8001c90:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c9c:	d005      	beq.n	8001caa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c9e:	4b0a      	ldr	r3, [pc, #40]	; (8001cc8 <HAL_Delay+0x44>)
 8001ca0:	781b      	ldrb	r3, [r3, #0]
 8001ca2:	461a      	mov	r2, r3
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	4413      	add	r3, r2
 8001ca8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001caa:	bf00      	nop
 8001cac:	f7ff ffe0 	bl	8001c70 <HAL_GetTick>
 8001cb0:	4602      	mov	r2, r0
 8001cb2:	68bb      	ldr	r3, [r7, #8]
 8001cb4:	1ad3      	subs	r3, r2, r3
 8001cb6:	68fa      	ldr	r2, [r7, #12]
 8001cb8:	429a      	cmp	r2, r3
 8001cba:	d8f7      	bhi.n	8001cac <HAL_Delay+0x28>
  {
  }
}
 8001cbc:	bf00      	nop
 8001cbe:	bf00      	nop
 8001cc0:	3710      	adds	r7, #16
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	bd80      	pop	{r7, pc}
 8001cc6:	bf00      	nop
 8001cc8:	20000020 	.word	0x20000020

08001ccc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	b085      	sub	sp, #20
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	f003 0307 	and.w	r3, r3, #7
 8001cda:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001cdc:	4b0c      	ldr	r3, [pc, #48]	; (8001d10 <__NVIC_SetPriorityGrouping+0x44>)
 8001cde:	68db      	ldr	r3, [r3, #12]
 8001ce0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ce2:	68ba      	ldr	r2, [r7, #8]
 8001ce4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001ce8:	4013      	ands	r3, r2
 8001cea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001cf0:	68bb      	ldr	r3, [r7, #8]
 8001cf2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001cf4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001cf8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001cfc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001cfe:	4a04      	ldr	r2, [pc, #16]	; (8001d10 <__NVIC_SetPriorityGrouping+0x44>)
 8001d00:	68bb      	ldr	r3, [r7, #8]
 8001d02:	60d3      	str	r3, [r2, #12]
}
 8001d04:	bf00      	nop
 8001d06:	3714      	adds	r7, #20
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	bc80      	pop	{r7}
 8001d0c:	4770      	bx	lr
 8001d0e:	bf00      	nop
 8001d10:	e000ed00 	.word	0xe000ed00

08001d14 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d14:	b480      	push	{r7}
 8001d16:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d18:	4b04      	ldr	r3, [pc, #16]	; (8001d2c <__NVIC_GetPriorityGrouping+0x18>)
 8001d1a:	68db      	ldr	r3, [r3, #12]
 8001d1c:	0a1b      	lsrs	r3, r3, #8
 8001d1e:	f003 0307 	and.w	r3, r3, #7
}
 8001d22:	4618      	mov	r0, r3
 8001d24:	46bd      	mov	sp, r7
 8001d26:	bc80      	pop	{r7}
 8001d28:	4770      	bx	lr
 8001d2a:	bf00      	nop
 8001d2c:	e000ed00 	.word	0xe000ed00

08001d30 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d30:	b480      	push	{r7}
 8001d32:	b083      	sub	sp, #12
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	4603      	mov	r3, r0
 8001d38:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	db0b      	blt.n	8001d5a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d42:	79fb      	ldrb	r3, [r7, #7]
 8001d44:	f003 021f 	and.w	r2, r3, #31
 8001d48:	4906      	ldr	r1, [pc, #24]	; (8001d64 <__NVIC_EnableIRQ+0x34>)
 8001d4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d4e:	095b      	lsrs	r3, r3, #5
 8001d50:	2001      	movs	r0, #1
 8001d52:	fa00 f202 	lsl.w	r2, r0, r2
 8001d56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001d5a:	bf00      	nop
 8001d5c:	370c      	adds	r7, #12
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	bc80      	pop	{r7}
 8001d62:	4770      	bx	lr
 8001d64:	e000e100 	.word	0xe000e100

08001d68 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d68:	b480      	push	{r7}
 8001d6a:	b083      	sub	sp, #12
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	4603      	mov	r3, r0
 8001d70:	6039      	str	r1, [r7, #0]
 8001d72:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	db0a      	blt.n	8001d92 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d7c:	683b      	ldr	r3, [r7, #0]
 8001d7e:	b2da      	uxtb	r2, r3
 8001d80:	490c      	ldr	r1, [pc, #48]	; (8001db4 <__NVIC_SetPriority+0x4c>)
 8001d82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d86:	0112      	lsls	r2, r2, #4
 8001d88:	b2d2      	uxtb	r2, r2
 8001d8a:	440b      	add	r3, r1
 8001d8c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d90:	e00a      	b.n	8001da8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d92:	683b      	ldr	r3, [r7, #0]
 8001d94:	b2da      	uxtb	r2, r3
 8001d96:	4908      	ldr	r1, [pc, #32]	; (8001db8 <__NVIC_SetPriority+0x50>)
 8001d98:	79fb      	ldrb	r3, [r7, #7]
 8001d9a:	f003 030f 	and.w	r3, r3, #15
 8001d9e:	3b04      	subs	r3, #4
 8001da0:	0112      	lsls	r2, r2, #4
 8001da2:	b2d2      	uxtb	r2, r2
 8001da4:	440b      	add	r3, r1
 8001da6:	761a      	strb	r2, [r3, #24]
}
 8001da8:	bf00      	nop
 8001daa:	370c      	adds	r7, #12
 8001dac:	46bd      	mov	sp, r7
 8001dae:	bc80      	pop	{r7}
 8001db0:	4770      	bx	lr
 8001db2:	bf00      	nop
 8001db4:	e000e100 	.word	0xe000e100
 8001db8:	e000ed00 	.word	0xe000ed00

08001dbc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	b089      	sub	sp, #36	; 0x24
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	60f8      	str	r0, [r7, #12]
 8001dc4:	60b9      	str	r1, [r7, #8]
 8001dc6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	f003 0307 	and.w	r3, r3, #7
 8001dce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001dd0:	69fb      	ldr	r3, [r7, #28]
 8001dd2:	f1c3 0307 	rsb	r3, r3, #7
 8001dd6:	2b04      	cmp	r3, #4
 8001dd8:	bf28      	it	cs
 8001dda:	2304      	movcs	r3, #4
 8001ddc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001dde:	69fb      	ldr	r3, [r7, #28]
 8001de0:	3304      	adds	r3, #4
 8001de2:	2b06      	cmp	r3, #6
 8001de4:	d902      	bls.n	8001dec <NVIC_EncodePriority+0x30>
 8001de6:	69fb      	ldr	r3, [r7, #28]
 8001de8:	3b03      	subs	r3, #3
 8001dea:	e000      	b.n	8001dee <NVIC_EncodePriority+0x32>
 8001dec:	2300      	movs	r3, #0
 8001dee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001df0:	f04f 32ff 	mov.w	r2, #4294967295
 8001df4:	69bb      	ldr	r3, [r7, #24]
 8001df6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dfa:	43da      	mvns	r2, r3
 8001dfc:	68bb      	ldr	r3, [r7, #8]
 8001dfe:	401a      	ands	r2, r3
 8001e00:	697b      	ldr	r3, [r7, #20]
 8001e02:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e04:	f04f 31ff 	mov.w	r1, #4294967295
 8001e08:	697b      	ldr	r3, [r7, #20]
 8001e0a:	fa01 f303 	lsl.w	r3, r1, r3
 8001e0e:	43d9      	mvns	r1, r3
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e14:	4313      	orrs	r3, r2
         );
}
 8001e16:	4618      	mov	r0, r3
 8001e18:	3724      	adds	r7, #36	; 0x24
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	bc80      	pop	{r7}
 8001e1e:	4770      	bx	lr

08001e20 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b082      	sub	sp, #8
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	3b01      	subs	r3, #1
 8001e2c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e30:	d301      	bcc.n	8001e36 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e32:	2301      	movs	r3, #1
 8001e34:	e00f      	b.n	8001e56 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e36:	4a0a      	ldr	r2, [pc, #40]	; (8001e60 <SysTick_Config+0x40>)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	3b01      	subs	r3, #1
 8001e3c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e3e:	210f      	movs	r1, #15
 8001e40:	f04f 30ff 	mov.w	r0, #4294967295
 8001e44:	f7ff ff90 	bl	8001d68 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e48:	4b05      	ldr	r3, [pc, #20]	; (8001e60 <SysTick_Config+0x40>)
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e4e:	4b04      	ldr	r3, [pc, #16]	; (8001e60 <SysTick_Config+0x40>)
 8001e50:	2207      	movs	r2, #7
 8001e52:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e54:	2300      	movs	r3, #0
}
 8001e56:	4618      	mov	r0, r3
 8001e58:	3708      	adds	r7, #8
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	bd80      	pop	{r7, pc}
 8001e5e:	bf00      	nop
 8001e60:	e000e010 	.word	0xe000e010

08001e64 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b082      	sub	sp, #8
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e6c:	6878      	ldr	r0, [r7, #4]
 8001e6e:	f7ff ff2d 	bl	8001ccc <__NVIC_SetPriorityGrouping>
}
 8001e72:	bf00      	nop
 8001e74:	3708      	adds	r7, #8
 8001e76:	46bd      	mov	sp, r7
 8001e78:	bd80      	pop	{r7, pc}

08001e7a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e7a:	b580      	push	{r7, lr}
 8001e7c:	b086      	sub	sp, #24
 8001e7e:	af00      	add	r7, sp, #0
 8001e80:	4603      	mov	r3, r0
 8001e82:	60b9      	str	r1, [r7, #8]
 8001e84:	607a      	str	r2, [r7, #4]
 8001e86:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e88:	2300      	movs	r3, #0
 8001e8a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e8c:	f7ff ff42 	bl	8001d14 <__NVIC_GetPriorityGrouping>
 8001e90:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e92:	687a      	ldr	r2, [r7, #4]
 8001e94:	68b9      	ldr	r1, [r7, #8]
 8001e96:	6978      	ldr	r0, [r7, #20]
 8001e98:	f7ff ff90 	bl	8001dbc <NVIC_EncodePriority>
 8001e9c:	4602      	mov	r2, r0
 8001e9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ea2:	4611      	mov	r1, r2
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	f7ff ff5f 	bl	8001d68 <__NVIC_SetPriority>
}
 8001eaa:	bf00      	nop
 8001eac:	3718      	adds	r7, #24
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	bd80      	pop	{r7, pc}

08001eb2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001eb2:	b580      	push	{r7, lr}
 8001eb4:	b082      	sub	sp, #8
 8001eb6:	af00      	add	r7, sp, #0
 8001eb8:	4603      	mov	r3, r0
 8001eba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ebc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	f7ff ff35 	bl	8001d30 <__NVIC_EnableIRQ>
}
 8001ec6:	bf00      	nop
 8001ec8:	3708      	adds	r7, #8
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	bd80      	pop	{r7, pc}

08001ece <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ece:	b580      	push	{r7, lr}
 8001ed0:	b082      	sub	sp, #8
 8001ed2:	af00      	add	r7, sp, #0
 8001ed4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ed6:	6878      	ldr	r0, [r7, #4]
 8001ed8:	f7ff ffa2 	bl	8001e20 <SysTick_Config>
 8001edc:	4603      	mov	r3, r0
}
 8001ede:	4618      	mov	r0, r3
 8001ee0:	3708      	adds	r7, #8
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	bd80      	pop	{r7, pc}
	...

08001ee8 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001ee8:	b480      	push	{r7}
 8001eea:	b085      	sub	sp, #20
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d101      	bne.n	8001efe <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001efa:	2301      	movs	r3, #1
 8001efc:	e043      	b.n	8001f86 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	461a      	mov	r2, r3
 8001f04:	4b22      	ldr	r3, [pc, #136]	; (8001f90 <HAL_DMA_Init+0xa8>)
 8001f06:	4413      	add	r3, r2
 8001f08:	4a22      	ldr	r2, [pc, #136]	; (8001f94 <HAL_DMA_Init+0xac>)
 8001f0a:	fba2 2303 	umull	r2, r3, r2, r3
 8001f0e:	091b      	lsrs	r3, r3, #4
 8001f10:	009a      	lsls	r2, r3, #2
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	4a1f      	ldr	r2, [pc, #124]	; (8001f98 <HAL_DMA_Init+0xb0>)
 8001f1a:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	2202      	movs	r2, #2
 8001f20:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001f32:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001f36:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001f40:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	68db      	ldr	r3, [r3, #12]
 8001f46:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f4c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	695b      	ldr	r3, [r3, #20]
 8001f52:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f58:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	69db      	ldr	r3, [r3, #28]
 8001f5e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001f60:	68fa      	ldr	r2, [r7, #12]
 8001f62:	4313      	orrs	r3, r2
 8001f64:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	68fa      	ldr	r2, [r7, #12]
 8001f6c:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	2200      	movs	r2, #0
 8001f72:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	2201      	movs	r2, #1
 8001f78:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	2200      	movs	r2, #0
 8001f80:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001f84:	2300      	movs	r3, #0
}
 8001f86:	4618      	mov	r0, r3
 8001f88:	3714      	adds	r7, #20
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	bc80      	pop	{r7}
 8001f8e:	4770      	bx	lr
 8001f90:	bffdfff8 	.word	0xbffdfff8
 8001f94:	cccccccd 	.word	0xcccccccd
 8001f98:	40020000 	.word	0x40020000

08001f9c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b086      	sub	sp, #24
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	60f8      	str	r0, [r7, #12]
 8001fa4:	60b9      	str	r1, [r7, #8]
 8001fa6:	607a      	str	r2, [r7, #4]
 8001fa8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001faa:	2300      	movs	r3, #0
 8001fac:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001fb4:	2b01      	cmp	r3, #1
 8001fb6:	d101      	bne.n	8001fbc <HAL_DMA_Start_IT+0x20>
 8001fb8:	2302      	movs	r3, #2
 8001fba:	e04b      	b.n	8002054 <HAL_DMA_Start_IT+0xb8>
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	2201      	movs	r2, #1
 8001fc0:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001fca:	b2db      	uxtb	r3, r3
 8001fcc:	2b01      	cmp	r3, #1
 8001fce:	d13a      	bne.n	8002046 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	2202      	movs	r2, #2
 8001fd4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	2200      	movs	r2, #0
 8001fdc:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	681a      	ldr	r2, [r3, #0]
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f022 0201 	bic.w	r2, r2, #1
 8001fec:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001fee:	683b      	ldr	r3, [r7, #0]
 8001ff0:	687a      	ldr	r2, [r7, #4]
 8001ff2:	68b9      	ldr	r1, [r7, #8]
 8001ff4:	68f8      	ldr	r0, [r7, #12]
 8001ff6:	f000 f9eb 	bl	80023d0 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d008      	beq.n	8002014 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	681a      	ldr	r2, [r3, #0]
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f042 020e 	orr.w	r2, r2, #14
 8002010:	601a      	str	r2, [r3, #0]
 8002012:	e00f      	b.n	8002034 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	681a      	ldr	r2, [r3, #0]
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f022 0204 	bic.w	r2, r2, #4
 8002022:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	681a      	ldr	r2, [r3, #0]
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f042 020a 	orr.w	r2, r2, #10
 8002032:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	681a      	ldr	r2, [r3, #0]
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f042 0201 	orr.w	r2, r2, #1
 8002042:	601a      	str	r2, [r3, #0]
 8002044:	e005      	b.n	8002052 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	2200      	movs	r2, #0
 800204a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 800204e:	2302      	movs	r3, #2
 8002050:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8002052:	7dfb      	ldrb	r3, [r7, #23]
}
 8002054:	4618      	mov	r0, r3
 8002056:	3718      	adds	r7, #24
 8002058:	46bd      	mov	sp, r7
 800205a:	bd80      	pop	{r7, pc}

0800205c <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800205c:	b480      	push	{r7}
 800205e:	b085      	sub	sp, #20
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002064:	2300      	movs	r3, #0
 8002066:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800206e:	b2db      	uxtb	r3, r3
 8002070:	2b02      	cmp	r3, #2
 8002072:	d008      	beq.n	8002086 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	2204      	movs	r2, #4
 8002078:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	2200      	movs	r2, #0
 800207e:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002082:	2301      	movs	r3, #1
 8002084:	e020      	b.n	80020c8 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	681a      	ldr	r2, [r3, #0]
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f022 020e 	bic.w	r2, r2, #14
 8002094:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	681a      	ldr	r2, [r3, #0]
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f022 0201 	bic.w	r2, r2, #1
 80020a4:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020ae:	2101      	movs	r1, #1
 80020b0:	fa01 f202 	lsl.w	r2, r1, r2
 80020b4:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	2201      	movs	r2, #1
 80020ba:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	2200      	movs	r2, #0
 80020c2:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80020c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80020c8:	4618      	mov	r0, r3
 80020ca:	3714      	adds	r7, #20
 80020cc:	46bd      	mov	sp, r7
 80020ce:	bc80      	pop	{r7}
 80020d0:	4770      	bx	lr
	...

080020d4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b084      	sub	sp, #16
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80020dc:	2300      	movs	r3, #0
 80020de:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80020e6:	b2db      	uxtb	r3, r3
 80020e8:	2b02      	cmp	r3, #2
 80020ea:	d005      	beq.n	80020f8 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	2204      	movs	r2, #4
 80020f0:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80020f2:	2301      	movs	r3, #1
 80020f4:	73fb      	strb	r3, [r7, #15]
 80020f6:	e051      	b.n	800219c <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	681a      	ldr	r2, [r3, #0]
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f022 020e 	bic.w	r2, r2, #14
 8002106:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	681a      	ldr	r2, [r3, #0]
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f022 0201 	bic.w	r2, r2, #1
 8002116:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	4a22      	ldr	r2, [pc, #136]	; (80021a8 <HAL_DMA_Abort_IT+0xd4>)
 800211e:	4293      	cmp	r3, r2
 8002120:	d029      	beq.n	8002176 <HAL_DMA_Abort_IT+0xa2>
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	4a21      	ldr	r2, [pc, #132]	; (80021ac <HAL_DMA_Abort_IT+0xd8>)
 8002128:	4293      	cmp	r3, r2
 800212a:	d022      	beq.n	8002172 <HAL_DMA_Abort_IT+0x9e>
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	4a1f      	ldr	r2, [pc, #124]	; (80021b0 <HAL_DMA_Abort_IT+0xdc>)
 8002132:	4293      	cmp	r3, r2
 8002134:	d01a      	beq.n	800216c <HAL_DMA_Abort_IT+0x98>
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	4a1e      	ldr	r2, [pc, #120]	; (80021b4 <HAL_DMA_Abort_IT+0xe0>)
 800213c:	4293      	cmp	r3, r2
 800213e:	d012      	beq.n	8002166 <HAL_DMA_Abort_IT+0x92>
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	4a1c      	ldr	r2, [pc, #112]	; (80021b8 <HAL_DMA_Abort_IT+0xe4>)
 8002146:	4293      	cmp	r3, r2
 8002148:	d00a      	beq.n	8002160 <HAL_DMA_Abort_IT+0x8c>
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	4a1b      	ldr	r2, [pc, #108]	; (80021bc <HAL_DMA_Abort_IT+0xe8>)
 8002150:	4293      	cmp	r3, r2
 8002152:	d102      	bne.n	800215a <HAL_DMA_Abort_IT+0x86>
 8002154:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002158:	e00e      	b.n	8002178 <HAL_DMA_Abort_IT+0xa4>
 800215a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800215e:	e00b      	b.n	8002178 <HAL_DMA_Abort_IT+0xa4>
 8002160:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002164:	e008      	b.n	8002178 <HAL_DMA_Abort_IT+0xa4>
 8002166:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800216a:	e005      	b.n	8002178 <HAL_DMA_Abort_IT+0xa4>
 800216c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002170:	e002      	b.n	8002178 <HAL_DMA_Abort_IT+0xa4>
 8002172:	2310      	movs	r3, #16
 8002174:	e000      	b.n	8002178 <HAL_DMA_Abort_IT+0xa4>
 8002176:	2301      	movs	r3, #1
 8002178:	4a11      	ldr	r2, [pc, #68]	; (80021c0 <HAL_DMA_Abort_IT+0xec>)
 800217a:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	2201      	movs	r2, #1
 8002180:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	2200      	movs	r2, #0
 8002188:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002190:	2b00      	cmp	r3, #0
 8002192:	d003      	beq.n	800219c <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002198:	6878      	ldr	r0, [r7, #4]
 800219a:	4798      	blx	r3
    } 
  }
  return status;
 800219c:	7bfb      	ldrb	r3, [r7, #15]
}
 800219e:	4618      	mov	r0, r3
 80021a0:	3710      	adds	r7, #16
 80021a2:	46bd      	mov	sp, r7
 80021a4:	bd80      	pop	{r7, pc}
 80021a6:	bf00      	nop
 80021a8:	40020008 	.word	0x40020008
 80021ac:	4002001c 	.word	0x4002001c
 80021b0:	40020030 	.word	0x40020030
 80021b4:	40020044 	.word	0x40020044
 80021b8:	40020058 	.word	0x40020058
 80021bc:	4002006c 	.word	0x4002006c
 80021c0:	40020000 	.word	0x40020000

080021c4 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b084      	sub	sp, #16
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021e0:	2204      	movs	r2, #4
 80021e2:	409a      	lsls	r2, r3
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	4013      	ands	r3, r2
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d04f      	beq.n	800228c <HAL_DMA_IRQHandler+0xc8>
 80021ec:	68bb      	ldr	r3, [r7, #8]
 80021ee:	f003 0304 	and.w	r3, r3, #4
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d04a      	beq.n	800228c <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f003 0320 	and.w	r3, r3, #32
 8002200:	2b00      	cmp	r3, #0
 8002202:	d107      	bne.n	8002214 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	681a      	ldr	r2, [r3, #0]
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f022 0204 	bic.w	r2, r2, #4
 8002212:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	4a66      	ldr	r2, [pc, #408]	; (80023b4 <HAL_DMA_IRQHandler+0x1f0>)
 800221a:	4293      	cmp	r3, r2
 800221c:	d029      	beq.n	8002272 <HAL_DMA_IRQHandler+0xae>
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	4a65      	ldr	r2, [pc, #404]	; (80023b8 <HAL_DMA_IRQHandler+0x1f4>)
 8002224:	4293      	cmp	r3, r2
 8002226:	d022      	beq.n	800226e <HAL_DMA_IRQHandler+0xaa>
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	4a63      	ldr	r2, [pc, #396]	; (80023bc <HAL_DMA_IRQHandler+0x1f8>)
 800222e:	4293      	cmp	r3, r2
 8002230:	d01a      	beq.n	8002268 <HAL_DMA_IRQHandler+0xa4>
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	4a62      	ldr	r2, [pc, #392]	; (80023c0 <HAL_DMA_IRQHandler+0x1fc>)
 8002238:	4293      	cmp	r3, r2
 800223a:	d012      	beq.n	8002262 <HAL_DMA_IRQHandler+0x9e>
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	4a60      	ldr	r2, [pc, #384]	; (80023c4 <HAL_DMA_IRQHandler+0x200>)
 8002242:	4293      	cmp	r3, r2
 8002244:	d00a      	beq.n	800225c <HAL_DMA_IRQHandler+0x98>
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	4a5f      	ldr	r2, [pc, #380]	; (80023c8 <HAL_DMA_IRQHandler+0x204>)
 800224c:	4293      	cmp	r3, r2
 800224e:	d102      	bne.n	8002256 <HAL_DMA_IRQHandler+0x92>
 8002250:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002254:	e00e      	b.n	8002274 <HAL_DMA_IRQHandler+0xb0>
 8002256:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800225a:	e00b      	b.n	8002274 <HAL_DMA_IRQHandler+0xb0>
 800225c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002260:	e008      	b.n	8002274 <HAL_DMA_IRQHandler+0xb0>
 8002262:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002266:	e005      	b.n	8002274 <HAL_DMA_IRQHandler+0xb0>
 8002268:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800226c:	e002      	b.n	8002274 <HAL_DMA_IRQHandler+0xb0>
 800226e:	2340      	movs	r3, #64	; 0x40
 8002270:	e000      	b.n	8002274 <HAL_DMA_IRQHandler+0xb0>
 8002272:	2304      	movs	r3, #4
 8002274:	4a55      	ldr	r2, [pc, #340]	; (80023cc <HAL_DMA_IRQHandler+0x208>)
 8002276:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800227c:	2b00      	cmp	r3, #0
 800227e:	f000 8094 	beq.w	80023aa <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002286:	6878      	ldr	r0, [r7, #4]
 8002288:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 800228a:	e08e      	b.n	80023aa <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002290:	2202      	movs	r2, #2
 8002292:	409a      	lsls	r2, r3
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	4013      	ands	r3, r2
 8002298:	2b00      	cmp	r3, #0
 800229a:	d056      	beq.n	800234a <HAL_DMA_IRQHandler+0x186>
 800229c:	68bb      	ldr	r3, [r7, #8]
 800229e:	f003 0302 	and.w	r3, r3, #2
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d051      	beq.n	800234a <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f003 0320 	and.w	r3, r3, #32
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d10b      	bne.n	80022cc <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	681a      	ldr	r2, [r3, #0]
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f022 020a 	bic.w	r2, r2, #10
 80022c2:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	2201      	movs	r2, #1
 80022c8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	4a38      	ldr	r2, [pc, #224]	; (80023b4 <HAL_DMA_IRQHandler+0x1f0>)
 80022d2:	4293      	cmp	r3, r2
 80022d4:	d029      	beq.n	800232a <HAL_DMA_IRQHandler+0x166>
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	4a37      	ldr	r2, [pc, #220]	; (80023b8 <HAL_DMA_IRQHandler+0x1f4>)
 80022dc:	4293      	cmp	r3, r2
 80022de:	d022      	beq.n	8002326 <HAL_DMA_IRQHandler+0x162>
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	4a35      	ldr	r2, [pc, #212]	; (80023bc <HAL_DMA_IRQHandler+0x1f8>)
 80022e6:	4293      	cmp	r3, r2
 80022e8:	d01a      	beq.n	8002320 <HAL_DMA_IRQHandler+0x15c>
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	4a34      	ldr	r2, [pc, #208]	; (80023c0 <HAL_DMA_IRQHandler+0x1fc>)
 80022f0:	4293      	cmp	r3, r2
 80022f2:	d012      	beq.n	800231a <HAL_DMA_IRQHandler+0x156>
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	4a32      	ldr	r2, [pc, #200]	; (80023c4 <HAL_DMA_IRQHandler+0x200>)
 80022fa:	4293      	cmp	r3, r2
 80022fc:	d00a      	beq.n	8002314 <HAL_DMA_IRQHandler+0x150>
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	4a31      	ldr	r2, [pc, #196]	; (80023c8 <HAL_DMA_IRQHandler+0x204>)
 8002304:	4293      	cmp	r3, r2
 8002306:	d102      	bne.n	800230e <HAL_DMA_IRQHandler+0x14a>
 8002308:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800230c:	e00e      	b.n	800232c <HAL_DMA_IRQHandler+0x168>
 800230e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002312:	e00b      	b.n	800232c <HAL_DMA_IRQHandler+0x168>
 8002314:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002318:	e008      	b.n	800232c <HAL_DMA_IRQHandler+0x168>
 800231a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800231e:	e005      	b.n	800232c <HAL_DMA_IRQHandler+0x168>
 8002320:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002324:	e002      	b.n	800232c <HAL_DMA_IRQHandler+0x168>
 8002326:	2320      	movs	r3, #32
 8002328:	e000      	b.n	800232c <HAL_DMA_IRQHandler+0x168>
 800232a:	2302      	movs	r3, #2
 800232c:	4a27      	ldr	r2, [pc, #156]	; (80023cc <HAL_DMA_IRQHandler+0x208>)
 800232e:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	2200      	movs	r2, #0
 8002334:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800233c:	2b00      	cmp	r3, #0
 800233e:	d034      	beq.n	80023aa <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002344:	6878      	ldr	r0, [r7, #4]
 8002346:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002348:	e02f      	b.n	80023aa <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800234e:	2208      	movs	r2, #8
 8002350:	409a      	lsls	r2, r3
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	4013      	ands	r3, r2
 8002356:	2b00      	cmp	r3, #0
 8002358:	d028      	beq.n	80023ac <HAL_DMA_IRQHandler+0x1e8>
 800235a:	68bb      	ldr	r3, [r7, #8]
 800235c:	f003 0308 	and.w	r3, r3, #8
 8002360:	2b00      	cmp	r3, #0
 8002362:	d023      	beq.n	80023ac <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	681a      	ldr	r2, [r3, #0]
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f022 020e 	bic.w	r2, r2, #14
 8002372:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800237c:	2101      	movs	r1, #1
 800237e:	fa01 f202 	lsl.w	r2, r1, r2
 8002382:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	2201      	movs	r2, #1
 8002388:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	2201      	movs	r2, #1
 800238e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	2200      	movs	r2, #0
 8002396:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d004      	beq.n	80023ac <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023a6:	6878      	ldr	r0, [r7, #4]
 80023a8:	4798      	blx	r3
    }
  }
  return;
 80023aa:	bf00      	nop
 80023ac:	bf00      	nop
}
 80023ae:	3710      	adds	r7, #16
 80023b0:	46bd      	mov	sp, r7
 80023b2:	bd80      	pop	{r7, pc}
 80023b4:	40020008 	.word	0x40020008
 80023b8:	4002001c 	.word	0x4002001c
 80023bc:	40020030 	.word	0x40020030
 80023c0:	40020044 	.word	0x40020044
 80023c4:	40020058 	.word	0x40020058
 80023c8:	4002006c 	.word	0x4002006c
 80023cc:	40020000 	.word	0x40020000

080023d0 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80023d0:	b480      	push	{r7}
 80023d2:	b085      	sub	sp, #20
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	60f8      	str	r0, [r7, #12]
 80023d8:	60b9      	str	r1, [r7, #8]
 80023da:	607a      	str	r2, [r7, #4]
 80023dc:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023e6:	2101      	movs	r1, #1
 80023e8:	fa01 f202 	lsl.w	r2, r1, r2
 80023ec:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	683a      	ldr	r2, [r7, #0]
 80023f4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	685b      	ldr	r3, [r3, #4]
 80023fa:	2b10      	cmp	r3, #16
 80023fc:	d108      	bne.n	8002410 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	687a      	ldr	r2, [r7, #4]
 8002404:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	68ba      	ldr	r2, [r7, #8]
 800240c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800240e:	e007      	b.n	8002420 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	68ba      	ldr	r2, [r7, #8]
 8002416:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	687a      	ldr	r2, [r7, #4]
 800241e:	60da      	str	r2, [r3, #12]
}
 8002420:	bf00      	nop
 8002422:	3714      	adds	r7, #20
 8002424:	46bd      	mov	sp, r7
 8002426:	bc80      	pop	{r7}
 8002428:	4770      	bx	lr
	...

0800242c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800242c:	b480      	push	{r7}
 800242e:	b08b      	sub	sp, #44	; 0x2c
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
 8002434:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002436:	2300      	movs	r3, #0
 8002438:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800243a:	2300      	movs	r3, #0
 800243c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800243e:	e161      	b.n	8002704 <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002440:	2201      	movs	r2, #1
 8002442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002444:	fa02 f303 	lsl.w	r3, r2, r3
 8002448:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	69fa      	ldr	r2, [r7, #28]
 8002450:	4013      	ands	r3, r2
 8002452:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002454:	69ba      	ldr	r2, [r7, #24]
 8002456:	69fb      	ldr	r3, [r7, #28]
 8002458:	429a      	cmp	r2, r3
 800245a:	f040 8150 	bne.w	80026fe <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800245e:	683b      	ldr	r3, [r7, #0]
 8002460:	685b      	ldr	r3, [r3, #4]
 8002462:	4a97      	ldr	r2, [pc, #604]	; (80026c0 <HAL_GPIO_Init+0x294>)
 8002464:	4293      	cmp	r3, r2
 8002466:	d05e      	beq.n	8002526 <HAL_GPIO_Init+0xfa>
 8002468:	4a95      	ldr	r2, [pc, #596]	; (80026c0 <HAL_GPIO_Init+0x294>)
 800246a:	4293      	cmp	r3, r2
 800246c:	d875      	bhi.n	800255a <HAL_GPIO_Init+0x12e>
 800246e:	4a95      	ldr	r2, [pc, #596]	; (80026c4 <HAL_GPIO_Init+0x298>)
 8002470:	4293      	cmp	r3, r2
 8002472:	d058      	beq.n	8002526 <HAL_GPIO_Init+0xfa>
 8002474:	4a93      	ldr	r2, [pc, #588]	; (80026c4 <HAL_GPIO_Init+0x298>)
 8002476:	4293      	cmp	r3, r2
 8002478:	d86f      	bhi.n	800255a <HAL_GPIO_Init+0x12e>
 800247a:	4a93      	ldr	r2, [pc, #588]	; (80026c8 <HAL_GPIO_Init+0x29c>)
 800247c:	4293      	cmp	r3, r2
 800247e:	d052      	beq.n	8002526 <HAL_GPIO_Init+0xfa>
 8002480:	4a91      	ldr	r2, [pc, #580]	; (80026c8 <HAL_GPIO_Init+0x29c>)
 8002482:	4293      	cmp	r3, r2
 8002484:	d869      	bhi.n	800255a <HAL_GPIO_Init+0x12e>
 8002486:	4a91      	ldr	r2, [pc, #580]	; (80026cc <HAL_GPIO_Init+0x2a0>)
 8002488:	4293      	cmp	r3, r2
 800248a:	d04c      	beq.n	8002526 <HAL_GPIO_Init+0xfa>
 800248c:	4a8f      	ldr	r2, [pc, #572]	; (80026cc <HAL_GPIO_Init+0x2a0>)
 800248e:	4293      	cmp	r3, r2
 8002490:	d863      	bhi.n	800255a <HAL_GPIO_Init+0x12e>
 8002492:	4a8f      	ldr	r2, [pc, #572]	; (80026d0 <HAL_GPIO_Init+0x2a4>)
 8002494:	4293      	cmp	r3, r2
 8002496:	d046      	beq.n	8002526 <HAL_GPIO_Init+0xfa>
 8002498:	4a8d      	ldr	r2, [pc, #564]	; (80026d0 <HAL_GPIO_Init+0x2a4>)
 800249a:	4293      	cmp	r3, r2
 800249c:	d85d      	bhi.n	800255a <HAL_GPIO_Init+0x12e>
 800249e:	2b12      	cmp	r3, #18
 80024a0:	d82a      	bhi.n	80024f8 <HAL_GPIO_Init+0xcc>
 80024a2:	2b12      	cmp	r3, #18
 80024a4:	d859      	bhi.n	800255a <HAL_GPIO_Init+0x12e>
 80024a6:	a201      	add	r2, pc, #4	; (adr r2, 80024ac <HAL_GPIO_Init+0x80>)
 80024a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024ac:	08002527 	.word	0x08002527
 80024b0:	08002501 	.word	0x08002501
 80024b4:	08002513 	.word	0x08002513
 80024b8:	08002555 	.word	0x08002555
 80024bc:	0800255b 	.word	0x0800255b
 80024c0:	0800255b 	.word	0x0800255b
 80024c4:	0800255b 	.word	0x0800255b
 80024c8:	0800255b 	.word	0x0800255b
 80024cc:	0800255b 	.word	0x0800255b
 80024d0:	0800255b 	.word	0x0800255b
 80024d4:	0800255b 	.word	0x0800255b
 80024d8:	0800255b 	.word	0x0800255b
 80024dc:	0800255b 	.word	0x0800255b
 80024e0:	0800255b 	.word	0x0800255b
 80024e4:	0800255b 	.word	0x0800255b
 80024e8:	0800255b 	.word	0x0800255b
 80024ec:	0800255b 	.word	0x0800255b
 80024f0:	08002509 	.word	0x08002509
 80024f4:	0800251d 	.word	0x0800251d
 80024f8:	4a76      	ldr	r2, [pc, #472]	; (80026d4 <HAL_GPIO_Init+0x2a8>)
 80024fa:	4293      	cmp	r3, r2
 80024fc:	d013      	beq.n	8002526 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80024fe:	e02c      	b.n	800255a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	68db      	ldr	r3, [r3, #12]
 8002504:	623b      	str	r3, [r7, #32]
          break;
 8002506:	e029      	b.n	800255c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	68db      	ldr	r3, [r3, #12]
 800250c:	3304      	adds	r3, #4
 800250e:	623b      	str	r3, [r7, #32]
          break;
 8002510:	e024      	b.n	800255c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002512:	683b      	ldr	r3, [r7, #0]
 8002514:	68db      	ldr	r3, [r3, #12]
 8002516:	3308      	adds	r3, #8
 8002518:	623b      	str	r3, [r7, #32]
          break;
 800251a:	e01f      	b.n	800255c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	68db      	ldr	r3, [r3, #12]
 8002520:	330c      	adds	r3, #12
 8002522:	623b      	str	r3, [r7, #32]
          break;
 8002524:	e01a      	b.n	800255c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002526:	683b      	ldr	r3, [r7, #0]
 8002528:	689b      	ldr	r3, [r3, #8]
 800252a:	2b00      	cmp	r3, #0
 800252c:	d102      	bne.n	8002534 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800252e:	2304      	movs	r3, #4
 8002530:	623b      	str	r3, [r7, #32]
          break;
 8002532:	e013      	b.n	800255c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	689b      	ldr	r3, [r3, #8]
 8002538:	2b01      	cmp	r3, #1
 800253a:	d105      	bne.n	8002548 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800253c:	2308      	movs	r3, #8
 800253e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	69fa      	ldr	r2, [r7, #28]
 8002544:	611a      	str	r2, [r3, #16]
          break;
 8002546:	e009      	b.n	800255c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002548:	2308      	movs	r3, #8
 800254a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	69fa      	ldr	r2, [r7, #28]
 8002550:	615a      	str	r2, [r3, #20]
          break;
 8002552:	e003      	b.n	800255c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002554:	2300      	movs	r3, #0
 8002556:	623b      	str	r3, [r7, #32]
          break;
 8002558:	e000      	b.n	800255c <HAL_GPIO_Init+0x130>
          break;
 800255a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800255c:	69bb      	ldr	r3, [r7, #24]
 800255e:	2bff      	cmp	r3, #255	; 0xff
 8002560:	d801      	bhi.n	8002566 <HAL_GPIO_Init+0x13a>
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	e001      	b.n	800256a <HAL_GPIO_Init+0x13e>
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	3304      	adds	r3, #4
 800256a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800256c:	69bb      	ldr	r3, [r7, #24]
 800256e:	2bff      	cmp	r3, #255	; 0xff
 8002570:	d802      	bhi.n	8002578 <HAL_GPIO_Init+0x14c>
 8002572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002574:	009b      	lsls	r3, r3, #2
 8002576:	e002      	b.n	800257e <HAL_GPIO_Init+0x152>
 8002578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800257a:	3b08      	subs	r3, #8
 800257c:	009b      	lsls	r3, r3, #2
 800257e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002580:	697b      	ldr	r3, [r7, #20]
 8002582:	681a      	ldr	r2, [r3, #0]
 8002584:	210f      	movs	r1, #15
 8002586:	693b      	ldr	r3, [r7, #16]
 8002588:	fa01 f303 	lsl.w	r3, r1, r3
 800258c:	43db      	mvns	r3, r3
 800258e:	401a      	ands	r2, r3
 8002590:	6a39      	ldr	r1, [r7, #32]
 8002592:	693b      	ldr	r3, [r7, #16]
 8002594:	fa01 f303 	lsl.w	r3, r1, r3
 8002598:	431a      	orrs	r2, r3
 800259a:	697b      	ldr	r3, [r7, #20]
 800259c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	685b      	ldr	r3, [r3, #4]
 80025a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	f000 80a9 	beq.w	80026fe <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80025ac:	4b4a      	ldr	r3, [pc, #296]	; (80026d8 <HAL_GPIO_Init+0x2ac>)
 80025ae:	699b      	ldr	r3, [r3, #24]
 80025b0:	4a49      	ldr	r2, [pc, #292]	; (80026d8 <HAL_GPIO_Init+0x2ac>)
 80025b2:	f043 0301 	orr.w	r3, r3, #1
 80025b6:	6193      	str	r3, [r2, #24]
 80025b8:	4b47      	ldr	r3, [pc, #284]	; (80026d8 <HAL_GPIO_Init+0x2ac>)
 80025ba:	699b      	ldr	r3, [r3, #24]
 80025bc:	f003 0301 	and.w	r3, r3, #1
 80025c0:	60bb      	str	r3, [r7, #8]
 80025c2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80025c4:	4a45      	ldr	r2, [pc, #276]	; (80026dc <HAL_GPIO_Init+0x2b0>)
 80025c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025c8:	089b      	lsrs	r3, r3, #2
 80025ca:	3302      	adds	r3, #2
 80025cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025d0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80025d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025d4:	f003 0303 	and.w	r3, r3, #3
 80025d8:	009b      	lsls	r3, r3, #2
 80025da:	220f      	movs	r2, #15
 80025dc:	fa02 f303 	lsl.w	r3, r2, r3
 80025e0:	43db      	mvns	r3, r3
 80025e2:	68fa      	ldr	r2, [r7, #12]
 80025e4:	4013      	ands	r3, r2
 80025e6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	4a3d      	ldr	r2, [pc, #244]	; (80026e0 <HAL_GPIO_Init+0x2b4>)
 80025ec:	4293      	cmp	r3, r2
 80025ee:	d00d      	beq.n	800260c <HAL_GPIO_Init+0x1e0>
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	4a3c      	ldr	r2, [pc, #240]	; (80026e4 <HAL_GPIO_Init+0x2b8>)
 80025f4:	4293      	cmp	r3, r2
 80025f6:	d007      	beq.n	8002608 <HAL_GPIO_Init+0x1dc>
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	4a3b      	ldr	r2, [pc, #236]	; (80026e8 <HAL_GPIO_Init+0x2bc>)
 80025fc:	4293      	cmp	r3, r2
 80025fe:	d101      	bne.n	8002604 <HAL_GPIO_Init+0x1d8>
 8002600:	2302      	movs	r3, #2
 8002602:	e004      	b.n	800260e <HAL_GPIO_Init+0x1e2>
 8002604:	2303      	movs	r3, #3
 8002606:	e002      	b.n	800260e <HAL_GPIO_Init+0x1e2>
 8002608:	2301      	movs	r3, #1
 800260a:	e000      	b.n	800260e <HAL_GPIO_Init+0x1e2>
 800260c:	2300      	movs	r3, #0
 800260e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002610:	f002 0203 	and.w	r2, r2, #3
 8002614:	0092      	lsls	r2, r2, #2
 8002616:	4093      	lsls	r3, r2
 8002618:	68fa      	ldr	r2, [r7, #12]
 800261a:	4313      	orrs	r3, r2
 800261c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800261e:	492f      	ldr	r1, [pc, #188]	; (80026dc <HAL_GPIO_Init+0x2b0>)
 8002620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002622:	089b      	lsrs	r3, r3, #2
 8002624:	3302      	adds	r3, #2
 8002626:	68fa      	ldr	r2, [r7, #12]
 8002628:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	685b      	ldr	r3, [r3, #4]
 8002630:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002634:	2b00      	cmp	r3, #0
 8002636:	d006      	beq.n	8002646 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002638:	4b2c      	ldr	r3, [pc, #176]	; (80026ec <HAL_GPIO_Init+0x2c0>)
 800263a:	689a      	ldr	r2, [r3, #8]
 800263c:	492b      	ldr	r1, [pc, #172]	; (80026ec <HAL_GPIO_Init+0x2c0>)
 800263e:	69bb      	ldr	r3, [r7, #24]
 8002640:	4313      	orrs	r3, r2
 8002642:	608b      	str	r3, [r1, #8]
 8002644:	e006      	b.n	8002654 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002646:	4b29      	ldr	r3, [pc, #164]	; (80026ec <HAL_GPIO_Init+0x2c0>)
 8002648:	689a      	ldr	r2, [r3, #8]
 800264a:	69bb      	ldr	r3, [r7, #24]
 800264c:	43db      	mvns	r3, r3
 800264e:	4927      	ldr	r1, [pc, #156]	; (80026ec <HAL_GPIO_Init+0x2c0>)
 8002650:	4013      	ands	r3, r2
 8002652:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	685b      	ldr	r3, [r3, #4]
 8002658:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800265c:	2b00      	cmp	r3, #0
 800265e:	d006      	beq.n	800266e <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002660:	4b22      	ldr	r3, [pc, #136]	; (80026ec <HAL_GPIO_Init+0x2c0>)
 8002662:	68da      	ldr	r2, [r3, #12]
 8002664:	4921      	ldr	r1, [pc, #132]	; (80026ec <HAL_GPIO_Init+0x2c0>)
 8002666:	69bb      	ldr	r3, [r7, #24]
 8002668:	4313      	orrs	r3, r2
 800266a:	60cb      	str	r3, [r1, #12]
 800266c:	e006      	b.n	800267c <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800266e:	4b1f      	ldr	r3, [pc, #124]	; (80026ec <HAL_GPIO_Init+0x2c0>)
 8002670:	68da      	ldr	r2, [r3, #12]
 8002672:	69bb      	ldr	r3, [r7, #24]
 8002674:	43db      	mvns	r3, r3
 8002676:	491d      	ldr	r1, [pc, #116]	; (80026ec <HAL_GPIO_Init+0x2c0>)
 8002678:	4013      	ands	r3, r2
 800267a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	685b      	ldr	r3, [r3, #4]
 8002680:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002684:	2b00      	cmp	r3, #0
 8002686:	d006      	beq.n	8002696 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002688:	4b18      	ldr	r3, [pc, #96]	; (80026ec <HAL_GPIO_Init+0x2c0>)
 800268a:	685a      	ldr	r2, [r3, #4]
 800268c:	4917      	ldr	r1, [pc, #92]	; (80026ec <HAL_GPIO_Init+0x2c0>)
 800268e:	69bb      	ldr	r3, [r7, #24]
 8002690:	4313      	orrs	r3, r2
 8002692:	604b      	str	r3, [r1, #4]
 8002694:	e006      	b.n	80026a4 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002696:	4b15      	ldr	r3, [pc, #84]	; (80026ec <HAL_GPIO_Init+0x2c0>)
 8002698:	685a      	ldr	r2, [r3, #4]
 800269a:	69bb      	ldr	r3, [r7, #24]
 800269c:	43db      	mvns	r3, r3
 800269e:	4913      	ldr	r1, [pc, #76]	; (80026ec <HAL_GPIO_Init+0x2c0>)
 80026a0:	4013      	ands	r3, r2
 80026a2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80026a4:	683b      	ldr	r3, [r7, #0]
 80026a6:	685b      	ldr	r3, [r3, #4]
 80026a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d01f      	beq.n	80026f0 <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80026b0:	4b0e      	ldr	r3, [pc, #56]	; (80026ec <HAL_GPIO_Init+0x2c0>)
 80026b2:	681a      	ldr	r2, [r3, #0]
 80026b4:	490d      	ldr	r1, [pc, #52]	; (80026ec <HAL_GPIO_Init+0x2c0>)
 80026b6:	69bb      	ldr	r3, [r7, #24]
 80026b8:	4313      	orrs	r3, r2
 80026ba:	600b      	str	r3, [r1, #0]
 80026bc:	e01f      	b.n	80026fe <HAL_GPIO_Init+0x2d2>
 80026be:	bf00      	nop
 80026c0:	10320000 	.word	0x10320000
 80026c4:	10310000 	.word	0x10310000
 80026c8:	10220000 	.word	0x10220000
 80026cc:	10210000 	.word	0x10210000
 80026d0:	10120000 	.word	0x10120000
 80026d4:	10110000 	.word	0x10110000
 80026d8:	40021000 	.word	0x40021000
 80026dc:	40010000 	.word	0x40010000
 80026e0:	40010800 	.word	0x40010800
 80026e4:	40010c00 	.word	0x40010c00
 80026e8:	40011000 	.word	0x40011000
 80026ec:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80026f0:	4b0b      	ldr	r3, [pc, #44]	; (8002720 <HAL_GPIO_Init+0x2f4>)
 80026f2:	681a      	ldr	r2, [r3, #0]
 80026f4:	69bb      	ldr	r3, [r7, #24]
 80026f6:	43db      	mvns	r3, r3
 80026f8:	4909      	ldr	r1, [pc, #36]	; (8002720 <HAL_GPIO_Init+0x2f4>)
 80026fa:	4013      	ands	r3, r2
 80026fc:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80026fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002700:	3301      	adds	r3, #1
 8002702:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	681a      	ldr	r2, [r3, #0]
 8002708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800270a:	fa22 f303 	lsr.w	r3, r2, r3
 800270e:	2b00      	cmp	r3, #0
 8002710:	f47f ae96 	bne.w	8002440 <HAL_GPIO_Init+0x14>
  }
}
 8002714:	bf00      	nop
 8002716:	bf00      	nop
 8002718:	372c      	adds	r7, #44	; 0x2c
 800271a:	46bd      	mov	sp, r7
 800271c:	bc80      	pop	{r7}
 800271e:	4770      	bx	lr
 8002720:	40010400 	.word	0x40010400

08002724 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002724:	b480      	push	{r7}
 8002726:	b083      	sub	sp, #12
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
 800272c:	460b      	mov	r3, r1
 800272e:	807b      	strh	r3, [r7, #2]
 8002730:	4613      	mov	r3, r2
 8002732:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002734:	787b      	ldrb	r3, [r7, #1]
 8002736:	2b00      	cmp	r3, #0
 8002738:	d003      	beq.n	8002742 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800273a:	887a      	ldrh	r2, [r7, #2]
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002740:	e003      	b.n	800274a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002742:	887b      	ldrh	r3, [r7, #2]
 8002744:	041a      	lsls	r2, r3, #16
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	611a      	str	r2, [r3, #16]
}
 800274a:	bf00      	nop
 800274c:	370c      	adds	r7, #12
 800274e:	46bd      	mov	sp, r7
 8002750:	bc80      	pop	{r7}
 8002752:	4770      	bx	lr

08002754 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002754:	b480      	push	{r7}
 8002756:	b085      	sub	sp, #20
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]
 800275c:	460b      	mov	r3, r1
 800275e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	68db      	ldr	r3, [r3, #12]
 8002764:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002766:	887a      	ldrh	r2, [r7, #2]
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	4013      	ands	r3, r2
 800276c:	041a      	lsls	r2, r3, #16
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	43d9      	mvns	r1, r3
 8002772:	887b      	ldrh	r3, [r7, #2]
 8002774:	400b      	ands	r3, r1
 8002776:	431a      	orrs	r2, r3
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	611a      	str	r2, [r3, #16]
}
 800277c:	bf00      	nop
 800277e:	3714      	adds	r7, #20
 8002780:	46bd      	mov	sp, r7
 8002782:	bc80      	pop	{r7}
 8002784:	4770      	bx	lr
	...

08002788 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	b084      	sub	sp, #16
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	2b00      	cmp	r3, #0
 8002794:	d101      	bne.n	800279a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002796:	2301      	movs	r3, #1
 8002798:	e12b      	b.n	80029f2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027a0:	b2db      	uxtb	r3, r3
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d106      	bne.n	80027b4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	2200      	movs	r2, #0
 80027aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80027ae:	6878      	ldr	r0, [r7, #4]
 80027b0:	f7fe ffc2 	bl	8001738 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	2224      	movs	r2, #36	; 0x24
 80027b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	681a      	ldr	r2, [r3, #0]
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f022 0201 	bic.w	r2, r2, #1
 80027ca:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	681a      	ldr	r2, [r3, #0]
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80027da:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	681a      	ldr	r2, [r3, #0]
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80027ea:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80027ec:	f000 fcda 	bl	80031a4 <HAL_RCC_GetPCLK1Freq>
 80027f0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	685b      	ldr	r3, [r3, #4]
 80027f6:	4a81      	ldr	r2, [pc, #516]	; (80029fc <HAL_I2C_Init+0x274>)
 80027f8:	4293      	cmp	r3, r2
 80027fa:	d807      	bhi.n	800280c <HAL_I2C_Init+0x84>
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	4a80      	ldr	r2, [pc, #512]	; (8002a00 <HAL_I2C_Init+0x278>)
 8002800:	4293      	cmp	r3, r2
 8002802:	bf94      	ite	ls
 8002804:	2301      	movls	r3, #1
 8002806:	2300      	movhi	r3, #0
 8002808:	b2db      	uxtb	r3, r3
 800280a:	e006      	b.n	800281a <HAL_I2C_Init+0x92>
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	4a7d      	ldr	r2, [pc, #500]	; (8002a04 <HAL_I2C_Init+0x27c>)
 8002810:	4293      	cmp	r3, r2
 8002812:	bf94      	ite	ls
 8002814:	2301      	movls	r3, #1
 8002816:	2300      	movhi	r3, #0
 8002818:	b2db      	uxtb	r3, r3
 800281a:	2b00      	cmp	r3, #0
 800281c:	d001      	beq.n	8002822 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800281e:	2301      	movs	r3, #1
 8002820:	e0e7      	b.n	80029f2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	4a78      	ldr	r2, [pc, #480]	; (8002a08 <HAL_I2C_Init+0x280>)
 8002826:	fba2 2303 	umull	r2, r3, r2, r3
 800282a:	0c9b      	lsrs	r3, r3, #18
 800282c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	685b      	ldr	r3, [r3, #4]
 8002834:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	68ba      	ldr	r2, [r7, #8]
 800283e:	430a      	orrs	r2, r1
 8002840:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	6a1b      	ldr	r3, [r3, #32]
 8002848:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	685b      	ldr	r3, [r3, #4]
 8002850:	4a6a      	ldr	r2, [pc, #424]	; (80029fc <HAL_I2C_Init+0x274>)
 8002852:	4293      	cmp	r3, r2
 8002854:	d802      	bhi.n	800285c <HAL_I2C_Init+0xd4>
 8002856:	68bb      	ldr	r3, [r7, #8]
 8002858:	3301      	adds	r3, #1
 800285a:	e009      	b.n	8002870 <HAL_I2C_Init+0xe8>
 800285c:	68bb      	ldr	r3, [r7, #8]
 800285e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002862:	fb02 f303 	mul.w	r3, r2, r3
 8002866:	4a69      	ldr	r2, [pc, #420]	; (8002a0c <HAL_I2C_Init+0x284>)
 8002868:	fba2 2303 	umull	r2, r3, r2, r3
 800286c:	099b      	lsrs	r3, r3, #6
 800286e:	3301      	adds	r3, #1
 8002870:	687a      	ldr	r2, [r7, #4]
 8002872:	6812      	ldr	r2, [r2, #0]
 8002874:	430b      	orrs	r3, r1
 8002876:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	69db      	ldr	r3, [r3, #28]
 800287e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002882:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	685b      	ldr	r3, [r3, #4]
 800288a:	495c      	ldr	r1, [pc, #368]	; (80029fc <HAL_I2C_Init+0x274>)
 800288c:	428b      	cmp	r3, r1
 800288e:	d819      	bhi.n	80028c4 <HAL_I2C_Init+0x13c>
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	1e59      	subs	r1, r3, #1
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	685b      	ldr	r3, [r3, #4]
 8002898:	005b      	lsls	r3, r3, #1
 800289a:	fbb1 f3f3 	udiv	r3, r1, r3
 800289e:	1c59      	adds	r1, r3, #1
 80028a0:	f640 73fc 	movw	r3, #4092	; 0xffc
 80028a4:	400b      	ands	r3, r1
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d00a      	beq.n	80028c0 <HAL_I2C_Init+0x138>
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	1e59      	subs	r1, r3, #1
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	685b      	ldr	r3, [r3, #4]
 80028b2:	005b      	lsls	r3, r3, #1
 80028b4:	fbb1 f3f3 	udiv	r3, r1, r3
 80028b8:	3301      	adds	r3, #1
 80028ba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028be:	e051      	b.n	8002964 <HAL_I2C_Init+0x1dc>
 80028c0:	2304      	movs	r3, #4
 80028c2:	e04f      	b.n	8002964 <HAL_I2C_Init+0x1dc>
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	689b      	ldr	r3, [r3, #8]
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d111      	bne.n	80028f0 <HAL_I2C_Init+0x168>
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	1e58      	subs	r0, r3, #1
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	6859      	ldr	r1, [r3, #4]
 80028d4:	460b      	mov	r3, r1
 80028d6:	005b      	lsls	r3, r3, #1
 80028d8:	440b      	add	r3, r1
 80028da:	fbb0 f3f3 	udiv	r3, r0, r3
 80028de:	3301      	adds	r3, #1
 80028e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	bf0c      	ite	eq
 80028e8:	2301      	moveq	r3, #1
 80028ea:	2300      	movne	r3, #0
 80028ec:	b2db      	uxtb	r3, r3
 80028ee:	e012      	b.n	8002916 <HAL_I2C_Init+0x18e>
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	1e58      	subs	r0, r3, #1
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	6859      	ldr	r1, [r3, #4]
 80028f8:	460b      	mov	r3, r1
 80028fa:	009b      	lsls	r3, r3, #2
 80028fc:	440b      	add	r3, r1
 80028fe:	0099      	lsls	r1, r3, #2
 8002900:	440b      	add	r3, r1
 8002902:	fbb0 f3f3 	udiv	r3, r0, r3
 8002906:	3301      	adds	r3, #1
 8002908:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800290c:	2b00      	cmp	r3, #0
 800290e:	bf0c      	ite	eq
 8002910:	2301      	moveq	r3, #1
 8002912:	2300      	movne	r3, #0
 8002914:	b2db      	uxtb	r3, r3
 8002916:	2b00      	cmp	r3, #0
 8002918:	d001      	beq.n	800291e <HAL_I2C_Init+0x196>
 800291a:	2301      	movs	r3, #1
 800291c:	e022      	b.n	8002964 <HAL_I2C_Init+0x1dc>
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	689b      	ldr	r3, [r3, #8]
 8002922:	2b00      	cmp	r3, #0
 8002924:	d10e      	bne.n	8002944 <HAL_I2C_Init+0x1bc>
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	1e58      	subs	r0, r3, #1
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	6859      	ldr	r1, [r3, #4]
 800292e:	460b      	mov	r3, r1
 8002930:	005b      	lsls	r3, r3, #1
 8002932:	440b      	add	r3, r1
 8002934:	fbb0 f3f3 	udiv	r3, r0, r3
 8002938:	3301      	adds	r3, #1
 800293a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800293e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002942:	e00f      	b.n	8002964 <HAL_I2C_Init+0x1dc>
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	1e58      	subs	r0, r3, #1
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	6859      	ldr	r1, [r3, #4]
 800294c:	460b      	mov	r3, r1
 800294e:	009b      	lsls	r3, r3, #2
 8002950:	440b      	add	r3, r1
 8002952:	0099      	lsls	r1, r3, #2
 8002954:	440b      	add	r3, r1
 8002956:	fbb0 f3f3 	udiv	r3, r0, r3
 800295a:	3301      	adds	r3, #1
 800295c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002960:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002964:	6879      	ldr	r1, [r7, #4]
 8002966:	6809      	ldr	r1, [r1, #0]
 8002968:	4313      	orrs	r3, r2
 800296a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	69da      	ldr	r2, [r3, #28]
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	6a1b      	ldr	r3, [r3, #32]
 800297e:	431a      	orrs	r2, r3
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	430a      	orrs	r2, r1
 8002986:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	689b      	ldr	r3, [r3, #8]
 800298e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002992:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002996:	687a      	ldr	r2, [r7, #4]
 8002998:	6911      	ldr	r1, [r2, #16]
 800299a:	687a      	ldr	r2, [r7, #4]
 800299c:	68d2      	ldr	r2, [r2, #12]
 800299e:	4311      	orrs	r1, r2
 80029a0:	687a      	ldr	r2, [r7, #4]
 80029a2:	6812      	ldr	r2, [r2, #0]
 80029a4:	430b      	orrs	r3, r1
 80029a6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	68db      	ldr	r3, [r3, #12]
 80029ae:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	695a      	ldr	r2, [r3, #20]
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	699b      	ldr	r3, [r3, #24]
 80029ba:	431a      	orrs	r2, r3
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	430a      	orrs	r2, r1
 80029c2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	681a      	ldr	r2, [r3, #0]
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f042 0201 	orr.w	r2, r2, #1
 80029d2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	2200      	movs	r2, #0
 80029d8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	2220      	movs	r2, #32
 80029de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	2200      	movs	r2, #0
 80029e6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	2200      	movs	r2, #0
 80029ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80029f0:	2300      	movs	r3, #0
}
 80029f2:	4618      	mov	r0, r3
 80029f4:	3710      	adds	r7, #16
 80029f6:	46bd      	mov	sp, r7
 80029f8:	bd80      	pop	{r7, pc}
 80029fa:	bf00      	nop
 80029fc:	000186a0 	.word	0x000186a0
 8002a00:	001e847f 	.word	0x001e847f
 8002a04:	003d08ff 	.word	0x003d08ff
 8002a08:	431bde83 	.word	0x431bde83
 8002a0c:	10624dd3 	.word	0x10624dd3

08002a10 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b086      	sub	sp, #24
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d101      	bne.n	8002a22 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002a1e:	2301      	movs	r3, #1
 8002a20:	e272      	b.n	8002f08 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f003 0301 	and.w	r3, r3, #1
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	f000 8087 	beq.w	8002b3e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002a30:	4b92      	ldr	r3, [pc, #584]	; (8002c7c <HAL_RCC_OscConfig+0x26c>)
 8002a32:	685b      	ldr	r3, [r3, #4]
 8002a34:	f003 030c 	and.w	r3, r3, #12
 8002a38:	2b04      	cmp	r3, #4
 8002a3a:	d00c      	beq.n	8002a56 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002a3c:	4b8f      	ldr	r3, [pc, #572]	; (8002c7c <HAL_RCC_OscConfig+0x26c>)
 8002a3e:	685b      	ldr	r3, [r3, #4]
 8002a40:	f003 030c 	and.w	r3, r3, #12
 8002a44:	2b08      	cmp	r3, #8
 8002a46:	d112      	bne.n	8002a6e <HAL_RCC_OscConfig+0x5e>
 8002a48:	4b8c      	ldr	r3, [pc, #560]	; (8002c7c <HAL_RCC_OscConfig+0x26c>)
 8002a4a:	685b      	ldr	r3, [r3, #4]
 8002a4c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a54:	d10b      	bne.n	8002a6e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a56:	4b89      	ldr	r3, [pc, #548]	; (8002c7c <HAL_RCC_OscConfig+0x26c>)
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d06c      	beq.n	8002b3c <HAL_RCC_OscConfig+0x12c>
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	685b      	ldr	r3, [r3, #4]
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d168      	bne.n	8002b3c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002a6a:	2301      	movs	r3, #1
 8002a6c:	e24c      	b.n	8002f08 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	685b      	ldr	r3, [r3, #4]
 8002a72:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a76:	d106      	bne.n	8002a86 <HAL_RCC_OscConfig+0x76>
 8002a78:	4b80      	ldr	r3, [pc, #512]	; (8002c7c <HAL_RCC_OscConfig+0x26c>)
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	4a7f      	ldr	r2, [pc, #508]	; (8002c7c <HAL_RCC_OscConfig+0x26c>)
 8002a7e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a82:	6013      	str	r3, [r2, #0]
 8002a84:	e02e      	b.n	8002ae4 <HAL_RCC_OscConfig+0xd4>
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	685b      	ldr	r3, [r3, #4]
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d10c      	bne.n	8002aa8 <HAL_RCC_OscConfig+0x98>
 8002a8e:	4b7b      	ldr	r3, [pc, #492]	; (8002c7c <HAL_RCC_OscConfig+0x26c>)
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	4a7a      	ldr	r2, [pc, #488]	; (8002c7c <HAL_RCC_OscConfig+0x26c>)
 8002a94:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a98:	6013      	str	r3, [r2, #0]
 8002a9a:	4b78      	ldr	r3, [pc, #480]	; (8002c7c <HAL_RCC_OscConfig+0x26c>)
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	4a77      	ldr	r2, [pc, #476]	; (8002c7c <HAL_RCC_OscConfig+0x26c>)
 8002aa0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002aa4:	6013      	str	r3, [r2, #0]
 8002aa6:	e01d      	b.n	8002ae4 <HAL_RCC_OscConfig+0xd4>
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	685b      	ldr	r3, [r3, #4]
 8002aac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002ab0:	d10c      	bne.n	8002acc <HAL_RCC_OscConfig+0xbc>
 8002ab2:	4b72      	ldr	r3, [pc, #456]	; (8002c7c <HAL_RCC_OscConfig+0x26c>)
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	4a71      	ldr	r2, [pc, #452]	; (8002c7c <HAL_RCC_OscConfig+0x26c>)
 8002ab8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002abc:	6013      	str	r3, [r2, #0]
 8002abe:	4b6f      	ldr	r3, [pc, #444]	; (8002c7c <HAL_RCC_OscConfig+0x26c>)
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	4a6e      	ldr	r2, [pc, #440]	; (8002c7c <HAL_RCC_OscConfig+0x26c>)
 8002ac4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ac8:	6013      	str	r3, [r2, #0]
 8002aca:	e00b      	b.n	8002ae4 <HAL_RCC_OscConfig+0xd4>
 8002acc:	4b6b      	ldr	r3, [pc, #428]	; (8002c7c <HAL_RCC_OscConfig+0x26c>)
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	4a6a      	ldr	r2, [pc, #424]	; (8002c7c <HAL_RCC_OscConfig+0x26c>)
 8002ad2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ad6:	6013      	str	r3, [r2, #0]
 8002ad8:	4b68      	ldr	r3, [pc, #416]	; (8002c7c <HAL_RCC_OscConfig+0x26c>)
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	4a67      	ldr	r2, [pc, #412]	; (8002c7c <HAL_RCC_OscConfig+0x26c>)
 8002ade:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002ae2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	685b      	ldr	r3, [r3, #4]
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d013      	beq.n	8002b14 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002aec:	f7ff f8c0 	bl	8001c70 <HAL_GetTick>
 8002af0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002af2:	e008      	b.n	8002b06 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002af4:	f7ff f8bc 	bl	8001c70 <HAL_GetTick>
 8002af8:	4602      	mov	r2, r0
 8002afa:	693b      	ldr	r3, [r7, #16]
 8002afc:	1ad3      	subs	r3, r2, r3
 8002afe:	2b64      	cmp	r3, #100	; 0x64
 8002b00:	d901      	bls.n	8002b06 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002b02:	2303      	movs	r3, #3
 8002b04:	e200      	b.n	8002f08 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b06:	4b5d      	ldr	r3, [pc, #372]	; (8002c7c <HAL_RCC_OscConfig+0x26c>)
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d0f0      	beq.n	8002af4 <HAL_RCC_OscConfig+0xe4>
 8002b12:	e014      	b.n	8002b3e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b14:	f7ff f8ac 	bl	8001c70 <HAL_GetTick>
 8002b18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b1a:	e008      	b.n	8002b2e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b1c:	f7ff f8a8 	bl	8001c70 <HAL_GetTick>
 8002b20:	4602      	mov	r2, r0
 8002b22:	693b      	ldr	r3, [r7, #16]
 8002b24:	1ad3      	subs	r3, r2, r3
 8002b26:	2b64      	cmp	r3, #100	; 0x64
 8002b28:	d901      	bls.n	8002b2e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002b2a:	2303      	movs	r3, #3
 8002b2c:	e1ec      	b.n	8002f08 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b2e:	4b53      	ldr	r3, [pc, #332]	; (8002c7c <HAL_RCC_OscConfig+0x26c>)
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d1f0      	bne.n	8002b1c <HAL_RCC_OscConfig+0x10c>
 8002b3a:	e000      	b.n	8002b3e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b3c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f003 0302 	and.w	r3, r3, #2
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d063      	beq.n	8002c12 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002b4a:	4b4c      	ldr	r3, [pc, #304]	; (8002c7c <HAL_RCC_OscConfig+0x26c>)
 8002b4c:	685b      	ldr	r3, [r3, #4]
 8002b4e:	f003 030c 	and.w	r3, r3, #12
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d00b      	beq.n	8002b6e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002b56:	4b49      	ldr	r3, [pc, #292]	; (8002c7c <HAL_RCC_OscConfig+0x26c>)
 8002b58:	685b      	ldr	r3, [r3, #4]
 8002b5a:	f003 030c 	and.w	r3, r3, #12
 8002b5e:	2b08      	cmp	r3, #8
 8002b60:	d11c      	bne.n	8002b9c <HAL_RCC_OscConfig+0x18c>
 8002b62:	4b46      	ldr	r3, [pc, #280]	; (8002c7c <HAL_RCC_OscConfig+0x26c>)
 8002b64:	685b      	ldr	r3, [r3, #4]
 8002b66:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d116      	bne.n	8002b9c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b6e:	4b43      	ldr	r3, [pc, #268]	; (8002c7c <HAL_RCC_OscConfig+0x26c>)
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f003 0302 	and.w	r3, r3, #2
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d005      	beq.n	8002b86 <HAL_RCC_OscConfig+0x176>
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	691b      	ldr	r3, [r3, #16]
 8002b7e:	2b01      	cmp	r3, #1
 8002b80:	d001      	beq.n	8002b86 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002b82:	2301      	movs	r3, #1
 8002b84:	e1c0      	b.n	8002f08 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b86:	4b3d      	ldr	r3, [pc, #244]	; (8002c7c <HAL_RCC_OscConfig+0x26c>)
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	695b      	ldr	r3, [r3, #20]
 8002b92:	00db      	lsls	r3, r3, #3
 8002b94:	4939      	ldr	r1, [pc, #228]	; (8002c7c <HAL_RCC_OscConfig+0x26c>)
 8002b96:	4313      	orrs	r3, r2
 8002b98:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b9a:	e03a      	b.n	8002c12 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	691b      	ldr	r3, [r3, #16]
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d020      	beq.n	8002be6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ba4:	4b36      	ldr	r3, [pc, #216]	; (8002c80 <HAL_RCC_OscConfig+0x270>)
 8002ba6:	2201      	movs	r2, #1
 8002ba8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002baa:	f7ff f861 	bl	8001c70 <HAL_GetTick>
 8002bae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bb0:	e008      	b.n	8002bc4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002bb2:	f7ff f85d 	bl	8001c70 <HAL_GetTick>
 8002bb6:	4602      	mov	r2, r0
 8002bb8:	693b      	ldr	r3, [r7, #16]
 8002bba:	1ad3      	subs	r3, r2, r3
 8002bbc:	2b02      	cmp	r3, #2
 8002bbe:	d901      	bls.n	8002bc4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002bc0:	2303      	movs	r3, #3
 8002bc2:	e1a1      	b.n	8002f08 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bc4:	4b2d      	ldr	r3, [pc, #180]	; (8002c7c <HAL_RCC_OscConfig+0x26c>)
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f003 0302 	and.w	r3, r3, #2
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d0f0      	beq.n	8002bb2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bd0:	4b2a      	ldr	r3, [pc, #168]	; (8002c7c <HAL_RCC_OscConfig+0x26c>)
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	695b      	ldr	r3, [r3, #20]
 8002bdc:	00db      	lsls	r3, r3, #3
 8002bde:	4927      	ldr	r1, [pc, #156]	; (8002c7c <HAL_RCC_OscConfig+0x26c>)
 8002be0:	4313      	orrs	r3, r2
 8002be2:	600b      	str	r3, [r1, #0]
 8002be4:	e015      	b.n	8002c12 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002be6:	4b26      	ldr	r3, [pc, #152]	; (8002c80 <HAL_RCC_OscConfig+0x270>)
 8002be8:	2200      	movs	r2, #0
 8002bea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bec:	f7ff f840 	bl	8001c70 <HAL_GetTick>
 8002bf0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002bf2:	e008      	b.n	8002c06 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002bf4:	f7ff f83c 	bl	8001c70 <HAL_GetTick>
 8002bf8:	4602      	mov	r2, r0
 8002bfa:	693b      	ldr	r3, [r7, #16]
 8002bfc:	1ad3      	subs	r3, r2, r3
 8002bfe:	2b02      	cmp	r3, #2
 8002c00:	d901      	bls.n	8002c06 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002c02:	2303      	movs	r3, #3
 8002c04:	e180      	b.n	8002f08 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c06:	4b1d      	ldr	r3, [pc, #116]	; (8002c7c <HAL_RCC_OscConfig+0x26c>)
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f003 0302 	and.w	r3, r3, #2
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d1f0      	bne.n	8002bf4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f003 0308 	and.w	r3, r3, #8
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d03a      	beq.n	8002c94 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	699b      	ldr	r3, [r3, #24]
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d019      	beq.n	8002c5a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c26:	4b17      	ldr	r3, [pc, #92]	; (8002c84 <HAL_RCC_OscConfig+0x274>)
 8002c28:	2201      	movs	r2, #1
 8002c2a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c2c:	f7ff f820 	bl	8001c70 <HAL_GetTick>
 8002c30:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c32:	e008      	b.n	8002c46 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c34:	f7ff f81c 	bl	8001c70 <HAL_GetTick>
 8002c38:	4602      	mov	r2, r0
 8002c3a:	693b      	ldr	r3, [r7, #16]
 8002c3c:	1ad3      	subs	r3, r2, r3
 8002c3e:	2b02      	cmp	r3, #2
 8002c40:	d901      	bls.n	8002c46 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002c42:	2303      	movs	r3, #3
 8002c44:	e160      	b.n	8002f08 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c46:	4b0d      	ldr	r3, [pc, #52]	; (8002c7c <HAL_RCC_OscConfig+0x26c>)
 8002c48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c4a:	f003 0302 	and.w	r3, r3, #2
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d0f0      	beq.n	8002c34 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002c52:	2001      	movs	r0, #1
 8002c54:	f000 face 	bl	80031f4 <RCC_Delay>
 8002c58:	e01c      	b.n	8002c94 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c5a:	4b0a      	ldr	r3, [pc, #40]	; (8002c84 <HAL_RCC_OscConfig+0x274>)
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c60:	f7ff f806 	bl	8001c70 <HAL_GetTick>
 8002c64:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c66:	e00f      	b.n	8002c88 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c68:	f7ff f802 	bl	8001c70 <HAL_GetTick>
 8002c6c:	4602      	mov	r2, r0
 8002c6e:	693b      	ldr	r3, [r7, #16]
 8002c70:	1ad3      	subs	r3, r2, r3
 8002c72:	2b02      	cmp	r3, #2
 8002c74:	d908      	bls.n	8002c88 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002c76:	2303      	movs	r3, #3
 8002c78:	e146      	b.n	8002f08 <HAL_RCC_OscConfig+0x4f8>
 8002c7a:	bf00      	nop
 8002c7c:	40021000 	.word	0x40021000
 8002c80:	42420000 	.word	0x42420000
 8002c84:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c88:	4b92      	ldr	r3, [pc, #584]	; (8002ed4 <HAL_RCC_OscConfig+0x4c4>)
 8002c8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c8c:	f003 0302 	and.w	r3, r3, #2
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d1e9      	bne.n	8002c68 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f003 0304 	and.w	r3, r3, #4
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	f000 80a6 	beq.w	8002dee <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ca6:	4b8b      	ldr	r3, [pc, #556]	; (8002ed4 <HAL_RCC_OscConfig+0x4c4>)
 8002ca8:	69db      	ldr	r3, [r3, #28]
 8002caa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d10d      	bne.n	8002cce <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002cb2:	4b88      	ldr	r3, [pc, #544]	; (8002ed4 <HAL_RCC_OscConfig+0x4c4>)
 8002cb4:	69db      	ldr	r3, [r3, #28]
 8002cb6:	4a87      	ldr	r2, [pc, #540]	; (8002ed4 <HAL_RCC_OscConfig+0x4c4>)
 8002cb8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002cbc:	61d3      	str	r3, [r2, #28]
 8002cbe:	4b85      	ldr	r3, [pc, #532]	; (8002ed4 <HAL_RCC_OscConfig+0x4c4>)
 8002cc0:	69db      	ldr	r3, [r3, #28]
 8002cc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cc6:	60bb      	str	r3, [r7, #8]
 8002cc8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002cca:	2301      	movs	r3, #1
 8002ccc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cce:	4b82      	ldr	r3, [pc, #520]	; (8002ed8 <HAL_RCC_OscConfig+0x4c8>)
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d118      	bne.n	8002d0c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002cda:	4b7f      	ldr	r3, [pc, #508]	; (8002ed8 <HAL_RCC_OscConfig+0x4c8>)
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	4a7e      	ldr	r2, [pc, #504]	; (8002ed8 <HAL_RCC_OscConfig+0x4c8>)
 8002ce0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ce4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ce6:	f7fe ffc3 	bl	8001c70 <HAL_GetTick>
 8002cea:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cec:	e008      	b.n	8002d00 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002cee:	f7fe ffbf 	bl	8001c70 <HAL_GetTick>
 8002cf2:	4602      	mov	r2, r0
 8002cf4:	693b      	ldr	r3, [r7, #16]
 8002cf6:	1ad3      	subs	r3, r2, r3
 8002cf8:	2b64      	cmp	r3, #100	; 0x64
 8002cfa:	d901      	bls.n	8002d00 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002cfc:	2303      	movs	r3, #3
 8002cfe:	e103      	b.n	8002f08 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d00:	4b75      	ldr	r3, [pc, #468]	; (8002ed8 <HAL_RCC_OscConfig+0x4c8>)
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d0f0      	beq.n	8002cee <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	68db      	ldr	r3, [r3, #12]
 8002d10:	2b01      	cmp	r3, #1
 8002d12:	d106      	bne.n	8002d22 <HAL_RCC_OscConfig+0x312>
 8002d14:	4b6f      	ldr	r3, [pc, #444]	; (8002ed4 <HAL_RCC_OscConfig+0x4c4>)
 8002d16:	6a1b      	ldr	r3, [r3, #32]
 8002d18:	4a6e      	ldr	r2, [pc, #440]	; (8002ed4 <HAL_RCC_OscConfig+0x4c4>)
 8002d1a:	f043 0301 	orr.w	r3, r3, #1
 8002d1e:	6213      	str	r3, [r2, #32]
 8002d20:	e02d      	b.n	8002d7e <HAL_RCC_OscConfig+0x36e>
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	68db      	ldr	r3, [r3, #12]
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d10c      	bne.n	8002d44 <HAL_RCC_OscConfig+0x334>
 8002d2a:	4b6a      	ldr	r3, [pc, #424]	; (8002ed4 <HAL_RCC_OscConfig+0x4c4>)
 8002d2c:	6a1b      	ldr	r3, [r3, #32]
 8002d2e:	4a69      	ldr	r2, [pc, #420]	; (8002ed4 <HAL_RCC_OscConfig+0x4c4>)
 8002d30:	f023 0301 	bic.w	r3, r3, #1
 8002d34:	6213      	str	r3, [r2, #32]
 8002d36:	4b67      	ldr	r3, [pc, #412]	; (8002ed4 <HAL_RCC_OscConfig+0x4c4>)
 8002d38:	6a1b      	ldr	r3, [r3, #32]
 8002d3a:	4a66      	ldr	r2, [pc, #408]	; (8002ed4 <HAL_RCC_OscConfig+0x4c4>)
 8002d3c:	f023 0304 	bic.w	r3, r3, #4
 8002d40:	6213      	str	r3, [r2, #32]
 8002d42:	e01c      	b.n	8002d7e <HAL_RCC_OscConfig+0x36e>
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	68db      	ldr	r3, [r3, #12]
 8002d48:	2b05      	cmp	r3, #5
 8002d4a:	d10c      	bne.n	8002d66 <HAL_RCC_OscConfig+0x356>
 8002d4c:	4b61      	ldr	r3, [pc, #388]	; (8002ed4 <HAL_RCC_OscConfig+0x4c4>)
 8002d4e:	6a1b      	ldr	r3, [r3, #32]
 8002d50:	4a60      	ldr	r2, [pc, #384]	; (8002ed4 <HAL_RCC_OscConfig+0x4c4>)
 8002d52:	f043 0304 	orr.w	r3, r3, #4
 8002d56:	6213      	str	r3, [r2, #32]
 8002d58:	4b5e      	ldr	r3, [pc, #376]	; (8002ed4 <HAL_RCC_OscConfig+0x4c4>)
 8002d5a:	6a1b      	ldr	r3, [r3, #32]
 8002d5c:	4a5d      	ldr	r2, [pc, #372]	; (8002ed4 <HAL_RCC_OscConfig+0x4c4>)
 8002d5e:	f043 0301 	orr.w	r3, r3, #1
 8002d62:	6213      	str	r3, [r2, #32]
 8002d64:	e00b      	b.n	8002d7e <HAL_RCC_OscConfig+0x36e>
 8002d66:	4b5b      	ldr	r3, [pc, #364]	; (8002ed4 <HAL_RCC_OscConfig+0x4c4>)
 8002d68:	6a1b      	ldr	r3, [r3, #32]
 8002d6a:	4a5a      	ldr	r2, [pc, #360]	; (8002ed4 <HAL_RCC_OscConfig+0x4c4>)
 8002d6c:	f023 0301 	bic.w	r3, r3, #1
 8002d70:	6213      	str	r3, [r2, #32]
 8002d72:	4b58      	ldr	r3, [pc, #352]	; (8002ed4 <HAL_RCC_OscConfig+0x4c4>)
 8002d74:	6a1b      	ldr	r3, [r3, #32]
 8002d76:	4a57      	ldr	r2, [pc, #348]	; (8002ed4 <HAL_RCC_OscConfig+0x4c4>)
 8002d78:	f023 0304 	bic.w	r3, r3, #4
 8002d7c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	68db      	ldr	r3, [r3, #12]
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d015      	beq.n	8002db2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d86:	f7fe ff73 	bl	8001c70 <HAL_GetTick>
 8002d8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d8c:	e00a      	b.n	8002da4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d8e:	f7fe ff6f 	bl	8001c70 <HAL_GetTick>
 8002d92:	4602      	mov	r2, r0
 8002d94:	693b      	ldr	r3, [r7, #16]
 8002d96:	1ad3      	subs	r3, r2, r3
 8002d98:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d9c:	4293      	cmp	r3, r2
 8002d9e:	d901      	bls.n	8002da4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002da0:	2303      	movs	r3, #3
 8002da2:	e0b1      	b.n	8002f08 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002da4:	4b4b      	ldr	r3, [pc, #300]	; (8002ed4 <HAL_RCC_OscConfig+0x4c4>)
 8002da6:	6a1b      	ldr	r3, [r3, #32]
 8002da8:	f003 0302 	and.w	r3, r3, #2
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d0ee      	beq.n	8002d8e <HAL_RCC_OscConfig+0x37e>
 8002db0:	e014      	b.n	8002ddc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002db2:	f7fe ff5d 	bl	8001c70 <HAL_GetTick>
 8002db6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002db8:	e00a      	b.n	8002dd0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002dba:	f7fe ff59 	bl	8001c70 <HAL_GetTick>
 8002dbe:	4602      	mov	r2, r0
 8002dc0:	693b      	ldr	r3, [r7, #16]
 8002dc2:	1ad3      	subs	r3, r2, r3
 8002dc4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002dc8:	4293      	cmp	r3, r2
 8002dca:	d901      	bls.n	8002dd0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002dcc:	2303      	movs	r3, #3
 8002dce:	e09b      	b.n	8002f08 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002dd0:	4b40      	ldr	r3, [pc, #256]	; (8002ed4 <HAL_RCC_OscConfig+0x4c4>)
 8002dd2:	6a1b      	ldr	r3, [r3, #32]
 8002dd4:	f003 0302 	and.w	r3, r3, #2
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d1ee      	bne.n	8002dba <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002ddc:	7dfb      	ldrb	r3, [r7, #23]
 8002dde:	2b01      	cmp	r3, #1
 8002de0:	d105      	bne.n	8002dee <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002de2:	4b3c      	ldr	r3, [pc, #240]	; (8002ed4 <HAL_RCC_OscConfig+0x4c4>)
 8002de4:	69db      	ldr	r3, [r3, #28]
 8002de6:	4a3b      	ldr	r2, [pc, #236]	; (8002ed4 <HAL_RCC_OscConfig+0x4c4>)
 8002de8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002dec:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	69db      	ldr	r3, [r3, #28]
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	f000 8087 	beq.w	8002f06 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002df8:	4b36      	ldr	r3, [pc, #216]	; (8002ed4 <HAL_RCC_OscConfig+0x4c4>)
 8002dfa:	685b      	ldr	r3, [r3, #4]
 8002dfc:	f003 030c 	and.w	r3, r3, #12
 8002e00:	2b08      	cmp	r3, #8
 8002e02:	d061      	beq.n	8002ec8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	69db      	ldr	r3, [r3, #28]
 8002e08:	2b02      	cmp	r3, #2
 8002e0a:	d146      	bne.n	8002e9a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e0c:	4b33      	ldr	r3, [pc, #204]	; (8002edc <HAL_RCC_OscConfig+0x4cc>)
 8002e0e:	2200      	movs	r2, #0
 8002e10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e12:	f7fe ff2d 	bl	8001c70 <HAL_GetTick>
 8002e16:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e18:	e008      	b.n	8002e2c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e1a:	f7fe ff29 	bl	8001c70 <HAL_GetTick>
 8002e1e:	4602      	mov	r2, r0
 8002e20:	693b      	ldr	r3, [r7, #16]
 8002e22:	1ad3      	subs	r3, r2, r3
 8002e24:	2b02      	cmp	r3, #2
 8002e26:	d901      	bls.n	8002e2c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002e28:	2303      	movs	r3, #3
 8002e2a:	e06d      	b.n	8002f08 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e2c:	4b29      	ldr	r3, [pc, #164]	; (8002ed4 <HAL_RCC_OscConfig+0x4c4>)
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d1f0      	bne.n	8002e1a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	6a1b      	ldr	r3, [r3, #32]
 8002e3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e40:	d108      	bne.n	8002e54 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002e42:	4b24      	ldr	r3, [pc, #144]	; (8002ed4 <HAL_RCC_OscConfig+0x4c4>)
 8002e44:	685b      	ldr	r3, [r3, #4]
 8002e46:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	689b      	ldr	r3, [r3, #8]
 8002e4e:	4921      	ldr	r1, [pc, #132]	; (8002ed4 <HAL_RCC_OscConfig+0x4c4>)
 8002e50:	4313      	orrs	r3, r2
 8002e52:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002e54:	4b1f      	ldr	r3, [pc, #124]	; (8002ed4 <HAL_RCC_OscConfig+0x4c4>)
 8002e56:	685b      	ldr	r3, [r3, #4]
 8002e58:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	6a19      	ldr	r1, [r3, #32]
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e64:	430b      	orrs	r3, r1
 8002e66:	491b      	ldr	r1, [pc, #108]	; (8002ed4 <HAL_RCC_OscConfig+0x4c4>)
 8002e68:	4313      	orrs	r3, r2
 8002e6a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002e6c:	4b1b      	ldr	r3, [pc, #108]	; (8002edc <HAL_RCC_OscConfig+0x4cc>)
 8002e6e:	2201      	movs	r2, #1
 8002e70:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e72:	f7fe fefd 	bl	8001c70 <HAL_GetTick>
 8002e76:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002e78:	e008      	b.n	8002e8c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e7a:	f7fe fef9 	bl	8001c70 <HAL_GetTick>
 8002e7e:	4602      	mov	r2, r0
 8002e80:	693b      	ldr	r3, [r7, #16]
 8002e82:	1ad3      	subs	r3, r2, r3
 8002e84:	2b02      	cmp	r3, #2
 8002e86:	d901      	bls.n	8002e8c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002e88:	2303      	movs	r3, #3
 8002e8a:	e03d      	b.n	8002f08 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002e8c:	4b11      	ldr	r3, [pc, #68]	; (8002ed4 <HAL_RCC_OscConfig+0x4c4>)
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d0f0      	beq.n	8002e7a <HAL_RCC_OscConfig+0x46a>
 8002e98:	e035      	b.n	8002f06 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e9a:	4b10      	ldr	r3, [pc, #64]	; (8002edc <HAL_RCC_OscConfig+0x4cc>)
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ea0:	f7fe fee6 	bl	8001c70 <HAL_GetTick>
 8002ea4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ea6:	e008      	b.n	8002eba <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ea8:	f7fe fee2 	bl	8001c70 <HAL_GetTick>
 8002eac:	4602      	mov	r2, r0
 8002eae:	693b      	ldr	r3, [r7, #16]
 8002eb0:	1ad3      	subs	r3, r2, r3
 8002eb2:	2b02      	cmp	r3, #2
 8002eb4:	d901      	bls.n	8002eba <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002eb6:	2303      	movs	r3, #3
 8002eb8:	e026      	b.n	8002f08 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002eba:	4b06      	ldr	r3, [pc, #24]	; (8002ed4 <HAL_RCC_OscConfig+0x4c4>)
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d1f0      	bne.n	8002ea8 <HAL_RCC_OscConfig+0x498>
 8002ec6:	e01e      	b.n	8002f06 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	69db      	ldr	r3, [r3, #28]
 8002ecc:	2b01      	cmp	r3, #1
 8002ece:	d107      	bne.n	8002ee0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002ed0:	2301      	movs	r3, #1
 8002ed2:	e019      	b.n	8002f08 <HAL_RCC_OscConfig+0x4f8>
 8002ed4:	40021000 	.word	0x40021000
 8002ed8:	40007000 	.word	0x40007000
 8002edc:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002ee0:	4b0b      	ldr	r3, [pc, #44]	; (8002f10 <HAL_RCC_OscConfig+0x500>)
 8002ee2:	685b      	ldr	r3, [r3, #4]
 8002ee4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	6a1b      	ldr	r3, [r3, #32]
 8002ef0:	429a      	cmp	r2, r3
 8002ef2:	d106      	bne.n	8002f02 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002efe:	429a      	cmp	r2, r3
 8002f00:	d001      	beq.n	8002f06 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002f02:	2301      	movs	r3, #1
 8002f04:	e000      	b.n	8002f08 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002f06:	2300      	movs	r3, #0
}
 8002f08:	4618      	mov	r0, r3
 8002f0a:	3718      	adds	r7, #24
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	bd80      	pop	{r7, pc}
 8002f10:	40021000 	.word	0x40021000

08002f14 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f14:	b580      	push	{r7, lr}
 8002f16:	b084      	sub	sp, #16
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]
 8002f1c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d101      	bne.n	8002f28 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002f24:	2301      	movs	r3, #1
 8002f26:	e0d0      	b.n	80030ca <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002f28:	4b6a      	ldr	r3, [pc, #424]	; (80030d4 <HAL_RCC_ClockConfig+0x1c0>)
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f003 0307 	and.w	r3, r3, #7
 8002f30:	683a      	ldr	r2, [r7, #0]
 8002f32:	429a      	cmp	r2, r3
 8002f34:	d910      	bls.n	8002f58 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f36:	4b67      	ldr	r3, [pc, #412]	; (80030d4 <HAL_RCC_ClockConfig+0x1c0>)
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f023 0207 	bic.w	r2, r3, #7
 8002f3e:	4965      	ldr	r1, [pc, #404]	; (80030d4 <HAL_RCC_ClockConfig+0x1c0>)
 8002f40:	683b      	ldr	r3, [r7, #0]
 8002f42:	4313      	orrs	r3, r2
 8002f44:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f46:	4b63      	ldr	r3, [pc, #396]	; (80030d4 <HAL_RCC_ClockConfig+0x1c0>)
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f003 0307 	and.w	r3, r3, #7
 8002f4e:	683a      	ldr	r2, [r7, #0]
 8002f50:	429a      	cmp	r2, r3
 8002f52:	d001      	beq.n	8002f58 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002f54:	2301      	movs	r3, #1
 8002f56:	e0b8      	b.n	80030ca <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f003 0302 	and.w	r3, r3, #2
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d020      	beq.n	8002fa6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f003 0304 	and.w	r3, r3, #4
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d005      	beq.n	8002f7c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002f70:	4b59      	ldr	r3, [pc, #356]	; (80030d8 <HAL_RCC_ClockConfig+0x1c4>)
 8002f72:	685b      	ldr	r3, [r3, #4]
 8002f74:	4a58      	ldr	r2, [pc, #352]	; (80030d8 <HAL_RCC_ClockConfig+0x1c4>)
 8002f76:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002f7a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f003 0308 	and.w	r3, r3, #8
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d005      	beq.n	8002f94 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002f88:	4b53      	ldr	r3, [pc, #332]	; (80030d8 <HAL_RCC_ClockConfig+0x1c4>)
 8002f8a:	685b      	ldr	r3, [r3, #4]
 8002f8c:	4a52      	ldr	r2, [pc, #328]	; (80030d8 <HAL_RCC_ClockConfig+0x1c4>)
 8002f8e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002f92:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f94:	4b50      	ldr	r3, [pc, #320]	; (80030d8 <HAL_RCC_ClockConfig+0x1c4>)
 8002f96:	685b      	ldr	r3, [r3, #4]
 8002f98:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	689b      	ldr	r3, [r3, #8]
 8002fa0:	494d      	ldr	r1, [pc, #308]	; (80030d8 <HAL_RCC_ClockConfig+0x1c4>)
 8002fa2:	4313      	orrs	r3, r2
 8002fa4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f003 0301 	and.w	r3, r3, #1
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d040      	beq.n	8003034 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	685b      	ldr	r3, [r3, #4]
 8002fb6:	2b01      	cmp	r3, #1
 8002fb8:	d107      	bne.n	8002fca <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fba:	4b47      	ldr	r3, [pc, #284]	; (80030d8 <HAL_RCC_ClockConfig+0x1c4>)
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d115      	bne.n	8002ff2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002fc6:	2301      	movs	r3, #1
 8002fc8:	e07f      	b.n	80030ca <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	685b      	ldr	r3, [r3, #4]
 8002fce:	2b02      	cmp	r3, #2
 8002fd0:	d107      	bne.n	8002fe2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002fd2:	4b41      	ldr	r3, [pc, #260]	; (80030d8 <HAL_RCC_ClockConfig+0x1c4>)
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d109      	bne.n	8002ff2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002fde:	2301      	movs	r3, #1
 8002fe0:	e073      	b.n	80030ca <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fe2:	4b3d      	ldr	r3, [pc, #244]	; (80030d8 <HAL_RCC_ClockConfig+0x1c4>)
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f003 0302 	and.w	r3, r3, #2
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d101      	bne.n	8002ff2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002fee:	2301      	movs	r3, #1
 8002ff0:	e06b      	b.n	80030ca <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002ff2:	4b39      	ldr	r3, [pc, #228]	; (80030d8 <HAL_RCC_ClockConfig+0x1c4>)
 8002ff4:	685b      	ldr	r3, [r3, #4]
 8002ff6:	f023 0203 	bic.w	r2, r3, #3
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	685b      	ldr	r3, [r3, #4]
 8002ffe:	4936      	ldr	r1, [pc, #216]	; (80030d8 <HAL_RCC_ClockConfig+0x1c4>)
 8003000:	4313      	orrs	r3, r2
 8003002:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003004:	f7fe fe34 	bl	8001c70 <HAL_GetTick>
 8003008:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800300a:	e00a      	b.n	8003022 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800300c:	f7fe fe30 	bl	8001c70 <HAL_GetTick>
 8003010:	4602      	mov	r2, r0
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	1ad3      	subs	r3, r2, r3
 8003016:	f241 3288 	movw	r2, #5000	; 0x1388
 800301a:	4293      	cmp	r3, r2
 800301c:	d901      	bls.n	8003022 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800301e:	2303      	movs	r3, #3
 8003020:	e053      	b.n	80030ca <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003022:	4b2d      	ldr	r3, [pc, #180]	; (80030d8 <HAL_RCC_ClockConfig+0x1c4>)
 8003024:	685b      	ldr	r3, [r3, #4]
 8003026:	f003 020c 	and.w	r2, r3, #12
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	685b      	ldr	r3, [r3, #4]
 800302e:	009b      	lsls	r3, r3, #2
 8003030:	429a      	cmp	r2, r3
 8003032:	d1eb      	bne.n	800300c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003034:	4b27      	ldr	r3, [pc, #156]	; (80030d4 <HAL_RCC_ClockConfig+0x1c0>)
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f003 0307 	and.w	r3, r3, #7
 800303c:	683a      	ldr	r2, [r7, #0]
 800303e:	429a      	cmp	r2, r3
 8003040:	d210      	bcs.n	8003064 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003042:	4b24      	ldr	r3, [pc, #144]	; (80030d4 <HAL_RCC_ClockConfig+0x1c0>)
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f023 0207 	bic.w	r2, r3, #7
 800304a:	4922      	ldr	r1, [pc, #136]	; (80030d4 <HAL_RCC_ClockConfig+0x1c0>)
 800304c:	683b      	ldr	r3, [r7, #0]
 800304e:	4313      	orrs	r3, r2
 8003050:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003052:	4b20      	ldr	r3, [pc, #128]	; (80030d4 <HAL_RCC_ClockConfig+0x1c0>)
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f003 0307 	and.w	r3, r3, #7
 800305a:	683a      	ldr	r2, [r7, #0]
 800305c:	429a      	cmp	r2, r3
 800305e:	d001      	beq.n	8003064 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003060:	2301      	movs	r3, #1
 8003062:	e032      	b.n	80030ca <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f003 0304 	and.w	r3, r3, #4
 800306c:	2b00      	cmp	r3, #0
 800306e:	d008      	beq.n	8003082 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003070:	4b19      	ldr	r3, [pc, #100]	; (80030d8 <HAL_RCC_ClockConfig+0x1c4>)
 8003072:	685b      	ldr	r3, [r3, #4]
 8003074:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	68db      	ldr	r3, [r3, #12]
 800307c:	4916      	ldr	r1, [pc, #88]	; (80030d8 <HAL_RCC_ClockConfig+0x1c4>)
 800307e:	4313      	orrs	r3, r2
 8003080:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f003 0308 	and.w	r3, r3, #8
 800308a:	2b00      	cmp	r3, #0
 800308c:	d009      	beq.n	80030a2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800308e:	4b12      	ldr	r3, [pc, #72]	; (80030d8 <HAL_RCC_ClockConfig+0x1c4>)
 8003090:	685b      	ldr	r3, [r3, #4]
 8003092:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	691b      	ldr	r3, [r3, #16]
 800309a:	00db      	lsls	r3, r3, #3
 800309c:	490e      	ldr	r1, [pc, #56]	; (80030d8 <HAL_RCC_ClockConfig+0x1c4>)
 800309e:	4313      	orrs	r3, r2
 80030a0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80030a2:	f000 f821 	bl	80030e8 <HAL_RCC_GetSysClockFreq>
 80030a6:	4602      	mov	r2, r0
 80030a8:	4b0b      	ldr	r3, [pc, #44]	; (80030d8 <HAL_RCC_ClockConfig+0x1c4>)
 80030aa:	685b      	ldr	r3, [r3, #4]
 80030ac:	091b      	lsrs	r3, r3, #4
 80030ae:	f003 030f 	and.w	r3, r3, #15
 80030b2:	490a      	ldr	r1, [pc, #40]	; (80030dc <HAL_RCC_ClockConfig+0x1c8>)
 80030b4:	5ccb      	ldrb	r3, [r1, r3]
 80030b6:	fa22 f303 	lsr.w	r3, r2, r3
 80030ba:	4a09      	ldr	r2, [pc, #36]	; (80030e0 <HAL_RCC_ClockConfig+0x1cc>)
 80030bc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80030be:	4b09      	ldr	r3, [pc, #36]	; (80030e4 <HAL_RCC_ClockConfig+0x1d0>)
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	4618      	mov	r0, r3
 80030c4:	f7fe fd92 	bl	8001bec <HAL_InitTick>

  return HAL_OK;
 80030c8:	2300      	movs	r3, #0
}
 80030ca:	4618      	mov	r0, r3
 80030cc:	3710      	adds	r7, #16
 80030ce:	46bd      	mov	sp, r7
 80030d0:	bd80      	pop	{r7, pc}
 80030d2:	bf00      	nop
 80030d4:	40022000 	.word	0x40022000
 80030d8:	40021000 	.word	0x40021000
 80030dc:	08005460 	.word	0x08005460
 80030e0:	20000018 	.word	0x20000018
 80030e4:	2000001c 	.word	0x2000001c

080030e8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80030e8:	b480      	push	{r7}
 80030ea:	b087      	sub	sp, #28
 80030ec:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80030ee:	2300      	movs	r3, #0
 80030f0:	60fb      	str	r3, [r7, #12]
 80030f2:	2300      	movs	r3, #0
 80030f4:	60bb      	str	r3, [r7, #8]
 80030f6:	2300      	movs	r3, #0
 80030f8:	617b      	str	r3, [r7, #20]
 80030fa:	2300      	movs	r3, #0
 80030fc:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80030fe:	2300      	movs	r3, #0
 8003100:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003102:	4b1e      	ldr	r3, [pc, #120]	; (800317c <HAL_RCC_GetSysClockFreq+0x94>)
 8003104:	685b      	ldr	r3, [r3, #4]
 8003106:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	f003 030c 	and.w	r3, r3, #12
 800310e:	2b04      	cmp	r3, #4
 8003110:	d002      	beq.n	8003118 <HAL_RCC_GetSysClockFreq+0x30>
 8003112:	2b08      	cmp	r3, #8
 8003114:	d003      	beq.n	800311e <HAL_RCC_GetSysClockFreq+0x36>
 8003116:	e027      	b.n	8003168 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003118:	4b19      	ldr	r3, [pc, #100]	; (8003180 <HAL_RCC_GetSysClockFreq+0x98>)
 800311a:	613b      	str	r3, [r7, #16]
      break;
 800311c:	e027      	b.n	800316e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	0c9b      	lsrs	r3, r3, #18
 8003122:	f003 030f 	and.w	r3, r3, #15
 8003126:	4a17      	ldr	r2, [pc, #92]	; (8003184 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003128:	5cd3      	ldrb	r3, [r2, r3]
 800312a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003132:	2b00      	cmp	r3, #0
 8003134:	d010      	beq.n	8003158 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003136:	4b11      	ldr	r3, [pc, #68]	; (800317c <HAL_RCC_GetSysClockFreq+0x94>)
 8003138:	685b      	ldr	r3, [r3, #4]
 800313a:	0c5b      	lsrs	r3, r3, #17
 800313c:	f003 0301 	and.w	r3, r3, #1
 8003140:	4a11      	ldr	r2, [pc, #68]	; (8003188 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003142:	5cd3      	ldrb	r3, [r2, r3]
 8003144:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	4a0d      	ldr	r2, [pc, #52]	; (8003180 <HAL_RCC_GetSysClockFreq+0x98>)
 800314a:	fb03 f202 	mul.w	r2, r3, r2
 800314e:	68bb      	ldr	r3, [r7, #8]
 8003150:	fbb2 f3f3 	udiv	r3, r2, r3
 8003154:	617b      	str	r3, [r7, #20]
 8003156:	e004      	b.n	8003162 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	4a0c      	ldr	r2, [pc, #48]	; (800318c <HAL_RCC_GetSysClockFreq+0xa4>)
 800315c:	fb02 f303 	mul.w	r3, r2, r3
 8003160:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003162:	697b      	ldr	r3, [r7, #20]
 8003164:	613b      	str	r3, [r7, #16]
      break;
 8003166:	e002      	b.n	800316e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003168:	4b05      	ldr	r3, [pc, #20]	; (8003180 <HAL_RCC_GetSysClockFreq+0x98>)
 800316a:	613b      	str	r3, [r7, #16]
      break;
 800316c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800316e:	693b      	ldr	r3, [r7, #16]
}
 8003170:	4618      	mov	r0, r3
 8003172:	371c      	adds	r7, #28
 8003174:	46bd      	mov	sp, r7
 8003176:	bc80      	pop	{r7}
 8003178:	4770      	bx	lr
 800317a:	bf00      	nop
 800317c:	40021000 	.word	0x40021000
 8003180:	007a1200 	.word	0x007a1200
 8003184:	08005478 	.word	0x08005478
 8003188:	08005488 	.word	0x08005488
 800318c:	003d0900 	.word	0x003d0900

08003190 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003190:	b480      	push	{r7}
 8003192:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003194:	4b02      	ldr	r3, [pc, #8]	; (80031a0 <HAL_RCC_GetHCLKFreq+0x10>)
 8003196:	681b      	ldr	r3, [r3, #0]
}
 8003198:	4618      	mov	r0, r3
 800319a:	46bd      	mov	sp, r7
 800319c:	bc80      	pop	{r7}
 800319e:	4770      	bx	lr
 80031a0:	20000018 	.word	0x20000018

080031a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80031a4:	b580      	push	{r7, lr}
 80031a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80031a8:	f7ff fff2 	bl	8003190 <HAL_RCC_GetHCLKFreq>
 80031ac:	4602      	mov	r2, r0
 80031ae:	4b05      	ldr	r3, [pc, #20]	; (80031c4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80031b0:	685b      	ldr	r3, [r3, #4]
 80031b2:	0a1b      	lsrs	r3, r3, #8
 80031b4:	f003 0307 	and.w	r3, r3, #7
 80031b8:	4903      	ldr	r1, [pc, #12]	; (80031c8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80031ba:	5ccb      	ldrb	r3, [r1, r3]
 80031bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80031c0:	4618      	mov	r0, r3
 80031c2:	bd80      	pop	{r7, pc}
 80031c4:	40021000 	.word	0x40021000
 80031c8:	08005470 	.word	0x08005470

080031cc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80031cc:	b580      	push	{r7, lr}
 80031ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80031d0:	f7ff ffde 	bl	8003190 <HAL_RCC_GetHCLKFreq>
 80031d4:	4602      	mov	r2, r0
 80031d6:	4b05      	ldr	r3, [pc, #20]	; (80031ec <HAL_RCC_GetPCLK2Freq+0x20>)
 80031d8:	685b      	ldr	r3, [r3, #4]
 80031da:	0adb      	lsrs	r3, r3, #11
 80031dc:	f003 0307 	and.w	r3, r3, #7
 80031e0:	4903      	ldr	r1, [pc, #12]	; (80031f0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80031e2:	5ccb      	ldrb	r3, [r1, r3]
 80031e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80031e8:	4618      	mov	r0, r3
 80031ea:	bd80      	pop	{r7, pc}
 80031ec:	40021000 	.word	0x40021000
 80031f0:	08005470 	.word	0x08005470

080031f4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80031f4:	b480      	push	{r7}
 80031f6:	b085      	sub	sp, #20
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80031fc:	4b0a      	ldr	r3, [pc, #40]	; (8003228 <RCC_Delay+0x34>)
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	4a0a      	ldr	r2, [pc, #40]	; (800322c <RCC_Delay+0x38>)
 8003202:	fba2 2303 	umull	r2, r3, r2, r3
 8003206:	0a5b      	lsrs	r3, r3, #9
 8003208:	687a      	ldr	r2, [r7, #4]
 800320a:	fb02 f303 	mul.w	r3, r2, r3
 800320e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003210:	bf00      	nop
  }
  while (Delay --);
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	1e5a      	subs	r2, r3, #1
 8003216:	60fa      	str	r2, [r7, #12]
 8003218:	2b00      	cmp	r3, #0
 800321a:	d1f9      	bne.n	8003210 <RCC_Delay+0x1c>
}
 800321c:	bf00      	nop
 800321e:	bf00      	nop
 8003220:	3714      	adds	r7, #20
 8003222:	46bd      	mov	sp, r7
 8003224:	bc80      	pop	{r7}
 8003226:	4770      	bx	lr
 8003228:	20000018 	.word	0x20000018
 800322c:	10624dd3 	.word	0x10624dd3

08003230 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003230:	b580      	push	{r7, lr}
 8003232:	b082      	sub	sp, #8
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	2b00      	cmp	r3, #0
 800323c:	d101      	bne.n	8003242 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800323e:	2301      	movs	r3, #1
 8003240:	e042      	b.n	80032c8 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003248:	b2db      	uxtb	r3, r3
 800324a:	2b00      	cmp	r3, #0
 800324c:	d106      	bne.n	800325c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	2200      	movs	r2, #0
 8003252:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003256:	6878      	ldr	r0, [r7, #4]
 8003258:	f7fe faae 	bl	80017b8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	2224      	movs	r2, #36	; 0x24
 8003260:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	68da      	ldr	r2, [r3, #12]
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003272:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003274:	6878      	ldr	r0, [r7, #4]
 8003276:	f000 fefd 	bl	8004074 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	691a      	ldr	r2, [r3, #16]
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003288:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	695a      	ldr	r2, [r3, #20]
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003298:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	68da      	ldr	r2, [r3, #12]
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80032a8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	2200      	movs	r2, #0
 80032ae:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	2220      	movs	r2, #32
 80032b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	2220      	movs	r2, #32
 80032bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	2200      	movs	r2, #0
 80032c4:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80032c6:	2300      	movs	r3, #0
}
 80032c8:	4618      	mov	r0, r3
 80032ca:	3708      	adds	r7, #8
 80032cc:	46bd      	mov	sp, r7
 80032ce:	bd80      	pop	{r7, pc}

080032d0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80032d0:	b580      	push	{r7, lr}
 80032d2:	b08a      	sub	sp, #40	; 0x28
 80032d4:	af02      	add	r7, sp, #8
 80032d6:	60f8      	str	r0, [r7, #12]
 80032d8:	60b9      	str	r1, [r7, #8]
 80032da:	603b      	str	r3, [r7, #0]
 80032dc:	4613      	mov	r3, r2
 80032de:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80032e0:	2300      	movs	r3, #0
 80032e2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80032ea:	b2db      	uxtb	r3, r3
 80032ec:	2b20      	cmp	r3, #32
 80032ee:	d175      	bne.n	80033dc <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80032f0:	68bb      	ldr	r3, [r7, #8]
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d002      	beq.n	80032fc <HAL_UART_Transmit+0x2c>
 80032f6:	88fb      	ldrh	r3, [r7, #6]
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d101      	bne.n	8003300 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80032fc:	2301      	movs	r3, #1
 80032fe:	e06e      	b.n	80033de <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	2200      	movs	r2, #0
 8003304:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	2221      	movs	r2, #33	; 0x21
 800330a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800330e:	f7fe fcaf 	bl	8001c70 <HAL_GetTick>
 8003312:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	88fa      	ldrh	r2, [r7, #6]
 8003318:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	88fa      	ldrh	r2, [r7, #6]
 800331e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	689b      	ldr	r3, [r3, #8]
 8003324:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003328:	d108      	bne.n	800333c <HAL_UART_Transmit+0x6c>
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	691b      	ldr	r3, [r3, #16]
 800332e:	2b00      	cmp	r3, #0
 8003330:	d104      	bne.n	800333c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003332:	2300      	movs	r3, #0
 8003334:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003336:	68bb      	ldr	r3, [r7, #8]
 8003338:	61bb      	str	r3, [r7, #24]
 800333a:	e003      	b.n	8003344 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800333c:	68bb      	ldr	r3, [r7, #8]
 800333e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003340:	2300      	movs	r3, #0
 8003342:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003344:	e02e      	b.n	80033a4 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003346:	683b      	ldr	r3, [r7, #0]
 8003348:	9300      	str	r3, [sp, #0]
 800334a:	697b      	ldr	r3, [r7, #20]
 800334c:	2200      	movs	r2, #0
 800334e:	2180      	movs	r1, #128	; 0x80
 8003350:	68f8      	ldr	r0, [r7, #12]
 8003352:	f000 fc3a 	bl	8003bca <UART_WaitOnFlagUntilTimeout>
 8003356:	4603      	mov	r3, r0
 8003358:	2b00      	cmp	r3, #0
 800335a:	d005      	beq.n	8003368 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	2220      	movs	r2, #32
 8003360:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 8003364:	2303      	movs	r3, #3
 8003366:	e03a      	b.n	80033de <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003368:	69fb      	ldr	r3, [r7, #28]
 800336a:	2b00      	cmp	r3, #0
 800336c:	d10b      	bne.n	8003386 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800336e:	69bb      	ldr	r3, [r7, #24]
 8003370:	881b      	ldrh	r3, [r3, #0]
 8003372:	461a      	mov	r2, r3
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800337c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800337e:	69bb      	ldr	r3, [r7, #24]
 8003380:	3302      	adds	r3, #2
 8003382:	61bb      	str	r3, [r7, #24]
 8003384:	e007      	b.n	8003396 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003386:	69fb      	ldr	r3, [r7, #28]
 8003388:	781a      	ldrb	r2, [r3, #0]
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003390:	69fb      	ldr	r3, [r7, #28]
 8003392:	3301      	adds	r3, #1
 8003394:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800339a:	b29b      	uxth	r3, r3
 800339c:	3b01      	subs	r3, #1
 800339e:	b29a      	uxth	r2, r3
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80033a8:	b29b      	uxth	r3, r3
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d1cb      	bne.n	8003346 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80033ae:	683b      	ldr	r3, [r7, #0]
 80033b0:	9300      	str	r3, [sp, #0]
 80033b2:	697b      	ldr	r3, [r7, #20]
 80033b4:	2200      	movs	r2, #0
 80033b6:	2140      	movs	r1, #64	; 0x40
 80033b8:	68f8      	ldr	r0, [r7, #12]
 80033ba:	f000 fc06 	bl	8003bca <UART_WaitOnFlagUntilTimeout>
 80033be:	4603      	mov	r3, r0
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d005      	beq.n	80033d0 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	2220      	movs	r2, #32
 80033c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 80033cc:	2303      	movs	r3, #3
 80033ce:	e006      	b.n	80033de <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	2220      	movs	r2, #32
 80033d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 80033d8:	2300      	movs	r3, #0
 80033da:	e000      	b.n	80033de <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80033dc:	2302      	movs	r3, #2
  }
}
 80033de:	4618      	mov	r0, r3
 80033e0:	3720      	adds	r7, #32
 80033e2:	46bd      	mov	sp, r7
 80033e4:	bd80      	pop	{r7, pc}

080033e6 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80033e6:	b580      	push	{r7, lr}
 80033e8:	b084      	sub	sp, #16
 80033ea:	af00      	add	r7, sp, #0
 80033ec:	60f8      	str	r0, [r7, #12]
 80033ee:	60b9      	str	r1, [r7, #8]
 80033f0:	4613      	mov	r3, r2
 80033f2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80033fa:	b2db      	uxtb	r3, r3
 80033fc:	2b20      	cmp	r3, #32
 80033fe:	d112      	bne.n	8003426 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8003400:	68bb      	ldr	r3, [r7, #8]
 8003402:	2b00      	cmp	r3, #0
 8003404:	d002      	beq.n	800340c <HAL_UART_Receive_IT+0x26>
 8003406:	88fb      	ldrh	r3, [r7, #6]
 8003408:	2b00      	cmp	r3, #0
 800340a:	d101      	bne.n	8003410 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800340c:	2301      	movs	r3, #1
 800340e:	e00b      	b.n	8003428 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	2200      	movs	r2, #0
 8003414:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003416:	88fb      	ldrh	r3, [r7, #6]
 8003418:	461a      	mov	r2, r3
 800341a:	68b9      	ldr	r1, [r7, #8]
 800341c:	68f8      	ldr	r0, [r7, #12]
 800341e:	f000 fc2d 	bl	8003c7c <UART_Start_Receive_IT>
 8003422:	4603      	mov	r3, r0
 8003424:	e000      	b.n	8003428 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8003426:	2302      	movs	r3, #2
  }
}
 8003428:	4618      	mov	r0, r3
 800342a:	3710      	adds	r7, #16
 800342c:	46bd      	mov	sp, r7
 800342e:	bd80      	pop	{r7, pc}

08003430 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8003430:	b580      	push	{r7, lr}
 8003432:	b08c      	sub	sp, #48	; 0x30
 8003434:	af00      	add	r7, sp, #0
 8003436:	60f8      	str	r0, [r7, #12]
 8003438:	60b9      	str	r1, [r7, #8]
 800343a:	4613      	mov	r3, r2
 800343c:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003444:	b2db      	uxtb	r3, r3
 8003446:	2b20      	cmp	r3, #32
 8003448:	d156      	bne.n	80034f8 <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 800344a:	68bb      	ldr	r3, [r7, #8]
 800344c:	2b00      	cmp	r3, #0
 800344e:	d002      	beq.n	8003456 <HAL_UART_Transmit_DMA+0x26>
 8003450:	88fb      	ldrh	r3, [r7, #6]
 8003452:	2b00      	cmp	r3, #0
 8003454:	d101      	bne.n	800345a <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8003456:	2301      	movs	r3, #1
 8003458:	e04f      	b.n	80034fa <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 800345a:	68ba      	ldr	r2, [r7, #8]
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	88fa      	ldrh	r2, [r7, #6]
 8003464:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	88fa      	ldrh	r2, [r7, #6]
 800346a:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	2200      	movs	r2, #0
 8003470:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	2221      	movs	r2, #33	; 0x21
 8003476:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800347e:	4a21      	ldr	r2, [pc, #132]	; (8003504 <HAL_UART_Transmit_DMA+0xd4>)
 8003480:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003486:	4a20      	ldr	r2, [pc, #128]	; (8003508 <HAL_UART_Transmit_DMA+0xd8>)
 8003488:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800348e:	4a1f      	ldr	r2, [pc, #124]	; (800350c <HAL_UART_Transmit_DMA+0xdc>)
 8003490:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003496:	2200      	movs	r2, #0
 8003498:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the UART transmit DMA channel */
    tmp = (const uint32_t *)&pData;
 800349a:	f107 0308 	add.w	r3, r7, #8
 800349e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80034a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034a6:	6819      	ldr	r1, [r3, #0]
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	3304      	adds	r3, #4
 80034ae:	461a      	mov	r2, r3
 80034b0:	88fb      	ldrh	r3, [r7, #6]
 80034b2:	f7fe fd73 	bl	8001f9c <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80034be:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	3314      	adds	r3, #20
 80034c6:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034c8:	69bb      	ldr	r3, [r7, #24]
 80034ca:	e853 3f00 	ldrex	r3, [r3]
 80034ce:	617b      	str	r3, [r7, #20]
   return(result);
 80034d0:	697b      	ldr	r3, [r7, #20]
 80034d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80034d6:	62bb      	str	r3, [r7, #40]	; 0x28
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	3314      	adds	r3, #20
 80034de:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80034e0:	627a      	str	r2, [r7, #36]	; 0x24
 80034e2:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034e4:	6a39      	ldr	r1, [r7, #32]
 80034e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034e8:	e841 2300 	strex	r3, r2, [r1]
 80034ec:	61fb      	str	r3, [r7, #28]
   return(result);
 80034ee:	69fb      	ldr	r3, [r7, #28]
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d1e5      	bne.n	80034c0 <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 80034f4:	2300      	movs	r3, #0
 80034f6:	e000      	b.n	80034fa <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 80034f8:	2302      	movs	r3, #2
  }
}
 80034fa:	4618      	mov	r0, r3
 80034fc:	3730      	adds	r7, #48	; 0x30
 80034fe:	46bd      	mov	sp, r7
 8003500:	bd80      	pop	{r7, pc}
 8003502:	bf00      	nop
 8003504:	08003a81 	.word	0x08003a81
 8003508:	08003b1b 	.word	0x08003b1b
 800350c:	08003b37 	.word	0x08003b37

08003510 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003510:	b580      	push	{r7, lr}
 8003512:	b0ba      	sub	sp, #232	; 0xe8
 8003514:	af00      	add	r7, sp, #0
 8003516:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	68db      	ldr	r3, [r3, #12]
 8003528:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	695b      	ldr	r3, [r3, #20]
 8003532:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8003536:	2300      	movs	r3, #0
 8003538:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800353c:	2300      	movs	r3, #0
 800353e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003542:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003546:	f003 030f 	and.w	r3, r3, #15
 800354a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800354e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003552:	2b00      	cmp	r3, #0
 8003554:	d10f      	bne.n	8003576 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003556:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800355a:	f003 0320 	and.w	r3, r3, #32
 800355e:	2b00      	cmp	r3, #0
 8003560:	d009      	beq.n	8003576 <HAL_UART_IRQHandler+0x66>
 8003562:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003566:	f003 0320 	and.w	r3, r3, #32
 800356a:	2b00      	cmp	r3, #0
 800356c:	d003      	beq.n	8003576 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800356e:	6878      	ldr	r0, [r7, #4]
 8003570:	f000 fcc1 	bl	8003ef6 <UART_Receive_IT>
      return;
 8003574:	e25b      	b.n	8003a2e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003576:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800357a:	2b00      	cmp	r3, #0
 800357c:	f000 80de 	beq.w	800373c <HAL_UART_IRQHandler+0x22c>
 8003580:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003584:	f003 0301 	and.w	r3, r3, #1
 8003588:	2b00      	cmp	r3, #0
 800358a:	d106      	bne.n	800359a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800358c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003590:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003594:	2b00      	cmp	r3, #0
 8003596:	f000 80d1 	beq.w	800373c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800359a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800359e:	f003 0301 	and.w	r3, r3, #1
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d00b      	beq.n	80035be <HAL_UART_IRQHandler+0xae>
 80035a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80035aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d005      	beq.n	80035be <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035b6:	f043 0201 	orr.w	r2, r3, #1
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80035be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80035c2:	f003 0304 	and.w	r3, r3, #4
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d00b      	beq.n	80035e2 <HAL_UART_IRQHandler+0xd2>
 80035ca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80035ce:	f003 0301 	and.w	r3, r3, #1
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d005      	beq.n	80035e2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035da:	f043 0202 	orr.w	r2, r3, #2
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80035e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80035e6:	f003 0302 	and.w	r3, r3, #2
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d00b      	beq.n	8003606 <HAL_UART_IRQHandler+0xf6>
 80035ee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80035f2:	f003 0301 	and.w	r3, r3, #1
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d005      	beq.n	8003606 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035fe:	f043 0204 	orr.w	r2, r3, #4
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003606:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800360a:	f003 0308 	and.w	r3, r3, #8
 800360e:	2b00      	cmp	r3, #0
 8003610:	d011      	beq.n	8003636 <HAL_UART_IRQHandler+0x126>
 8003612:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003616:	f003 0320 	and.w	r3, r3, #32
 800361a:	2b00      	cmp	r3, #0
 800361c:	d105      	bne.n	800362a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800361e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003622:	f003 0301 	and.w	r3, r3, #1
 8003626:	2b00      	cmp	r3, #0
 8003628:	d005      	beq.n	8003636 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800362e:	f043 0208 	orr.w	r2, r3, #8
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800363a:	2b00      	cmp	r3, #0
 800363c:	f000 81f2 	beq.w	8003a24 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003640:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003644:	f003 0320 	and.w	r3, r3, #32
 8003648:	2b00      	cmp	r3, #0
 800364a:	d008      	beq.n	800365e <HAL_UART_IRQHandler+0x14e>
 800364c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003650:	f003 0320 	and.w	r3, r3, #32
 8003654:	2b00      	cmp	r3, #0
 8003656:	d002      	beq.n	800365e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003658:	6878      	ldr	r0, [r7, #4]
 800365a:	f000 fc4c 	bl	8003ef6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	695b      	ldr	r3, [r3, #20]
 8003664:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003668:	2b00      	cmp	r3, #0
 800366a:	bf14      	ite	ne
 800366c:	2301      	movne	r3, #1
 800366e:	2300      	moveq	r3, #0
 8003670:	b2db      	uxtb	r3, r3
 8003672:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800367a:	f003 0308 	and.w	r3, r3, #8
 800367e:	2b00      	cmp	r3, #0
 8003680:	d103      	bne.n	800368a <HAL_UART_IRQHandler+0x17a>
 8003682:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003686:	2b00      	cmp	r3, #0
 8003688:	d04f      	beq.n	800372a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800368a:	6878      	ldr	r0, [r7, #4]
 800368c:	f000 fb56 	bl	8003d3c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	695b      	ldr	r3, [r3, #20]
 8003696:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800369a:	2b00      	cmp	r3, #0
 800369c:	d041      	beq.n	8003722 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	3314      	adds	r3, #20
 80036a4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036a8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80036ac:	e853 3f00 	ldrex	r3, [r3]
 80036b0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80036b4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80036b8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80036bc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	3314      	adds	r3, #20
 80036c6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80036ca:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80036ce:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036d2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80036d6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80036da:	e841 2300 	strex	r3, r2, [r1]
 80036de:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80036e2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d1d9      	bne.n	800369e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d013      	beq.n	800371a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036f6:	4a7e      	ldr	r2, [pc, #504]	; (80038f0 <HAL_UART_IRQHandler+0x3e0>)
 80036f8:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036fe:	4618      	mov	r0, r3
 8003700:	f7fe fce8 	bl	80020d4 <HAL_DMA_Abort_IT>
 8003704:	4603      	mov	r3, r0
 8003706:	2b00      	cmp	r3, #0
 8003708:	d016      	beq.n	8003738 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800370e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003710:	687a      	ldr	r2, [r7, #4]
 8003712:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003714:	4610      	mov	r0, r2
 8003716:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003718:	e00e      	b.n	8003738 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800371a:	6878      	ldr	r0, [r7, #4]
 800371c:	f000 f99c 	bl	8003a58 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003720:	e00a      	b.n	8003738 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003722:	6878      	ldr	r0, [r7, #4]
 8003724:	f000 f998 	bl	8003a58 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003728:	e006      	b.n	8003738 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800372a:	6878      	ldr	r0, [r7, #4]
 800372c:	f000 f994 	bl	8003a58 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2200      	movs	r2, #0
 8003734:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8003736:	e175      	b.n	8003a24 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003738:	bf00      	nop
    return;
 800373a:	e173      	b.n	8003a24 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003740:	2b01      	cmp	r3, #1
 8003742:	f040 814f 	bne.w	80039e4 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003746:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800374a:	f003 0310 	and.w	r3, r3, #16
 800374e:	2b00      	cmp	r3, #0
 8003750:	f000 8148 	beq.w	80039e4 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003754:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003758:	f003 0310 	and.w	r3, r3, #16
 800375c:	2b00      	cmp	r3, #0
 800375e:	f000 8141 	beq.w	80039e4 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003762:	2300      	movs	r3, #0
 8003764:	60bb      	str	r3, [r7, #8]
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	60bb      	str	r3, [r7, #8]
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	685b      	ldr	r3, [r3, #4]
 8003774:	60bb      	str	r3, [r7, #8]
 8003776:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	695b      	ldr	r3, [r3, #20]
 800377e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003782:	2b00      	cmp	r3, #0
 8003784:	f000 80b6 	beq.w	80038f4 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	685b      	ldr	r3, [r3, #4]
 8003790:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003794:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003798:	2b00      	cmp	r3, #0
 800379a:	f000 8145 	beq.w	8003a28 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80037a2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80037a6:	429a      	cmp	r2, r3
 80037a8:	f080 813e 	bcs.w	8003a28 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80037b2:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037b8:	699b      	ldr	r3, [r3, #24]
 80037ba:	2b20      	cmp	r3, #32
 80037bc:	f000 8088 	beq.w	80038d0 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	330c      	adds	r3, #12
 80037c6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037ca:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80037ce:	e853 3f00 	ldrex	r3, [r3]
 80037d2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80037d6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80037da:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80037de:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	330c      	adds	r3, #12
 80037e8:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80037ec:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80037f0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037f4:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80037f8:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80037fc:	e841 2300 	strex	r3, r2, [r1]
 8003800:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003804:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003808:	2b00      	cmp	r3, #0
 800380a:	d1d9      	bne.n	80037c0 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	3314      	adds	r3, #20
 8003812:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003814:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003816:	e853 3f00 	ldrex	r3, [r3]
 800381a:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800381c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800381e:	f023 0301 	bic.w	r3, r3, #1
 8003822:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	3314      	adds	r3, #20
 800382c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003830:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003834:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003836:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003838:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800383c:	e841 2300 	strex	r3, r2, [r1]
 8003840:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003842:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003844:	2b00      	cmp	r3, #0
 8003846:	d1e1      	bne.n	800380c <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	3314      	adds	r3, #20
 800384e:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003850:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003852:	e853 3f00 	ldrex	r3, [r3]
 8003856:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003858:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800385a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800385e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	3314      	adds	r3, #20
 8003868:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800386c:	66fa      	str	r2, [r7, #108]	; 0x6c
 800386e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003870:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003872:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003874:	e841 2300 	strex	r3, r2, [r1]
 8003878:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800387a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800387c:	2b00      	cmp	r3, #0
 800387e:	d1e3      	bne.n	8003848 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	2220      	movs	r2, #32
 8003884:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	2200      	movs	r2, #0
 800388c:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	330c      	adds	r3, #12
 8003894:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003896:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003898:	e853 3f00 	ldrex	r3, [r3]
 800389c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800389e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80038a0:	f023 0310 	bic.w	r3, r3, #16
 80038a4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	330c      	adds	r3, #12
 80038ae:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80038b2:	65ba      	str	r2, [r7, #88]	; 0x58
 80038b4:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038b6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80038b8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80038ba:	e841 2300 	strex	r3, r2, [r1]
 80038be:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80038c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d1e3      	bne.n	800388e <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038ca:	4618      	mov	r0, r3
 80038cc:	f7fe fbc6 	bl	800205c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	2202      	movs	r2, #2
 80038d4:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80038de:	b29b      	uxth	r3, r3
 80038e0:	1ad3      	subs	r3, r2, r3
 80038e2:	b29b      	uxth	r3, r3
 80038e4:	4619      	mov	r1, r3
 80038e6:	6878      	ldr	r0, [r7, #4]
 80038e8:	f000 f8bf 	bl	8003a6a <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80038ec:	e09c      	b.n	8003a28 <HAL_UART_IRQHandler+0x518>
 80038ee:	bf00      	nop
 80038f0:	08003e01 	.word	0x08003e01
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80038fc:	b29b      	uxth	r3, r3
 80038fe:	1ad3      	subs	r3, r2, r3
 8003900:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003908:	b29b      	uxth	r3, r3
 800390a:	2b00      	cmp	r3, #0
 800390c:	f000 808e 	beq.w	8003a2c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003910:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003914:	2b00      	cmp	r3, #0
 8003916:	f000 8089 	beq.w	8003a2c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	330c      	adds	r3, #12
 8003920:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003922:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003924:	e853 3f00 	ldrex	r3, [r3]
 8003928:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800392a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800392c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003930:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	330c      	adds	r3, #12
 800393a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800393e:	647a      	str	r2, [r7, #68]	; 0x44
 8003940:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003942:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003944:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003946:	e841 2300 	strex	r3, r2, [r1]
 800394a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800394c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800394e:	2b00      	cmp	r3, #0
 8003950:	d1e3      	bne.n	800391a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	3314      	adds	r3, #20
 8003958:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800395a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800395c:	e853 3f00 	ldrex	r3, [r3]
 8003960:	623b      	str	r3, [r7, #32]
   return(result);
 8003962:	6a3b      	ldr	r3, [r7, #32]
 8003964:	f023 0301 	bic.w	r3, r3, #1
 8003968:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	3314      	adds	r3, #20
 8003972:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003976:	633a      	str	r2, [r7, #48]	; 0x30
 8003978:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800397a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800397c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800397e:	e841 2300 	strex	r3, r2, [r1]
 8003982:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003984:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003986:	2b00      	cmp	r3, #0
 8003988:	d1e3      	bne.n	8003952 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	2220      	movs	r2, #32
 800398e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	2200      	movs	r2, #0
 8003996:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	330c      	adds	r3, #12
 800399e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039a0:	693b      	ldr	r3, [r7, #16]
 80039a2:	e853 3f00 	ldrex	r3, [r3]
 80039a6:	60fb      	str	r3, [r7, #12]
   return(result);
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	f023 0310 	bic.w	r3, r3, #16
 80039ae:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	330c      	adds	r3, #12
 80039b8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80039bc:	61fa      	str	r2, [r7, #28]
 80039be:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039c0:	69b9      	ldr	r1, [r7, #24]
 80039c2:	69fa      	ldr	r2, [r7, #28]
 80039c4:	e841 2300 	strex	r3, r2, [r1]
 80039c8:	617b      	str	r3, [r7, #20]
   return(result);
 80039ca:	697b      	ldr	r3, [r7, #20]
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d1e3      	bne.n	8003998 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	2202      	movs	r2, #2
 80039d4:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80039d6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80039da:	4619      	mov	r1, r3
 80039dc:	6878      	ldr	r0, [r7, #4]
 80039de:	f000 f844 	bl	8003a6a <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80039e2:	e023      	b.n	8003a2c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80039e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80039e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d009      	beq.n	8003a04 <HAL_UART_IRQHandler+0x4f4>
 80039f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80039f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d003      	beq.n	8003a04 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80039fc:	6878      	ldr	r0, [r7, #4]
 80039fe:	f000 fa13 	bl	8003e28 <UART_Transmit_IT>
    return;
 8003a02:	e014      	b.n	8003a2e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003a04:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d00e      	beq.n	8003a2e <HAL_UART_IRQHandler+0x51e>
 8003a10:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003a14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d008      	beq.n	8003a2e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003a1c:	6878      	ldr	r0, [r7, #4]
 8003a1e:	f000 fa52 	bl	8003ec6 <UART_EndTransmit_IT>
    return;
 8003a22:	e004      	b.n	8003a2e <HAL_UART_IRQHandler+0x51e>
    return;
 8003a24:	bf00      	nop
 8003a26:	e002      	b.n	8003a2e <HAL_UART_IRQHandler+0x51e>
      return;
 8003a28:	bf00      	nop
 8003a2a:	e000      	b.n	8003a2e <HAL_UART_IRQHandler+0x51e>
      return;
 8003a2c:	bf00      	nop
  }
}
 8003a2e:	37e8      	adds	r7, #232	; 0xe8
 8003a30:	46bd      	mov	sp, r7
 8003a32:	bd80      	pop	{r7, pc}

08003a34 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003a34:	b480      	push	{r7}
 8003a36:	b083      	sub	sp, #12
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003a3c:	bf00      	nop
 8003a3e:	370c      	adds	r7, #12
 8003a40:	46bd      	mov	sp, r7
 8003a42:	bc80      	pop	{r7}
 8003a44:	4770      	bx	lr

08003a46 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003a46:	b480      	push	{r7}
 8003a48:	b083      	sub	sp, #12
 8003a4a:	af00      	add	r7, sp, #0
 8003a4c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8003a4e:	bf00      	nop
 8003a50:	370c      	adds	r7, #12
 8003a52:	46bd      	mov	sp, r7
 8003a54:	bc80      	pop	{r7}
 8003a56:	4770      	bx	lr

08003a58 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003a58:	b480      	push	{r7}
 8003a5a:	b083      	sub	sp, #12
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003a60:	bf00      	nop
 8003a62:	370c      	adds	r7, #12
 8003a64:	46bd      	mov	sp, r7
 8003a66:	bc80      	pop	{r7}
 8003a68:	4770      	bx	lr

08003a6a <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003a6a:	b480      	push	{r7}
 8003a6c:	b083      	sub	sp, #12
 8003a6e:	af00      	add	r7, sp, #0
 8003a70:	6078      	str	r0, [r7, #4]
 8003a72:	460b      	mov	r3, r1
 8003a74:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003a76:	bf00      	nop
 8003a78:	370c      	adds	r7, #12
 8003a7a:	46bd      	mov	sp, r7
 8003a7c:	bc80      	pop	{r7}
 8003a7e:	4770      	bx	lr

08003a80 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8003a80:	b580      	push	{r7, lr}
 8003a82:	b090      	sub	sp, #64	; 0x40
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a8c:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f003 0320 	and.w	r3, r3, #32
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d137      	bne.n	8003b0c <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8003a9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a9e:	2200      	movs	r2, #0
 8003aa0:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003aa2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	3314      	adds	r3, #20
 8003aa8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aac:	e853 3f00 	ldrex	r3, [r3]
 8003ab0:	623b      	str	r3, [r7, #32]
   return(result);
 8003ab2:	6a3b      	ldr	r3, [r7, #32]
 8003ab4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003ab8:	63bb      	str	r3, [r7, #56]	; 0x38
 8003aba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	3314      	adds	r3, #20
 8003ac0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003ac2:	633a      	str	r2, [r7, #48]	; 0x30
 8003ac4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ac6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003ac8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003aca:	e841 2300 	strex	r3, r2, [r1]
 8003ace:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003ad0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d1e5      	bne.n	8003aa2 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003ad6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	330c      	adds	r3, #12
 8003adc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ade:	693b      	ldr	r3, [r7, #16]
 8003ae0:	e853 3f00 	ldrex	r3, [r3]
 8003ae4:	60fb      	str	r3, [r7, #12]
   return(result);
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003aec:	637b      	str	r3, [r7, #52]	; 0x34
 8003aee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	330c      	adds	r3, #12
 8003af4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003af6:	61fa      	str	r2, [r7, #28]
 8003af8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003afa:	69b9      	ldr	r1, [r7, #24]
 8003afc:	69fa      	ldr	r2, [r7, #28]
 8003afe:	e841 2300 	strex	r3, r2, [r1]
 8003b02:	617b      	str	r3, [r7, #20]
   return(result);
 8003b04:	697b      	ldr	r3, [r7, #20]
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d1e5      	bne.n	8003ad6 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003b0a:	e002      	b.n	8003b12 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8003b0c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8003b0e:	f7ff ff91 	bl	8003a34 <HAL_UART_TxCpltCallback>
}
 8003b12:	bf00      	nop
 8003b14:	3740      	adds	r7, #64	; 0x40
 8003b16:	46bd      	mov	sp, r7
 8003b18:	bd80      	pop	{r7, pc}

08003b1a <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003b1a:	b580      	push	{r7, lr}
 8003b1c:	b084      	sub	sp, #16
 8003b1e:	af00      	add	r7, sp, #0
 8003b20:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b26:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8003b28:	68f8      	ldr	r0, [r7, #12]
 8003b2a:	f7ff ff8c 	bl	8003a46 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003b2e:	bf00      	nop
 8003b30:	3710      	adds	r7, #16
 8003b32:	46bd      	mov	sp, r7
 8003b34:	bd80      	pop	{r7, pc}

08003b36 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8003b36:	b580      	push	{r7, lr}
 8003b38:	b084      	sub	sp, #16
 8003b3a:	af00      	add	r7, sp, #0
 8003b3c:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8003b3e:	2300      	movs	r3, #0
 8003b40:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b46:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8003b48:	68bb      	ldr	r3, [r7, #8]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	695b      	ldr	r3, [r3, #20]
 8003b4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	bf14      	ite	ne
 8003b56:	2301      	movne	r3, #1
 8003b58:	2300      	moveq	r3, #0
 8003b5a:	b2db      	uxtb	r3, r3
 8003b5c:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8003b5e:	68bb      	ldr	r3, [r7, #8]
 8003b60:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003b64:	b2db      	uxtb	r3, r3
 8003b66:	2b21      	cmp	r3, #33	; 0x21
 8003b68:	d108      	bne.n	8003b7c <UART_DMAError+0x46>
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d005      	beq.n	8003b7c <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8003b70:	68bb      	ldr	r3, [r7, #8]
 8003b72:	2200      	movs	r2, #0
 8003b74:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8003b76:	68b8      	ldr	r0, [r7, #8]
 8003b78:	f000 f8b9 	bl	8003cee <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003b7c:	68bb      	ldr	r3, [r7, #8]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	695b      	ldr	r3, [r3, #20]
 8003b82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	bf14      	ite	ne
 8003b8a:	2301      	movne	r3, #1
 8003b8c:	2300      	moveq	r3, #0
 8003b8e:	b2db      	uxtb	r3, r3
 8003b90:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8003b92:	68bb      	ldr	r3, [r7, #8]
 8003b94:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003b98:	b2db      	uxtb	r3, r3
 8003b9a:	2b22      	cmp	r3, #34	; 0x22
 8003b9c:	d108      	bne.n	8003bb0 <UART_DMAError+0x7a>
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d005      	beq.n	8003bb0 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8003ba4:	68bb      	ldr	r3, [r7, #8]
 8003ba6:	2200      	movs	r2, #0
 8003ba8:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8003baa:	68b8      	ldr	r0, [r7, #8]
 8003bac:	f000 f8c6 	bl	8003d3c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8003bb0:	68bb      	ldr	r3, [r7, #8]
 8003bb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bb4:	f043 0210 	orr.w	r2, r3, #16
 8003bb8:	68bb      	ldr	r3, [r7, #8]
 8003bba:	645a      	str	r2, [r3, #68]	; 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003bbc:	68b8      	ldr	r0, [r7, #8]
 8003bbe:	f7ff ff4b 	bl	8003a58 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003bc2:	bf00      	nop
 8003bc4:	3710      	adds	r7, #16
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	bd80      	pop	{r7, pc}

08003bca <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003bca:	b580      	push	{r7, lr}
 8003bcc:	b086      	sub	sp, #24
 8003bce:	af00      	add	r7, sp, #0
 8003bd0:	60f8      	str	r0, [r7, #12]
 8003bd2:	60b9      	str	r1, [r7, #8]
 8003bd4:	603b      	str	r3, [r7, #0]
 8003bd6:	4613      	mov	r3, r2
 8003bd8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003bda:	e03b      	b.n	8003c54 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003bdc:	6a3b      	ldr	r3, [r7, #32]
 8003bde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003be2:	d037      	beq.n	8003c54 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003be4:	f7fe f844 	bl	8001c70 <HAL_GetTick>
 8003be8:	4602      	mov	r2, r0
 8003bea:	683b      	ldr	r3, [r7, #0]
 8003bec:	1ad3      	subs	r3, r2, r3
 8003bee:	6a3a      	ldr	r2, [r7, #32]
 8003bf0:	429a      	cmp	r2, r3
 8003bf2:	d302      	bcc.n	8003bfa <UART_WaitOnFlagUntilTimeout+0x30>
 8003bf4:	6a3b      	ldr	r3, [r7, #32]
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d101      	bne.n	8003bfe <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003bfa:	2303      	movs	r3, #3
 8003bfc:	e03a      	b.n	8003c74 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	68db      	ldr	r3, [r3, #12]
 8003c04:	f003 0304 	and.w	r3, r3, #4
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d023      	beq.n	8003c54 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003c0c:	68bb      	ldr	r3, [r7, #8]
 8003c0e:	2b80      	cmp	r3, #128	; 0x80
 8003c10:	d020      	beq.n	8003c54 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003c12:	68bb      	ldr	r3, [r7, #8]
 8003c14:	2b40      	cmp	r3, #64	; 0x40
 8003c16:	d01d      	beq.n	8003c54 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f003 0308 	and.w	r3, r3, #8
 8003c22:	2b08      	cmp	r3, #8
 8003c24:	d116      	bne.n	8003c54 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003c26:	2300      	movs	r3, #0
 8003c28:	617b      	str	r3, [r7, #20]
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	617b      	str	r3, [r7, #20]
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	685b      	ldr	r3, [r3, #4]
 8003c38:	617b      	str	r3, [r7, #20]
 8003c3a:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003c3c:	68f8      	ldr	r0, [r7, #12]
 8003c3e:	f000 f87d 	bl	8003d3c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	2208      	movs	r2, #8
 8003c46:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	2200      	movs	r2, #0
 8003c4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8003c50:	2301      	movs	r3, #1
 8003c52:	e00f      	b.n	8003c74 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	681a      	ldr	r2, [r3, #0]
 8003c5a:	68bb      	ldr	r3, [r7, #8]
 8003c5c:	4013      	ands	r3, r2
 8003c5e:	68ba      	ldr	r2, [r7, #8]
 8003c60:	429a      	cmp	r2, r3
 8003c62:	bf0c      	ite	eq
 8003c64:	2301      	moveq	r3, #1
 8003c66:	2300      	movne	r3, #0
 8003c68:	b2db      	uxtb	r3, r3
 8003c6a:	461a      	mov	r2, r3
 8003c6c:	79fb      	ldrb	r3, [r7, #7]
 8003c6e:	429a      	cmp	r2, r3
 8003c70:	d0b4      	beq.n	8003bdc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003c72:	2300      	movs	r3, #0
}
 8003c74:	4618      	mov	r0, r3
 8003c76:	3718      	adds	r7, #24
 8003c78:	46bd      	mov	sp, r7
 8003c7a:	bd80      	pop	{r7, pc}

08003c7c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003c7c:	b480      	push	{r7}
 8003c7e:	b085      	sub	sp, #20
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	60f8      	str	r0, [r7, #12]
 8003c84:	60b9      	str	r1, [r7, #8]
 8003c86:	4613      	mov	r3, r2
 8003c88:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	68ba      	ldr	r2, [r7, #8]
 8003c8e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	88fa      	ldrh	r2, [r7, #6]
 8003c94:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	88fa      	ldrh	r2, [r7, #6]
 8003c9a:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	2200      	movs	r2, #0
 8003ca0:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	2222      	movs	r2, #34	; 0x22
 8003ca6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	691b      	ldr	r3, [r3, #16]
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d007      	beq.n	8003cc2 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	68da      	ldr	r2, [r3, #12]
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003cc0:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	695a      	ldr	r2, [r3, #20]
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f042 0201 	orr.w	r2, r2, #1
 8003cd0:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	68da      	ldr	r2, [r3, #12]
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f042 0220 	orr.w	r2, r2, #32
 8003ce0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003ce2:	2300      	movs	r3, #0
}
 8003ce4:	4618      	mov	r0, r3
 8003ce6:	3714      	adds	r7, #20
 8003ce8:	46bd      	mov	sp, r7
 8003cea:	bc80      	pop	{r7}
 8003cec:	4770      	bx	lr

08003cee <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8003cee:	b480      	push	{r7}
 8003cf0:	b089      	sub	sp, #36	; 0x24
 8003cf2:	af00      	add	r7, sp, #0
 8003cf4:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	330c      	adds	r3, #12
 8003cfc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	e853 3f00 	ldrex	r3, [r3]
 8003d04:	60bb      	str	r3, [r7, #8]
   return(result);
 8003d06:	68bb      	ldr	r3, [r7, #8]
 8003d08:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8003d0c:	61fb      	str	r3, [r7, #28]
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	330c      	adds	r3, #12
 8003d14:	69fa      	ldr	r2, [r7, #28]
 8003d16:	61ba      	str	r2, [r7, #24]
 8003d18:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d1a:	6979      	ldr	r1, [r7, #20]
 8003d1c:	69ba      	ldr	r2, [r7, #24]
 8003d1e:	e841 2300 	strex	r3, r2, [r1]
 8003d22:	613b      	str	r3, [r7, #16]
   return(result);
 8003d24:	693b      	ldr	r3, [r7, #16]
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d1e5      	bne.n	8003cf6 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	2220      	movs	r2, #32
 8003d2e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
}
 8003d32:	bf00      	nop
 8003d34:	3724      	adds	r7, #36	; 0x24
 8003d36:	46bd      	mov	sp, r7
 8003d38:	bc80      	pop	{r7}
 8003d3a:	4770      	bx	lr

08003d3c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003d3c:	b480      	push	{r7}
 8003d3e:	b095      	sub	sp, #84	; 0x54
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	330c      	adds	r3, #12
 8003d4a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d4e:	e853 3f00 	ldrex	r3, [r3]
 8003d52:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003d54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d56:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003d5a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	330c      	adds	r3, #12
 8003d62:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003d64:	643a      	str	r2, [r7, #64]	; 0x40
 8003d66:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d68:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003d6a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003d6c:	e841 2300 	strex	r3, r2, [r1]
 8003d70:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003d72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d1e5      	bne.n	8003d44 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	3314      	adds	r3, #20
 8003d7e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d80:	6a3b      	ldr	r3, [r7, #32]
 8003d82:	e853 3f00 	ldrex	r3, [r3]
 8003d86:	61fb      	str	r3, [r7, #28]
   return(result);
 8003d88:	69fb      	ldr	r3, [r7, #28]
 8003d8a:	f023 0301 	bic.w	r3, r3, #1
 8003d8e:	64bb      	str	r3, [r7, #72]	; 0x48
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	3314      	adds	r3, #20
 8003d96:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003d98:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003d9a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d9c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003d9e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003da0:	e841 2300 	strex	r3, r2, [r1]
 8003da4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003da6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d1e5      	bne.n	8003d78 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003db0:	2b01      	cmp	r3, #1
 8003db2:	d119      	bne.n	8003de8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	330c      	adds	r3, #12
 8003dba:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	e853 3f00 	ldrex	r3, [r3]
 8003dc2:	60bb      	str	r3, [r7, #8]
   return(result);
 8003dc4:	68bb      	ldr	r3, [r7, #8]
 8003dc6:	f023 0310 	bic.w	r3, r3, #16
 8003dca:	647b      	str	r3, [r7, #68]	; 0x44
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	330c      	adds	r3, #12
 8003dd2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003dd4:	61ba      	str	r2, [r7, #24]
 8003dd6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dd8:	6979      	ldr	r1, [r7, #20]
 8003dda:	69ba      	ldr	r2, [r7, #24]
 8003ddc:	e841 2300 	strex	r3, r2, [r1]
 8003de0:	613b      	str	r3, [r7, #16]
   return(result);
 8003de2:	693b      	ldr	r3, [r7, #16]
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d1e5      	bne.n	8003db4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	2220      	movs	r2, #32
 8003dec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	2200      	movs	r2, #0
 8003df4:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003df6:	bf00      	nop
 8003df8:	3754      	adds	r7, #84	; 0x54
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	bc80      	pop	{r7}
 8003dfe:	4770      	bx	lr

08003e00 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003e00:	b580      	push	{r7, lr}
 8003e02:	b084      	sub	sp, #16
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e0c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	2200      	movs	r2, #0
 8003e12:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	2200      	movs	r2, #0
 8003e18:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003e1a:	68f8      	ldr	r0, [r7, #12]
 8003e1c:	f7ff fe1c 	bl	8003a58 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003e20:	bf00      	nop
 8003e22:	3710      	adds	r7, #16
 8003e24:	46bd      	mov	sp, r7
 8003e26:	bd80      	pop	{r7, pc}

08003e28 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003e28:	b480      	push	{r7}
 8003e2a:	b085      	sub	sp, #20
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003e36:	b2db      	uxtb	r3, r3
 8003e38:	2b21      	cmp	r3, #33	; 0x21
 8003e3a:	d13e      	bne.n	8003eba <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	689b      	ldr	r3, [r3, #8]
 8003e40:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e44:	d114      	bne.n	8003e70 <UART_Transmit_IT+0x48>
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	691b      	ldr	r3, [r3, #16]
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d110      	bne.n	8003e70 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	6a1b      	ldr	r3, [r3, #32]
 8003e52:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	881b      	ldrh	r3, [r3, #0]
 8003e58:	461a      	mov	r2, r3
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003e62:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	6a1b      	ldr	r3, [r3, #32]
 8003e68:	1c9a      	adds	r2, r3, #2
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	621a      	str	r2, [r3, #32]
 8003e6e:	e008      	b.n	8003e82 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	6a1b      	ldr	r3, [r3, #32]
 8003e74:	1c59      	adds	r1, r3, #1
 8003e76:	687a      	ldr	r2, [r7, #4]
 8003e78:	6211      	str	r1, [r2, #32]
 8003e7a:	781a      	ldrb	r2, [r3, #0]
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003e86:	b29b      	uxth	r3, r3
 8003e88:	3b01      	subs	r3, #1
 8003e8a:	b29b      	uxth	r3, r3
 8003e8c:	687a      	ldr	r2, [r7, #4]
 8003e8e:	4619      	mov	r1, r3
 8003e90:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d10f      	bne.n	8003eb6 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	68da      	ldr	r2, [r3, #12]
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003ea4:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	68da      	ldr	r2, [r3, #12]
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003eb4:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003eb6:	2300      	movs	r3, #0
 8003eb8:	e000      	b.n	8003ebc <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003eba:	2302      	movs	r3, #2
  }
}
 8003ebc:	4618      	mov	r0, r3
 8003ebe:	3714      	adds	r7, #20
 8003ec0:	46bd      	mov	sp, r7
 8003ec2:	bc80      	pop	{r7}
 8003ec4:	4770      	bx	lr

08003ec6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003ec6:	b580      	push	{r7, lr}
 8003ec8:	b082      	sub	sp, #8
 8003eca:	af00      	add	r7, sp, #0
 8003ecc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	68da      	ldr	r2, [r3, #12]
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003edc:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	2220      	movs	r2, #32
 8003ee2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003ee6:	6878      	ldr	r0, [r7, #4]
 8003ee8:	f7ff fda4 	bl	8003a34 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003eec:	2300      	movs	r3, #0
}
 8003eee:	4618      	mov	r0, r3
 8003ef0:	3708      	adds	r7, #8
 8003ef2:	46bd      	mov	sp, r7
 8003ef4:	bd80      	pop	{r7, pc}

08003ef6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003ef6:	b580      	push	{r7, lr}
 8003ef8:	b08c      	sub	sp, #48	; 0x30
 8003efa:	af00      	add	r7, sp, #0
 8003efc:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003f04:	b2db      	uxtb	r3, r3
 8003f06:	2b22      	cmp	r3, #34	; 0x22
 8003f08:	f040 80ae 	bne.w	8004068 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	689b      	ldr	r3, [r3, #8]
 8003f10:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f14:	d117      	bne.n	8003f46 <UART_Receive_IT+0x50>
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	691b      	ldr	r3, [r3, #16]
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d113      	bne.n	8003f46 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003f1e:	2300      	movs	r3, #0
 8003f20:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f26:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	685b      	ldr	r3, [r3, #4]
 8003f2e:	b29b      	uxth	r3, r3
 8003f30:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f34:	b29a      	uxth	r2, r3
 8003f36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f38:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f3e:	1c9a      	adds	r2, r3, #2
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	629a      	str	r2, [r3, #40]	; 0x28
 8003f44:	e026      	b.n	8003f94 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f4a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8003f4c:	2300      	movs	r3, #0
 8003f4e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	689b      	ldr	r3, [r3, #8]
 8003f54:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f58:	d007      	beq.n	8003f6a <UART_Receive_IT+0x74>
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	689b      	ldr	r3, [r3, #8]
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d10a      	bne.n	8003f78 <UART_Receive_IT+0x82>
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	691b      	ldr	r3, [r3, #16]
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d106      	bne.n	8003f78 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	685b      	ldr	r3, [r3, #4]
 8003f70:	b2da      	uxtb	r2, r3
 8003f72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f74:	701a      	strb	r2, [r3, #0]
 8003f76:	e008      	b.n	8003f8a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	685b      	ldr	r3, [r3, #4]
 8003f7e:	b2db      	uxtb	r3, r3
 8003f80:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003f84:	b2da      	uxtb	r2, r3
 8003f86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f88:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f8e:	1c5a      	adds	r2, r3, #1
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003f98:	b29b      	uxth	r3, r3
 8003f9a:	3b01      	subs	r3, #1
 8003f9c:	b29b      	uxth	r3, r3
 8003f9e:	687a      	ldr	r2, [r7, #4]
 8003fa0:	4619      	mov	r1, r3
 8003fa2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d15d      	bne.n	8004064 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	68da      	ldr	r2, [r3, #12]
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f022 0220 	bic.w	r2, r2, #32
 8003fb6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	68da      	ldr	r2, [r3, #12]
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003fc6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	695a      	ldr	r2, [r3, #20]
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f022 0201 	bic.w	r2, r2, #1
 8003fd6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	2220      	movs	r2, #32
 8003fdc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	2200      	movs	r2, #0
 8003fe4:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fea:	2b01      	cmp	r3, #1
 8003fec:	d135      	bne.n	800405a <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	330c      	adds	r3, #12
 8003ffa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ffc:	697b      	ldr	r3, [r7, #20]
 8003ffe:	e853 3f00 	ldrex	r3, [r3]
 8004002:	613b      	str	r3, [r7, #16]
   return(result);
 8004004:	693b      	ldr	r3, [r7, #16]
 8004006:	f023 0310 	bic.w	r3, r3, #16
 800400a:	627b      	str	r3, [r7, #36]	; 0x24
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	330c      	adds	r3, #12
 8004012:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004014:	623a      	str	r2, [r7, #32]
 8004016:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004018:	69f9      	ldr	r1, [r7, #28]
 800401a:	6a3a      	ldr	r2, [r7, #32]
 800401c:	e841 2300 	strex	r3, r2, [r1]
 8004020:	61bb      	str	r3, [r7, #24]
   return(result);
 8004022:	69bb      	ldr	r3, [r7, #24]
 8004024:	2b00      	cmp	r3, #0
 8004026:	d1e5      	bne.n	8003ff4 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f003 0310 	and.w	r3, r3, #16
 8004032:	2b10      	cmp	r3, #16
 8004034:	d10a      	bne.n	800404c <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004036:	2300      	movs	r3, #0
 8004038:	60fb      	str	r3, [r7, #12]
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	60fb      	str	r3, [r7, #12]
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	685b      	ldr	r3, [r3, #4]
 8004048:	60fb      	str	r3, [r7, #12]
 800404a:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004050:	4619      	mov	r1, r3
 8004052:	6878      	ldr	r0, [r7, #4]
 8004054:	f7ff fd09 	bl	8003a6a <HAL_UARTEx_RxEventCallback>
 8004058:	e002      	b.n	8004060 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800405a:	6878      	ldr	r0, [r7, #4]
 800405c:	f7fc fc1c 	bl	8000898 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004060:	2300      	movs	r3, #0
 8004062:	e002      	b.n	800406a <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004064:	2300      	movs	r3, #0
 8004066:	e000      	b.n	800406a <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004068:	2302      	movs	r3, #2
  }
}
 800406a:	4618      	mov	r0, r3
 800406c:	3730      	adds	r7, #48	; 0x30
 800406e:	46bd      	mov	sp, r7
 8004070:	bd80      	pop	{r7, pc}
	...

08004074 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004074:	b580      	push	{r7, lr}
 8004076:	b084      	sub	sp, #16
 8004078:	af00      	add	r7, sp, #0
 800407a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	691b      	ldr	r3, [r3, #16]
 8004082:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	68da      	ldr	r2, [r3, #12]
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	430a      	orrs	r2, r1
 8004090:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	689a      	ldr	r2, [r3, #8]
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	691b      	ldr	r3, [r3, #16]
 800409a:	431a      	orrs	r2, r3
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	695b      	ldr	r3, [r3, #20]
 80040a0:	4313      	orrs	r3, r2
 80040a2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	68db      	ldr	r3, [r3, #12]
 80040aa:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80040ae:	f023 030c 	bic.w	r3, r3, #12
 80040b2:	687a      	ldr	r2, [r7, #4]
 80040b4:	6812      	ldr	r2, [r2, #0]
 80040b6:	68b9      	ldr	r1, [r7, #8]
 80040b8:	430b      	orrs	r3, r1
 80040ba:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	695b      	ldr	r3, [r3, #20]
 80040c2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	699a      	ldr	r2, [r3, #24]
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	430a      	orrs	r2, r1
 80040d0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	4a2c      	ldr	r2, [pc, #176]	; (8004188 <UART_SetConfig+0x114>)
 80040d8:	4293      	cmp	r3, r2
 80040da:	d103      	bne.n	80040e4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80040dc:	f7ff f876 	bl	80031cc <HAL_RCC_GetPCLK2Freq>
 80040e0:	60f8      	str	r0, [r7, #12]
 80040e2:	e002      	b.n	80040ea <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80040e4:	f7ff f85e 	bl	80031a4 <HAL_RCC_GetPCLK1Freq>
 80040e8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80040ea:	68fa      	ldr	r2, [r7, #12]
 80040ec:	4613      	mov	r3, r2
 80040ee:	009b      	lsls	r3, r3, #2
 80040f0:	4413      	add	r3, r2
 80040f2:	009a      	lsls	r2, r3, #2
 80040f4:	441a      	add	r2, r3
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	685b      	ldr	r3, [r3, #4]
 80040fa:	009b      	lsls	r3, r3, #2
 80040fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004100:	4a22      	ldr	r2, [pc, #136]	; (800418c <UART_SetConfig+0x118>)
 8004102:	fba2 2303 	umull	r2, r3, r2, r3
 8004106:	095b      	lsrs	r3, r3, #5
 8004108:	0119      	lsls	r1, r3, #4
 800410a:	68fa      	ldr	r2, [r7, #12]
 800410c:	4613      	mov	r3, r2
 800410e:	009b      	lsls	r3, r3, #2
 8004110:	4413      	add	r3, r2
 8004112:	009a      	lsls	r2, r3, #2
 8004114:	441a      	add	r2, r3
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	685b      	ldr	r3, [r3, #4]
 800411a:	009b      	lsls	r3, r3, #2
 800411c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004120:	4b1a      	ldr	r3, [pc, #104]	; (800418c <UART_SetConfig+0x118>)
 8004122:	fba3 0302 	umull	r0, r3, r3, r2
 8004126:	095b      	lsrs	r3, r3, #5
 8004128:	2064      	movs	r0, #100	; 0x64
 800412a:	fb00 f303 	mul.w	r3, r0, r3
 800412e:	1ad3      	subs	r3, r2, r3
 8004130:	011b      	lsls	r3, r3, #4
 8004132:	3332      	adds	r3, #50	; 0x32
 8004134:	4a15      	ldr	r2, [pc, #84]	; (800418c <UART_SetConfig+0x118>)
 8004136:	fba2 2303 	umull	r2, r3, r2, r3
 800413a:	095b      	lsrs	r3, r3, #5
 800413c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004140:	4419      	add	r1, r3
 8004142:	68fa      	ldr	r2, [r7, #12]
 8004144:	4613      	mov	r3, r2
 8004146:	009b      	lsls	r3, r3, #2
 8004148:	4413      	add	r3, r2
 800414a:	009a      	lsls	r2, r3, #2
 800414c:	441a      	add	r2, r3
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	685b      	ldr	r3, [r3, #4]
 8004152:	009b      	lsls	r3, r3, #2
 8004154:	fbb2 f2f3 	udiv	r2, r2, r3
 8004158:	4b0c      	ldr	r3, [pc, #48]	; (800418c <UART_SetConfig+0x118>)
 800415a:	fba3 0302 	umull	r0, r3, r3, r2
 800415e:	095b      	lsrs	r3, r3, #5
 8004160:	2064      	movs	r0, #100	; 0x64
 8004162:	fb00 f303 	mul.w	r3, r0, r3
 8004166:	1ad3      	subs	r3, r2, r3
 8004168:	011b      	lsls	r3, r3, #4
 800416a:	3332      	adds	r3, #50	; 0x32
 800416c:	4a07      	ldr	r2, [pc, #28]	; (800418c <UART_SetConfig+0x118>)
 800416e:	fba2 2303 	umull	r2, r3, r2, r3
 8004172:	095b      	lsrs	r3, r3, #5
 8004174:	f003 020f 	and.w	r2, r3, #15
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	440a      	add	r2, r1
 800417e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004180:	bf00      	nop
 8004182:	3710      	adds	r7, #16
 8004184:	46bd      	mov	sp, r7
 8004186:	bd80      	pop	{r7, pc}
 8004188:	40013800 	.word	0x40013800
 800418c:	51eb851f 	.word	0x51eb851f

08004190 <__errno>:
 8004190:	4b01      	ldr	r3, [pc, #4]	; (8004198 <__errno+0x8>)
 8004192:	6818      	ldr	r0, [r3, #0]
 8004194:	4770      	bx	lr
 8004196:	bf00      	nop
 8004198:	20000024 	.word	0x20000024

0800419c <__libc_init_array>:
 800419c:	b570      	push	{r4, r5, r6, lr}
 800419e:	2600      	movs	r6, #0
 80041a0:	4d0c      	ldr	r5, [pc, #48]	; (80041d4 <__libc_init_array+0x38>)
 80041a2:	4c0d      	ldr	r4, [pc, #52]	; (80041d8 <__libc_init_array+0x3c>)
 80041a4:	1b64      	subs	r4, r4, r5
 80041a6:	10a4      	asrs	r4, r4, #2
 80041a8:	42a6      	cmp	r6, r4
 80041aa:	d109      	bne.n	80041c0 <__libc_init_array+0x24>
 80041ac:	f000 fcd8 	bl	8004b60 <_init>
 80041b0:	2600      	movs	r6, #0
 80041b2:	4d0a      	ldr	r5, [pc, #40]	; (80041dc <__libc_init_array+0x40>)
 80041b4:	4c0a      	ldr	r4, [pc, #40]	; (80041e0 <__libc_init_array+0x44>)
 80041b6:	1b64      	subs	r4, r4, r5
 80041b8:	10a4      	asrs	r4, r4, #2
 80041ba:	42a6      	cmp	r6, r4
 80041bc:	d105      	bne.n	80041ca <__libc_init_array+0x2e>
 80041be:	bd70      	pop	{r4, r5, r6, pc}
 80041c0:	f855 3b04 	ldr.w	r3, [r5], #4
 80041c4:	4798      	blx	r3
 80041c6:	3601      	adds	r6, #1
 80041c8:	e7ee      	b.n	80041a8 <__libc_init_array+0xc>
 80041ca:	f855 3b04 	ldr.w	r3, [r5], #4
 80041ce:	4798      	blx	r3
 80041d0:	3601      	adds	r6, #1
 80041d2:	e7f2      	b.n	80041ba <__libc_init_array+0x1e>
 80041d4:	080054c0 	.word	0x080054c0
 80041d8:	080054c0 	.word	0x080054c0
 80041dc:	080054c0 	.word	0x080054c0
 80041e0:	080054c4 	.word	0x080054c4

080041e4 <memcpy>:
 80041e4:	440a      	add	r2, r1
 80041e6:	4291      	cmp	r1, r2
 80041e8:	f100 33ff 	add.w	r3, r0, #4294967295
 80041ec:	d100      	bne.n	80041f0 <memcpy+0xc>
 80041ee:	4770      	bx	lr
 80041f0:	b510      	push	{r4, lr}
 80041f2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80041f6:	4291      	cmp	r1, r2
 80041f8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80041fc:	d1f9      	bne.n	80041f2 <memcpy+0xe>
 80041fe:	bd10      	pop	{r4, pc}

08004200 <memset>:
 8004200:	4603      	mov	r3, r0
 8004202:	4402      	add	r2, r0
 8004204:	4293      	cmp	r3, r2
 8004206:	d100      	bne.n	800420a <memset+0xa>
 8004208:	4770      	bx	lr
 800420a:	f803 1b01 	strb.w	r1, [r3], #1
 800420e:	e7f9      	b.n	8004204 <memset+0x4>

08004210 <sniprintf>:
 8004210:	b40c      	push	{r2, r3}
 8004212:	b530      	push	{r4, r5, lr}
 8004214:	4b17      	ldr	r3, [pc, #92]	; (8004274 <sniprintf+0x64>)
 8004216:	1e0c      	subs	r4, r1, #0
 8004218:	681d      	ldr	r5, [r3, #0]
 800421a:	b09d      	sub	sp, #116	; 0x74
 800421c:	da08      	bge.n	8004230 <sniprintf+0x20>
 800421e:	238b      	movs	r3, #139	; 0x8b
 8004220:	f04f 30ff 	mov.w	r0, #4294967295
 8004224:	602b      	str	r3, [r5, #0]
 8004226:	b01d      	add	sp, #116	; 0x74
 8004228:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800422c:	b002      	add	sp, #8
 800422e:	4770      	bx	lr
 8004230:	f44f 7302 	mov.w	r3, #520	; 0x208
 8004234:	f8ad 3014 	strh.w	r3, [sp, #20]
 8004238:	bf0c      	ite	eq
 800423a:	4623      	moveq	r3, r4
 800423c:	f104 33ff 	addne.w	r3, r4, #4294967295
 8004240:	9304      	str	r3, [sp, #16]
 8004242:	9307      	str	r3, [sp, #28]
 8004244:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004248:	9002      	str	r0, [sp, #8]
 800424a:	9006      	str	r0, [sp, #24]
 800424c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8004250:	4628      	mov	r0, r5
 8004252:	ab21      	add	r3, sp, #132	; 0x84
 8004254:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8004256:	a902      	add	r1, sp, #8
 8004258:	9301      	str	r3, [sp, #4]
 800425a:	f000 f891 	bl	8004380 <_svfiprintf_r>
 800425e:	1c43      	adds	r3, r0, #1
 8004260:	bfbc      	itt	lt
 8004262:	238b      	movlt	r3, #139	; 0x8b
 8004264:	602b      	strlt	r3, [r5, #0]
 8004266:	2c00      	cmp	r4, #0
 8004268:	d0dd      	beq.n	8004226 <sniprintf+0x16>
 800426a:	2200      	movs	r2, #0
 800426c:	9b02      	ldr	r3, [sp, #8]
 800426e:	701a      	strb	r2, [r3, #0]
 8004270:	e7d9      	b.n	8004226 <sniprintf+0x16>
 8004272:	bf00      	nop
 8004274:	20000024 	.word	0x20000024

08004278 <strncpy>:
 8004278:	4603      	mov	r3, r0
 800427a:	b510      	push	{r4, lr}
 800427c:	3901      	subs	r1, #1
 800427e:	b132      	cbz	r2, 800428e <strncpy+0x16>
 8004280:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8004284:	3a01      	subs	r2, #1
 8004286:	f803 4b01 	strb.w	r4, [r3], #1
 800428a:	2c00      	cmp	r4, #0
 800428c:	d1f7      	bne.n	800427e <strncpy+0x6>
 800428e:	2100      	movs	r1, #0
 8004290:	441a      	add	r2, r3
 8004292:	4293      	cmp	r3, r2
 8004294:	d100      	bne.n	8004298 <strncpy+0x20>
 8004296:	bd10      	pop	{r4, pc}
 8004298:	f803 1b01 	strb.w	r1, [r3], #1
 800429c:	e7f9      	b.n	8004292 <strncpy+0x1a>

0800429e <strstr>:
 800429e:	780a      	ldrb	r2, [r1, #0]
 80042a0:	b570      	push	{r4, r5, r6, lr}
 80042a2:	b96a      	cbnz	r2, 80042c0 <strstr+0x22>
 80042a4:	bd70      	pop	{r4, r5, r6, pc}
 80042a6:	429a      	cmp	r2, r3
 80042a8:	d109      	bne.n	80042be <strstr+0x20>
 80042aa:	460c      	mov	r4, r1
 80042ac:	4605      	mov	r5, r0
 80042ae:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d0f6      	beq.n	80042a4 <strstr+0x6>
 80042b6:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 80042ba:	429e      	cmp	r6, r3
 80042bc:	d0f7      	beq.n	80042ae <strstr+0x10>
 80042be:	3001      	adds	r0, #1
 80042c0:	7803      	ldrb	r3, [r0, #0]
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d1ef      	bne.n	80042a6 <strstr+0x8>
 80042c6:	4618      	mov	r0, r3
 80042c8:	e7ec      	b.n	80042a4 <strstr+0x6>

080042ca <__ssputs_r>:
 80042ca:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80042ce:	688e      	ldr	r6, [r1, #8]
 80042d0:	4682      	mov	sl, r0
 80042d2:	429e      	cmp	r6, r3
 80042d4:	460c      	mov	r4, r1
 80042d6:	4690      	mov	r8, r2
 80042d8:	461f      	mov	r7, r3
 80042da:	d838      	bhi.n	800434e <__ssputs_r+0x84>
 80042dc:	898a      	ldrh	r2, [r1, #12]
 80042de:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80042e2:	d032      	beq.n	800434a <__ssputs_r+0x80>
 80042e4:	6825      	ldr	r5, [r4, #0]
 80042e6:	6909      	ldr	r1, [r1, #16]
 80042e8:	3301      	adds	r3, #1
 80042ea:	eba5 0901 	sub.w	r9, r5, r1
 80042ee:	6965      	ldr	r5, [r4, #20]
 80042f0:	444b      	add	r3, r9
 80042f2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80042f6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80042fa:	106d      	asrs	r5, r5, #1
 80042fc:	429d      	cmp	r5, r3
 80042fe:	bf38      	it	cc
 8004300:	461d      	movcc	r5, r3
 8004302:	0553      	lsls	r3, r2, #21
 8004304:	d531      	bpl.n	800436a <__ssputs_r+0xa0>
 8004306:	4629      	mov	r1, r5
 8004308:	f000 fb60 	bl	80049cc <_malloc_r>
 800430c:	4606      	mov	r6, r0
 800430e:	b950      	cbnz	r0, 8004326 <__ssputs_r+0x5c>
 8004310:	230c      	movs	r3, #12
 8004312:	f04f 30ff 	mov.w	r0, #4294967295
 8004316:	f8ca 3000 	str.w	r3, [sl]
 800431a:	89a3      	ldrh	r3, [r4, #12]
 800431c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004320:	81a3      	strh	r3, [r4, #12]
 8004322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004326:	464a      	mov	r2, r9
 8004328:	6921      	ldr	r1, [r4, #16]
 800432a:	f7ff ff5b 	bl	80041e4 <memcpy>
 800432e:	89a3      	ldrh	r3, [r4, #12]
 8004330:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004334:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004338:	81a3      	strh	r3, [r4, #12]
 800433a:	6126      	str	r6, [r4, #16]
 800433c:	444e      	add	r6, r9
 800433e:	6026      	str	r6, [r4, #0]
 8004340:	463e      	mov	r6, r7
 8004342:	6165      	str	r5, [r4, #20]
 8004344:	eba5 0509 	sub.w	r5, r5, r9
 8004348:	60a5      	str	r5, [r4, #8]
 800434a:	42be      	cmp	r6, r7
 800434c:	d900      	bls.n	8004350 <__ssputs_r+0x86>
 800434e:	463e      	mov	r6, r7
 8004350:	4632      	mov	r2, r6
 8004352:	4641      	mov	r1, r8
 8004354:	6820      	ldr	r0, [r4, #0]
 8004356:	f000 fab7 	bl	80048c8 <memmove>
 800435a:	68a3      	ldr	r3, [r4, #8]
 800435c:	2000      	movs	r0, #0
 800435e:	1b9b      	subs	r3, r3, r6
 8004360:	60a3      	str	r3, [r4, #8]
 8004362:	6823      	ldr	r3, [r4, #0]
 8004364:	4433      	add	r3, r6
 8004366:	6023      	str	r3, [r4, #0]
 8004368:	e7db      	b.n	8004322 <__ssputs_r+0x58>
 800436a:	462a      	mov	r2, r5
 800436c:	f000 fba2 	bl	8004ab4 <_realloc_r>
 8004370:	4606      	mov	r6, r0
 8004372:	2800      	cmp	r0, #0
 8004374:	d1e1      	bne.n	800433a <__ssputs_r+0x70>
 8004376:	4650      	mov	r0, sl
 8004378:	6921      	ldr	r1, [r4, #16]
 800437a:	f000 fabf 	bl	80048fc <_free_r>
 800437e:	e7c7      	b.n	8004310 <__ssputs_r+0x46>

08004380 <_svfiprintf_r>:
 8004380:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004384:	4698      	mov	r8, r3
 8004386:	898b      	ldrh	r3, [r1, #12]
 8004388:	4607      	mov	r7, r0
 800438a:	061b      	lsls	r3, r3, #24
 800438c:	460d      	mov	r5, r1
 800438e:	4614      	mov	r4, r2
 8004390:	b09d      	sub	sp, #116	; 0x74
 8004392:	d50e      	bpl.n	80043b2 <_svfiprintf_r+0x32>
 8004394:	690b      	ldr	r3, [r1, #16]
 8004396:	b963      	cbnz	r3, 80043b2 <_svfiprintf_r+0x32>
 8004398:	2140      	movs	r1, #64	; 0x40
 800439a:	f000 fb17 	bl	80049cc <_malloc_r>
 800439e:	6028      	str	r0, [r5, #0]
 80043a0:	6128      	str	r0, [r5, #16]
 80043a2:	b920      	cbnz	r0, 80043ae <_svfiprintf_r+0x2e>
 80043a4:	230c      	movs	r3, #12
 80043a6:	603b      	str	r3, [r7, #0]
 80043a8:	f04f 30ff 	mov.w	r0, #4294967295
 80043ac:	e0d1      	b.n	8004552 <_svfiprintf_r+0x1d2>
 80043ae:	2340      	movs	r3, #64	; 0x40
 80043b0:	616b      	str	r3, [r5, #20]
 80043b2:	2300      	movs	r3, #0
 80043b4:	9309      	str	r3, [sp, #36]	; 0x24
 80043b6:	2320      	movs	r3, #32
 80043b8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80043bc:	2330      	movs	r3, #48	; 0x30
 80043be:	f04f 0901 	mov.w	r9, #1
 80043c2:	f8cd 800c 	str.w	r8, [sp, #12]
 80043c6:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800456c <_svfiprintf_r+0x1ec>
 80043ca:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80043ce:	4623      	mov	r3, r4
 80043d0:	469a      	mov	sl, r3
 80043d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80043d6:	b10a      	cbz	r2, 80043dc <_svfiprintf_r+0x5c>
 80043d8:	2a25      	cmp	r2, #37	; 0x25
 80043da:	d1f9      	bne.n	80043d0 <_svfiprintf_r+0x50>
 80043dc:	ebba 0b04 	subs.w	fp, sl, r4
 80043e0:	d00b      	beq.n	80043fa <_svfiprintf_r+0x7a>
 80043e2:	465b      	mov	r3, fp
 80043e4:	4622      	mov	r2, r4
 80043e6:	4629      	mov	r1, r5
 80043e8:	4638      	mov	r0, r7
 80043ea:	f7ff ff6e 	bl	80042ca <__ssputs_r>
 80043ee:	3001      	adds	r0, #1
 80043f0:	f000 80aa 	beq.w	8004548 <_svfiprintf_r+0x1c8>
 80043f4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80043f6:	445a      	add	r2, fp
 80043f8:	9209      	str	r2, [sp, #36]	; 0x24
 80043fa:	f89a 3000 	ldrb.w	r3, [sl]
 80043fe:	2b00      	cmp	r3, #0
 8004400:	f000 80a2 	beq.w	8004548 <_svfiprintf_r+0x1c8>
 8004404:	2300      	movs	r3, #0
 8004406:	f04f 32ff 	mov.w	r2, #4294967295
 800440a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800440e:	f10a 0a01 	add.w	sl, sl, #1
 8004412:	9304      	str	r3, [sp, #16]
 8004414:	9307      	str	r3, [sp, #28]
 8004416:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800441a:	931a      	str	r3, [sp, #104]	; 0x68
 800441c:	4654      	mov	r4, sl
 800441e:	2205      	movs	r2, #5
 8004420:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004424:	4851      	ldr	r0, [pc, #324]	; (800456c <_svfiprintf_r+0x1ec>)
 8004426:	f000 fa41 	bl	80048ac <memchr>
 800442a:	9a04      	ldr	r2, [sp, #16]
 800442c:	b9d8      	cbnz	r0, 8004466 <_svfiprintf_r+0xe6>
 800442e:	06d0      	lsls	r0, r2, #27
 8004430:	bf44      	itt	mi
 8004432:	2320      	movmi	r3, #32
 8004434:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004438:	0711      	lsls	r1, r2, #28
 800443a:	bf44      	itt	mi
 800443c:	232b      	movmi	r3, #43	; 0x2b
 800443e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004442:	f89a 3000 	ldrb.w	r3, [sl]
 8004446:	2b2a      	cmp	r3, #42	; 0x2a
 8004448:	d015      	beq.n	8004476 <_svfiprintf_r+0xf6>
 800444a:	4654      	mov	r4, sl
 800444c:	2000      	movs	r0, #0
 800444e:	f04f 0c0a 	mov.w	ip, #10
 8004452:	9a07      	ldr	r2, [sp, #28]
 8004454:	4621      	mov	r1, r4
 8004456:	f811 3b01 	ldrb.w	r3, [r1], #1
 800445a:	3b30      	subs	r3, #48	; 0x30
 800445c:	2b09      	cmp	r3, #9
 800445e:	d94e      	bls.n	80044fe <_svfiprintf_r+0x17e>
 8004460:	b1b0      	cbz	r0, 8004490 <_svfiprintf_r+0x110>
 8004462:	9207      	str	r2, [sp, #28]
 8004464:	e014      	b.n	8004490 <_svfiprintf_r+0x110>
 8004466:	eba0 0308 	sub.w	r3, r0, r8
 800446a:	fa09 f303 	lsl.w	r3, r9, r3
 800446e:	4313      	orrs	r3, r2
 8004470:	46a2      	mov	sl, r4
 8004472:	9304      	str	r3, [sp, #16]
 8004474:	e7d2      	b.n	800441c <_svfiprintf_r+0x9c>
 8004476:	9b03      	ldr	r3, [sp, #12]
 8004478:	1d19      	adds	r1, r3, #4
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	9103      	str	r1, [sp, #12]
 800447e:	2b00      	cmp	r3, #0
 8004480:	bfbb      	ittet	lt
 8004482:	425b      	neglt	r3, r3
 8004484:	f042 0202 	orrlt.w	r2, r2, #2
 8004488:	9307      	strge	r3, [sp, #28]
 800448a:	9307      	strlt	r3, [sp, #28]
 800448c:	bfb8      	it	lt
 800448e:	9204      	strlt	r2, [sp, #16]
 8004490:	7823      	ldrb	r3, [r4, #0]
 8004492:	2b2e      	cmp	r3, #46	; 0x2e
 8004494:	d10c      	bne.n	80044b0 <_svfiprintf_r+0x130>
 8004496:	7863      	ldrb	r3, [r4, #1]
 8004498:	2b2a      	cmp	r3, #42	; 0x2a
 800449a:	d135      	bne.n	8004508 <_svfiprintf_r+0x188>
 800449c:	9b03      	ldr	r3, [sp, #12]
 800449e:	3402      	adds	r4, #2
 80044a0:	1d1a      	adds	r2, r3, #4
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	9203      	str	r2, [sp, #12]
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	bfb8      	it	lt
 80044aa:	f04f 33ff 	movlt.w	r3, #4294967295
 80044ae:	9305      	str	r3, [sp, #20]
 80044b0:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8004570 <_svfiprintf_r+0x1f0>
 80044b4:	2203      	movs	r2, #3
 80044b6:	4650      	mov	r0, sl
 80044b8:	7821      	ldrb	r1, [r4, #0]
 80044ba:	f000 f9f7 	bl	80048ac <memchr>
 80044be:	b140      	cbz	r0, 80044d2 <_svfiprintf_r+0x152>
 80044c0:	2340      	movs	r3, #64	; 0x40
 80044c2:	eba0 000a 	sub.w	r0, r0, sl
 80044c6:	fa03 f000 	lsl.w	r0, r3, r0
 80044ca:	9b04      	ldr	r3, [sp, #16]
 80044cc:	3401      	adds	r4, #1
 80044ce:	4303      	orrs	r3, r0
 80044d0:	9304      	str	r3, [sp, #16]
 80044d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80044d6:	2206      	movs	r2, #6
 80044d8:	4826      	ldr	r0, [pc, #152]	; (8004574 <_svfiprintf_r+0x1f4>)
 80044da:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80044de:	f000 f9e5 	bl	80048ac <memchr>
 80044e2:	2800      	cmp	r0, #0
 80044e4:	d038      	beq.n	8004558 <_svfiprintf_r+0x1d8>
 80044e6:	4b24      	ldr	r3, [pc, #144]	; (8004578 <_svfiprintf_r+0x1f8>)
 80044e8:	bb1b      	cbnz	r3, 8004532 <_svfiprintf_r+0x1b2>
 80044ea:	9b03      	ldr	r3, [sp, #12]
 80044ec:	3307      	adds	r3, #7
 80044ee:	f023 0307 	bic.w	r3, r3, #7
 80044f2:	3308      	adds	r3, #8
 80044f4:	9303      	str	r3, [sp, #12]
 80044f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80044f8:	4433      	add	r3, r6
 80044fa:	9309      	str	r3, [sp, #36]	; 0x24
 80044fc:	e767      	b.n	80043ce <_svfiprintf_r+0x4e>
 80044fe:	460c      	mov	r4, r1
 8004500:	2001      	movs	r0, #1
 8004502:	fb0c 3202 	mla	r2, ip, r2, r3
 8004506:	e7a5      	b.n	8004454 <_svfiprintf_r+0xd4>
 8004508:	2300      	movs	r3, #0
 800450a:	f04f 0c0a 	mov.w	ip, #10
 800450e:	4619      	mov	r1, r3
 8004510:	3401      	adds	r4, #1
 8004512:	9305      	str	r3, [sp, #20]
 8004514:	4620      	mov	r0, r4
 8004516:	f810 2b01 	ldrb.w	r2, [r0], #1
 800451a:	3a30      	subs	r2, #48	; 0x30
 800451c:	2a09      	cmp	r2, #9
 800451e:	d903      	bls.n	8004528 <_svfiprintf_r+0x1a8>
 8004520:	2b00      	cmp	r3, #0
 8004522:	d0c5      	beq.n	80044b0 <_svfiprintf_r+0x130>
 8004524:	9105      	str	r1, [sp, #20]
 8004526:	e7c3      	b.n	80044b0 <_svfiprintf_r+0x130>
 8004528:	4604      	mov	r4, r0
 800452a:	2301      	movs	r3, #1
 800452c:	fb0c 2101 	mla	r1, ip, r1, r2
 8004530:	e7f0      	b.n	8004514 <_svfiprintf_r+0x194>
 8004532:	ab03      	add	r3, sp, #12
 8004534:	9300      	str	r3, [sp, #0]
 8004536:	462a      	mov	r2, r5
 8004538:	4638      	mov	r0, r7
 800453a:	4b10      	ldr	r3, [pc, #64]	; (800457c <_svfiprintf_r+0x1fc>)
 800453c:	a904      	add	r1, sp, #16
 800453e:	f3af 8000 	nop.w
 8004542:	1c42      	adds	r2, r0, #1
 8004544:	4606      	mov	r6, r0
 8004546:	d1d6      	bne.n	80044f6 <_svfiprintf_r+0x176>
 8004548:	89ab      	ldrh	r3, [r5, #12]
 800454a:	065b      	lsls	r3, r3, #25
 800454c:	f53f af2c 	bmi.w	80043a8 <_svfiprintf_r+0x28>
 8004550:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004552:	b01d      	add	sp, #116	; 0x74
 8004554:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004558:	ab03      	add	r3, sp, #12
 800455a:	9300      	str	r3, [sp, #0]
 800455c:	462a      	mov	r2, r5
 800455e:	4638      	mov	r0, r7
 8004560:	4b06      	ldr	r3, [pc, #24]	; (800457c <_svfiprintf_r+0x1fc>)
 8004562:	a904      	add	r1, sp, #16
 8004564:	f000 f87c 	bl	8004660 <_printf_i>
 8004568:	e7eb      	b.n	8004542 <_svfiprintf_r+0x1c2>
 800456a:	bf00      	nop
 800456c:	0800548a 	.word	0x0800548a
 8004570:	08005490 	.word	0x08005490
 8004574:	08005494 	.word	0x08005494
 8004578:	00000000 	.word	0x00000000
 800457c:	080042cb 	.word	0x080042cb

08004580 <_printf_common>:
 8004580:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004584:	4616      	mov	r6, r2
 8004586:	4699      	mov	r9, r3
 8004588:	688a      	ldr	r2, [r1, #8]
 800458a:	690b      	ldr	r3, [r1, #16]
 800458c:	4607      	mov	r7, r0
 800458e:	4293      	cmp	r3, r2
 8004590:	bfb8      	it	lt
 8004592:	4613      	movlt	r3, r2
 8004594:	6033      	str	r3, [r6, #0]
 8004596:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800459a:	460c      	mov	r4, r1
 800459c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80045a0:	b10a      	cbz	r2, 80045a6 <_printf_common+0x26>
 80045a2:	3301      	adds	r3, #1
 80045a4:	6033      	str	r3, [r6, #0]
 80045a6:	6823      	ldr	r3, [r4, #0]
 80045a8:	0699      	lsls	r1, r3, #26
 80045aa:	bf42      	ittt	mi
 80045ac:	6833      	ldrmi	r3, [r6, #0]
 80045ae:	3302      	addmi	r3, #2
 80045b0:	6033      	strmi	r3, [r6, #0]
 80045b2:	6825      	ldr	r5, [r4, #0]
 80045b4:	f015 0506 	ands.w	r5, r5, #6
 80045b8:	d106      	bne.n	80045c8 <_printf_common+0x48>
 80045ba:	f104 0a19 	add.w	sl, r4, #25
 80045be:	68e3      	ldr	r3, [r4, #12]
 80045c0:	6832      	ldr	r2, [r6, #0]
 80045c2:	1a9b      	subs	r3, r3, r2
 80045c4:	42ab      	cmp	r3, r5
 80045c6:	dc28      	bgt.n	800461a <_printf_common+0x9a>
 80045c8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80045cc:	1e13      	subs	r3, r2, #0
 80045ce:	6822      	ldr	r2, [r4, #0]
 80045d0:	bf18      	it	ne
 80045d2:	2301      	movne	r3, #1
 80045d4:	0692      	lsls	r2, r2, #26
 80045d6:	d42d      	bmi.n	8004634 <_printf_common+0xb4>
 80045d8:	4649      	mov	r1, r9
 80045da:	4638      	mov	r0, r7
 80045dc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80045e0:	47c0      	blx	r8
 80045e2:	3001      	adds	r0, #1
 80045e4:	d020      	beq.n	8004628 <_printf_common+0xa8>
 80045e6:	6823      	ldr	r3, [r4, #0]
 80045e8:	68e5      	ldr	r5, [r4, #12]
 80045ea:	f003 0306 	and.w	r3, r3, #6
 80045ee:	2b04      	cmp	r3, #4
 80045f0:	bf18      	it	ne
 80045f2:	2500      	movne	r5, #0
 80045f4:	6832      	ldr	r2, [r6, #0]
 80045f6:	f04f 0600 	mov.w	r6, #0
 80045fa:	68a3      	ldr	r3, [r4, #8]
 80045fc:	bf08      	it	eq
 80045fe:	1aad      	subeq	r5, r5, r2
 8004600:	6922      	ldr	r2, [r4, #16]
 8004602:	bf08      	it	eq
 8004604:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004608:	4293      	cmp	r3, r2
 800460a:	bfc4      	itt	gt
 800460c:	1a9b      	subgt	r3, r3, r2
 800460e:	18ed      	addgt	r5, r5, r3
 8004610:	341a      	adds	r4, #26
 8004612:	42b5      	cmp	r5, r6
 8004614:	d11a      	bne.n	800464c <_printf_common+0xcc>
 8004616:	2000      	movs	r0, #0
 8004618:	e008      	b.n	800462c <_printf_common+0xac>
 800461a:	2301      	movs	r3, #1
 800461c:	4652      	mov	r2, sl
 800461e:	4649      	mov	r1, r9
 8004620:	4638      	mov	r0, r7
 8004622:	47c0      	blx	r8
 8004624:	3001      	adds	r0, #1
 8004626:	d103      	bne.n	8004630 <_printf_common+0xb0>
 8004628:	f04f 30ff 	mov.w	r0, #4294967295
 800462c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004630:	3501      	adds	r5, #1
 8004632:	e7c4      	b.n	80045be <_printf_common+0x3e>
 8004634:	2030      	movs	r0, #48	; 0x30
 8004636:	18e1      	adds	r1, r4, r3
 8004638:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800463c:	1c5a      	adds	r2, r3, #1
 800463e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004642:	4422      	add	r2, r4
 8004644:	3302      	adds	r3, #2
 8004646:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800464a:	e7c5      	b.n	80045d8 <_printf_common+0x58>
 800464c:	2301      	movs	r3, #1
 800464e:	4622      	mov	r2, r4
 8004650:	4649      	mov	r1, r9
 8004652:	4638      	mov	r0, r7
 8004654:	47c0      	blx	r8
 8004656:	3001      	adds	r0, #1
 8004658:	d0e6      	beq.n	8004628 <_printf_common+0xa8>
 800465a:	3601      	adds	r6, #1
 800465c:	e7d9      	b.n	8004612 <_printf_common+0x92>
	...

08004660 <_printf_i>:
 8004660:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004664:	7e0f      	ldrb	r7, [r1, #24]
 8004666:	4691      	mov	r9, r2
 8004668:	2f78      	cmp	r7, #120	; 0x78
 800466a:	4680      	mov	r8, r0
 800466c:	460c      	mov	r4, r1
 800466e:	469a      	mov	sl, r3
 8004670:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004672:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004676:	d807      	bhi.n	8004688 <_printf_i+0x28>
 8004678:	2f62      	cmp	r7, #98	; 0x62
 800467a:	d80a      	bhi.n	8004692 <_printf_i+0x32>
 800467c:	2f00      	cmp	r7, #0
 800467e:	f000 80d9 	beq.w	8004834 <_printf_i+0x1d4>
 8004682:	2f58      	cmp	r7, #88	; 0x58
 8004684:	f000 80a4 	beq.w	80047d0 <_printf_i+0x170>
 8004688:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800468c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004690:	e03a      	b.n	8004708 <_printf_i+0xa8>
 8004692:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004696:	2b15      	cmp	r3, #21
 8004698:	d8f6      	bhi.n	8004688 <_printf_i+0x28>
 800469a:	a101      	add	r1, pc, #4	; (adr r1, 80046a0 <_printf_i+0x40>)
 800469c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80046a0:	080046f9 	.word	0x080046f9
 80046a4:	0800470d 	.word	0x0800470d
 80046a8:	08004689 	.word	0x08004689
 80046ac:	08004689 	.word	0x08004689
 80046b0:	08004689 	.word	0x08004689
 80046b4:	08004689 	.word	0x08004689
 80046b8:	0800470d 	.word	0x0800470d
 80046bc:	08004689 	.word	0x08004689
 80046c0:	08004689 	.word	0x08004689
 80046c4:	08004689 	.word	0x08004689
 80046c8:	08004689 	.word	0x08004689
 80046cc:	0800481b 	.word	0x0800481b
 80046d0:	0800473d 	.word	0x0800473d
 80046d4:	080047fd 	.word	0x080047fd
 80046d8:	08004689 	.word	0x08004689
 80046dc:	08004689 	.word	0x08004689
 80046e0:	0800483d 	.word	0x0800483d
 80046e4:	08004689 	.word	0x08004689
 80046e8:	0800473d 	.word	0x0800473d
 80046ec:	08004689 	.word	0x08004689
 80046f0:	08004689 	.word	0x08004689
 80046f4:	08004805 	.word	0x08004805
 80046f8:	682b      	ldr	r3, [r5, #0]
 80046fa:	1d1a      	adds	r2, r3, #4
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	602a      	str	r2, [r5, #0]
 8004700:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004704:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004708:	2301      	movs	r3, #1
 800470a:	e0a4      	b.n	8004856 <_printf_i+0x1f6>
 800470c:	6820      	ldr	r0, [r4, #0]
 800470e:	6829      	ldr	r1, [r5, #0]
 8004710:	0606      	lsls	r6, r0, #24
 8004712:	f101 0304 	add.w	r3, r1, #4
 8004716:	d50a      	bpl.n	800472e <_printf_i+0xce>
 8004718:	680e      	ldr	r6, [r1, #0]
 800471a:	602b      	str	r3, [r5, #0]
 800471c:	2e00      	cmp	r6, #0
 800471e:	da03      	bge.n	8004728 <_printf_i+0xc8>
 8004720:	232d      	movs	r3, #45	; 0x2d
 8004722:	4276      	negs	r6, r6
 8004724:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004728:	230a      	movs	r3, #10
 800472a:	485e      	ldr	r0, [pc, #376]	; (80048a4 <_printf_i+0x244>)
 800472c:	e019      	b.n	8004762 <_printf_i+0x102>
 800472e:	680e      	ldr	r6, [r1, #0]
 8004730:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004734:	602b      	str	r3, [r5, #0]
 8004736:	bf18      	it	ne
 8004738:	b236      	sxthne	r6, r6
 800473a:	e7ef      	b.n	800471c <_printf_i+0xbc>
 800473c:	682b      	ldr	r3, [r5, #0]
 800473e:	6820      	ldr	r0, [r4, #0]
 8004740:	1d19      	adds	r1, r3, #4
 8004742:	6029      	str	r1, [r5, #0]
 8004744:	0601      	lsls	r1, r0, #24
 8004746:	d501      	bpl.n	800474c <_printf_i+0xec>
 8004748:	681e      	ldr	r6, [r3, #0]
 800474a:	e002      	b.n	8004752 <_printf_i+0xf2>
 800474c:	0646      	lsls	r6, r0, #25
 800474e:	d5fb      	bpl.n	8004748 <_printf_i+0xe8>
 8004750:	881e      	ldrh	r6, [r3, #0]
 8004752:	2f6f      	cmp	r7, #111	; 0x6f
 8004754:	bf0c      	ite	eq
 8004756:	2308      	moveq	r3, #8
 8004758:	230a      	movne	r3, #10
 800475a:	4852      	ldr	r0, [pc, #328]	; (80048a4 <_printf_i+0x244>)
 800475c:	2100      	movs	r1, #0
 800475e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004762:	6865      	ldr	r5, [r4, #4]
 8004764:	2d00      	cmp	r5, #0
 8004766:	bfa8      	it	ge
 8004768:	6821      	ldrge	r1, [r4, #0]
 800476a:	60a5      	str	r5, [r4, #8]
 800476c:	bfa4      	itt	ge
 800476e:	f021 0104 	bicge.w	r1, r1, #4
 8004772:	6021      	strge	r1, [r4, #0]
 8004774:	b90e      	cbnz	r6, 800477a <_printf_i+0x11a>
 8004776:	2d00      	cmp	r5, #0
 8004778:	d04d      	beq.n	8004816 <_printf_i+0x1b6>
 800477a:	4615      	mov	r5, r2
 800477c:	fbb6 f1f3 	udiv	r1, r6, r3
 8004780:	fb03 6711 	mls	r7, r3, r1, r6
 8004784:	5dc7      	ldrb	r7, [r0, r7]
 8004786:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800478a:	4637      	mov	r7, r6
 800478c:	42bb      	cmp	r3, r7
 800478e:	460e      	mov	r6, r1
 8004790:	d9f4      	bls.n	800477c <_printf_i+0x11c>
 8004792:	2b08      	cmp	r3, #8
 8004794:	d10b      	bne.n	80047ae <_printf_i+0x14e>
 8004796:	6823      	ldr	r3, [r4, #0]
 8004798:	07de      	lsls	r6, r3, #31
 800479a:	d508      	bpl.n	80047ae <_printf_i+0x14e>
 800479c:	6923      	ldr	r3, [r4, #16]
 800479e:	6861      	ldr	r1, [r4, #4]
 80047a0:	4299      	cmp	r1, r3
 80047a2:	bfde      	ittt	le
 80047a4:	2330      	movle	r3, #48	; 0x30
 80047a6:	f805 3c01 	strble.w	r3, [r5, #-1]
 80047aa:	f105 35ff 	addle.w	r5, r5, #4294967295
 80047ae:	1b52      	subs	r2, r2, r5
 80047b0:	6122      	str	r2, [r4, #16]
 80047b2:	464b      	mov	r3, r9
 80047b4:	4621      	mov	r1, r4
 80047b6:	4640      	mov	r0, r8
 80047b8:	f8cd a000 	str.w	sl, [sp]
 80047bc:	aa03      	add	r2, sp, #12
 80047be:	f7ff fedf 	bl	8004580 <_printf_common>
 80047c2:	3001      	adds	r0, #1
 80047c4:	d14c      	bne.n	8004860 <_printf_i+0x200>
 80047c6:	f04f 30ff 	mov.w	r0, #4294967295
 80047ca:	b004      	add	sp, #16
 80047cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80047d0:	4834      	ldr	r0, [pc, #208]	; (80048a4 <_printf_i+0x244>)
 80047d2:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80047d6:	6829      	ldr	r1, [r5, #0]
 80047d8:	6823      	ldr	r3, [r4, #0]
 80047da:	f851 6b04 	ldr.w	r6, [r1], #4
 80047de:	6029      	str	r1, [r5, #0]
 80047e0:	061d      	lsls	r5, r3, #24
 80047e2:	d514      	bpl.n	800480e <_printf_i+0x1ae>
 80047e4:	07df      	lsls	r7, r3, #31
 80047e6:	bf44      	itt	mi
 80047e8:	f043 0320 	orrmi.w	r3, r3, #32
 80047ec:	6023      	strmi	r3, [r4, #0]
 80047ee:	b91e      	cbnz	r6, 80047f8 <_printf_i+0x198>
 80047f0:	6823      	ldr	r3, [r4, #0]
 80047f2:	f023 0320 	bic.w	r3, r3, #32
 80047f6:	6023      	str	r3, [r4, #0]
 80047f8:	2310      	movs	r3, #16
 80047fa:	e7af      	b.n	800475c <_printf_i+0xfc>
 80047fc:	6823      	ldr	r3, [r4, #0]
 80047fe:	f043 0320 	orr.w	r3, r3, #32
 8004802:	6023      	str	r3, [r4, #0]
 8004804:	2378      	movs	r3, #120	; 0x78
 8004806:	4828      	ldr	r0, [pc, #160]	; (80048a8 <_printf_i+0x248>)
 8004808:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800480c:	e7e3      	b.n	80047d6 <_printf_i+0x176>
 800480e:	0659      	lsls	r1, r3, #25
 8004810:	bf48      	it	mi
 8004812:	b2b6      	uxthmi	r6, r6
 8004814:	e7e6      	b.n	80047e4 <_printf_i+0x184>
 8004816:	4615      	mov	r5, r2
 8004818:	e7bb      	b.n	8004792 <_printf_i+0x132>
 800481a:	682b      	ldr	r3, [r5, #0]
 800481c:	6826      	ldr	r6, [r4, #0]
 800481e:	1d18      	adds	r0, r3, #4
 8004820:	6961      	ldr	r1, [r4, #20]
 8004822:	6028      	str	r0, [r5, #0]
 8004824:	0635      	lsls	r5, r6, #24
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	d501      	bpl.n	800482e <_printf_i+0x1ce>
 800482a:	6019      	str	r1, [r3, #0]
 800482c:	e002      	b.n	8004834 <_printf_i+0x1d4>
 800482e:	0670      	lsls	r0, r6, #25
 8004830:	d5fb      	bpl.n	800482a <_printf_i+0x1ca>
 8004832:	8019      	strh	r1, [r3, #0]
 8004834:	2300      	movs	r3, #0
 8004836:	4615      	mov	r5, r2
 8004838:	6123      	str	r3, [r4, #16]
 800483a:	e7ba      	b.n	80047b2 <_printf_i+0x152>
 800483c:	682b      	ldr	r3, [r5, #0]
 800483e:	2100      	movs	r1, #0
 8004840:	1d1a      	adds	r2, r3, #4
 8004842:	602a      	str	r2, [r5, #0]
 8004844:	681d      	ldr	r5, [r3, #0]
 8004846:	6862      	ldr	r2, [r4, #4]
 8004848:	4628      	mov	r0, r5
 800484a:	f000 f82f 	bl	80048ac <memchr>
 800484e:	b108      	cbz	r0, 8004854 <_printf_i+0x1f4>
 8004850:	1b40      	subs	r0, r0, r5
 8004852:	6060      	str	r0, [r4, #4]
 8004854:	6863      	ldr	r3, [r4, #4]
 8004856:	6123      	str	r3, [r4, #16]
 8004858:	2300      	movs	r3, #0
 800485a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800485e:	e7a8      	b.n	80047b2 <_printf_i+0x152>
 8004860:	462a      	mov	r2, r5
 8004862:	4649      	mov	r1, r9
 8004864:	4640      	mov	r0, r8
 8004866:	6923      	ldr	r3, [r4, #16]
 8004868:	47d0      	blx	sl
 800486a:	3001      	adds	r0, #1
 800486c:	d0ab      	beq.n	80047c6 <_printf_i+0x166>
 800486e:	6823      	ldr	r3, [r4, #0]
 8004870:	079b      	lsls	r3, r3, #30
 8004872:	d413      	bmi.n	800489c <_printf_i+0x23c>
 8004874:	68e0      	ldr	r0, [r4, #12]
 8004876:	9b03      	ldr	r3, [sp, #12]
 8004878:	4298      	cmp	r0, r3
 800487a:	bfb8      	it	lt
 800487c:	4618      	movlt	r0, r3
 800487e:	e7a4      	b.n	80047ca <_printf_i+0x16a>
 8004880:	2301      	movs	r3, #1
 8004882:	4632      	mov	r2, r6
 8004884:	4649      	mov	r1, r9
 8004886:	4640      	mov	r0, r8
 8004888:	47d0      	blx	sl
 800488a:	3001      	adds	r0, #1
 800488c:	d09b      	beq.n	80047c6 <_printf_i+0x166>
 800488e:	3501      	adds	r5, #1
 8004890:	68e3      	ldr	r3, [r4, #12]
 8004892:	9903      	ldr	r1, [sp, #12]
 8004894:	1a5b      	subs	r3, r3, r1
 8004896:	42ab      	cmp	r3, r5
 8004898:	dcf2      	bgt.n	8004880 <_printf_i+0x220>
 800489a:	e7eb      	b.n	8004874 <_printf_i+0x214>
 800489c:	2500      	movs	r5, #0
 800489e:	f104 0619 	add.w	r6, r4, #25
 80048a2:	e7f5      	b.n	8004890 <_printf_i+0x230>
 80048a4:	0800549b 	.word	0x0800549b
 80048a8:	080054ac 	.word	0x080054ac

080048ac <memchr>:
 80048ac:	4603      	mov	r3, r0
 80048ae:	b510      	push	{r4, lr}
 80048b0:	b2c9      	uxtb	r1, r1
 80048b2:	4402      	add	r2, r0
 80048b4:	4293      	cmp	r3, r2
 80048b6:	4618      	mov	r0, r3
 80048b8:	d101      	bne.n	80048be <memchr+0x12>
 80048ba:	2000      	movs	r0, #0
 80048bc:	e003      	b.n	80048c6 <memchr+0x1a>
 80048be:	7804      	ldrb	r4, [r0, #0]
 80048c0:	3301      	adds	r3, #1
 80048c2:	428c      	cmp	r4, r1
 80048c4:	d1f6      	bne.n	80048b4 <memchr+0x8>
 80048c6:	bd10      	pop	{r4, pc}

080048c8 <memmove>:
 80048c8:	4288      	cmp	r0, r1
 80048ca:	b510      	push	{r4, lr}
 80048cc:	eb01 0402 	add.w	r4, r1, r2
 80048d0:	d902      	bls.n	80048d8 <memmove+0x10>
 80048d2:	4284      	cmp	r4, r0
 80048d4:	4623      	mov	r3, r4
 80048d6:	d807      	bhi.n	80048e8 <memmove+0x20>
 80048d8:	1e43      	subs	r3, r0, #1
 80048da:	42a1      	cmp	r1, r4
 80048dc:	d008      	beq.n	80048f0 <memmove+0x28>
 80048de:	f811 2b01 	ldrb.w	r2, [r1], #1
 80048e2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80048e6:	e7f8      	b.n	80048da <memmove+0x12>
 80048e8:	4601      	mov	r1, r0
 80048ea:	4402      	add	r2, r0
 80048ec:	428a      	cmp	r2, r1
 80048ee:	d100      	bne.n	80048f2 <memmove+0x2a>
 80048f0:	bd10      	pop	{r4, pc}
 80048f2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80048f6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80048fa:	e7f7      	b.n	80048ec <memmove+0x24>

080048fc <_free_r>:
 80048fc:	b538      	push	{r3, r4, r5, lr}
 80048fe:	4605      	mov	r5, r0
 8004900:	2900      	cmp	r1, #0
 8004902:	d040      	beq.n	8004986 <_free_r+0x8a>
 8004904:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004908:	1f0c      	subs	r4, r1, #4
 800490a:	2b00      	cmp	r3, #0
 800490c:	bfb8      	it	lt
 800490e:	18e4      	addlt	r4, r4, r3
 8004910:	f000 f910 	bl	8004b34 <__malloc_lock>
 8004914:	4a1c      	ldr	r2, [pc, #112]	; (8004988 <_free_r+0x8c>)
 8004916:	6813      	ldr	r3, [r2, #0]
 8004918:	b933      	cbnz	r3, 8004928 <_free_r+0x2c>
 800491a:	6063      	str	r3, [r4, #4]
 800491c:	6014      	str	r4, [r2, #0]
 800491e:	4628      	mov	r0, r5
 8004920:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004924:	f000 b90c 	b.w	8004b40 <__malloc_unlock>
 8004928:	42a3      	cmp	r3, r4
 800492a:	d908      	bls.n	800493e <_free_r+0x42>
 800492c:	6820      	ldr	r0, [r4, #0]
 800492e:	1821      	adds	r1, r4, r0
 8004930:	428b      	cmp	r3, r1
 8004932:	bf01      	itttt	eq
 8004934:	6819      	ldreq	r1, [r3, #0]
 8004936:	685b      	ldreq	r3, [r3, #4]
 8004938:	1809      	addeq	r1, r1, r0
 800493a:	6021      	streq	r1, [r4, #0]
 800493c:	e7ed      	b.n	800491a <_free_r+0x1e>
 800493e:	461a      	mov	r2, r3
 8004940:	685b      	ldr	r3, [r3, #4]
 8004942:	b10b      	cbz	r3, 8004948 <_free_r+0x4c>
 8004944:	42a3      	cmp	r3, r4
 8004946:	d9fa      	bls.n	800493e <_free_r+0x42>
 8004948:	6811      	ldr	r1, [r2, #0]
 800494a:	1850      	adds	r0, r2, r1
 800494c:	42a0      	cmp	r0, r4
 800494e:	d10b      	bne.n	8004968 <_free_r+0x6c>
 8004950:	6820      	ldr	r0, [r4, #0]
 8004952:	4401      	add	r1, r0
 8004954:	1850      	adds	r0, r2, r1
 8004956:	4283      	cmp	r3, r0
 8004958:	6011      	str	r1, [r2, #0]
 800495a:	d1e0      	bne.n	800491e <_free_r+0x22>
 800495c:	6818      	ldr	r0, [r3, #0]
 800495e:	685b      	ldr	r3, [r3, #4]
 8004960:	4401      	add	r1, r0
 8004962:	6011      	str	r1, [r2, #0]
 8004964:	6053      	str	r3, [r2, #4]
 8004966:	e7da      	b.n	800491e <_free_r+0x22>
 8004968:	d902      	bls.n	8004970 <_free_r+0x74>
 800496a:	230c      	movs	r3, #12
 800496c:	602b      	str	r3, [r5, #0]
 800496e:	e7d6      	b.n	800491e <_free_r+0x22>
 8004970:	6820      	ldr	r0, [r4, #0]
 8004972:	1821      	adds	r1, r4, r0
 8004974:	428b      	cmp	r3, r1
 8004976:	bf01      	itttt	eq
 8004978:	6819      	ldreq	r1, [r3, #0]
 800497a:	685b      	ldreq	r3, [r3, #4]
 800497c:	1809      	addeq	r1, r1, r0
 800497e:	6021      	streq	r1, [r4, #0]
 8004980:	6063      	str	r3, [r4, #4]
 8004982:	6054      	str	r4, [r2, #4]
 8004984:	e7cb      	b.n	800491e <_free_r+0x22>
 8004986:	bd38      	pop	{r3, r4, r5, pc}
 8004988:	20000bb4 	.word	0x20000bb4

0800498c <sbrk_aligned>:
 800498c:	b570      	push	{r4, r5, r6, lr}
 800498e:	4e0e      	ldr	r6, [pc, #56]	; (80049c8 <sbrk_aligned+0x3c>)
 8004990:	460c      	mov	r4, r1
 8004992:	6831      	ldr	r1, [r6, #0]
 8004994:	4605      	mov	r5, r0
 8004996:	b911      	cbnz	r1, 800499e <sbrk_aligned+0x12>
 8004998:	f000 f8bc 	bl	8004b14 <_sbrk_r>
 800499c:	6030      	str	r0, [r6, #0]
 800499e:	4621      	mov	r1, r4
 80049a0:	4628      	mov	r0, r5
 80049a2:	f000 f8b7 	bl	8004b14 <_sbrk_r>
 80049a6:	1c43      	adds	r3, r0, #1
 80049a8:	d00a      	beq.n	80049c0 <sbrk_aligned+0x34>
 80049aa:	1cc4      	adds	r4, r0, #3
 80049ac:	f024 0403 	bic.w	r4, r4, #3
 80049b0:	42a0      	cmp	r0, r4
 80049b2:	d007      	beq.n	80049c4 <sbrk_aligned+0x38>
 80049b4:	1a21      	subs	r1, r4, r0
 80049b6:	4628      	mov	r0, r5
 80049b8:	f000 f8ac 	bl	8004b14 <_sbrk_r>
 80049bc:	3001      	adds	r0, #1
 80049be:	d101      	bne.n	80049c4 <sbrk_aligned+0x38>
 80049c0:	f04f 34ff 	mov.w	r4, #4294967295
 80049c4:	4620      	mov	r0, r4
 80049c6:	bd70      	pop	{r4, r5, r6, pc}
 80049c8:	20000bb8 	.word	0x20000bb8

080049cc <_malloc_r>:
 80049cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80049d0:	1ccd      	adds	r5, r1, #3
 80049d2:	f025 0503 	bic.w	r5, r5, #3
 80049d6:	3508      	adds	r5, #8
 80049d8:	2d0c      	cmp	r5, #12
 80049da:	bf38      	it	cc
 80049dc:	250c      	movcc	r5, #12
 80049de:	2d00      	cmp	r5, #0
 80049e0:	4607      	mov	r7, r0
 80049e2:	db01      	blt.n	80049e8 <_malloc_r+0x1c>
 80049e4:	42a9      	cmp	r1, r5
 80049e6:	d905      	bls.n	80049f4 <_malloc_r+0x28>
 80049e8:	230c      	movs	r3, #12
 80049ea:	2600      	movs	r6, #0
 80049ec:	603b      	str	r3, [r7, #0]
 80049ee:	4630      	mov	r0, r6
 80049f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80049f4:	4e2e      	ldr	r6, [pc, #184]	; (8004ab0 <_malloc_r+0xe4>)
 80049f6:	f000 f89d 	bl	8004b34 <__malloc_lock>
 80049fa:	6833      	ldr	r3, [r6, #0]
 80049fc:	461c      	mov	r4, r3
 80049fe:	bb34      	cbnz	r4, 8004a4e <_malloc_r+0x82>
 8004a00:	4629      	mov	r1, r5
 8004a02:	4638      	mov	r0, r7
 8004a04:	f7ff ffc2 	bl	800498c <sbrk_aligned>
 8004a08:	1c43      	adds	r3, r0, #1
 8004a0a:	4604      	mov	r4, r0
 8004a0c:	d14d      	bne.n	8004aaa <_malloc_r+0xde>
 8004a0e:	6834      	ldr	r4, [r6, #0]
 8004a10:	4626      	mov	r6, r4
 8004a12:	2e00      	cmp	r6, #0
 8004a14:	d140      	bne.n	8004a98 <_malloc_r+0xcc>
 8004a16:	6823      	ldr	r3, [r4, #0]
 8004a18:	4631      	mov	r1, r6
 8004a1a:	4638      	mov	r0, r7
 8004a1c:	eb04 0803 	add.w	r8, r4, r3
 8004a20:	f000 f878 	bl	8004b14 <_sbrk_r>
 8004a24:	4580      	cmp	r8, r0
 8004a26:	d13a      	bne.n	8004a9e <_malloc_r+0xd2>
 8004a28:	6821      	ldr	r1, [r4, #0]
 8004a2a:	3503      	adds	r5, #3
 8004a2c:	1a6d      	subs	r5, r5, r1
 8004a2e:	f025 0503 	bic.w	r5, r5, #3
 8004a32:	3508      	adds	r5, #8
 8004a34:	2d0c      	cmp	r5, #12
 8004a36:	bf38      	it	cc
 8004a38:	250c      	movcc	r5, #12
 8004a3a:	4638      	mov	r0, r7
 8004a3c:	4629      	mov	r1, r5
 8004a3e:	f7ff ffa5 	bl	800498c <sbrk_aligned>
 8004a42:	3001      	adds	r0, #1
 8004a44:	d02b      	beq.n	8004a9e <_malloc_r+0xd2>
 8004a46:	6823      	ldr	r3, [r4, #0]
 8004a48:	442b      	add	r3, r5
 8004a4a:	6023      	str	r3, [r4, #0]
 8004a4c:	e00e      	b.n	8004a6c <_malloc_r+0xa0>
 8004a4e:	6822      	ldr	r2, [r4, #0]
 8004a50:	1b52      	subs	r2, r2, r5
 8004a52:	d41e      	bmi.n	8004a92 <_malloc_r+0xc6>
 8004a54:	2a0b      	cmp	r2, #11
 8004a56:	d916      	bls.n	8004a86 <_malloc_r+0xba>
 8004a58:	1961      	adds	r1, r4, r5
 8004a5a:	42a3      	cmp	r3, r4
 8004a5c:	6025      	str	r5, [r4, #0]
 8004a5e:	bf18      	it	ne
 8004a60:	6059      	strne	r1, [r3, #4]
 8004a62:	6863      	ldr	r3, [r4, #4]
 8004a64:	bf08      	it	eq
 8004a66:	6031      	streq	r1, [r6, #0]
 8004a68:	5162      	str	r2, [r4, r5]
 8004a6a:	604b      	str	r3, [r1, #4]
 8004a6c:	4638      	mov	r0, r7
 8004a6e:	f104 060b 	add.w	r6, r4, #11
 8004a72:	f000 f865 	bl	8004b40 <__malloc_unlock>
 8004a76:	f026 0607 	bic.w	r6, r6, #7
 8004a7a:	1d23      	adds	r3, r4, #4
 8004a7c:	1af2      	subs	r2, r6, r3
 8004a7e:	d0b6      	beq.n	80049ee <_malloc_r+0x22>
 8004a80:	1b9b      	subs	r3, r3, r6
 8004a82:	50a3      	str	r3, [r4, r2]
 8004a84:	e7b3      	b.n	80049ee <_malloc_r+0x22>
 8004a86:	6862      	ldr	r2, [r4, #4]
 8004a88:	42a3      	cmp	r3, r4
 8004a8a:	bf0c      	ite	eq
 8004a8c:	6032      	streq	r2, [r6, #0]
 8004a8e:	605a      	strne	r2, [r3, #4]
 8004a90:	e7ec      	b.n	8004a6c <_malloc_r+0xa0>
 8004a92:	4623      	mov	r3, r4
 8004a94:	6864      	ldr	r4, [r4, #4]
 8004a96:	e7b2      	b.n	80049fe <_malloc_r+0x32>
 8004a98:	4634      	mov	r4, r6
 8004a9a:	6876      	ldr	r6, [r6, #4]
 8004a9c:	e7b9      	b.n	8004a12 <_malloc_r+0x46>
 8004a9e:	230c      	movs	r3, #12
 8004aa0:	4638      	mov	r0, r7
 8004aa2:	603b      	str	r3, [r7, #0]
 8004aa4:	f000 f84c 	bl	8004b40 <__malloc_unlock>
 8004aa8:	e7a1      	b.n	80049ee <_malloc_r+0x22>
 8004aaa:	6025      	str	r5, [r4, #0]
 8004aac:	e7de      	b.n	8004a6c <_malloc_r+0xa0>
 8004aae:	bf00      	nop
 8004ab0:	20000bb4 	.word	0x20000bb4

08004ab4 <_realloc_r>:
 8004ab4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004ab8:	4680      	mov	r8, r0
 8004aba:	4614      	mov	r4, r2
 8004abc:	460e      	mov	r6, r1
 8004abe:	b921      	cbnz	r1, 8004aca <_realloc_r+0x16>
 8004ac0:	4611      	mov	r1, r2
 8004ac2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004ac6:	f7ff bf81 	b.w	80049cc <_malloc_r>
 8004aca:	b92a      	cbnz	r2, 8004ad8 <_realloc_r+0x24>
 8004acc:	f7ff ff16 	bl	80048fc <_free_r>
 8004ad0:	4625      	mov	r5, r4
 8004ad2:	4628      	mov	r0, r5
 8004ad4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004ad8:	f000 f838 	bl	8004b4c <_malloc_usable_size_r>
 8004adc:	4284      	cmp	r4, r0
 8004ade:	4607      	mov	r7, r0
 8004ae0:	d802      	bhi.n	8004ae8 <_realloc_r+0x34>
 8004ae2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004ae6:	d812      	bhi.n	8004b0e <_realloc_r+0x5a>
 8004ae8:	4621      	mov	r1, r4
 8004aea:	4640      	mov	r0, r8
 8004aec:	f7ff ff6e 	bl	80049cc <_malloc_r>
 8004af0:	4605      	mov	r5, r0
 8004af2:	2800      	cmp	r0, #0
 8004af4:	d0ed      	beq.n	8004ad2 <_realloc_r+0x1e>
 8004af6:	42bc      	cmp	r4, r7
 8004af8:	4622      	mov	r2, r4
 8004afa:	4631      	mov	r1, r6
 8004afc:	bf28      	it	cs
 8004afe:	463a      	movcs	r2, r7
 8004b00:	f7ff fb70 	bl	80041e4 <memcpy>
 8004b04:	4631      	mov	r1, r6
 8004b06:	4640      	mov	r0, r8
 8004b08:	f7ff fef8 	bl	80048fc <_free_r>
 8004b0c:	e7e1      	b.n	8004ad2 <_realloc_r+0x1e>
 8004b0e:	4635      	mov	r5, r6
 8004b10:	e7df      	b.n	8004ad2 <_realloc_r+0x1e>
	...

08004b14 <_sbrk_r>:
 8004b14:	b538      	push	{r3, r4, r5, lr}
 8004b16:	2300      	movs	r3, #0
 8004b18:	4d05      	ldr	r5, [pc, #20]	; (8004b30 <_sbrk_r+0x1c>)
 8004b1a:	4604      	mov	r4, r0
 8004b1c:	4608      	mov	r0, r1
 8004b1e:	602b      	str	r3, [r5, #0]
 8004b20:	f7fc ffec 	bl	8001afc <_sbrk>
 8004b24:	1c43      	adds	r3, r0, #1
 8004b26:	d102      	bne.n	8004b2e <_sbrk_r+0x1a>
 8004b28:	682b      	ldr	r3, [r5, #0]
 8004b2a:	b103      	cbz	r3, 8004b2e <_sbrk_r+0x1a>
 8004b2c:	6023      	str	r3, [r4, #0]
 8004b2e:	bd38      	pop	{r3, r4, r5, pc}
 8004b30:	20000bbc 	.word	0x20000bbc

08004b34 <__malloc_lock>:
 8004b34:	4801      	ldr	r0, [pc, #4]	; (8004b3c <__malloc_lock+0x8>)
 8004b36:	f000 b811 	b.w	8004b5c <__retarget_lock_acquire_recursive>
 8004b3a:	bf00      	nop
 8004b3c:	20000bc0 	.word	0x20000bc0

08004b40 <__malloc_unlock>:
 8004b40:	4801      	ldr	r0, [pc, #4]	; (8004b48 <__malloc_unlock+0x8>)
 8004b42:	f000 b80c 	b.w	8004b5e <__retarget_lock_release_recursive>
 8004b46:	bf00      	nop
 8004b48:	20000bc0 	.word	0x20000bc0

08004b4c <_malloc_usable_size_r>:
 8004b4c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004b50:	1f18      	subs	r0, r3, #4
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	bfbc      	itt	lt
 8004b56:	580b      	ldrlt	r3, [r1, r0]
 8004b58:	18c0      	addlt	r0, r0, r3
 8004b5a:	4770      	bx	lr

08004b5c <__retarget_lock_acquire_recursive>:
 8004b5c:	4770      	bx	lr

08004b5e <__retarget_lock_release_recursive>:
 8004b5e:	4770      	bx	lr

08004b60 <_init>:
 8004b60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b62:	bf00      	nop
 8004b64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b66:	bc08      	pop	{r3}
 8004b68:	469e      	mov	lr, r3
 8004b6a:	4770      	bx	lr

08004b6c <_fini>:
 8004b6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b6e:	bf00      	nop
 8004b70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b72:	bc08      	pop	{r3}
 8004b74:	469e      	mov	lr, r3
 8004b76:	4770      	bx	lr
