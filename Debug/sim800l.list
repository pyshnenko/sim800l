
sim800l.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003b00  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000087c  08003c0c  08003c0c  00004c0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004488  08004488  0000601c  2**0
                  CONTENTS
  4 .ARM          00000000  08004488  08004488  0000601c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004488  08004488  0000601c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004488  08004488  00005488  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800448c  0800448c  0000548c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  08004490  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000a18  2000001c  080044ac  0000601c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000a34  080044ac  00006a34  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000601c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000afc4  00000000  00000000  00006045  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e76  00000000  00000000  00011009  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a88  00000000  00000000  00012e80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000083b  00000000  00000000  00013908  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001729c  00000000  00000000  00014143  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e2ba  00000000  00000000  0002b3df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000826c0  00000000  00000000  00039699  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000bbd59  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002b10  00000000  00000000  000bbd9c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000055  00000000  00000000  000be8ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000001c 	.word	0x2000001c
 8000128:	00000000 	.word	0x00000000
 800012c:	08003bf4 	.word	0x08003bf4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000020 	.word	0x20000020
 8000148:	08003bf4 	.word	0x08003bf4

0800014c <s800LSend>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void s800LSend(uint8_t *text, int nums) {
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
 8000154:	6039      	str	r1, [r7, #0]
	HAL_UART_Transmit(&huart2, text, nums, 0xFFFF);
 8000156:	683b      	ldr	r3, [r7, #0]
 8000158:	b29a      	uxth	r2, r3
 800015a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800015e:	6879      	ldr	r1, [r7, #4]
 8000160:	480e      	ldr	r0, [pc, #56]	@ (800019c <s800LSend+0x50>)
 8000162:	f002 fd91 	bl	8002c88 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, "\r\n", 2, 0xFFFF);
 8000166:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800016a:	2202      	movs	r2, #2
 800016c:	490c      	ldr	r1, [pc, #48]	@ (80001a0 <s800LSend+0x54>)
 800016e:	480b      	ldr	r0, [pc, #44]	@ (800019c <s800LSend+0x50>)
 8000170:	f002 fd8a 	bl	8002c88 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, text, nums, 0xFFFF);
 8000174:	683b      	ldr	r3, [r7, #0]
 8000176:	b29a      	uxth	r2, r3
 8000178:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800017c:	6879      	ldr	r1, [r7, #4]
 800017e:	4809      	ldr	r0, [pc, #36]	@ (80001a4 <s800LSend+0x58>)
 8000180:	f002 fd82 	bl	8002c88 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, "\r\n", 2, 0xFFFF);
 8000184:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000188:	2202      	movs	r2, #2
 800018a:	4905      	ldr	r1, [pc, #20]	@ (80001a0 <s800LSend+0x54>)
 800018c:	4805      	ldr	r0, [pc, #20]	@ (80001a4 <s800LSend+0x58>)
 800018e:	f002 fd7b 	bl	8002c88 <HAL_UART_Transmit>
	return;
 8000192:	bf00      	nop
}
 8000194:	3708      	adds	r7, #8
 8000196:	46bd      	mov	sp, r7
 8000198:	bd80      	pop	{r7, pc}
 800019a:	bf00      	nop
 800019c:	200000d4 	.word	0x200000d4
 80001a0:	08003c0c 	.word	0x08003c0c
 80001a4:	2000008c 	.word	0x2000008c

080001a8 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80001a8:	b580      	push	{r7, lr}
 80001aa:	b082      	sub	sp, #8
 80001ac:	af00      	add	r7, sp, #0
 80001ae:	6078      	str	r0, [r7, #4]
	if (huart == &huart2) {
 80001b0:	687b      	ldr	r3, [r7, #4]
 80001b2:	4a35      	ldr	r2, [pc, #212]	@ (8000288 <HAL_UART_RxCpltCallback+0xe0>)
 80001b4:	4293      	cmp	r3, r2
 80001b6:	d137      	bne.n	8000228 <HAL_UART_RxCpltCallback+0x80>
		//HAL_UART_Transmit_DMA(&huart1,str,1);
		if (str[0]!='\n') {
 80001b8:	4b34      	ldr	r3, [pc, #208]	@ (800028c <HAL_UART_RxCpltCallback+0xe4>)
 80001ba:	781b      	ldrb	r3, [r3, #0]
 80001bc:	2b0a      	cmp	r3, #10
 80001be:	d00b      	beq.n	80001d8 <HAL_UART_RxCpltCallback+0x30>
			modemString2[modemStringLength2] = str[0];
 80001c0:	4b33      	ldr	r3, [pc, #204]	@ (8000290 <HAL_UART_RxCpltCallback+0xe8>)
 80001c2:	681b      	ldr	r3, [r3, #0]
 80001c4:	4a31      	ldr	r2, [pc, #196]	@ (800028c <HAL_UART_RxCpltCallback+0xe4>)
 80001c6:	7811      	ldrb	r1, [r2, #0]
 80001c8:	4a32      	ldr	r2, [pc, #200]	@ (8000294 <HAL_UART_RxCpltCallback+0xec>)
 80001ca:	54d1      	strb	r1, [r2, r3]
			modemStringLength2++;
 80001cc:	4b30      	ldr	r3, [pc, #192]	@ (8000290 <HAL_UART_RxCpltCallback+0xe8>)
 80001ce:	681b      	ldr	r3, [r3, #0]
 80001d0:	3301      	adds	r3, #1
 80001d2:	4a2f      	ldr	r2, [pc, #188]	@ (8000290 <HAL_UART_RxCpltCallback+0xe8>)
 80001d4:	6013      	str	r3, [r2, #0]
 80001d6:	e021      	b.n	800021c <HAL_UART_RxCpltCallback+0x74>
		}
		else {
			modemString2[modemStringLength2] = str[0];
 80001d8:	4b2d      	ldr	r3, [pc, #180]	@ (8000290 <HAL_UART_RxCpltCallback+0xe8>)
 80001da:	681b      	ldr	r3, [r3, #0]
 80001dc:	4a2b      	ldr	r2, [pc, #172]	@ (800028c <HAL_UART_RxCpltCallback+0xe4>)
 80001de:	7811      	ldrb	r1, [r2, #0]
 80001e0:	4a2c      	ldr	r2, [pc, #176]	@ (8000294 <HAL_UART_RxCpltCallback+0xec>)
 80001e2:	54d1      	strb	r1, [r2, r3]
			modemStringLength2++;
 80001e4:	4b2a      	ldr	r3, [pc, #168]	@ (8000290 <HAL_UART_RxCpltCallback+0xe8>)
 80001e6:	681b      	ldr	r3, [r3, #0]
 80001e8:	3301      	adds	r3, #1
 80001ea:	4a29      	ldr	r2, [pc, #164]	@ (8000290 <HAL_UART_RxCpltCallback+0xe8>)
 80001ec:	6013      	str	r3, [r2, #0]
			HAL_UART_Transmit_DMA(&huart1, modemString2, modemStringLength2);
 80001ee:	4b28      	ldr	r3, [pc, #160]	@ (8000290 <HAL_UART_RxCpltCallback+0xe8>)
 80001f0:	681b      	ldr	r3, [r3, #0]
 80001f2:	b29b      	uxth	r3, r3
 80001f4:	461a      	mov	r2, r3
 80001f6:	4927      	ldr	r1, [pc, #156]	@ (8000294 <HAL_UART_RxCpltCallback+0xec>)
 80001f8:	4827      	ldr	r0, [pc, #156]	@ (8000298 <HAL_UART_RxCpltCallback+0xf0>)
 80001fa:	f002 fdf5 	bl	8002de8 <HAL_UART_Transmit_DMA>
			strncpy(oldModem2, oldModem, 250);
 80001fe:	22fa      	movs	r2, #250	@ 0xfa
 8000200:	4926      	ldr	r1, [pc, #152]	@ (800029c <HAL_UART_RxCpltCallback+0xf4>)
 8000202:	4827      	ldr	r0, [pc, #156]	@ (80002a0 <HAL_UART_RxCpltCallback+0xf8>)
 8000204:	f003 fca8 	bl	8003b58 <strncpy>
			strncpy(oldModem, modemString2,modemStringLength1);
 8000208:	4b26      	ldr	r3, [pc, #152]	@ (80002a4 <HAL_UART_RxCpltCallback+0xfc>)
 800020a:	681b      	ldr	r3, [r3, #0]
 800020c:	461a      	mov	r2, r3
 800020e:	4921      	ldr	r1, [pc, #132]	@ (8000294 <HAL_UART_RxCpltCallback+0xec>)
 8000210:	4822      	ldr	r0, [pc, #136]	@ (800029c <HAL_UART_RxCpltCallback+0xf4>)
 8000212:	f003 fca1 	bl	8003b58 <strncpy>
			modemStringLength2 = 0;
 8000216:	4b1e      	ldr	r3, [pc, #120]	@ (8000290 <HAL_UART_RxCpltCallback+0xe8>)
 8000218:	2200      	movs	r2, #0
 800021a:	601a      	str	r2, [r3, #0]
		}
		HAL_UART_Receive_IT(&huart2,str,1);
 800021c:	2201      	movs	r2, #1
 800021e:	491b      	ldr	r1, [pc, #108]	@ (800028c <HAL_UART_RxCpltCallback+0xe4>)
 8000220:	4819      	ldr	r0, [pc, #100]	@ (8000288 <HAL_UART_RxCpltCallback+0xe0>)
 8000222:	f002 fdbc 	bl	8002d9e <HAL_UART_Receive_IT>
			modemStringLength1 = 0;

		}
		HAL_UART_Receive_IT(&huart1,str2,1);
	}
}
 8000226:	e02a      	b.n	800027e <HAL_UART_RxCpltCallback+0xd6>
		if (str2[0]!='\n') {
 8000228:	4b1f      	ldr	r3, [pc, #124]	@ (80002a8 <HAL_UART_RxCpltCallback+0x100>)
 800022a:	781b      	ldrb	r3, [r3, #0]
 800022c:	2b0a      	cmp	r3, #10
 800022e:	d00b      	beq.n	8000248 <HAL_UART_RxCpltCallback+0xa0>
			modemString1[modemStringLength1] = str2[0];
 8000230:	4b1c      	ldr	r3, [pc, #112]	@ (80002a4 <HAL_UART_RxCpltCallback+0xfc>)
 8000232:	681b      	ldr	r3, [r3, #0]
 8000234:	4a1c      	ldr	r2, [pc, #112]	@ (80002a8 <HAL_UART_RxCpltCallback+0x100>)
 8000236:	7811      	ldrb	r1, [r2, #0]
 8000238:	4a1c      	ldr	r2, [pc, #112]	@ (80002ac <HAL_UART_RxCpltCallback+0x104>)
 800023a:	54d1      	strb	r1, [r2, r3]
			modemStringLength1++;
 800023c:	4b19      	ldr	r3, [pc, #100]	@ (80002a4 <HAL_UART_RxCpltCallback+0xfc>)
 800023e:	681b      	ldr	r3, [r3, #0]
 8000240:	3301      	adds	r3, #1
 8000242:	4a18      	ldr	r2, [pc, #96]	@ (80002a4 <HAL_UART_RxCpltCallback+0xfc>)
 8000244:	6013      	str	r3, [r2, #0]
 8000246:	e015      	b.n	8000274 <HAL_UART_RxCpltCallback+0xcc>
			modemString1[modemStringLength1] = str2[0];
 8000248:	4b16      	ldr	r3, [pc, #88]	@ (80002a4 <HAL_UART_RxCpltCallback+0xfc>)
 800024a:	681b      	ldr	r3, [r3, #0]
 800024c:	4a16      	ldr	r2, [pc, #88]	@ (80002a8 <HAL_UART_RxCpltCallback+0x100>)
 800024e:	7811      	ldrb	r1, [r2, #0]
 8000250:	4a16      	ldr	r2, [pc, #88]	@ (80002ac <HAL_UART_RxCpltCallback+0x104>)
 8000252:	54d1      	strb	r1, [r2, r3]
			modemStringLength1++;
 8000254:	4b13      	ldr	r3, [pc, #76]	@ (80002a4 <HAL_UART_RxCpltCallback+0xfc>)
 8000256:	681b      	ldr	r3, [r3, #0]
 8000258:	3301      	adds	r3, #1
 800025a:	4a12      	ldr	r2, [pc, #72]	@ (80002a4 <HAL_UART_RxCpltCallback+0xfc>)
 800025c:	6013      	str	r3, [r2, #0]
			HAL_UART_Transmit_DMA(&huart2, modemString1, modemStringLength1);
 800025e:	4b11      	ldr	r3, [pc, #68]	@ (80002a4 <HAL_UART_RxCpltCallback+0xfc>)
 8000260:	681b      	ldr	r3, [r3, #0]
 8000262:	b29b      	uxth	r3, r3
 8000264:	461a      	mov	r2, r3
 8000266:	4911      	ldr	r1, [pc, #68]	@ (80002ac <HAL_UART_RxCpltCallback+0x104>)
 8000268:	4807      	ldr	r0, [pc, #28]	@ (8000288 <HAL_UART_RxCpltCallback+0xe0>)
 800026a:	f002 fdbd 	bl	8002de8 <HAL_UART_Transmit_DMA>
			modemStringLength1 = 0;
 800026e:	4b0d      	ldr	r3, [pc, #52]	@ (80002a4 <HAL_UART_RxCpltCallback+0xfc>)
 8000270:	2200      	movs	r2, #0
 8000272:	601a      	str	r2, [r3, #0]
		HAL_UART_Receive_IT(&huart1,str2,1);
 8000274:	2201      	movs	r2, #1
 8000276:	490c      	ldr	r1, [pc, #48]	@ (80002a8 <HAL_UART_RxCpltCallback+0x100>)
 8000278:	4807      	ldr	r0, [pc, #28]	@ (8000298 <HAL_UART_RxCpltCallback+0xf0>)
 800027a:	f002 fd90 	bl	8002d9e <HAL_UART_Receive_IT>
}
 800027e:	bf00      	nop
 8000280:	3708      	adds	r7, #8
 8000282:	46bd      	mov	sp, r7
 8000284:	bd80      	pop	{r7, pc}
 8000286:	bf00      	nop
 8000288:	200000d4 	.word	0x200000d4
 800028c:	20000008 	.word	0x20000008
 8000290:	20000328 	.word	0x20000328
 8000294:	2000022c 	.word	0x2000022c
 8000298:	2000008c 	.word	0x2000008c
 800029c:	2000042c 	.word	0x2000042c
 80002a0:	20000528 	.word	0x20000528
 80002a4:	20000428 	.word	0x20000428
 80002a8:	2000000c 	.word	0x2000000c
 80002ac:	2000032c 	.word	0x2000032c

080002b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80002b4:	b091      	sub	sp, #68	@ 0x44
 80002b6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002b8:	f001 f95e 	bl	8001578 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002bc:	f000 f994 	bl	80005e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002c0:	f000 fa90 	bl	80007e4 <MX_GPIO_Init>
  MX_DMA_Init();
 80002c4:	f000 fa58 	bl	8000778 <MX_DMA_Init>
  MX_I2C1_Init();
 80002c8:	f000 f9d4 	bl	8000674 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 80002cc:	f000 fa00 	bl	80006d0 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80002d0:	f000 fa28 	bl	8000724 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  SSD1306_Init();
 80002d4:	f000 fae4 	bl	80008a0 <SSD1306_Init>
  SSD1306_GotoXY(0, 44); //Устанавливаем курсор в позицию 0;44. Сначала по горизонтали, потом вертикали.
 80002d8:	212c      	movs	r1, #44	@ 0x2c
 80002da:	2000      	movs	r0, #0
 80002dc:	f000 fc60 	bl	8000ba0 <SSD1306_GotoXY>
  SSD1306_Puts("Hello, habrahabr!!", &Font_7x10, SSD1306_COLOR_WHITE); //пишем надпись в выставленной позиции шрифтом "Font_7x10" белым цветом.
 80002e0:	2201      	movs	r2, #1
 80002e2:	49ac      	ldr	r1, [pc, #688]	@ (8000594 <main+0x2e4>)
 80002e4:	48ac      	ldr	r0, [pc, #688]	@ (8000598 <main+0x2e8>)
 80002e6:	f000 fcef 	bl	8000cc8 <SSD1306_Puts>
  SSD1306_DrawCircle(10, 33, 7, SSD1306_COLOR_WHITE);
 80002ea:	2301      	movs	r3, #1
 80002ec:	2207      	movs	r2, #7
 80002ee:	2121      	movs	r1, #33	@ 0x21
 80002f0:	200a      	movs	r0, #10
 80002f2:	f000 fd0e 	bl	8000d12 <SSD1306_DrawCircle>
  SSD1306_UpdateScreen();
 80002f6:	f000 fba9 	bl	8000a4c <SSD1306_UpdateScreen>

  HAL_UART_Transmit(&huart1,(uint8_t*)"start\r\n",7,0xFFFF);
 80002fa:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80002fe:	2207      	movs	r2, #7
 8000300:	49a6      	ldr	r1, [pc, #664]	@ (800059c <main+0x2ec>)
 8000302:	48a7      	ldr	r0, [pc, #668]	@ (80005a0 <main+0x2f0>)
 8000304:	f002 fcc0 	bl	8002c88 <HAL_UART_Transmit>
  HAL_UART_Transmit(&huart2,(uint8_t*)"AT+CSQ\r\n",8,0xFFFF);
 8000308:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800030c:	2208      	movs	r2, #8
 800030e:	49a5      	ldr	r1, [pc, #660]	@ (80005a4 <main+0x2f4>)
 8000310:	48a5      	ldr	r0, [pc, #660]	@ (80005a8 <main+0x2f8>)
 8000312:	f002 fcb9 	bl	8002c88 <HAL_UART_Transmit>

  HAL_Delay(500);
 8000316:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800031a:	f001 f98f 	bl	800163c <HAL_Delay>
  s800LSend((uint8_t*)"AT+SAPBR=1,1", 12);
 800031e:	210c      	movs	r1, #12
 8000320:	48a2      	ldr	r0, [pc, #648]	@ (80005ac <main+0x2fc>)
 8000322:	f7ff ff13 	bl	800014c <s800LSend>
  HAL_Delay(1000);
 8000326:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800032a:	f001 f987 	bl	800163c <HAL_Delay>
  s800LSend((uint8_t*)"AT+HTTPINIT", 11);
 800032e:	210b      	movs	r1, #11
 8000330:	489f      	ldr	r0, [pc, #636]	@ (80005b0 <main+0x300>)
 8000332:	f7ff ff0b 	bl	800014c <s800LSend>
  HAL_Delay(1000);
 8000336:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800033a:	f001 f97f 	bl	800163c <HAL_Delay>
  s800LSend((uint8_t*)"AT+HTTPPARA=\"CID\",1",19);
 800033e:	2113      	movs	r1, #19
 8000340:	489c      	ldr	r0, [pc, #624]	@ (80005b4 <main+0x304>)
 8000342:	f7ff ff03 	bl	800014c <s800LSend>
  HAL_Delay(1000);
 8000346:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800034a:	f001 f977 	bl	800163c <HAL_Delay>
  s800LSend((uint8_t*)"AT+HTTPPARA=\"URL\",\"http://simple.spamigor.ru/api/test?a=send%20from%20stm32\"", 76);
 800034e:	214c      	movs	r1, #76	@ 0x4c
 8000350:	4899      	ldr	r0, [pc, #612]	@ (80005b8 <main+0x308>)
 8000352:	f7ff fefb 	bl	800014c <s800LSend>
  HAL_Delay(1000);
 8000356:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800035a:	f001 f96f 	bl	800163c <HAL_Delay>
  s800LSend((uint8_t*)"AT+HTTPACTION=0",15);
 800035e:	210f      	movs	r1, #15
 8000360:	4896      	ldr	r0, [pc, #600]	@ (80005bc <main+0x30c>)
 8000362:	f7ff fef3 	bl	800014c <s800LSend>
  HAL_Delay(3000);
 8000366:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 800036a:	f001 f967 	bl	800163c <HAL_Delay>
  s800LSend((uint8_t*)"AT+HTTPREAD",11);
 800036e:	210b      	movs	r1, #11
 8000370:	4893      	ldr	r0, [pc, #588]	@ (80005c0 <main+0x310>)
 8000372:	f7ff feeb 	bl	800014c <s800LSend>
  HAL_Delay(1000);
 8000376:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800037a:	f001 f95f 	bl	800163c <HAL_Delay>
  s800LSend((uint8_t*)"AT+HTTPTERM",11);
 800037e:	210b      	movs	r1, #11
 8000380:	4890      	ldr	r0, [pc, #576]	@ (80005c4 <main+0x314>)
 8000382:	f7ff fee3 	bl	800014c <s800LSend>
  HAL_Delay(1000);
 8000386:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800038a:	f001 f957 	bl	800163c <HAL_Delay>
  s800LSend((uint8_t*)"AT+SAPBR=0,1",12);
 800038e:	210c      	movs	r1, #12
 8000390:	488d      	ldr	r0, [pc, #564]	@ (80005c8 <main+0x318>)
 8000392:	f7ff fedb 	bl	800014c <s800LSend>



  HAL_UART_Receive_IT(&huart2,str,1);
 8000396:	2201      	movs	r2, #1
 8000398:	498c      	ldr	r1, [pc, #560]	@ (80005cc <main+0x31c>)
 800039a:	4883      	ldr	r0, [pc, #524]	@ (80005a8 <main+0x2f8>)
 800039c:	f002 fcff 	bl	8002d9e <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(&huart1,str2,1);
 80003a0:	2201      	movs	r2, #1
 80003a2:	498b      	ldr	r1, [pc, #556]	@ (80005d0 <main+0x320>)
 80003a4:	487e      	ldr	r0, [pc, #504]	@ (80005a0 <main+0x2f0>)
 80003a6:	f002 fcfa 	bl	8002d9e <HAL_UART_Receive_IT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if (strstr(modemString2, "\r\n")) {
 80003aa:	498a      	ldr	r1, [pc, #552]	@ (80005d4 <main+0x324>)
 80003ac:	488a      	ldr	r0, [pc, #552]	@ (80005d8 <main+0x328>)
 80003ae:	f003 fbe6 	bl	8003b7e <strstr>
 80003b2:	4603      	mov	r3, r0
 80003b4:	2b00      	cmp	r3, #0
 80003b6:	f000 80e3 	beq.w	8000580 <main+0x2d0>
 80003ba:	466b      	mov	r3, sp
 80003bc:	461e      	mov	r6, r3
		int i = 0, j=0, k=0;
 80003be:	2300      	movs	r3, #0
 80003c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80003c2:	2300      	movs	r3, #0
 80003c4:	63bb      	str	r3, [r7, #56]	@ 0x38
 80003c6:	2300      	movs	r3, #0
 80003c8:	637b      	str	r3, [r7, #52]	@ 0x34
		for (i; i<250; i++) if (modemString2[i]=='\n') break;
 80003ca:	e008      	b.n	80003de <main+0x12e>
 80003cc:	4a82      	ldr	r2, [pc, #520]	@ (80005d8 <main+0x328>)
 80003ce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80003d0:	4413      	add	r3, r2
 80003d2:	781b      	ldrb	r3, [r3, #0]
 80003d4:	2b0a      	cmp	r3, #10
 80003d6:	d006      	beq.n	80003e6 <main+0x136>
 80003d8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80003da:	3301      	adds	r3, #1
 80003dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80003de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80003e0:	2bf9      	cmp	r3, #249	@ 0xf9
 80003e2:	ddf3      	ble.n	80003cc <main+0x11c>
 80003e4:	e00a      	b.n	80003fc <main+0x14c>
 80003e6:	bf00      	nop
		for (j; j<250; j++) if (oldModem[j]=='\n') break;
 80003e8:	e008      	b.n	80003fc <main+0x14c>
 80003ea:	4a7c      	ldr	r2, [pc, #496]	@ (80005dc <main+0x32c>)
 80003ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80003ee:	4413      	add	r3, r2
 80003f0:	781b      	ldrb	r3, [r3, #0]
 80003f2:	2b0a      	cmp	r3, #10
 80003f4:	d006      	beq.n	8000404 <main+0x154>
 80003f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80003f8:	3301      	adds	r3, #1
 80003fa:	63bb      	str	r3, [r7, #56]	@ 0x38
 80003fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80003fe:	2bf9      	cmp	r3, #249	@ 0xf9
 8000400:	ddf3      	ble.n	80003ea <main+0x13a>
 8000402:	e00a      	b.n	800041a <main+0x16a>
 8000404:	bf00      	nop
		for (k; k<250; k++) if (oldModem2[k]=='\n') break;
 8000406:	e008      	b.n	800041a <main+0x16a>
 8000408:	4a75      	ldr	r2, [pc, #468]	@ (80005e0 <main+0x330>)
 800040a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800040c:	4413      	add	r3, r2
 800040e:	781b      	ldrb	r3, [r3, #0]
 8000410:	2b0a      	cmp	r3, #10
 8000412:	d006      	beq.n	8000422 <main+0x172>
 8000414:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000416:	3301      	adds	r3, #1
 8000418:	637b      	str	r3, [r7, #52]	@ 0x34
 800041a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800041c:	2bf9      	cmp	r3, #249	@ 0xf9
 800041e:	ddf3      	ble.n	8000408 <main+0x158>
 8000420:	e000      	b.n	8000424 <main+0x174>
 8000422:	bf00      	nop
		uint8_t subBuf[i], subBuf2[j], subBuf3[k];
 8000424:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8000426:	1e4b      	subs	r3, r1, #1
 8000428:	633b      	str	r3, [r7, #48]	@ 0x30
 800042a:	460a      	mov	r2, r1
 800042c:	2300      	movs	r3, #0
 800042e:	4614      	mov	r4, r2
 8000430:	461d      	mov	r5, r3
 8000432:	f04f 0200 	mov.w	r2, #0
 8000436:	f04f 0300 	mov.w	r3, #0
 800043a:	00eb      	lsls	r3, r5, #3
 800043c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000440:	00e2      	lsls	r2, r4, #3
 8000442:	460a      	mov	r2, r1
 8000444:	2300      	movs	r3, #0
 8000446:	4690      	mov	r8, r2
 8000448:	4699      	mov	r9, r3
 800044a:	f04f 0200 	mov.w	r2, #0
 800044e:	f04f 0300 	mov.w	r3, #0
 8000452:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000456:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800045a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800045e:	460b      	mov	r3, r1
 8000460:	3307      	adds	r3, #7
 8000462:	08db      	lsrs	r3, r3, #3
 8000464:	00db      	lsls	r3, r3, #3
 8000466:	ebad 0d03 	sub.w	sp, sp, r3
 800046a:	466b      	mov	r3, sp
 800046c:	3300      	adds	r3, #0
 800046e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000470:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8000472:	1e4b      	subs	r3, r1, #1
 8000474:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000476:	460a      	mov	r2, r1
 8000478:	2300      	movs	r3, #0
 800047a:	4692      	mov	sl, r2
 800047c:	469b      	mov	fp, r3
 800047e:	f04f 0200 	mov.w	r2, #0
 8000482:	f04f 0300 	mov.w	r3, #0
 8000486:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800048a:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800048e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8000492:	460a      	mov	r2, r1
 8000494:	2300      	movs	r3, #0
 8000496:	613a      	str	r2, [r7, #16]
 8000498:	617b      	str	r3, [r7, #20]
 800049a:	f04f 0200 	mov.w	r2, #0
 800049e:	f04f 0300 	mov.w	r3, #0
 80004a2:	6978      	ldr	r0, [r7, #20]
 80004a4:	00c3      	lsls	r3, r0, #3
 80004a6:	6938      	ldr	r0, [r7, #16]
 80004a8:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80004ac:	6938      	ldr	r0, [r7, #16]
 80004ae:	00c2      	lsls	r2, r0, #3
 80004b0:	460b      	mov	r3, r1
 80004b2:	3307      	adds	r3, #7
 80004b4:	08db      	lsrs	r3, r3, #3
 80004b6:	00db      	lsls	r3, r3, #3
 80004b8:	ebad 0d03 	sub.w	sp, sp, r3
 80004bc:	466b      	mov	r3, sp
 80004be:	3300      	adds	r3, #0
 80004c0:	627b      	str	r3, [r7, #36]	@ 0x24
 80004c2:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80004c4:	1e4b      	subs	r3, r1, #1
 80004c6:	623b      	str	r3, [r7, #32]
 80004c8:	460a      	mov	r2, r1
 80004ca:	2300      	movs	r3, #0
 80004cc:	60ba      	str	r2, [r7, #8]
 80004ce:	60fb      	str	r3, [r7, #12]
 80004d0:	f04f 0200 	mov.w	r2, #0
 80004d4:	f04f 0300 	mov.w	r3, #0
 80004d8:	68f8      	ldr	r0, [r7, #12]
 80004da:	00c3      	lsls	r3, r0, #3
 80004dc:	68b8      	ldr	r0, [r7, #8]
 80004de:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80004e2:	68b8      	ldr	r0, [r7, #8]
 80004e4:	00c2      	lsls	r2, r0, #3
 80004e6:	460a      	mov	r2, r1
 80004e8:	2300      	movs	r3, #0
 80004ea:	603a      	str	r2, [r7, #0]
 80004ec:	607b      	str	r3, [r7, #4]
 80004ee:	f04f 0200 	mov.w	r2, #0
 80004f2:	f04f 0300 	mov.w	r3, #0
 80004f6:	6878      	ldr	r0, [r7, #4]
 80004f8:	00c3      	lsls	r3, r0, #3
 80004fa:	6838      	ldr	r0, [r7, #0]
 80004fc:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8000500:	6838      	ldr	r0, [r7, #0]
 8000502:	00c2      	lsls	r2, r0, #3
 8000504:	460b      	mov	r3, r1
 8000506:	3307      	adds	r3, #7
 8000508:	08db      	lsrs	r3, r3, #3
 800050a:	00db      	lsls	r3, r3, #3
 800050c:	ebad 0d03 	sub.w	sp, sp, r3
 8000510:	466b      	mov	r3, sp
 8000512:	3300      	adds	r3, #0
 8000514:	61fb      	str	r3, [r7, #28]
		strncpy(subBuf, modemString2, i-1);
 8000516:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000518:	3b01      	subs	r3, #1
 800051a:	461a      	mov	r2, r3
 800051c:	492e      	ldr	r1, [pc, #184]	@ (80005d8 <main+0x328>)
 800051e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8000520:	f003 fb1a 	bl	8003b58 <strncpy>
		strncpy(subBuf2, oldModem, j-1);
 8000524:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000526:	3b01      	subs	r3, #1
 8000528:	461a      	mov	r2, r3
 800052a:	492c      	ldr	r1, [pc, #176]	@ (80005dc <main+0x32c>)
 800052c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800052e:	f003 fb13 	bl	8003b58 <strncpy>
		strncpy(subBuf3, oldModem2, k-1);
 8000532:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000534:	3b01      	subs	r3, #1
 8000536:	461a      	mov	r2, r3
 8000538:	4929      	ldr	r1, [pc, #164]	@ (80005e0 <main+0x330>)
 800053a:	69f8      	ldr	r0, [r7, #28]
 800053c:	f003 fb0c 	bl	8003b58 <strncpy>
		SSD1306_Init();
 8000540:	f000 f9ae 	bl	80008a0 <SSD1306_Init>
		SSD1306_GotoXY(0, 10);
 8000544:	210a      	movs	r1, #10
 8000546:	2000      	movs	r0, #0
 8000548:	f000 fb2a 	bl	8000ba0 <SSD1306_GotoXY>
		SSD1306_Puts(subBuf, &Font_7x10, SSD1306_COLOR_WHITE);
 800054c:	2201      	movs	r2, #1
 800054e:	4911      	ldr	r1, [pc, #68]	@ (8000594 <main+0x2e4>)
 8000550:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8000552:	f000 fbb9 	bl	8000cc8 <SSD1306_Puts>
		SSD1306_GotoXY(0, 25);
 8000556:	2119      	movs	r1, #25
 8000558:	2000      	movs	r0, #0
 800055a:	f000 fb21 	bl	8000ba0 <SSD1306_GotoXY>
		SSD1306_Puts(subBuf2, &Font_7x10, SSD1306_COLOR_WHITE);
 800055e:	2201      	movs	r2, #1
 8000560:	490c      	ldr	r1, [pc, #48]	@ (8000594 <main+0x2e4>)
 8000562:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8000564:	f000 fbb0 	bl	8000cc8 <SSD1306_Puts>
		SSD1306_GotoXY(0, 40);
 8000568:	2128      	movs	r1, #40	@ 0x28
 800056a:	2000      	movs	r0, #0
 800056c:	f000 fb18 	bl	8000ba0 <SSD1306_GotoXY>
		SSD1306_Puts(subBuf3, &Font_7x10, SSD1306_COLOR_WHITE);
 8000570:	2201      	movs	r2, #1
 8000572:	4908      	ldr	r1, [pc, #32]	@ (8000594 <main+0x2e4>)
 8000574:	69f8      	ldr	r0, [r7, #28]
 8000576:	f000 fba7 	bl	8000cc8 <SSD1306_Puts>
		SSD1306_UpdateScreen();
 800057a:	f000 fa67 	bl	8000a4c <SSD1306_UpdateScreen>
 800057e:	46b5      	mov	sp, r6
	  /*if (strstr(modemString, "\n")) {
		  HAL_UART_Transmit(&huart1, modemString, modemStringLength, 0xFFFF);
		  modemStringLength = 0;
		  memset(modemString,0,100);
	  }*/
	 HAL_Delay(1000);
 8000580:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000584:	f001 f85a 	bl	800163c <HAL_Delay>

	  //HAL_UART_Transmit(&huart1,modemString,10,0xFFFF);
	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8000588:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800058c:	4815      	ldr	r0, [pc, #84]	@ (80005e4 <main+0x334>)
 800058e:	f001 fdbd 	bl	800210c <HAL_GPIO_TogglePin>
	  if (strstr(modemString2, "\r\n")) {
 8000592:	e70a      	b.n	80003aa <main+0xfa>
 8000594:	20000000 	.word	0x20000000
 8000598:	08003c10 	.word	0x08003c10
 800059c:	08003c24 	.word	0x08003c24
 80005a0:	2000008c 	.word	0x2000008c
 80005a4:	08003c2c 	.word	0x08003c2c
 80005a8:	200000d4 	.word	0x200000d4
 80005ac:	08003c38 	.word	0x08003c38
 80005b0:	08003c48 	.word	0x08003c48
 80005b4:	08003c54 	.word	0x08003c54
 80005b8:	08003c68 	.word	0x08003c68
 80005bc:	08003cb8 	.word	0x08003cb8
 80005c0:	08003cc8 	.word	0x08003cc8
 80005c4:	08003cd4 	.word	0x08003cd4
 80005c8:	08003ce0 	.word	0x08003ce0
 80005cc:	20000008 	.word	0x20000008
 80005d0:	2000000c 	.word	0x2000000c
 80005d4:	08003c0c 	.word	0x08003c0c
 80005d8:	2000022c 	.word	0x2000022c
 80005dc:	2000042c 	.word	0x2000042c
 80005e0:	20000528 	.word	0x20000528
 80005e4:	40011000 	.word	0x40011000

080005e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b090      	sub	sp, #64	@ 0x40
 80005ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005ee:	f107 0318 	add.w	r3, r7, #24
 80005f2:	2228      	movs	r2, #40	@ 0x28
 80005f4:	2100      	movs	r1, #0
 80005f6:	4618      	mov	r0, r3
 80005f8:	f003 faa6 	bl	8003b48 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005fc:	1d3b      	adds	r3, r7, #4
 80005fe:	2200      	movs	r2, #0
 8000600:	601a      	str	r2, [r3, #0]
 8000602:	605a      	str	r2, [r3, #4]
 8000604:	609a      	str	r2, [r3, #8]
 8000606:	60da      	str	r2, [r3, #12]
 8000608:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800060a:	2301      	movs	r3, #1
 800060c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800060e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000612:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000614:	2300      	movs	r3, #0
 8000616:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000618:	2301      	movs	r3, #1
 800061a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800061c:	2302      	movs	r3, #2
 800061e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000620:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000624:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000626:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 800062a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800062c:	f107 0318 	add.w	r3, r7, #24
 8000630:	4618      	mov	r0, r3
 8000632:	f001 fec9 	bl	80023c8 <HAL_RCC_OscConfig>
 8000636:	4603      	mov	r3, r0
 8000638:	2b00      	cmp	r3, #0
 800063a:	d001      	beq.n	8000640 <SystemClock_Config+0x58>
  {
    Error_Handler();
 800063c:	f000 f92a 	bl	8000894 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000640:	230f      	movs	r3, #15
 8000642:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000644:	2302      	movs	r3, #2
 8000646:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000648:	2300      	movs	r3, #0
 800064a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800064c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000650:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000652:	2300      	movs	r3, #0
 8000654:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000656:	1d3b      	adds	r3, r7, #4
 8000658:	2102      	movs	r1, #2
 800065a:	4618      	mov	r0, r3
 800065c:	f002 f936 	bl	80028cc <HAL_RCC_ClockConfig>
 8000660:	4603      	mov	r3, r0
 8000662:	2b00      	cmp	r3, #0
 8000664:	d001      	beq.n	800066a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000666:	f000 f915 	bl	8000894 <Error_Handler>
  }
}
 800066a:	bf00      	nop
 800066c:	3740      	adds	r7, #64	@ 0x40
 800066e:	46bd      	mov	sp, r7
 8000670:	bd80      	pop	{r7, pc}
	...

08000674 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000678:	4b12      	ldr	r3, [pc, #72]	@ (80006c4 <MX_I2C1_Init+0x50>)
 800067a:	4a13      	ldr	r2, [pc, #76]	@ (80006c8 <MX_I2C1_Init+0x54>)
 800067c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800067e:	4b11      	ldr	r3, [pc, #68]	@ (80006c4 <MX_I2C1_Init+0x50>)
 8000680:	4a12      	ldr	r2, [pc, #72]	@ (80006cc <MX_I2C1_Init+0x58>)
 8000682:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000684:	4b0f      	ldr	r3, [pc, #60]	@ (80006c4 <MX_I2C1_Init+0x50>)
 8000686:	2200      	movs	r2, #0
 8000688:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800068a:	4b0e      	ldr	r3, [pc, #56]	@ (80006c4 <MX_I2C1_Init+0x50>)
 800068c:	2200      	movs	r2, #0
 800068e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000690:	4b0c      	ldr	r3, [pc, #48]	@ (80006c4 <MX_I2C1_Init+0x50>)
 8000692:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000696:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000698:	4b0a      	ldr	r3, [pc, #40]	@ (80006c4 <MX_I2C1_Init+0x50>)
 800069a:	2200      	movs	r2, #0
 800069c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800069e:	4b09      	ldr	r3, [pc, #36]	@ (80006c4 <MX_I2C1_Init+0x50>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006a4:	4b07      	ldr	r3, [pc, #28]	@ (80006c4 <MX_I2C1_Init+0x50>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006aa:	4b06      	ldr	r3, [pc, #24]	@ (80006c4 <MX_I2C1_Init+0x50>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80006b0:	4804      	ldr	r0, [pc, #16]	@ (80006c4 <MX_I2C1_Init+0x50>)
 80006b2:	f001 fd45 	bl	8002140 <HAL_I2C_Init>
 80006b6:	4603      	mov	r3, r0
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d001      	beq.n	80006c0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80006bc:	f000 f8ea 	bl	8000894 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80006c0:	bf00      	nop
 80006c2:	bd80      	pop	{r7, pc}
 80006c4:	20000038 	.word	0x20000038
 80006c8:	40005400 	.word	0x40005400
 80006cc:	000186a0 	.word	0x000186a0

080006d0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80006d4:	4b11      	ldr	r3, [pc, #68]	@ (800071c <MX_USART1_UART_Init+0x4c>)
 80006d6:	4a12      	ldr	r2, [pc, #72]	@ (8000720 <MX_USART1_UART_Init+0x50>)
 80006d8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80006da:	4b10      	ldr	r3, [pc, #64]	@ (800071c <MX_USART1_UART_Init+0x4c>)
 80006dc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80006e0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80006e2:	4b0e      	ldr	r3, [pc, #56]	@ (800071c <MX_USART1_UART_Init+0x4c>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80006e8:	4b0c      	ldr	r3, [pc, #48]	@ (800071c <MX_USART1_UART_Init+0x4c>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80006ee:	4b0b      	ldr	r3, [pc, #44]	@ (800071c <MX_USART1_UART_Init+0x4c>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80006f4:	4b09      	ldr	r3, [pc, #36]	@ (800071c <MX_USART1_UART_Init+0x4c>)
 80006f6:	220c      	movs	r2, #12
 80006f8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006fa:	4b08      	ldr	r3, [pc, #32]	@ (800071c <MX_USART1_UART_Init+0x4c>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000700:	4b06      	ldr	r3, [pc, #24]	@ (800071c <MX_USART1_UART_Init+0x4c>)
 8000702:	2200      	movs	r2, #0
 8000704:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000706:	4805      	ldr	r0, [pc, #20]	@ (800071c <MX_USART1_UART_Init+0x4c>)
 8000708:	f002 fa6e 	bl	8002be8 <HAL_UART_Init>
 800070c:	4603      	mov	r3, r0
 800070e:	2b00      	cmp	r3, #0
 8000710:	d001      	beq.n	8000716 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000712:	f000 f8bf 	bl	8000894 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000716:	bf00      	nop
 8000718:	bd80      	pop	{r7, pc}
 800071a:	bf00      	nop
 800071c:	2000008c 	.word	0x2000008c
 8000720:	40013800 	.word	0x40013800

08000724 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000728:	4b11      	ldr	r3, [pc, #68]	@ (8000770 <MX_USART2_UART_Init+0x4c>)
 800072a:	4a12      	ldr	r2, [pc, #72]	@ (8000774 <MX_USART2_UART_Init+0x50>)
 800072c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800072e:	4b10      	ldr	r3, [pc, #64]	@ (8000770 <MX_USART2_UART_Init+0x4c>)
 8000730:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000734:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000736:	4b0e      	ldr	r3, [pc, #56]	@ (8000770 <MX_USART2_UART_Init+0x4c>)
 8000738:	2200      	movs	r2, #0
 800073a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800073c:	4b0c      	ldr	r3, [pc, #48]	@ (8000770 <MX_USART2_UART_Init+0x4c>)
 800073e:	2200      	movs	r2, #0
 8000740:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000742:	4b0b      	ldr	r3, [pc, #44]	@ (8000770 <MX_USART2_UART_Init+0x4c>)
 8000744:	2200      	movs	r2, #0
 8000746:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000748:	4b09      	ldr	r3, [pc, #36]	@ (8000770 <MX_USART2_UART_Init+0x4c>)
 800074a:	220c      	movs	r2, #12
 800074c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800074e:	4b08      	ldr	r3, [pc, #32]	@ (8000770 <MX_USART2_UART_Init+0x4c>)
 8000750:	2200      	movs	r2, #0
 8000752:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000754:	4b06      	ldr	r3, [pc, #24]	@ (8000770 <MX_USART2_UART_Init+0x4c>)
 8000756:	2200      	movs	r2, #0
 8000758:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800075a:	4805      	ldr	r0, [pc, #20]	@ (8000770 <MX_USART2_UART_Init+0x4c>)
 800075c:	f002 fa44 	bl	8002be8 <HAL_UART_Init>
 8000760:	4603      	mov	r3, r0
 8000762:	2b00      	cmp	r3, #0
 8000764:	d001      	beq.n	800076a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000766:	f000 f895 	bl	8000894 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800076a:	bf00      	nop
 800076c:	bd80      	pop	{r7, pc}
 800076e:	bf00      	nop
 8000770:	200000d4 	.word	0x200000d4
 8000774:	40004400 	.word	0x40004400

08000778 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	b082      	sub	sp, #8
 800077c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800077e:	4b18      	ldr	r3, [pc, #96]	@ (80007e0 <MX_DMA_Init+0x68>)
 8000780:	695b      	ldr	r3, [r3, #20]
 8000782:	4a17      	ldr	r2, [pc, #92]	@ (80007e0 <MX_DMA_Init+0x68>)
 8000784:	f043 0301 	orr.w	r3, r3, #1
 8000788:	6153      	str	r3, [r2, #20]
 800078a:	4b15      	ldr	r3, [pc, #84]	@ (80007e0 <MX_DMA_Init+0x68>)
 800078c:	695b      	ldr	r3, [r3, #20]
 800078e:	f003 0301 	and.w	r3, r3, #1
 8000792:	607b      	str	r3, [r7, #4]
 8000794:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8000796:	2200      	movs	r2, #0
 8000798:	2100      	movs	r1, #0
 800079a:	200e      	movs	r0, #14
 800079c:	f001 f849 	bl	8001832 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 80007a0:	200e      	movs	r0, #14
 80007a2:	f001 f862 	bl	800186a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 80007a6:	2200      	movs	r2, #0
 80007a8:	2100      	movs	r1, #0
 80007aa:	200f      	movs	r0, #15
 80007ac:	f001 f841 	bl	8001832 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 80007b0:	200f      	movs	r0, #15
 80007b2:	f001 f85a 	bl	800186a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 80007b6:	2200      	movs	r2, #0
 80007b8:	2100      	movs	r1, #0
 80007ba:	2010      	movs	r0, #16
 80007bc:	f001 f839 	bl	8001832 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 80007c0:	2010      	movs	r0, #16
 80007c2:	f001 f852 	bl	800186a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 80007c6:	2200      	movs	r2, #0
 80007c8:	2100      	movs	r1, #0
 80007ca:	2011      	movs	r0, #17
 80007cc:	f001 f831 	bl	8001832 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 80007d0:	2011      	movs	r0, #17
 80007d2:	f001 f84a 	bl	800186a <HAL_NVIC_EnableIRQ>

}
 80007d6:	bf00      	nop
 80007d8:	3708      	adds	r7, #8
 80007da:	46bd      	mov	sp, r7
 80007dc:	bd80      	pop	{r7, pc}
 80007de:	bf00      	nop
 80007e0:	40021000 	.word	0x40021000

080007e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b088      	sub	sp, #32
 80007e8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007ea:	f107 0310 	add.w	r3, r7, #16
 80007ee:	2200      	movs	r2, #0
 80007f0:	601a      	str	r2, [r3, #0]
 80007f2:	605a      	str	r2, [r3, #4]
 80007f4:	609a      	str	r2, [r3, #8]
 80007f6:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007f8:	4b24      	ldr	r3, [pc, #144]	@ (800088c <MX_GPIO_Init+0xa8>)
 80007fa:	699b      	ldr	r3, [r3, #24]
 80007fc:	4a23      	ldr	r2, [pc, #140]	@ (800088c <MX_GPIO_Init+0xa8>)
 80007fe:	f043 0310 	orr.w	r3, r3, #16
 8000802:	6193      	str	r3, [r2, #24]
 8000804:	4b21      	ldr	r3, [pc, #132]	@ (800088c <MX_GPIO_Init+0xa8>)
 8000806:	699b      	ldr	r3, [r3, #24]
 8000808:	f003 0310 	and.w	r3, r3, #16
 800080c:	60fb      	str	r3, [r7, #12]
 800080e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000810:	4b1e      	ldr	r3, [pc, #120]	@ (800088c <MX_GPIO_Init+0xa8>)
 8000812:	699b      	ldr	r3, [r3, #24]
 8000814:	4a1d      	ldr	r2, [pc, #116]	@ (800088c <MX_GPIO_Init+0xa8>)
 8000816:	f043 0320 	orr.w	r3, r3, #32
 800081a:	6193      	str	r3, [r2, #24]
 800081c:	4b1b      	ldr	r3, [pc, #108]	@ (800088c <MX_GPIO_Init+0xa8>)
 800081e:	699b      	ldr	r3, [r3, #24]
 8000820:	f003 0320 	and.w	r3, r3, #32
 8000824:	60bb      	str	r3, [r7, #8]
 8000826:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000828:	4b18      	ldr	r3, [pc, #96]	@ (800088c <MX_GPIO_Init+0xa8>)
 800082a:	699b      	ldr	r3, [r3, #24]
 800082c:	4a17      	ldr	r2, [pc, #92]	@ (800088c <MX_GPIO_Init+0xa8>)
 800082e:	f043 0304 	orr.w	r3, r3, #4
 8000832:	6193      	str	r3, [r2, #24]
 8000834:	4b15      	ldr	r3, [pc, #84]	@ (800088c <MX_GPIO_Init+0xa8>)
 8000836:	699b      	ldr	r3, [r3, #24]
 8000838:	f003 0304 	and.w	r3, r3, #4
 800083c:	607b      	str	r3, [r7, #4]
 800083e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000840:	4b12      	ldr	r3, [pc, #72]	@ (800088c <MX_GPIO_Init+0xa8>)
 8000842:	699b      	ldr	r3, [r3, #24]
 8000844:	4a11      	ldr	r2, [pc, #68]	@ (800088c <MX_GPIO_Init+0xa8>)
 8000846:	f043 0308 	orr.w	r3, r3, #8
 800084a:	6193      	str	r3, [r2, #24]
 800084c:	4b0f      	ldr	r3, [pc, #60]	@ (800088c <MX_GPIO_Init+0xa8>)
 800084e:	699b      	ldr	r3, [r3, #24]
 8000850:	f003 0308 	and.w	r3, r3, #8
 8000854:	603b      	str	r3, [r7, #0]
 8000856:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000858:	2200      	movs	r2, #0
 800085a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800085e:	480c      	ldr	r0, [pc, #48]	@ (8000890 <MX_GPIO_Init+0xac>)
 8000860:	f001 fc3c 	bl	80020dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000864:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000868:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800086a:	2301      	movs	r3, #1
 800086c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800086e:	2302      	movs	r3, #2
 8000870:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000872:	2303      	movs	r3, #3
 8000874:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000876:	f107 0310 	add.w	r3, r7, #16
 800087a:	4619      	mov	r1, r3
 800087c:	4804      	ldr	r0, [pc, #16]	@ (8000890 <MX_GPIO_Init+0xac>)
 800087e:	f001 fab1 	bl	8001de4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000882:	bf00      	nop
 8000884:	3720      	adds	r7, #32
 8000886:	46bd      	mov	sp, r7
 8000888:	bd80      	pop	{r7, pc}
 800088a:	bf00      	nop
 800088c:	40021000 	.word	0x40021000
 8000890:	40011000 	.word	0x40011000

08000894 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000894:	b480      	push	{r7}
 8000896:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000898:	b672      	cpsid	i
}
 800089a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800089c:	bf00      	nop
 800089e:	e7fd      	b.n	800089c <Error_Handler+0x8>

080008a0 <SSD1306_Init>:
} SSD1306_t;

/* Private variable */
static SSD1306_t SSD1306;

uint8_t SSD1306_Init(void) {
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b082      	sub	sp, #8
 80008a4:	af00      	add	r7, sp, #0

	/* Init I2C */
	//ssd1306_I2C_Init();
	
	/* Check if LCD connected to I2C */
	if (!ssd1306_I2C_IsDeviceConnected(SSD1306_I2C, SSD1306_I2C_ADDR)) {
 80008a6:	2178      	movs	r1, #120	@ 0x78
 80008a8:	4866      	ldr	r0, [pc, #408]	@ (8000a44 <SSD1306_Init+0x1a4>)
 80008aa:	f000 fc15 	bl	80010d8 <ssd1306_I2C_IsDeviceConnected>
 80008ae:	4603      	mov	r3, r0
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d101      	bne.n	80008b8 <SSD1306_Init+0x18>
		/* Return false */
		return 0;
 80008b4:	2300      	movs	r3, #0
 80008b6:	e0c0      	b.n	8000a3a <SSD1306_Init+0x19a>
	}
	
	/* A little delay */
	uint32_t p = 2500;
 80008b8:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 80008bc:	607b      	str	r3, [r7, #4]
	while(p>0)
 80008be:	e002      	b.n	80008c6 <SSD1306_Init+0x26>
		p--;
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	3b01      	subs	r3, #1
 80008c4:	607b      	str	r3, [r7, #4]
	while(p>0)
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d1f9      	bne.n	80008c0 <SSD1306_Init+0x20>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 80008cc:	23ae      	movs	r3, #174	@ 0xae
 80008ce:	2200      	movs	r2, #0
 80008d0:	2178      	movs	r1, #120	@ 0x78
 80008d2:	485c      	ldr	r0, [pc, #368]	@ (8000a44 <SSD1306_Init+0x1a4>)
 80008d4:	f000 fbae 	bl	8001034 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 80008d8:	2320      	movs	r3, #32
 80008da:	2200      	movs	r2, #0
 80008dc:	2178      	movs	r1, #120	@ 0x78
 80008de:	4859      	ldr	r0, [pc, #356]	@ (8000a44 <SSD1306_Init+0x1a4>)
 80008e0:	f000 fba8 	bl	8001034 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 80008e4:	2310      	movs	r3, #16
 80008e6:	2200      	movs	r2, #0
 80008e8:	2178      	movs	r1, #120	@ 0x78
 80008ea:	4856      	ldr	r0, [pc, #344]	@ (8000a44 <SSD1306_Init+0x1a4>)
 80008ec:	f000 fba2 	bl	8001034 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 80008f0:	23b0      	movs	r3, #176	@ 0xb0
 80008f2:	2200      	movs	r2, #0
 80008f4:	2178      	movs	r1, #120	@ 0x78
 80008f6:	4853      	ldr	r0, [pc, #332]	@ (8000a44 <SSD1306_Init+0x1a4>)
 80008f8:	f000 fb9c 	bl	8001034 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 80008fc:	23c8      	movs	r3, #200	@ 0xc8
 80008fe:	2200      	movs	r2, #0
 8000900:	2178      	movs	r1, #120	@ 0x78
 8000902:	4850      	ldr	r0, [pc, #320]	@ (8000a44 <SSD1306_Init+0x1a4>)
 8000904:	f000 fb96 	bl	8001034 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8000908:	2300      	movs	r3, #0
 800090a:	2200      	movs	r2, #0
 800090c:	2178      	movs	r1, #120	@ 0x78
 800090e:	484d      	ldr	r0, [pc, #308]	@ (8000a44 <SSD1306_Init+0x1a4>)
 8000910:	f000 fb90 	bl	8001034 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 8000914:	2310      	movs	r3, #16
 8000916:	2200      	movs	r2, #0
 8000918:	2178      	movs	r1, #120	@ 0x78
 800091a:	484a      	ldr	r0, [pc, #296]	@ (8000a44 <SSD1306_Init+0x1a4>)
 800091c:	f000 fb8a 	bl	8001034 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8000920:	2340      	movs	r3, #64	@ 0x40
 8000922:	2200      	movs	r2, #0
 8000924:	2178      	movs	r1, #120	@ 0x78
 8000926:	4847      	ldr	r0, [pc, #284]	@ (8000a44 <SSD1306_Init+0x1a4>)
 8000928:	f000 fb84 	bl	8001034 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 800092c:	2381      	movs	r3, #129	@ 0x81
 800092e:	2200      	movs	r2, #0
 8000930:	2178      	movs	r1, #120	@ 0x78
 8000932:	4844      	ldr	r0, [pc, #272]	@ (8000a44 <SSD1306_Init+0x1a4>)
 8000934:	f000 fb7e 	bl	8001034 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8000938:	23ff      	movs	r3, #255	@ 0xff
 800093a:	2200      	movs	r2, #0
 800093c:	2178      	movs	r1, #120	@ 0x78
 800093e:	4841      	ldr	r0, [pc, #260]	@ (8000a44 <SSD1306_Init+0x1a4>)
 8000940:	f000 fb78 	bl	8001034 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 8000944:	23a1      	movs	r3, #161	@ 0xa1
 8000946:	2200      	movs	r2, #0
 8000948:	2178      	movs	r1, #120	@ 0x78
 800094a:	483e      	ldr	r0, [pc, #248]	@ (8000a44 <SSD1306_Init+0x1a4>)
 800094c:	f000 fb72 	bl	8001034 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8000950:	23a6      	movs	r3, #166	@ 0xa6
 8000952:	2200      	movs	r2, #0
 8000954:	2178      	movs	r1, #120	@ 0x78
 8000956:	483b      	ldr	r0, [pc, #236]	@ (8000a44 <SSD1306_Init+0x1a4>)
 8000958:	f000 fb6c 	bl	8001034 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 800095c:	23a8      	movs	r3, #168	@ 0xa8
 800095e:	2200      	movs	r2, #0
 8000960:	2178      	movs	r1, #120	@ 0x78
 8000962:	4838      	ldr	r0, [pc, #224]	@ (8000a44 <SSD1306_Init+0x1a4>)
 8000964:	f000 fb66 	bl	8001034 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8000968:	233f      	movs	r3, #63	@ 0x3f
 800096a:	2200      	movs	r2, #0
 800096c:	2178      	movs	r1, #120	@ 0x78
 800096e:	4835      	ldr	r0, [pc, #212]	@ (8000a44 <SSD1306_Init+0x1a4>)
 8000970:	f000 fb60 	bl	8001034 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8000974:	23a4      	movs	r3, #164	@ 0xa4
 8000976:	2200      	movs	r2, #0
 8000978:	2178      	movs	r1, #120	@ 0x78
 800097a:	4832      	ldr	r0, [pc, #200]	@ (8000a44 <SSD1306_Init+0x1a4>)
 800097c:	f000 fb5a 	bl	8001034 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8000980:	23d3      	movs	r3, #211	@ 0xd3
 8000982:	2200      	movs	r2, #0
 8000984:	2178      	movs	r1, #120	@ 0x78
 8000986:	482f      	ldr	r0, [pc, #188]	@ (8000a44 <SSD1306_Init+0x1a4>)
 8000988:	f000 fb54 	bl	8001034 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 800098c:	2300      	movs	r3, #0
 800098e:	2200      	movs	r2, #0
 8000990:	2178      	movs	r1, #120	@ 0x78
 8000992:	482c      	ldr	r0, [pc, #176]	@ (8000a44 <SSD1306_Init+0x1a4>)
 8000994:	f000 fb4e 	bl	8001034 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8000998:	23d5      	movs	r3, #213	@ 0xd5
 800099a:	2200      	movs	r2, #0
 800099c:	2178      	movs	r1, #120	@ 0x78
 800099e:	4829      	ldr	r0, [pc, #164]	@ (8000a44 <SSD1306_Init+0x1a4>)
 80009a0:	f000 fb48 	bl	8001034 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 80009a4:	23f0      	movs	r3, #240	@ 0xf0
 80009a6:	2200      	movs	r2, #0
 80009a8:	2178      	movs	r1, #120	@ 0x78
 80009aa:	4826      	ldr	r0, [pc, #152]	@ (8000a44 <SSD1306_Init+0x1a4>)
 80009ac:	f000 fb42 	bl	8001034 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 80009b0:	23d9      	movs	r3, #217	@ 0xd9
 80009b2:	2200      	movs	r2, #0
 80009b4:	2178      	movs	r1, #120	@ 0x78
 80009b6:	4823      	ldr	r0, [pc, #140]	@ (8000a44 <SSD1306_Init+0x1a4>)
 80009b8:	f000 fb3c 	bl	8001034 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 80009bc:	2322      	movs	r3, #34	@ 0x22
 80009be:	2200      	movs	r2, #0
 80009c0:	2178      	movs	r1, #120	@ 0x78
 80009c2:	4820      	ldr	r0, [pc, #128]	@ (8000a44 <SSD1306_Init+0x1a4>)
 80009c4:	f000 fb36 	bl	8001034 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 80009c8:	23da      	movs	r3, #218	@ 0xda
 80009ca:	2200      	movs	r2, #0
 80009cc:	2178      	movs	r1, #120	@ 0x78
 80009ce:	481d      	ldr	r0, [pc, #116]	@ (8000a44 <SSD1306_Init+0x1a4>)
 80009d0:	f000 fb30 	bl	8001034 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 80009d4:	2312      	movs	r3, #18
 80009d6:	2200      	movs	r2, #0
 80009d8:	2178      	movs	r1, #120	@ 0x78
 80009da:	481a      	ldr	r0, [pc, #104]	@ (8000a44 <SSD1306_Init+0x1a4>)
 80009dc:	f000 fb2a 	bl	8001034 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 80009e0:	23db      	movs	r3, #219	@ 0xdb
 80009e2:	2200      	movs	r2, #0
 80009e4:	2178      	movs	r1, #120	@ 0x78
 80009e6:	4817      	ldr	r0, [pc, #92]	@ (8000a44 <SSD1306_Init+0x1a4>)
 80009e8:	f000 fb24 	bl	8001034 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 80009ec:	2320      	movs	r3, #32
 80009ee:	2200      	movs	r2, #0
 80009f0:	2178      	movs	r1, #120	@ 0x78
 80009f2:	4814      	ldr	r0, [pc, #80]	@ (8000a44 <SSD1306_Init+0x1a4>)
 80009f4:	f000 fb1e 	bl	8001034 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 80009f8:	238d      	movs	r3, #141	@ 0x8d
 80009fa:	2200      	movs	r2, #0
 80009fc:	2178      	movs	r1, #120	@ 0x78
 80009fe:	4811      	ldr	r0, [pc, #68]	@ (8000a44 <SSD1306_Init+0x1a4>)
 8000a00:	f000 fb18 	bl	8001034 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 8000a04:	2314      	movs	r3, #20
 8000a06:	2200      	movs	r2, #0
 8000a08:	2178      	movs	r1, #120	@ 0x78
 8000a0a:	480e      	ldr	r0, [pc, #56]	@ (8000a44 <SSD1306_Init+0x1a4>)
 8000a0c:	f000 fb12 	bl	8001034 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8000a10:	23af      	movs	r3, #175	@ 0xaf
 8000a12:	2200      	movs	r2, #0
 8000a14:	2178      	movs	r1, #120	@ 0x78
 8000a16:	480b      	ldr	r0, [pc, #44]	@ (8000a44 <SSD1306_Init+0x1a4>)
 8000a18:	f000 fb0c 	bl	8001034 <ssd1306_I2C_Write>
	
	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8000a1c:	2000      	movs	r0, #0
 8000a1e:	f000 f849 	bl	8000ab4 <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen();
 8000a22:	f000 f813 	bl	8000a4c <SSD1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 8000a26:	4b08      	ldr	r3, [pc, #32]	@ (8000a48 <SSD1306_Init+0x1a8>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8000a2c:	4b06      	ldr	r3, [pc, #24]	@ (8000a48 <SSD1306_Init+0x1a8>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 8000a32:	4b05      	ldr	r3, [pc, #20]	@ (8000a48 <SSD1306_Init+0x1a8>)
 8000a34:	2201      	movs	r2, #1
 8000a36:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 8000a38:	2301      	movs	r3, #1
}
 8000a3a:	4618      	mov	r0, r3
 8000a3c:	3708      	adds	r7, #8
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	bd80      	pop	{r7, pc}
 8000a42:	bf00      	nop
 8000a44:	40005400 	.word	0x40005400
 8000a48:	20000a24 	.word	0x20000a24

08000a4c <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b084      	sub	sp, #16
 8000a50:	af02      	add	r7, sp, #8
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 8000a52:	2300      	movs	r3, #0
 8000a54:	71fb      	strb	r3, [r7, #7]
 8000a56:	e021      	b.n	8000a9c <SSD1306_UpdateScreen+0x50>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8000a58:	79fb      	ldrb	r3, [r7, #7]
 8000a5a:	3b50      	subs	r3, #80	@ 0x50
 8000a5c:	b2db      	uxtb	r3, r3
 8000a5e:	2200      	movs	r2, #0
 8000a60:	2178      	movs	r1, #120	@ 0x78
 8000a62:	4812      	ldr	r0, [pc, #72]	@ (8000aac <SSD1306_UpdateScreen+0x60>)
 8000a64:	f000 fae6 	bl	8001034 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8000a68:	2300      	movs	r3, #0
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	2178      	movs	r1, #120	@ 0x78
 8000a6e:	480f      	ldr	r0, [pc, #60]	@ (8000aac <SSD1306_UpdateScreen+0x60>)
 8000a70:	f000 fae0 	bl	8001034 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 8000a74:	2310      	movs	r3, #16
 8000a76:	2200      	movs	r2, #0
 8000a78:	2178      	movs	r1, #120	@ 0x78
 8000a7a:	480c      	ldr	r0, [pc, #48]	@ (8000aac <SSD1306_UpdateScreen+0x60>)
 8000a7c:	f000 fada 	bl	8001034 <ssd1306_I2C_Write>
		//HAL_UART_Transmit(&huart1, (uint8_t*) "I2C_Writ12\r\n", 12, 0xFFFF);
		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C, SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8000a80:	79fb      	ldrb	r3, [r7, #7]
 8000a82:	01db      	lsls	r3, r3, #7
 8000a84:	4a0a      	ldr	r2, [pc, #40]	@ (8000ab0 <SSD1306_UpdateScreen+0x64>)
 8000a86:	4413      	add	r3, r2
 8000a88:	2280      	movs	r2, #128	@ 0x80
 8000a8a:	9200      	str	r2, [sp, #0]
 8000a8c:	2240      	movs	r2, #64	@ 0x40
 8000a8e:	2178      	movs	r1, #120	@ 0x78
 8000a90:	4806      	ldr	r0, [pc, #24]	@ (8000aac <SSD1306_UpdateScreen+0x60>)
 8000a92:	f000 fa12 	bl	8000eba <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8000a96:	79fb      	ldrb	r3, [r7, #7]
 8000a98:	3301      	adds	r3, #1
 8000a9a:	71fb      	strb	r3, [r7, #7]
 8000a9c:	79fb      	ldrb	r3, [r7, #7]
 8000a9e:	2b07      	cmp	r3, #7
 8000aa0:	d9da      	bls.n	8000a58 <SSD1306_UpdateScreen+0xc>
		//HAL_UART_Transmit(&huart1, (uint8_t*) "I2C_Writ13\r\n", 12, 0xFFFF);
	}
}
 8000aa2:	bf00      	nop
 8000aa4:	bf00      	nop
 8000aa6:	3708      	adds	r7, #8
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	bd80      	pop	{r7, pc}
 8000aac:	40005400 	.word	0x40005400
 8000ab0:	20000624 	.word	0x20000624

08000ab4 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b082      	sub	sp, #8
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	4603      	mov	r3, r0
 8000abc:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8000abe:	79fb      	ldrb	r3, [r7, #7]
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d101      	bne.n	8000ac8 <SSD1306_Fill+0x14>
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	e000      	b.n	8000aca <SSD1306_Fill+0x16>
 8000ac8:	23ff      	movs	r3, #255	@ 0xff
 8000aca:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000ace:	4619      	mov	r1, r3
 8000ad0:	4803      	ldr	r0, [pc, #12]	@ (8000ae0 <SSD1306_Fill+0x2c>)
 8000ad2:	f003 f839 	bl	8003b48 <memset>
}
 8000ad6:	bf00      	nop
 8000ad8:	3708      	adds	r7, #8
 8000ada:	46bd      	mov	sp, r7
 8000adc:	bd80      	pop	{r7, pc}
 8000ade:	bf00      	nop
 8000ae0:	20000624 	.word	0x20000624

08000ae4 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8000ae4:	b480      	push	{r7}
 8000ae6:	b083      	sub	sp, #12
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	4603      	mov	r3, r0
 8000aec:	80fb      	strh	r3, [r7, #6]
 8000aee:	460b      	mov	r3, r1
 8000af0:	80bb      	strh	r3, [r7, #4]
 8000af2:	4613      	mov	r3, r2
 8000af4:	70fb      	strb	r3, [r7, #3]
	if (
 8000af6:	88fb      	ldrh	r3, [r7, #6]
 8000af8:	2b7f      	cmp	r3, #127	@ 0x7f
 8000afa:	d848      	bhi.n	8000b8e <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 8000afc:	88bb      	ldrh	r3, [r7, #4]
 8000afe:	2b3f      	cmp	r3, #63	@ 0x3f
 8000b00:	d845      	bhi.n	8000b8e <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 8000b02:	4b25      	ldr	r3, [pc, #148]	@ (8000b98 <SSD1306_DrawPixel+0xb4>)
 8000b04:	791b      	ldrb	r3, [r3, #4]
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d006      	beq.n	8000b18 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 8000b0a:	78fb      	ldrb	r3, [r7, #3]
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	bf0c      	ite	eq
 8000b10:	2301      	moveq	r3, #1
 8000b12:	2300      	movne	r3, #0
 8000b14:	b2db      	uxtb	r3, r3
 8000b16:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8000b18:	78fb      	ldrb	r3, [r7, #3]
 8000b1a:	2b01      	cmp	r3, #1
 8000b1c:	d11a      	bne.n	8000b54 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8000b1e:	88fa      	ldrh	r2, [r7, #6]
 8000b20:	88bb      	ldrh	r3, [r7, #4]
 8000b22:	08db      	lsrs	r3, r3, #3
 8000b24:	b298      	uxth	r0, r3
 8000b26:	4603      	mov	r3, r0
 8000b28:	01db      	lsls	r3, r3, #7
 8000b2a:	4413      	add	r3, r2
 8000b2c:	4a1b      	ldr	r2, [pc, #108]	@ (8000b9c <SSD1306_DrawPixel+0xb8>)
 8000b2e:	5cd3      	ldrb	r3, [r2, r3]
 8000b30:	b25a      	sxtb	r2, r3
 8000b32:	88bb      	ldrh	r3, [r7, #4]
 8000b34:	f003 0307 	and.w	r3, r3, #7
 8000b38:	2101      	movs	r1, #1
 8000b3a:	fa01 f303 	lsl.w	r3, r1, r3
 8000b3e:	b25b      	sxtb	r3, r3
 8000b40:	4313      	orrs	r3, r2
 8000b42:	b259      	sxtb	r1, r3
 8000b44:	88fa      	ldrh	r2, [r7, #6]
 8000b46:	4603      	mov	r3, r0
 8000b48:	01db      	lsls	r3, r3, #7
 8000b4a:	4413      	add	r3, r2
 8000b4c:	b2c9      	uxtb	r1, r1
 8000b4e:	4a13      	ldr	r2, [pc, #76]	@ (8000b9c <SSD1306_DrawPixel+0xb8>)
 8000b50:	54d1      	strb	r1, [r2, r3]
 8000b52:	e01d      	b.n	8000b90 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8000b54:	88fa      	ldrh	r2, [r7, #6]
 8000b56:	88bb      	ldrh	r3, [r7, #4]
 8000b58:	08db      	lsrs	r3, r3, #3
 8000b5a:	b298      	uxth	r0, r3
 8000b5c:	4603      	mov	r3, r0
 8000b5e:	01db      	lsls	r3, r3, #7
 8000b60:	4413      	add	r3, r2
 8000b62:	4a0e      	ldr	r2, [pc, #56]	@ (8000b9c <SSD1306_DrawPixel+0xb8>)
 8000b64:	5cd3      	ldrb	r3, [r2, r3]
 8000b66:	b25a      	sxtb	r2, r3
 8000b68:	88bb      	ldrh	r3, [r7, #4]
 8000b6a:	f003 0307 	and.w	r3, r3, #7
 8000b6e:	2101      	movs	r1, #1
 8000b70:	fa01 f303 	lsl.w	r3, r1, r3
 8000b74:	b25b      	sxtb	r3, r3
 8000b76:	43db      	mvns	r3, r3
 8000b78:	b25b      	sxtb	r3, r3
 8000b7a:	4013      	ands	r3, r2
 8000b7c:	b259      	sxtb	r1, r3
 8000b7e:	88fa      	ldrh	r2, [r7, #6]
 8000b80:	4603      	mov	r3, r0
 8000b82:	01db      	lsls	r3, r3, #7
 8000b84:	4413      	add	r3, r2
 8000b86:	b2c9      	uxtb	r1, r1
 8000b88:	4a04      	ldr	r2, [pc, #16]	@ (8000b9c <SSD1306_DrawPixel+0xb8>)
 8000b8a:	54d1      	strb	r1, [r2, r3]
 8000b8c:	e000      	b.n	8000b90 <SSD1306_DrawPixel+0xac>
		return;
 8000b8e:	bf00      	nop
	}
}
 8000b90:	370c      	adds	r7, #12
 8000b92:	46bd      	mov	sp, r7
 8000b94:	bc80      	pop	{r7}
 8000b96:	4770      	bx	lr
 8000b98:	20000a24 	.word	0x20000a24
 8000b9c:	20000624 	.word	0x20000624

08000ba0 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8000ba0:	b480      	push	{r7}
 8000ba2:	b083      	sub	sp, #12
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	460a      	mov	r2, r1
 8000baa:	80fb      	strh	r3, [r7, #6]
 8000bac:	4613      	mov	r3, r2
 8000bae:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8000bb0:	4a05      	ldr	r2, [pc, #20]	@ (8000bc8 <SSD1306_GotoXY+0x28>)
 8000bb2:	88fb      	ldrh	r3, [r7, #6]
 8000bb4:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 8000bb6:	4a04      	ldr	r2, [pc, #16]	@ (8000bc8 <SSD1306_GotoXY+0x28>)
 8000bb8:	88bb      	ldrh	r3, [r7, #4]
 8000bba:	8053      	strh	r3, [r2, #2]
}
 8000bbc:	bf00      	nop
 8000bbe:	370c      	adds	r7, #12
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	bc80      	pop	{r7}
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop
 8000bc8:	20000a24 	.word	0x20000a24

08000bcc <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b086      	sub	sp, #24
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	6039      	str	r1, [r7, #0]
 8000bd6:	71fb      	strb	r3, [r7, #7]
 8000bd8:	4613      	mov	r3, r2
 8000bda:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8000bdc:	4b39      	ldr	r3, [pc, #228]	@ (8000cc4 <SSD1306_Putc+0xf8>)
 8000bde:	881b      	ldrh	r3, [r3, #0]
 8000be0:	461a      	mov	r2, r3
 8000be2:	683b      	ldr	r3, [r7, #0]
 8000be4:	781b      	ldrb	r3, [r3, #0]
 8000be6:	4413      	add	r3, r2
	if (
 8000be8:	2b7f      	cmp	r3, #127	@ 0x7f
 8000bea:	dc07      	bgt.n	8000bfc <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8000bec:	4b35      	ldr	r3, [pc, #212]	@ (8000cc4 <SSD1306_Putc+0xf8>)
 8000bee:	885b      	ldrh	r3, [r3, #2]
 8000bf0:	461a      	mov	r2, r3
 8000bf2:	683b      	ldr	r3, [r7, #0]
 8000bf4:	785b      	ldrb	r3, [r3, #1]
 8000bf6:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8000bf8:	2b3f      	cmp	r3, #63	@ 0x3f
 8000bfa:	dd01      	ble.n	8000c00 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	e05d      	b.n	8000cbc <SSD1306_Putc+0xf0>
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8000c00:	2300      	movs	r3, #0
 8000c02:	617b      	str	r3, [r7, #20]
 8000c04:	e04b      	b.n	8000c9e <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8000c06:	683b      	ldr	r3, [r7, #0]
 8000c08:	685a      	ldr	r2, [r3, #4]
 8000c0a:	79fb      	ldrb	r3, [r7, #7]
 8000c0c:	3b20      	subs	r3, #32
 8000c0e:	6839      	ldr	r1, [r7, #0]
 8000c10:	7849      	ldrb	r1, [r1, #1]
 8000c12:	fb01 f303 	mul.w	r3, r1, r3
 8000c16:	4619      	mov	r1, r3
 8000c18:	697b      	ldr	r3, [r7, #20]
 8000c1a:	440b      	add	r3, r1
 8000c1c:	005b      	lsls	r3, r3, #1
 8000c1e:	4413      	add	r3, r2
 8000c20:	881b      	ldrh	r3, [r3, #0]
 8000c22:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8000c24:	2300      	movs	r3, #0
 8000c26:	613b      	str	r3, [r7, #16]
 8000c28:	e030      	b.n	8000c8c <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 8000c2a:	68fa      	ldr	r2, [r7, #12]
 8000c2c:	693b      	ldr	r3, [r7, #16]
 8000c2e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c32:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d010      	beq.n	8000c5c <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8000c3a:	4b22      	ldr	r3, [pc, #136]	@ (8000cc4 <SSD1306_Putc+0xf8>)
 8000c3c:	881a      	ldrh	r2, [r3, #0]
 8000c3e:	693b      	ldr	r3, [r7, #16]
 8000c40:	b29b      	uxth	r3, r3
 8000c42:	4413      	add	r3, r2
 8000c44:	b298      	uxth	r0, r3
 8000c46:	4b1f      	ldr	r3, [pc, #124]	@ (8000cc4 <SSD1306_Putc+0xf8>)
 8000c48:	885a      	ldrh	r2, [r3, #2]
 8000c4a:	697b      	ldr	r3, [r7, #20]
 8000c4c:	b29b      	uxth	r3, r3
 8000c4e:	4413      	add	r3, r2
 8000c50:	b29b      	uxth	r3, r3
 8000c52:	79ba      	ldrb	r2, [r7, #6]
 8000c54:	4619      	mov	r1, r3
 8000c56:	f7ff ff45 	bl	8000ae4 <SSD1306_DrawPixel>
 8000c5a:	e014      	b.n	8000c86 <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8000c5c:	4b19      	ldr	r3, [pc, #100]	@ (8000cc4 <SSD1306_Putc+0xf8>)
 8000c5e:	881a      	ldrh	r2, [r3, #0]
 8000c60:	693b      	ldr	r3, [r7, #16]
 8000c62:	b29b      	uxth	r3, r3
 8000c64:	4413      	add	r3, r2
 8000c66:	b298      	uxth	r0, r3
 8000c68:	4b16      	ldr	r3, [pc, #88]	@ (8000cc4 <SSD1306_Putc+0xf8>)
 8000c6a:	885a      	ldrh	r2, [r3, #2]
 8000c6c:	697b      	ldr	r3, [r7, #20]
 8000c6e:	b29b      	uxth	r3, r3
 8000c70:	4413      	add	r3, r2
 8000c72:	b299      	uxth	r1, r3
 8000c74:	79bb      	ldrb	r3, [r7, #6]
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	bf0c      	ite	eq
 8000c7a:	2301      	moveq	r3, #1
 8000c7c:	2300      	movne	r3, #0
 8000c7e:	b2db      	uxtb	r3, r3
 8000c80:	461a      	mov	r2, r3
 8000c82:	f7ff ff2f 	bl	8000ae4 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8000c86:	693b      	ldr	r3, [r7, #16]
 8000c88:	3301      	adds	r3, #1
 8000c8a:	613b      	str	r3, [r7, #16]
 8000c8c:	683b      	ldr	r3, [r7, #0]
 8000c8e:	781b      	ldrb	r3, [r3, #0]
 8000c90:	461a      	mov	r2, r3
 8000c92:	693b      	ldr	r3, [r7, #16]
 8000c94:	4293      	cmp	r3, r2
 8000c96:	d3c8      	bcc.n	8000c2a <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8000c98:	697b      	ldr	r3, [r7, #20]
 8000c9a:	3301      	adds	r3, #1
 8000c9c:	617b      	str	r3, [r7, #20]
 8000c9e:	683b      	ldr	r3, [r7, #0]
 8000ca0:	785b      	ldrb	r3, [r3, #1]
 8000ca2:	461a      	mov	r2, r3
 8000ca4:	697b      	ldr	r3, [r7, #20]
 8000ca6:	4293      	cmp	r3, r2
 8000ca8:	d3ad      	bcc.n	8000c06 <SSD1306_Putc+0x3a>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 8000caa:	4b06      	ldr	r3, [pc, #24]	@ (8000cc4 <SSD1306_Putc+0xf8>)
 8000cac:	881b      	ldrh	r3, [r3, #0]
 8000cae:	683a      	ldr	r2, [r7, #0]
 8000cb0:	7812      	ldrb	r2, [r2, #0]
 8000cb2:	4413      	add	r3, r2
 8000cb4:	b29a      	uxth	r2, r3
 8000cb6:	4b03      	ldr	r3, [pc, #12]	@ (8000cc4 <SSD1306_Putc+0xf8>)
 8000cb8:	801a      	strh	r2, [r3, #0]
	
	/* Return character written */
	return ch;
 8000cba:	79fb      	ldrb	r3, [r7, #7]
}
 8000cbc:	4618      	mov	r0, r3
 8000cbe:	3718      	adds	r7, #24
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	bd80      	pop	{r7, pc}
 8000cc4:	20000a24 	.word	0x20000a24

08000cc8 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b084      	sub	sp, #16
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	60f8      	str	r0, [r7, #12]
 8000cd0:	60b9      	str	r1, [r7, #8]
 8000cd2:	4613      	mov	r3, r2
 8000cd4:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 8000cd6:	e012      	b.n	8000cfe <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8000cd8:	68fb      	ldr	r3, [r7, #12]
 8000cda:	781b      	ldrb	r3, [r3, #0]
 8000cdc:	79fa      	ldrb	r2, [r7, #7]
 8000cde:	68b9      	ldr	r1, [r7, #8]
 8000ce0:	4618      	mov	r0, r3
 8000ce2:	f7ff ff73 	bl	8000bcc <SSD1306_Putc>
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	461a      	mov	r2, r3
 8000cea:	68fb      	ldr	r3, [r7, #12]
 8000cec:	781b      	ldrb	r3, [r3, #0]
 8000cee:	429a      	cmp	r2, r3
 8000cf0:	d002      	beq.n	8000cf8 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 8000cf2:	68fb      	ldr	r3, [r7, #12]
 8000cf4:	781b      	ldrb	r3, [r3, #0]
 8000cf6:	e008      	b.n	8000d0a <SSD1306_Puts+0x42>
		}
		
		/* Increase string pointer */
		str++;
 8000cf8:	68fb      	ldr	r3, [r7, #12]
 8000cfa:	3301      	adds	r3, #1
 8000cfc:	60fb      	str	r3, [r7, #12]
	while (*str) {
 8000cfe:	68fb      	ldr	r3, [r7, #12]
 8000d00:	781b      	ldrb	r3, [r3, #0]
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d1e8      	bne.n	8000cd8 <SSD1306_Puts+0x10>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
 8000d06:	68fb      	ldr	r3, [r7, #12]
 8000d08:	781b      	ldrb	r3, [r3, #0]
}
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	3710      	adds	r7, #16
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bd80      	pop	{r7, pc}

08000d12 <SSD1306_DrawCircle>:
		x += xinc2;
		y += yinc2;
	}
}

void SSD1306_DrawCircle(int16_t x0, int16_t y0, int16_t r, SSD1306_COLOR_t c) {
 8000d12:	b590      	push	{r4, r7, lr}
 8000d14:	b087      	sub	sp, #28
 8000d16:	af00      	add	r7, sp, #0
 8000d18:	4604      	mov	r4, r0
 8000d1a:	4608      	mov	r0, r1
 8000d1c:	4611      	mov	r1, r2
 8000d1e:	461a      	mov	r2, r3
 8000d20:	4623      	mov	r3, r4
 8000d22:	80fb      	strh	r3, [r7, #6]
 8000d24:	4603      	mov	r3, r0
 8000d26:	80bb      	strh	r3, [r7, #4]
 8000d28:	460b      	mov	r3, r1
 8000d2a:	807b      	strh	r3, [r7, #2]
 8000d2c:	4613      	mov	r3, r2
 8000d2e:	707b      	strb	r3, [r7, #1]
	int16_t f = 1 - r;
 8000d30:	887b      	ldrh	r3, [r7, #2]
 8000d32:	f1c3 0301 	rsb	r3, r3, #1
 8000d36:	b29b      	uxth	r3, r3
 8000d38:	82fb      	strh	r3, [r7, #22]
	int16_t ddF_x = 1;
 8000d3a:	2301      	movs	r3, #1
 8000d3c:	82bb      	strh	r3, [r7, #20]
	int16_t ddF_y = -2 * r;
 8000d3e:	887b      	ldrh	r3, [r7, #2]
 8000d40:	461a      	mov	r2, r3
 8000d42:	03d2      	lsls	r2, r2, #15
 8000d44:	1ad3      	subs	r3, r2, r3
 8000d46:	005b      	lsls	r3, r3, #1
 8000d48:	b29b      	uxth	r3, r3
 8000d4a:	827b      	strh	r3, [r7, #18]
	int16_t x = 0;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	823b      	strh	r3, [r7, #16]
	int16_t y = r;
 8000d50:	887b      	ldrh	r3, [r7, #2]
 8000d52:	81fb      	strh	r3, [r7, #14]

    SSD1306_DrawPixel(x0, y0 + r, c);
 8000d54:	88f8      	ldrh	r0, [r7, #6]
 8000d56:	88ba      	ldrh	r2, [r7, #4]
 8000d58:	887b      	ldrh	r3, [r7, #2]
 8000d5a:	4413      	add	r3, r2
 8000d5c:	b29b      	uxth	r3, r3
 8000d5e:	787a      	ldrb	r2, [r7, #1]
 8000d60:	4619      	mov	r1, r3
 8000d62:	f7ff febf 	bl	8000ae4 <SSD1306_DrawPixel>
    SSD1306_DrawPixel(x0, y0 - r, c);
 8000d66:	88f8      	ldrh	r0, [r7, #6]
 8000d68:	88ba      	ldrh	r2, [r7, #4]
 8000d6a:	887b      	ldrh	r3, [r7, #2]
 8000d6c:	1ad3      	subs	r3, r2, r3
 8000d6e:	b29b      	uxth	r3, r3
 8000d70:	787a      	ldrb	r2, [r7, #1]
 8000d72:	4619      	mov	r1, r3
 8000d74:	f7ff feb6 	bl	8000ae4 <SSD1306_DrawPixel>
    SSD1306_DrawPixel(x0 + r, y0, c);
 8000d78:	88fa      	ldrh	r2, [r7, #6]
 8000d7a:	887b      	ldrh	r3, [r7, #2]
 8000d7c:	4413      	add	r3, r2
 8000d7e:	b29b      	uxth	r3, r3
 8000d80:	88b9      	ldrh	r1, [r7, #4]
 8000d82:	787a      	ldrb	r2, [r7, #1]
 8000d84:	4618      	mov	r0, r3
 8000d86:	f7ff fead 	bl	8000ae4 <SSD1306_DrawPixel>
    SSD1306_DrawPixel(x0 - r, y0, c);
 8000d8a:	88fa      	ldrh	r2, [r7, #6]
 8000d8c:	887b      	ldrh	r3, [r7, #2]
 8000d8e:	1ad3      	subs	r3, r2, r3
 8000d90:	b29b      	uxth	r3, r3
 8000d92:	88b9      	ldrh	r1, [r7, #4]
 8000d94:	787a      	ldrb	r2, [r7, #1]
 8000d96:	4618      	mov	r0, r3
 8000d98:	f7ff fea4 	bl	8000ae4 <SSD1306_DrawPixel>

    while (x < y) {
 8000d9c:	e081      	b.n	8000ea2 <SSD1306_DrawCircle+0x190>
        if (f >= 0) {
 8000d9e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	db0e      	blt.n	8000dc4 <SSD1306_DrawCircle+0xb2>
            y--;
 8000da6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000daa:	b29b      	uxth	r3, r3
 8000dac:	3b01      	subs	r3, #1
 8000dae:	b29b      	uxth	r3, r3
 8000db0:	81fb      	strh	r3, [r7, #14]
            ddF_y += 2;
 8000db2:	8a7b      	ldrh	r3, [r7, #18]
 8000db4:	3302      	adds	r3, #2
 8000db6:	b29b      	uxth	r3, r3
 8000db8:	827b      	strh	r3, [r7, #18]
            f += ddF_y;
 8000dba:	8afa      	ldrh	r2, [r7, #22]
 8000dbc:	8a7b      	ldrh	r3, [r7, #18]
 8000dbe:	4413      	add	r3, r2
 8000dc0:	b29b      	uxth	r3, r3
 8000dc2:	82fb      	strh	r3, [r7, #22]
        }
        x++;
 8000dc4:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8000dc8:	b29b      	uxth	r3, r3
 8000dca:	3301      	adds	r3, #1
 8000dcc:	b29b      	uxth	r3, r3
 8000dce:	823b      	strh	r3, [r7, #16]
        ddF_x += 2;
 8000dd0:	8abb      	ldrh	r3, [r7, #20]
 8000dd2:	3302      	adds	r3, #2
 8000dd4:	b29b      	uxth	r3, r3
 8000dd6:	82bb      	strh	r3, [r7, #20]
        f += ddF_x;
 8000dd8:	8afa      	ldrh	r2, [r7, #22]
 8000dda:	8abb      	ldrh	r3, [r7, #20]
 8000ddc:	4413      	add	r3, r2
 8000dde:	b29b      	uxth	r3, r3
 8000de0:	82fb      	strh	r3, [r7, #22]

        SSD1306_DrawPixel(x0 + x, y0 + y, c);
 8000de2:	88fa      	ldrh	r2, [r7, #6]
 8000de4:	8a3b      	ldrh	r3, [r7, #16]
 8000de6:	4413      	add	r3, r2
 8000de8:	b298      	uxth	r0, r3
 8000dea:	88ba      	ldrh	r2, [r7, #4]
 8000dec:	89fb      	ldrh	r3, [r7, #14]
 8000dee:	4413      	add	r3, r2
 8000df0:	b29b      	uxth	r3, r3
 8000df2:	787a      	ldrb	r2, [r7, #1]
 8000df4:	4619      	mov	r1, r3
 8000df6:	f7ff fe75 	bl	8000ae4 <SSD1306_DrawPixel>
        SSD1306_DrawPixel(x0 - x, y0 + y, c);
 8000dfa:	88fa      	ldrh	r2, [r7, #6]
 8000dfc:	8a3b      	ldrh	r3, [r7, #16]
 8000dfe:	1ad3      	subs	r3, r2, r3
 8000e00:	b298      	uxth	r0, r3
 8000e02:	88ba      	ldrh	r2, [r7, #4]
 8000e04:	89fb      	ldrh	r3, [r7, #14]
 8000e06:	4413      	add	r3, r2
 8000e08:	b29b      	uxth	r3, r3
 8000e0a:	787a      	ldrb	r2, [r7, #1]
 8000e0c:	4619      	mov	r1, r3
 8000e0e:	f7ff fe69 	bl	8000ae4 <SSD1306_DrawPixel>
        SSD1306_DrawPixel(x0 + x, y0 - y, c);
 8000e12:	88fa      	ldrh	r2, [r7, #6]
 8000e14:	8a3b      	ldrh	r3, [r7, #16]
 8000e16:	4413      	add	r3, r2
 8000e18:	b298      	uxth	r0, r3
 8000e1a:	88ba      	ldrh	r2, [r7, #4]
 8000e1c:	89fb      	ldrh	r3, [r7, #14]
 8000e1e:	1ad3      	subs	r3, r2, r3
 8000e20:	b29b      	uxth	r3, r3
 8000e22:	787a      	ldrb	r2, [r7, #1]
 8000e24:	4619      	mov	r1, r3
 8000e26:	f7ff fe5d 	bl	8000ae4 <SSD1306_DrawPixel>
        SSD1306_DrawPixel(x0 - x, y0 - y, c);
 8000e2a:	88fa      	ldrh	r2, [r7, #6]
 8000e2c:	8a3b      	ldrh	r3, [r7, #16]
 8000e2e:	1ad3      	subs	r3, r2, r3
 8000e30:	b298      	uxth	r0, r3
 8000e32:	88ba      	ldrh	r2, [r7, #4]
 8000e34:	89fb      	ldrh	r3, [r7, #14]
 8000e36:	1ad3      	subs	r3, r2, r3
 8000e38:	b29b      	uxth	r3, r3
 8000e3a:	787a      	ldrb	r2, [r7, #1]
 8000e3c:	4619      	mov	r1, r3
 8000e3e:	f7ff fe51 	bl	8000ae4 <SSD1306_DrawPixel>

        SSD1306_DrawPixel(x0 + y, y0 + x, c);
 8000e42:	88fa      	ldrh	r2, [r7, #6]
 8000e44:	89fb      	ldrh	r3, [r7, #14]
 8000e46:	4413      	add	r3, r2
 8000e48:	b298      	uxth	r0, r3
 8000e4a:	88ba      	ldrh	r2, [r7, #4]
 8000e4c:	8a3b      	ldrh	r3, [r7, #16]
 8000e4e:	4413      	add	r3, r2
 8000e50:	b29b      	uxth	r3, r3
 8000e52:	787a      	ldrb	r2, [r7, #1]
 8000e54:	4619      	mov	r1, r3
 8000e56:	f7ff fe45 	bl	8000ae4 <SSD1306_DrawPixel>
        SSD1306_DrawPixel(x0 - y, y0 + x, c);
 8000e5a:	88fa      	ldrh	r2, [r7, #6]
 8000e5c:	89fb      	ldrh	r3, [r7, #14]
 8000e5e:	1ad3      	subs	r3, r2, r3
 8000e60:	b298      	uxth	r0, r3
 8000e62:	88ba      	ldrh	r2, [r7, #4]
 8000e64:	8a3b      	ldrh	r3, [r7, #16]
 8000e66:	4413      	add	r3, r2
 8000e68:	b29b      	uxth	r3, r3
 8000e6a:	787a      	ldrb	r2, [r7, #1]
 8000e6c:	4619      	mov	r1, r3
 8000e6e:	f7ff fe39 	bl	8000ae4 <SSD1306_DrawPixel>
        SSD1306_DrawPixel(x0 + y, y0 - x, c);
 8000e72:	88fa      	ldrh	r2, [r7, #6]
 8000e74:	89fb      	ldrh	r3, [r7, #14]
 8000e76:	4413      	add	r3, r2
 8000e78:	b298      	uxth	r0, r3
 8000e7a:	88ba      	ldrh	r2, [r7, #4]
 8000e7c:	8a3b      	ldrh	r3, [r7, #16]
 8000e7e:	1ad3      	subs	r3, r2, r3
 8000e80:	b29b      	uxth	r3, r3
 8000e82:	787a      	ldrb	r2, [r7, #1]
 8000e84:	4619      	mov	r1, r3
 8000e86:	f7ff fe2d 	bl	8000ae4 <SSD1306_DrawPixel>
        SSD1306_DrawPixel(x0 - y, y0 - x, c);
 8000e8a:	88fa      	ldrh	r2, [r7, #6]
 8000e8c:	89fb      	ldrh	r3, [r7, #14]
 8000e8e:	1ad3      	subs	r3, r2, r3
 8000e90:	b298      	uxth	r0, r3
 8000e92:	88ba      	ldrh	r2, [r7, #4]
 8000e94:	8a3b      	ldrh	r3, [r7, #16]
 8000e96:	1ad3      	subs	r3, r2, r3
 8000e98:	b29b      	uxth	r3, r3
 8000e9a:	787a      	ldrb	r2, [r7, #1]
 8000e9c:	4619      	mov	r1, r3
 8000e9e:	f7ff fe21 	bl	8000ae4 <SSD1306_DrawPixel>
    while (x < y) {
 8000ea2:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8000ea6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000eaa:	429a      	cmp	r2, r3
 8000eac:	f6ff af77 	blt.w	8000d9e <SSD1306_DrawCircle+0x8c>
    }
}
 8000eb0:	bf00      	nop
 8000eb2:	bf00      	nop
 8000eb4:	371c      	adds	r7, #28
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	bd90      	pop	{r4, r7, pc}

08000eba <ssd1306_I2C_WriteMulti>:





void ssd1306_I2C_WriteMulti(I2C_TypeDef* I2Cx, uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8000eba:	b580      	push	{r7, lr}
 8000ebc:	b086      	sub	sp, #24
 8000ebe:	af00      	add	r7, sp, #0
 8000ec0:	60f8      	str	r0, [r7, #12]
 8000ec2:	607b      	str	r3, [r7, #4]
 8000ec4:	460b      	mov	r3, r1
 8000ec6:	72fb      	strb	r3, [r7, #11]
 8000ec8:	4613      	mov	r3, r2
 8000eca:	72bb      	strb	r3, [r7, #10]
	uint8_t i;
	ssd1306_I2C_Start(I2Cx, address, I2C_TRANSMITTER_MODE, I2C_ACK_DISABLE);
 8000ecc:	7af9      	ldrb	r1, [r7, #11]
 8000ece:	2300      	movs	r3, #0
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	68f8      	ldr	r0, [r7, #12]
 8000ed4:	f000 f820 	bl	8000f18 <ssd1306_I2C_Start>
	ssd1306_I2C_WriteData(I2Cx, reg);
 8000ed8:	7abb      	ldrb	r3, [r7, #10]
 8000eda:	4619      	mov	r1, r3
 8000edc:	68f8      	ldr	r0, [r7, #12]
 8000ede:	f000 f885 	bl	8000fec <ssd1306_I2C_WriteData>
	for (i = 0; i < count; i++) {
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	75fb      	strb	r3, [r7, #23]
 8000ee6:	e00a      	b.n	8000efe <ssd1306_I2C_WriteMulti+0x44>
		ssd1306_I2C_WriteData(I2Cx, data[i]);
 8000ee8:	7dfb      	ldrb	r3, [r7, #23]
 8000eea:	687a      	ldr	r2, [r7, #4]
 8000eec:	4413      	add	r3, r2
 8000eee:	781b      	ldrb	r3, [r3, #0]
 8000ef0:	4619      	mov	r1, r3
 8000ef2:	68f8      	ldr	r0, [r7, #12]
 8000ef4:	f000 f87a 	bl	8000fec <ssd1306_I2C_WriteData>
	for (i = 0; i < count; i++) {
 8000ef8:	7dfb      	ldrb	r3, [r7, #23]
 8000efa:	3301      	adds	r3, #1
 8000efc:	75fb      	strb	r3, [r7, #23]
 8000efe:	7dfb      	ldrb	r3, [r7, #23]
 8000f00:	b29b      	uxth	r3, r3
 8000f02:	8c3a      	ldrh	r2, [r7, #32]
 8000f04:	429a      	cmp	r2, r3
 8000f06:	d8ef      	bhi.n	8000ee8 <ssd1306_I2C_WriteMulti+0x2e>
	}
	ssd1306_I2C_Stop(I2Cx);
 8000f08:	68f8      	ldr	r0, [r7, #12]
 8000f0a:	f000 f8b7 	bl	800107c <ssd1306_I2C_Stop>
}
 8000f0e:	bf00      	nop
 8000f10:	3718      	adds	r7, #24
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bd80      	pop	{r7, pc}
	...

08000f18 <ssd1306_I2C_Start>:




/* Private functions */
int16_t ssd1306_I2C_Start(I2C_TypeDef* I2Cx, uint8_t address, uint8_t direction, uint8_t ack) {
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b082      	sub	sp, #8
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
 8000f20:	4608      	mov	r0, r1
 8000f22:	4611      	mov	r1, r2
 8000f24:	461a      	mov	r2, r3
 8000f26:	4603      	mov	r3, r0
 8000f28:	70fb      	strb	r3, [r7, #3]
 8000f2a:	460b      	mov	r3, r1
 8000f2c:	70bb      	strb	r3, [r7, #2]
 8000f2e:	4613      	mov	r3, r2
 8000f30:	707b      	strb	r3, [r7, #1]
	/* Generate I2C start pulse */
	I2Cx->CR1 |= I2C_CR1_START;
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	601a      	str	r2, [r3, #0]
	
	/* Wait till I2C is busy */
	ssd1306_I2C_Timeout = ssd1306_I2C_TIMEOUT;
 8000f3e:	4b2a      	ldr	r3, [pc, #168]	@ (8000fe8 <ssd1306_I2C_Start+0xd0>)
 8000f40:	f644 6220 	movw	r2, #20000	@ 0x4e20
 8000f44:	601a      	str	r2, [r3, #0]
	while (!(I2Cx->SR1 & I2C_SR1_SB)) {
 8000f46:	e00a      	b.n	8000f5e <ssd1306_I2C_Start+0x46>
		if (--ssd1306_I2C_Timeout == 0x00) {
 8000f48:	4b27      	ldr	r3, [pc, #156]	@ (8000fe8 <ssd1306_I2C_Start+0xd0>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	3b01      	subs	r3, #1
 8000f4e:	4a26      	ldr	r2, [pc, #152]	@ (8000fe8 <ssd1306_I2C_Start+0xd0>)
 8000f50:	6013      	str	r3, [r2, #0]
 8000f52:	4b25      	ldr	r3, [pc, #148]	@ (8000fe8 <ssd1306_I2C_Start+0xd0>)
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d101      	bne.n	8000f5e <ssd1306_I2C_Start+0x46>
			return 1;
 8000f5a:	2301      	movs	r3, #1
 8000f5c:	e040      	b.n	8000fe0 <ssd1306_I2C_Start+0xc8>
	while (!(I2Cx->SR1 & I2C_SR1_SB)) {
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	695b      	ldr	r3, [r3, #20]
 8000f62:	f003 0301 	and.w	r3, r3, #1
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d0ee      	beq.n	8000f48 <ssd1306_I2C_Start+0x30>
		}
	}

	/* Enable ack if we select it */
	if (ack) {
 8000f6a:	787b      	ldrb	r3, [r7, #1]
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d005      	beq.n	8000f7c <ssd1306_I2C_Start+0x64>
		I2Cx->CR1 |= I2C_CR1_ACK;
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	601a      	str	r2, [r3, #0]
	}

	/* Send write/read bit */
	if (direction == I2C_TRANSMITTER_MODE) {
 8000f7c:	78bb      	ldrb	r3, [r7, #2]
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d11a      	bne.n	8000fb8 <ssd1306_I2C_Start+0xa0>
		/* Send address with zero last bit */
		I2Cx->DR = address & ~I2C_OAR1_ADD0;
 8000f82:	78fb      	ldrb	r3, [r7, #3]
 8000f84:	f023 0201 	bic.w	r2, r3, #1
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	611a      	str	r2, [r3, #16]
		
		/* Wait till finished */
		ssd1306_I2C_Timeout = ssd1306_I2C_TIMEOUT;
 8000f8c:	4b16      	ldr	r3, [pc, #88]	@ (8000fe8 <ssd1306_I2C_Start+0xd0>)
 8000f8e:	f644 6220 	movw	r2, #20000	@ 0x4e20
 8000f92:	601a      	str	r2, [r3, #0]
		while (!(I2Cx->SR1 & I2C_SR1_ADDR)) {
 8000f94:	e00a      	b.n	8000fac <ssd1306_I2C_Start+0x94>
			if (--ssd1306_I2C_Timeout == 0x00) {
 8000f96:	4b14      	ldr	r3, [pc, #80]	@ (8000fe8 <ssd1306_I2C_Start+0xd0>)
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	3b01      	subs	r3, #1
 8000f9c:	4a12      	ldr	r2, [pc, #72]	@ (8000fe8 <ssd1306_I2C_Start+0xd0>)
 8000f9e:	6013      	str	r3, [r2, #0]
 8000fa0:	4b11      	ldr	r3, [pc, #68]	@ (8000fe8 <ssd1306_I2C_Start+0xd0>)
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d101      	bne.n	8000fac <ssd1306_I2C_Start+0x94>
				return 1;
 8000fa8:	2301      	movs	r3, #1
 8000faa:	e019      	b.n	8000fe0 <ssd1306_I2C_Start+0xc8>
		while (!(I2Cx->SR1 & I2C_SR1_ADDR)) {
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	695b      	ldr	r3, [r3, #20]
 8000fb0:	f003 0302 	and.w	r3, r3, #2
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d0ee      	beq.n	8000f96 <ssd1306_I2C_Start+0x7e>
			}
		}
	}
	if (direction == I2C_RECEIVER_MODE) {
 8000fb8:	78bb      	ldrb	r3, [r7, #2]
 8000fba:	2b01      	cmp	r3, #1
 8000fbc:	d10d      	bne.n	8000fda <ssd1306_I2C_Start+0xc2>
		/* Send address with 1 last bit */
		I2Cx->DR = address | I2C_OAR1_ADD0;
 8000fbe:	78fb      	ldrb	r3, [r7, #3]
 8000fc0:	f043 0301 	orr.w	r3, r3, #1
 8000fc4:	b2db      	uxtb	r3, r3
 8000fc6:	461a      	mov	r2, r3
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	611a      	str	r2, [r3, #16]
		
		/* Wait till finished */
		ssd1306_I2C_Timeout = ssd1306_I2C_TIMEOUT;
 8000fcc:	4b06      	ldr	r3, [pc, #24]	@ (8000fe8 <ssd1306_I2C_Start+0xd0>)
 8000fce:	f644 6220 	movw	r2, #20000	@ 0x4e20
 8000fd2:	601a      	str	r2, [r3, #0]

		HAL_Delay(1);
 8000fd4:	2001      	movs	r0, #1
 8000fd6:	f000 fb31 	bl	800163c <HAL_Delay>
			}
		}*/
	}
	
	/* Read status register to clear ADDR flag */
	I2Cx->SR2;
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	699b      	ldr	r3, [r3, #24]
	
	/* Return 0, everything ok */
	return 0;
 8000fde:	2300      	movs	r3, #0
}
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	3708      	adds	r7, #8
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	bd80      	pop	{r7, pc}
 8000fe8:	20000a2c 	.word	0x20000a2c

08000fec <ssd1306_I2C_WriteData>:

void ssd1306_I2C_WriteData(I2C_TypeDef* I2Cx, uint8_t data) {
 8000fec:	b480      	push	{r7}
 8000fee:	b083      	sub	sp, #12
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
 8000ff4:	460b      	mov	r3, r1
 8000ff6:	70fb      	strb	r3, [r7, #3]
	/* Wait till I2C is not busy anymore */
	ssd1306_I2C_Timeout = ssd1306_I2C_TIMEOUT;
 8000ff8:	4b0d      	ldr	r3, [pc, #52]	@ (8001030 <ssd1306_I2C_WriteData+0x44>)
 8000ffa:	f644 6220 	movw	r2, #20000	@ 0x4e20
 8000ffe:	601a      	str	r2, [r3, #0]
	while (!(I2Cx->SR1 & I2C_SR1_TXE) && ssd1306_I2C_Timeout) {
 8001000:	e004      	b.n	800100c <ssd1306_I2C_WriteData+0x20>
		ssd1306_I2C_Timeout--;
 8001002:	4b0b      	ldr	r3, [pc, #44]	@ (8001030 <ssd1306_I2C_WriteData+0x44>)
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	3b01      	subs	r3, #1
 8001008:	4a09      	ldr	r2, [pc, #36]	@ (8001030 <ssd1306_I2C_WriteData+0x44>)
 800100a:	6013      	str	r3, [r2, #0]
	while (!(I2Cx->SR1 & I2C_SR1_TXE) && ssd1306_I2C_Timeout) {
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	695b      	ldr	r3, [r3, #20]
 8001010:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001014:	2b00      	cmp	r3, #0
 8001016:	d103      	bne.n	8001020 <ssd1306_I2C_WriteData+0x34>
 8001018:	4b05      	ldr	r3, [pc, #20]	@ (8001030 <ssd1306_I2C_WriteData+0x44>)
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	2b00      	cmp	r3, #0
 800101e:	d1f0      	bne.n	8001002 <ssd1306_I2C_WriteData+0x16>
	}

	/* Send I2C data */
	I2Cx->DR = data;
 8001020:	78fa      	ldrb	r2, [r7, #3]
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	611a      	str	r2, [r3, #16]
}
 8001026:	bf00      	nop
 8001028:	370c      	adds	r7, #12
 800102a:	46bd      	mov	sp, r7
 800102c:	bc80      	pop	{r7}
 800102e:	4770      	bx	lr
 8001030:	20000a2c 	.word	0x20000a2c

08001034 <ssd1306_I2C_Write>:

void ssd1306_I2C_Write(I2C_TypeDef* I2Cx, uint8_t address, uint8_t reg, uint8_t data) {
 8001034:	b580      	push	{r7, lr}
 8001036:	b082      	sub	sp, #8
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
 800103c:	4608      	mov	r0, r1
 800103e:	4611      	mov	r1, r2
 8001040:	461a      	mov	r2, r3
 8001042:	4603      	mov	r3, r0
 8001044:	70fb      	strb	r3, [r7, #3]
 8001046:	460b      	mov	r3, r1
 8001048:	70bb      	strb	r3, [r7, #2]
 800104a:	4613      	mov	r3, r2
 800104c:	707b      	strb	r3, [r7, #1]
	//HAL_UART_Transmit(&huart1, (uint8_t*) "I2C_Write\r\n", 11, 0xFFFF);
	ssd1306_I2C_Start(I2Cx, address, I2C_TRANSMITTER_MODE, I2C_ACK_DISABLE);
 800104e:	78f9      	ldrb	r1, [r7, #3]
 8001050:	2300      	movs	r3, #0
 8001052:	2200      	movs	r2, #0
 8001054:	6878      	ldr	r0, [r7, #4]
 8001056:	f7ff ff5f 	bl	8000f18 <ssd1306_I2C_Start>
	//HAL_UART_Transmit(&huart1, (uint8_t*) "I2C_Write2\r\n", 12, 0xFFFF);
	ssd1306_I2C_WriteData(I2Cx, reg);
 800105a:	78bb      	ldrb	r3, [r7, #2]
 800105c:	4619      	mov	r1, r3
 800105e:	6878      	ldr	r0, [r7, #4]
 8001060:	f7ff ffc4 	bl	8000fec <ssd1306_I2C_WriteData>
	//HAL_UART_Transmit(&huart1, (uint8_t*) "I2C_Write3\r\n", 12, 0xFFFF);
	ssd1306_I2C_WriteData(I2Cx, data);
 8001064:	787b      	ldrb	r3, [r7, #1]
 8001066:	4619      	mov	r1, r3
 8001068:	6878      	ldr	r0, [r7, #4]
 800106a:	f7ff ffbf 	bl	8000fec <ssd1306_I2C_WriteData>
	//HAL_UART_Transmit(&huart1, (uint8_t*) "I2C_Write4\r\n", 12, 0xFFFF);
	ssd1306_I2C_Stop(I2Cx);
 800106e:	6878      	ldr	r0, [r7, #4]
 8001070:	f000 f804 	bl	800107c <ssd1306_I2C_Stop>
	//HAL_UART_Transmit(&huart1, (uint8_t*) "I2C_Write5\r\n", 12, 0xFFFF);
}
 8001074:	bf00      	nop
 8001076:	3708      	adds	r7, #8
 8001078:	46bd      	mov	sp, r7
 800107a:	bd80      	pop	{r7, pc}

0800107c <ssd1306_I2C_Stop>:


uint8_t ssd1306_I2C_Stop(I2C_TypeDef* I2Cx) {
 800107c:	b480      	push	{r7}
 800107e:	b083      	sub	sp, #12
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
	/* Wait till transmitter not empty */
	ssd1306_I2C_Timeout = ssd1306_I2C_TIMEOUT;
 8001084:	4b13      	ldr	r3, [pc, #76]	@ (80010d4 <ssd1306_I2C_Stop+0x58>)
 8001086:	f644 6220 	movw	r2, #20000	@ 0x4e20
 800108a:	601a      	str	r2, [r3, #0]
	while (((!(I2Cx->SR1 & I2C_SR1_TXE)) || (!(I2Cx->SR1 & I2C_SR1_BTF)))) {
 800108c:	e00a      	b.n	80010a4 <ssd1306_I2C_Stop+0x28>
		if (--ssd1306_I2C_Timeout == 0x00) {
 800108e:	4b11      	ldr	r3, [pc, #68]	@ (80010d4 <ssd1306_I2C_Stop+0x58>)
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	3b01      	subs	r3, #1
 8001094:	4a0f      	ldr	r2, [pc, #60]	@ (80010d4 <ssd1306_I2C_Stop+0x58>)
 8001096:	6013      	str	r3, [r2, #0]
 8001098:	4b0e      	ldr	r3, [pc, #56]	@ (80010d4 <ssd1306_I2C_Stop+0x58>)
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	2b00      	cmp	r3, #0
 800109e:	d101      	bne.n	80010a4 <ssd1306_I2C_Stop+0x28>
			return 1;
 80010a0:	2301      	movs	r3, #1
 80010a2:	e012      	b.n	80010ca <ssd1306_I2C_Stop+0x4e>
	while (((!(I2Cx->SR1 & I2C_SR1_TXE)) || (!(I2Cx->SR1 & I2C_SR1_BTF)))) {
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	695b      	ldr	r3, [r3, #20]
 80010a8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d0ee      	beq.n	800108e <ssd1306_I2C_Stop+0x12>
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	695b      	ldr	r3, [r3, #20]
 80010b4:	f003 0304 	and.w	r3, r3, #4
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d0e8      	beq.n	800108e <ssd1306_I2C_Stop+0x12>
		}
	}
	
	/* Generate stop */
	I2Cx->CR1 |= I2C_CR1_STOP;
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	601a      	str	r2, [r3, #0]
	
	/* Return 0, everything ok */
	return 0;
 80010c8:	2300      	movs	r3, #0
}
 80010ca:	4618      	mov	r0, r3
 80010cc:	370c      	adds	r7, #12
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bc80      	pop	{r7}
 80010d2:	4770      	bx	lr
 80010d4:	20000a2c 	.word	0x20000a2c

080010d8 <ssd1306_I2C_IsDeviceConnected>:

uint8_t ssd1306_I2C_IsDeviceConnected(I2C_TypeDef* I2Cx, uint8_t address) {
 80010d8:	b580      	push	{r7, lr}
 80010da:	b084      	sub	sp, #16
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
 80010e0:	460b      	mov	r3, r1
 80010e2:	70fb      	strb	r3, [r7, #3]
	uint8_t connected = 0;
 80010e4:	2300      	movs	r3, #0
 80010e6:	73fb      	strb	r3, [r7, #15]
	/* Try to start, function will return 0 in case device will send ACK */
	if (!ssd1306_I2C_Start(I2Cx, address, I2C_TRANSMITTER_MODE, I2C_ACK_ENABLE)) {
 80010e8:	78f9      	ldrb	r1, [r7, #3]
 80010ea:	2301      	movs	r3, #1
 80010ec:	2200      	movs	r2, #0
 80010ee:	6878      	ldr	r0, [r7, #4]
 80010f0:	f7ff ff12 	bl	8000f18 <ssd1306_I2C_Start>
 80010f4:	4603      	mov	r3, r0
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d101      	bne.n	80010fe <ssd1306_I2C_IsDeviceConnected+0x26>
		connected = 1;
 80010fa:	2301      	movs	r3, #1
 80010fc:	73fb      	strb	r3, [r7, #15]
	}

	/* STOP I2C */
	ssd1306_I2C_Stop(I2Cx);
 80010fe:	6878      	ldr	r0, [r7, #4]
 8001100:	f7ff ffbc 	bl	800107c <ssd1306_I2C_Stop>

	/* Return status */
	return connected;
 8001104:	7bfb      	ldrb	r3, [r7, #15]
}
 8001106:	4618      	mov	r0, r3
 8001108:	3710      	adds	r7, #16
 800110a:	46bd      	mov	sp, r7
 800110c:	bd80      	pop	{r7, pc}
	...

08001110 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001110:	b480      	push	{r7}
 8001112:	b083      	sub	sp, #12
 8001114:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001116:	4b0e      	ldr	r3, [pc, #56]	@ (8001150 <HAL_MspInit+0x40>)
 8001118:	699b      	ldr	r3, [r3, #24]
 800111a:	4a0d      	ldr	r2, [pc, #52]	@ (8001150 <HAL_MspInit+0x40>)
 800111c:	f043 0301 	orr.w	r3, r3, #1
 8001120:	6193      	str	r3, [r2, #24]
 8001122:	4b0b      	ldr	r3, [pc, #44]	@ (8001150 <HAL_MspInit+0x40>)
 8001124:	699b      	ldr	r3, [r3, #24]
 8001126:	f003 0301 	and.w	r3, r3, #1
 800112a:	607b      	str	r3, [r7, #4]
 800112c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800112e:	4b08      	ldr	r3, [pc, #32]	@ (8001150 <HAL_MspInit+0x40>)
 8001130:	69db      	ldr	r3, [r3, #28]
 8001132:	4a07      	ldr	r2, [pc, #28]	@ (8001150 <HAL_MspInit+0x40>)
 8001134:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001138:	61d3      	str	r3, [r2, #28]
 800113a:	4b05      	ldr	r3, [pc, #20]	@ (8001150 <HAL_MspInit+0x40>)
 800113c:	69db      	ldr	r3, [r3, #28]
 800113e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001142:	603b      	str	r3, [r7, #0]
 8001144:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001146:	bf00      	nop
 8001148:	370c      	adds	r7, #12
 800114a:	46bd      	mov	sp, r7
 800114c:	bc80      	pop	{r7}
 800114e:	4770      	bx	lr
 8001150:	40021000 	.word	0x40021000

08001154 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b088      	sub	sp, #32
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800115c:	f107 0310 	add.w	r3, r7, #16
 8001160:	2200      	movs	r2, #0
 8001162:	601a      	str	r2, [r3, #0]
 8001164:	605a      	str	r2, [r3, #4]
 8001166:	609a      	str	r2, [r3, #8]
 8001168:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	4a16      	ldr	r2, [pc, #88]	@ (80011c8 <HAL_I2C_MspInit+0x74>)
 8001170:	4293      	cmp	r3, r2
 8001172:	d125      	bne.n	80011c0 <HAL_I2C_MspInit+0x6c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001174:	4b15      	ldr	r3, [pc, #84]	@ (80011cc <HAL_I2C_MspInit+0x78>)
 8001176:	699b      	ldr	r3, [r3, #24]
 8001178:	4a14      	ldr	r2, [pc, #80]	@ (80011cc <HAL_I2C_MspInit+0x78>)
 800117a:	f043 0308 	orr.w	r3, r3, #8
 800117e:	6193      	str	r3, [r2, #24]
 8001180:	4b12      	ldr	r3, [pc, #72]	@ (80011cc <HAL_I2C_MspInit+0x78>)
 8001182:	699b      	ldr	r3, [r3, #24]
 8001184:	f003 0308 	and.w	r3, r3, #8
 8001188:	60fb      	str	r3, [r7, #12]
 800118a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800118c:	23c0      	movs	r3, #192	@ 0xc0
 800118e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001190:	2312      	movs	r3, #18
 8001192:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001194:	2300      	movs	r3, #0
 8001196:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001198:	2303      	movs	r3, #3
 800119a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800119c:	f107 0310 	add.w	r3, r7, #16
 80011a0:	4619      	mov	r1, r3
 80011a2:	480b      	ldr	r0, [pc, #44]	@ (80011d0 <HAL_I2C_MspInit+0x7c>)
 80011a4:	f000 fe1e 	bl	8001de4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80011a8:	4b08      	ldr	r3, [pc, #32]	@ (80011cc <HAL_I2C_MspInit+0x78>)
 80011aa:	69db      	ldr	r3, [r3, #28]
 80011ac:	4a07      	ldr	r2, [pc, #28]	@ (80011cc <HAL_I2C_MspInit+0x78>)
 80011ae:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80011b2:	61d3      	str	r3, [r2, #28]
 80011b4:	4b05      	ldr	r3, [pc, #20]	@ (80011cc <HAL_I2C_MspInit+0x78>)
 80011b6:	69db      	ldr	r3, [r3, #28]
 80011b8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80011bc:	60bb      	str	r3, [r7, #8]
 80011be:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80011c0:	bf00      	nop
 80011c2:	3720      	adds	r7, #32
 80011c4:	46bd      	mov	sp, r7
 80011c6:	bd80      	pop	{r7, pc}
 80011c8:	40005400 	.word	0x40005400
 80011cc:	40021000 	.word	0x40021000
 80011d0:	40010c00 	.word	0x40010c00

080011d4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b08a      	sub	sp, #40	@ 0x28
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011dc:	f107 0318 	add.w	r3, r7, #24
 80011e0:	2200      	movs	r2, #0
 80011e2:	601a      	str	r2, [r3, #0]
 80011e4:	605a      	str	r2, [r3, #4]
 80011e6:	609a      	str	r2, [r3, #8]
 80011e8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	4a8c      	ldr	r2, [pc, #560]	@ (8001420 <HAL_UART_MspInit+0x24c>)
 80011f0:	4293      	cmp	r3, r2
 80011f2:	f040 8087 	bne.w	8001304 <HAL_UART_MspInit+0x130>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80011f6:	4b8b      	ldr	r3, [pc, #556]	@ (8001424 <HAL_UART_MspInit+0x250>)
 80011f8:	699b      	ldr	r3, [r3, #24]
 80011fa:	4a8a      	ldr	r2, [pc, #552]	@ (8001424 <HAL_UART_MspInit+0x250>)
 80011fc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001200:	6193      	str	r3, [r2, #24]
 8001202:	4b88      	ldr	r3, [pc, #544]	@ (8001424 <HAL_UART_MspInit+0x250>)
 8001204:	699b      	ldr	r3, [r3, #24]
 8001206:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800120a:	617b      	str	r3, [r7, #20]
 800120c:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800120e:	4b85      	ldr	r3, [pc, #532]	@ (8001424 <HAL_UART_MspInit+0x250>)
 8001210:	699b      	ldr	r3, [r3, #24]
 8001212:	4a84      	ldr	r2, [pc, #528]	@ (8001424 <HAL_UART_MspInit+0x250>)
 8001214:	f043 0304 	orr.w	r3, r3, #4
 8001218:	6193      	str	r3, [r2, #24]
 800121a:	4b82      	ldr	r3, [pc, #520]	@ (8001424 <HAL_UART_MspInit+0x250>)
 800121c:	699b      	ldr	r3, [r3, #24]
 800121e:	f003 0304 	and.w	r3, r3, #4
 8001222:	613b      	str	r3, [r7, #16]
 8001224:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001226:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800122a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800122c:	2302      	movs	r3, #2
 800122e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001230:	2303      	movs	r3, #3
 8001232:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001234:	f107 0318 	add.w	r3, r7, #24
 8001238:	4619      	mov	r1, r3
 800123a:	487b      	ldr	r0, [pc, #492]	@ (8001428 <HAL_UART_MspInit+0x254>)
 800123c:	f000 fdd2 	bl	8001de4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001240:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001244:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001246:	2300      	movs	r3, #0
 8001248:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800124a:	2300      	movs	r3, #0
 800124c:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800124e:	f107 0318 	add.w	r3, r7, #24
 8001252:	4619      	mov	r1, r3
 8001254:	4874      	ldr	r0, [pc, #464]	@ (8001428 <HAL_UART_MspInit+0x254>)
 8001256:	f000 fdc5 	bl	8001de4 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 800125a:	4b74      	ldr	r3, [pc, #464]	@ (800142c <HAL_UART_MspInit+0x258>)
 800125c:	4a74      	ldr	r2, [pc, #464]	@ (8001430 <HAL_UART_MspInit+0x25c>)
 800125e:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001260:	4b72      	ldr	r3, [pc, #456]	@ (800142c <HAL_UART_MspInit+0x258>)
 8001262:	2200      	movs	r2, #0
 8001264:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001266:	4b71      	ldr	r3, [pc, #452]	@ (800142c <HAL_UART_MspInit+0x258>)
 8001268:	2200      	movs	r2, #0
 800126a:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800126c:	4b6f      	ldr	r3, [pc, #444]	@ (800142c <HAL_UART_MspInit+0x258>)
 800126e:	2280      	movs	r2, #128	@ 0x80
 8001270:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001272:	4b6e      	ldr	r3, [pc, #440]	@ (800142c <HAL_UART_MspInit+0x258>)
 8001274:	2200      	movs	r2, #0
 8001276:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001278:	4b6c      	ldr	r3, [pc, #432]	@ (800142c <HAL_UART_MspInit+0x258>)
 800127a:	2200      	movs	r2, #0
 800127c:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 800127e:	4b6b      	ldr	r3, [pc, #428]	@ (800142c <HAL_UART_MspInit+0x258>)
 8001280:	2200      	movs	r2, #0
 8001282:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001284:	4b69      	ldr	r3, [pc, #420]	@ (800142c <HAL_UART_MspInit+0x258>)
 8001286:	2200      	movs	r2, #0
 8001288:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800128a:	4868      	ldr	r0, [pc, #416]	@ (800142c <HAL_UART_MspInit+0x258>)
 800128c:	f000 fb08 	bl	80018a0 <HAL_DMA_Init>
 8001290:	4603      	mov	r3, r0
 8001292:	2b00      	cmp	r3, #0
 8001294:	d001      	beq.n	800129a <HAL_UART_MspInit+0xc6>
    {
      Error_Handler();
 8001296:	f7ff fafd 	bl	8000894 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	4a63      	ldr	r2, [pc, #396]	@ (800142c <HAL_UART_MspInit+0x258>)
 800129e:	63da      	str	r2, [r3, #60]	@ 0x3c
 80012a0:	4a62      	ldr	r2, [pc, #392]	@ (800142c <HAL_UART_MspInit+0x258>)
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	6253      	str	r3, [r2, #36]	@ 0x24

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 80012a6:	4b63      	ldr	r3, [pc, #396]	@ (8001434 <HAL_UART_MspInit+0x260>)
 80012a8:	4a63      	ldr	r2, [pc, #396]	@ (8001438 <HAL_UART_MspInit+0x264>)
 80012aa:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80012ac:	4b61      	ldr	r3, [pc, #388]	@ (8001434 <HAL_UART_MspInit+0x260>)
 80012ae:	2210      	movs	r2, #16
 80012b0:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80012b2:	4b60      	ldr	r3, [pc, #384]	@ (8001434 <HAL_UART_MspInit+0x260>)
 80012b4:	2200      	movs	r2, #0
 80012b6:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80012b8:	4b5e      	ldr	r3, [pc, #376]	@ (8001434 <HAL_UART_MspInit+0x260>)
 80012ba:	2280      	movs	r2, #128	@ 0x80
 80012bc:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80012be:	4b5d      	ldr	r3, [pc, #372]	@ (8001434 <HAL_UART_MspInit+0x260>)
 80012c0:	2200      	movs	r2, #0
 80012c2:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80012c4:	4b5b      	ldr	r3, [pc, #364]	@ (8001434 <HAL_UART_MspInit+0x260>)
 80012c6:	2200      	movs	r2, #0
 80012c8:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 80012ca:	4b5a      	ldr	r3, [pc, #360]	@ (8001434 <HAL_UART_MspInit+0x260>)
 80012cc:	2200      	movs	r2, #0
 80012ce:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80012d0:	4b58      	ldr	r3, [pc, #352]	@ (8001434 <HAL_UART_MspInit+0x260>)
 80012d2:	2200      	movs	r2, #0
 80012d4:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80012d6:	4857      	ldr	r0, [pc, #348]	@ (8001434 <HAL_UART_MspInit+0x260>)
 80012d8:	f000 fae2 	bl	80018a0 <HAL_DMA_Init>
 80012dc:	4603      	mov	r3, r0
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d001      	beq.n	80012e6 <HAL_UART_MspInit+0x112>
    {
      Error_Handler();
 80012e2:	f7ff fad7 	bl	8000894 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	4a52      	ldr	r2, [pc, #328]	@ (8001434 <HAL_UART_MspInit+0x260>)
 80012ea:	639a      	str	r2, [r3, #56]	@ 0x38
 80012ec:	4a51      	ldr	r2, [pc, #324]	@ (8001434 <HAL_UART_MspInit+0x260>)
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	6253      	str	r3, [r2, #36]	@ 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80012f2:	2200      	movs	r2, #0
 80012f4:	2100      	movs	r1, #0
 80012f6:	2025      	movs	r0, #37	@ 0x25
 80012f8:	f000 fa9b 	bl	8001832 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80012fc:	2025      	movs	r0, #37	@ 0x25
 80012fe:	f000 fab4 	bl	800186a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001302:	e089      	b.n	8001418 <HAL_UART_MspInit+0x244>
  else if(huart->Instance==USART2)
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	4a4c      	ldr	r2, [pc, #304]	@ (800143c <HAL_UART_MspInit+0x268>)
 800130a:	4293      	cmp	r3, r2
 800130c:	f040 8084 	bne.w	8001418 <HAL_UART_MspInit+0x244>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001310:	4b44      	ldr	r3, [pc, #272]	@ (8001424 <HAL_UART_MspInit+0x250>)
 8001312:	69db      	ldr	r3, [r3, #28]
 8001314:	4a43      	ldr	r2, [pc, #268]	@ (8001424 <HAL_UART_MspInit+0x250>)
 8001316:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800131a:	61d3      	str	r3, [r2, #28]
 800131c:	4b41      	ldr	r3, [pc, #260]	@ (8001424 <HAL_UART_MspInit+0x250>)
 800131e:	69db      	ldr	r3, [r3, #28]
 8001320:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001324:	60fb      	str	r3, [r7, #12]
 8001326:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001328:	4b3e      	ldr	r3, [pc, #248]	@ (8001424 <HAL_UART_MspInit+0x250>)
 800132a:	699b      	ldr	r3, [r3, #24]
 800132c:	4a3d      	ldr	r2, [pc, #244]	@ (8001424 <HAL_UART_MspInit+0x250>)
 800132e:	f043 0304 	orr.w	r3, r3, #4
 8001332:	6193      	str	r3, [r2, #24]
 8001334:	4b3b      	ldr	r3, [pc, #236]	@ (8001424 <HAL_UART_MspInit+0x250>)
 8001336:	699b      	ldr	r3, [r3, #24]
 8001338:	f003 0304 	and.w	r3, r3, #4
 800133c:	60bb      	str	r3, [r7, #8]
 800133e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001340:	2304      	movs	r3, #4
 8001342:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001344:	2302      	movs	r3, #2
 8001346:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001348:	2303      	movs	r3, #3
 800134a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800134c:	f107 0318 	add.w	r3, r7, #24
 8001350:	4619      	mov	r1, r3
 8001352:	4835      	ldr	r0, [pc, #212]	@ (8001428 <HAL_UART_MspInit+0x254>)
 8001354:	f000 fd46 	bl	8001de4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001358:	2308      	movs	r3, #8
 800135a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800135c:	2300      	movs	r3, #0
 800135e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001360:	2300      	movs	r3, #0
 8001362:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001364:	f107 0318 	add.w	r3, r7, #24
 8001368:	4619      	mov	r1, r3
 800136a:	482f      	ldr	r0, [pc, #188]	@ (8001428 <HAL_UART_MspInit+0x254>)
 800136c:	f000 fd3a 	bl	8001de4 <HAL_GPIO_Init>
    hdma_usart2_tx.Instance = DMA1_Channel7;
 8001370:	4b33      	ldr	r3, [pc, #204]	@ (8001440 <HAL_UART_MspInit+0x26c>)
 8001372:	4a34      	ldr	r2, [pc, #208]	@ (8001444 <HAL_UART_MspInit+0x270>)
 8001374:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001376:	4b32      	ldr	r3, [pc, #200]	@ (8001440 <HAL_UART_MspInit+0x26c>)
 8001378:	2210      	movs	r2, #16
 800137a:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800137c:	4b30      	ldr	r3, [pc, #192]	@ (8001440 <HAL_UART_MspInit+0x26c>)
 800137e:	2200      	movs	r2, #0
 8001380:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001382:	4b2f      	ldr	r3, [pc, #188]	@ (8001440 <HAL_UART_MspInit+0x26c>)
 8001384:	2280      	movs	r2, #128	@ 0x80
 8001386:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001388:	4b2d      	ldr	r3, [pc, #180]	@ (8001440 <HAL_UART_MspInit+0x26c>)
 800138a:	2200      	movs	r2, #0
 800138c:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800138e:	4b2c      	ldr	r3, [pc, #176]	@ (8001440 <HAL_UART_MspInit+0x26c>)
 8001390:	2200      	movs	r2, #0
 8001392:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8001394:	4b2a      	ldr	r3, [pc, #168]	@ (8001440 <HAL_UART_MspInit+0x26c>)
 8001396:	2200      	movs	r2, #0
 8001398:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800139a:	4b29      	ldr	r3, [pc, #164]	@ (8001440 <HAL_UART_MspInit+0x26c>)
 800139c:	2200      	movs	r2, #0
 800139e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80013a0:	4827      	ldr	r0, [pc, #156]	@ (8001440 <HAL_UART_MspInit+0x26c>)
 80013a2:	f000 fa7d 	bl	80018a0 <HAL_DMA_Init>
 80013a6:	4603      	mov	r3, r0
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d001      	beq.n	80013b0 <HAL_UART_MspInit+0x1dc>
      Error_Handler();
 80013ac:	f7ff fa72 	bl	8000894 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	4a23      	ldr	r2, [pc, #140]	@ (8001440 <HAL_UART_MspInit+0x26c>)
 80013b4:	639a      	str	r2, [r3, #56]	@ 0x38
 80013b6:	4a22      	ldr	r2, [pc, #136]	@ (8001440 <HAL_UART_MspInit+0x26c>)
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	6253      	str	r3, [r2, #36]	@ 0x24
    hdma_usart2_rx.Instance = DMA1_Channel6;
 80013bc:	4b22      	ldr	r3, [pc, #136]	@ (8001448 <HAL_UART_MspInit+0x274>)
 80013be:	4a23      	ldr	r2, [pc, #140]	@ (800144c <HAL_UART_MspInit+0x278>)
 80013c0:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80013c2:	4b21      	ldr	r3, [pc, #132]	@ (8001448 <HAL_UART_MspInit+0x274>)
 80013c4:	2200      	movs	r2, #0
 80013c6:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80013c8:	4b1f      	ldr	r3, [pc, #124]	@ (8001448 <HAL_UART_MspInit+0x274>)
 80013ca:	2200      	movs	r2, #0
 80013cc:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80013ce:	4b1e      	ldr	r3, [pc, #120]	@ (8001448 <HAL_UART_MspInit+0x274>)
 80013d0:	2280      	movs	r2, #128	@ 0x80
 80013d2:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80013d4:	4b1c      	ldr	r3, [pc, #112]	@ (8001448 <HAL_UART_MspInit+0x274>)
 80013d6:	2200      	movs	r2, #0
 80013d8:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80013da:	4b1b      	ldr	r3, [pc, #108]	@ (8001448 <HAL_UART_MspInit+0x274>)
 80013dc:	2200      	movs	r2, #0
 80013de:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 80013e0:	4b19      	ldr	r3, [pc, #100]	@ (8001448 <HAL_UART_MspInit+0x274>)
 80013e2:	2200      	movs	r2, #0
 80013e4:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80013e6:	4b18      	ldr	r3, [pc, #96]	@ (8001448 <HAL_UART_MspInit+0x274>)
 80013e8:	2200      	movs	r2, #0
 80013ea:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80013ec:	4816      	ldr	r0, [pc, #88]	@ (8001448 <HAL_UART_MspInit+0x274>)
 80013ee:	f000 fa57 	bl	80018a0 <HAL_DMA_Init>
 80013f2:	4603      	mov	r3, r0
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d001      	beq.n	80013fc <HAL_UART_MspInit+0x228>
      Error_Handler();
 80013f8:	f7ff fa4c 	bl	8000894 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	4a12      	ldr	r2, [pc, #72]	@ (8001448 <HAL_UART_MspInit+0x274>)
 8001400:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001402:	4a11      	ldr	r2, [pc, #68]	@ (8001448 <HAL_UART_MspInit+0x274>)
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	6253      	str	r3, [r2, #36]	@ 0x24
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001408:	2200      	movs	r2, #0
 800140a:	2100      	movs	r1, #0
 800140c:	2026      	movs	r0, #38	@ 0x26
 800140e:	f000 fa10 	bl	8001832 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001412:	2026      	movs	r0, #38	@ 0x26
 8001414:	f000 fa29 	bl	800186a <HAL_NVIC_EnableIRQ>
}
 8001418:	bf00      	nop
 800141a:	3728      	adds	r7, #40	@ 0x28
 800141c:	46bd      	mov	sp, r7
 800141e:	bd80      	pop	{r7, pc}
 8001420:	40013800 	.word	0x40013800
 8001424:	40021000 	.word	0x40021000
 8001428:	40010800 	.word	0x40010800
 800142c:	2000011c 	.word	0x2000011c
 8001430:	40020058 	.word	0x40020058
 8001434:	20000160 	.word	0x20000160
 8001438:	40020044 	.word	0x40020044
 800143c:	40004400 	.word	0x40004400
 8001440:	200001a4 	.word	0x200001a4
 8001444:	40020080 	.word	0x40020080
 8001448:	200001e8 	.word	0x200001e8
 800144c:	4002006c 	.word	0x4002006c

08001450 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001450:	b480      	push	{r7}
 8001452:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001454:	bf00      	nop
 8001456:	e7fd      	b.n	8001454 <NMI_Handler+0x4>

08001458 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001458:	b480      	push	{r7}
 800145a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800145c:	bf00      	nop
 800145e:	e7fd      	b.n	800145c <HardFault_Handler+0x4>

08001460 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001460:	b480      	push	{r7}
 8001462:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001464:	bf00      	nop
 8001466:	e7fd      	b.n	8001464 <MemManage_Handler+0x4>

08001468 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001468:	b480      	push	{r7}
 800146a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800146c:	bf00      	nop
 800146e:	e7fd      	b.n	800146c <BusFault_Handler+0x4>

08001470 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001470:	b480      	push	{r7}
 8001472:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001474:	bf00      	nop
 8001476:	e7fd      	b.n	8001474 <UsageFault_Handler+0x4>

08001478 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001478:	b480      	push	{r7}
 800147a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800147c:	bf00      	nop
 800147e:	46bd      	mov	sp, r7
 8001480:	bc80      	pop	{r7}
 8001482:	4770      	bx	lr

08001484 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001484:	b480      	push	{r7}
 8001486:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001488:	bf00      	nop
 800148a:	46bd      	mov	sp, r7
 800148c:	bc80      	pop	{r7}
 800148e:	4770      	bx	lr

08001490 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001490:	b480      	push	{r7}
 8001492:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001494:	bf00      	nop
 8001496:	46bd      	mov	sp, r7
 8001498:	bc80      	pop	{r7}
 800149a:	4770      	bx	lr

0800149c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014a0:	f000 f8b0 	bl	8001604 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014a4:	bf00      	nop
 80014a6:	bd80      	pop	{r7, pc}

080014a8 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80014ac:	4802      	ldr	r0, [pc, #8]	@ (80014b8 <DMA1_Channel4_IRQHandler+0x10>)
 80014ae:	f000 fb65 	bl	8001b7c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 80014b2:	bf00      	nop
 80014b4:	bd80      	pop	{r7, pc}
 80014b6:	bf00      	nop
 80014b8:	20000160 	.word	0x20000160

080014bc <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80014c0:	4802      	ldr	r0, [pc, #8]	@ (80014cc <DMA1_Channel5_IRQHandler+0x10>)
 80014c2:	f000 fb5b 	bl	8001b7c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 80014c6:	bf00      	nop
 80014c8:	bd80      	pop	{r7, pc}
 80014ca:	bf00      	nop
 80014cc:	2000011c 	.word	0x2000011c

080014d0 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80014d4:	4802      	ldr	r0, [pc, #8]	@ (80014e0 <DMA1_Channel6_IRQHandler+0x10>)
 80014d6:	f000 fb51 	bl	8001b7c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 80014da:	bf00      	nop
 80014dc:	bd80      	pop	{r7, pc}
 80014de:	bf00      	nop
 80014e0:	200001e8 	.word	0x200001e8

080014e4 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80014e8:	4802      	ldr	r0, [pc, #8]	@ (80014f4 <DMA1_Channel7_IRQHandler+0x10>)
 80014ea:	f000 fb47 	bl	8001b7c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 80014ee:	bf00      	nop
 80014f0:	bd80      	pop	{r7, pc}
 80014f2:	bf00      	nop
 80014f4:	200001a4 	.word	0x200001a4

080014f8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
	//HAL_UART_Transmit(&huart1,"USART Transmit\r\n",16,0xFFFF);
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80014fc:	4802      	ldr	r0, [pc, #8]	@ (8001508 <USART1_IRQHandler+0x10>)
 80014fe:	f001 fce3 	bl	8002ec8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001502:	bf00      	nop
 8001504:	bd80      	pop	{r7, pc}
 8001506:	bf00      	nop
 8001508:	2000008c 	.word	0x2000008c

0800150c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001510:	4802      	ldr	r0, [pc, #8]	@ (800151c <USART2_IRQHandler+0x10>)
 8001512:	f001 fcd9 	bl	8002ec8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001516:	bf00      	nop
 8001518:	bd80      	pop	{r7, pc}
 800151a:	bf00      	nop
 800151c:	200000d4 	.word	0x200000d4

08001520 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001520:	b480      	push	{r7}
 8001522:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001524:	bf00      	nop
 8001526:	46bd      	mov	sp, r7
 8001528:	bc80      	pop	{r7}
 800152a:	4770      	bx	lr

0800152c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800152c:	f7ff fff8 	bl	8001520 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001530:	480b      	ldr	r0, [pc, #44]	@ (8001560 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001532:	490c      	ldr	r1, [pc, #48]	@ (8001564 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001534:	4a0c      	ldr	r2, [pc, #48]	@ (8001568 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001536:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001538:	e002      	b.n	8001540 <LoopCopyDataInit>

0800153a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800153a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800153c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800153e:	3304      	adds	r3, #4

08001540 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001540:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001542:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001544:	d3f9      	bcc.n	800153a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001546:	4a09      	ldr	r2, [pc, #36]	@ (800156c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001548:	4c09      	ldr	r4, [pc, #36]	@ (8001570 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800154a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800154c:	e001      	b.n	8001552 <LoopFillZerobss>

0800154e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800154e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001550:	3204      	adds	r2, #4

08001552 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001552:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001554:	d3fb      	bcc.n	800154e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001556:	f002 fb29 	bl	8003bac <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800155a:	f7fe fea9 	bl	80002b0 <main>
  bx lr
 800155e:	4770      	bx	lr
  ldr r0, =_sdata
 8001560:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001564:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 8001568:	08004490 	.word	0x08004490
  ldr r2, =_sbss
 800156c:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 8001570:	20000a34 	.word	0x20000a34

08001574 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001574:	e7fe      	b.n	8001574 <ADC1_2_IRQHandler>
	...

08001578 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800157c:	4b08      	ldr	r3, [pc, #32]	@ (80015a0 <HAL_Init+0x28>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	4a07      	ldr	r2, [pc, #28]	@ (80015a0 <HAL_Init+0x28>)
 8001582:	f043 0310 	orr.w	r3, r3, #16
 8001586:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001588:	2003      	movs	r0, #3
 800158a:	f000 f947 	bl	800181c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800158e:	200f      	movs	r0, #15
 8001590:	f000 f808 	bl	80015a4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001594:	f7ff fdbc 	bl	8001110 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001598:	2300      	movs	r3, #0
}
 800159a:	4618      	mov	r0, r3
 800159c:	bd80      	pop	{r7, pc}
 800159e:	bf00      	nop
 80015a0:	40022000 	.word	0x40022000

080015a4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b082      	sub	sp, #8
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80015ac:	4b12      	ldr	r3, [pc, #72]	@ (80015f8 <HAL_InitTick+0x54>)
 80015ae:	681a      	ldr	r2, [r3, #0]
 80015b0:	4b12      	ldr	r3, [pc, #72]	@ (80015fc <HAL_InitTick+0x58>)
 80015b2:	781b      	ldrb	r3, [r3, #0]
 80015b4:	4619      	mov	r1, r3
 80015b6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80015ba:	fbb3 f3f1 	udiv	r3, r3, r1
 80015be:	fbb2 f3f3 	udiv	r3, r2, r3
 80015c2:	4618      	mov	r0, r3
 80015c4:	f000 f95f 	bl	8001886 <HAL_SYSTICK_Config>
 80015c8:	4603      	mov	r3, r0
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d001      	beq.n	80015d2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80015ce:	2301      	movs	r3, #1
 80015d0:	e00e      	b.n	80015f0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	2b0f      	cmp	r3, #15
 80015d6:	d80a      	bhi.n	80015ee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015d8:	2200      	movs	r2, #0
 80015da:	6879      	ldr	r1, [r7, #4]
 80015dc:	f04f 30ff 	mov.w	r0, #4294967295
 80015e0:	f000 f927 	bl	8001832 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80015e4:	4a06      	ldr	r2, [pc, #24]	@ (8001600 <HAL_InitTick+0x5c>)
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80015ea:	2300      	movs	r3, #0
 80015ec:	e000      	b.n	80015f0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80015ee:	2301      	movs	r3, #1
}
 80015f0:	4618      	mov	r0, r3
 80015f2:	3708      	adds	r7, #8
 80015f4:	46bd      	mov	sp, r7
 80015f6:	bd80      	pop	{r7, pc}
 80015f8:	20000010 	.word	0x20000010
 80015fc:	20000018 	.word	0x20000018
 8001600:	20000014 	.word	0x20000014

08001604 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001604:	b480      	push	{r7}
 8001606:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001608:	4b05      	ldr	r3, [pc, #20]	@ (8001620 <HAL_IncTick+0x1c>)
 800160a:	781b      	ldrb	r3, [r3, #0]
 800160c:	461a      	mov	r2, r3
 800160e:	4b05      	ldr	r3, [pc, #20]	@ (8001624 <HAL_IncTick+0x20>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	4413      	add	r3, r2
 8001614:	4a03      	ldr	r2, [pc, #12]	@ (8001624 <HAL_IncTick+0x20>)
 8001616:	6013      	str	r3, [r2, #0]
}
 8001618:	bf00      	nop
 800161a:	46bd      	mov	sp, r7
 800161c:	bc80      	pop	{r7}
 800161e:	4770      	bx	lr
 8001620:	20000018 	.word	0x20000018
 8001624:	20000a30 	.word	0x20000a30

08001628 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001628:	b480      	push	{r7}
 800162a:	af00      	add	r7, sp, #0
  return uwTick;
 800162c:	4b02      	ldr	r3, [pc, #8]	@ (8001638 <HAL_GetTick+0x10>)
 800162e:	681b      	ldr	r3, [r3, #0]
}
 8001630:	4618      	mov	r0, r3
 8001632:	46bd      	mov	sp, r7
 8001634:	bc80      	pop	{r7}
 8001636:	4770      	bx	lr
 8001638:	20000a30 	.word	0x20000a30

0800163c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b084      	sub	sp, #16
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001644:	f7ff fff0 	bl	8001628 <HAL_GetTick>
 8001648:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001654:	d005      	beq.n	8001662 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001656:	4b0a      	ldr	r3, [pc, #40]	@ (8001680 <HAL_Delay+0x44>)
 8001658:	781b      	ldrb	r3, [r3, #0]
 800165a:	461a      	mov	r2, r3
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	4413      	add	r3, r2
 8001660:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001662:	bf00      	nop
 8001664:	f7ff ffe0 	bl	8001628 <HAL_GetTick>
 8001668:	4602      	mov	r2, r0
 800166a:	68bb      	ldr	r3, [r7, #8]
 800166c:	1ad3      	subs	r3, r2, r3
 800166e:	68fa      	ldr	r2, [r7, #12]
 8001670:	429a      	cmp	r2, r3
 8001672:	d8f7      	bhi.n	8001664 <HAL_Delay+0x28>
  {
  }
}
 8001674:	bf00      	nop
 8001676:	bf00      	nop
 8001678:	3710      	adds	r7, #16
 800167a:	46bd      	mov	sp, r7
 800167c:	bd80      	pop	{r7, pc}
 800167e:	bf00      	nop
 8001680:	20000018 	.word	0x20000018

08001684 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001684:	b480      	push	{r7}
 8001686:	b085      	sub	sp, #20
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	f003 0307 	and.w	r3, r3, #7
 8001692:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001694:	4b0c      	ldr	r3, [pc, #48]	@ (80016c8 <__NVIC_SetPriorityGrouping+0x44>)
 8001696:	68db      	ldr	r3, [r3, #12]
 8001698:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800169a:	68ba      	ldr	r2, [r7, #8]
 800169c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80016a0:	4013      	ands	r3, r2
 80016a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016a8:	68bb      	ldr	r3, [r7, #8]
 80016aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80016ac:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80016b0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80016b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016b6:	4a04      	ldr	r2, [pc, #16]	@ (80016c8 <__NVIC_SetPriorityGrouping+0x44>)
 80016b8:	68bb      	ldr	r3, [r7, #8]
 80016ba:	60d3      	str	r3, [r2, #12]
}
 80016bc:	bf00      	nop
 80016be:	3714      	adds	r7, #20
 80016c0:	46bd      	mov	sp, r7
 80016c2:	bc80      	pop	{r7}
 80016c4:	4770      	bx	lr
 80016c6:	bf00      	nop
 80016c8:	e000ed00 	.word	0xe000ed00

080016cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80016cc:	b480      	push	{r7}
 80016ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016d0:	4b04      	ldr	r3, [pc, #16]	@ (80016e4 <__NVIC_GetPriorityGrouping+0x18>)
 80016d2:	68db      	ldr	r3, [r3, #12]
 80016d4:	0a1b      	lsrs	r3, r3, #8
 80016d6:	f003 0307 	and.w	r3, r3, #7
}
 80016da:	4618      	mov	r0, r3
 80016dc:	46bd      	mov	sp, r7
 80016de:	bc80      	pop	{r7}
 80016e0:	4770      	bx	lr
 80016e2:	bf00      	nop
 80016e4:	e000ed00 	.word	0xe000ed00

080016e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016e8:	b480      	push	{r7}
 80016ea:	b083      	sub	sp, #12
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	4603      	mov	r3, r0
 80016f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	db0b      	blt.n	8001712 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80016fa:	79fb      	ldrb	r3, [r7, #7]
 80016fc:	f003 021f 	and.w	r2, r3, #31
 8001700:	4906      	ldr	r1, [pc, #24]	@ (800171c <__NVIC_EnableIRQ+0x34>)
 8001702:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001706:	095b      	lsrs	r3, r3, #5
 8001708:	2001      	movs	r0, #1
 800170a:	fa00 f202 	lsl.w	r2, r0, r2
 800170e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001712:	bf00      	nop
 8001714:	370c      	adds	r7, #12
 8001716:	46bd      	mov	sp, r7
 8001718:	bc80      	pop	{r7}
 800171a:	4770      	bx	lr
 800171c:	e000e100 	.word	0xe000e100

08001720 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001720:	b480      	push	{r7}
 8001722:	b083      	sub	sp, #12
 8001724:	af00      	add	r7, sp, #0
 8001726:	4603      	mov	r3, r0
 8001728:	6039      	str	r1, [r7, #0]
 800172a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800172c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001730:	2b00      	cmp	r3, #0
 8001732:	db0a      	blt.n	800174a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001734:	683b      	ldr	r3, [r7, #0]
 8001736:	b2da      	uxtb	r2, r3
 8001738:	490c      	ldr	r1, [pc, #48]	@ (800176c <__NVIC_SetPriority+0x4c>)
 800173a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800173e:	0112      	lsls	r2, r2, #4
 8001740:	b2d2      	uxtb	r2, r2
 8001742:	440b      	add	r3, r1
 8001744:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001748:	e00a      	b.n	8001760 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800174a:	683b      	ldr	r3, [r7, #0]
 800174c:	b2da      	uxtb	r2, r3
 800174e:	4908      	ldr	r1, [pc, #32]	@ (8001770 <__NVIC_SetPriority+0x50>)
 8001750:	79fb      	ldrb	r3, [r7, #7]
 8001752:	f003 030f 	and.w	r3, r3, #15
 8001756:	3b04      	subs	r3, #4
 8001758:	0112      	lsls	r2, r2, #4
 800175a:	b2d2      	uxtb	r2, r2
 800175c:	440b      	add	r3, r1
 800175e:	761a      	strb	r2, [r3, #24]
}
 8001760:	bf00      	nop
 8001762:	370c      	adds	r7, #12
 8001764:	46bd      	mov	sp, r7
 8001766:	bc80      	pop	{r7}
 8001768:	4770      	bx	lr
 800176a:	bf00      	nop
 800176c:	e000e100 	.word	0xe000e100
 8001770:	e000ed00 	.word	0xe000ed00

08001774 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001774:	b480      	push	{r7}
 8001776:	b089      	sub	sp, #36	@ 0x24
 8001778:	af00      	add	r7, sp, #0
 800177a:	60f8      	str	r0, [r7, #12]
 800177c:	60b9      	str	r1, [r7, #8]
 800177e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	f003 0307 	and.w	r3, r3, #7
 8001786:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001788:	69fb      	ldr	r3, [r7, #28]
 800178a:	f1c3 0307 	rsb	r3, r3, #7
 800178e:	2b04      	cmp	r3, #4
 8001790:	bf28      	it	cs
 8001792:	2304      	movcs	r3, #4
 8001794:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001796:	69fb      	ldr	r3, [r7, #28]
 8001798:	3304      	adds	r3, #4
 800179a:	2b06      	cmp	r3, #6
 800179c:	d902      	bls.n	80017a4 <NVIC_EncodePriority+0x30>
 800179e:	69fb      	ldr	r3, [r7, #28]
 80017a0:	3b03      	subs	r3, #3
 80017a2:	e000      	b.n	80017a6 <NVIC_EncodePriority+0x32>
 80017a4:	2300      	movs	r3, #0
 80017a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017a8:	f04f 32ff 	mov.w	r2, #4294967295
 80017ac:	69bb      	ldr	r3, [r7, #24]
 80017ae:	fa02 f303 	lsl.w	r3, r2, r3
 80017b2:	43da      	mvns	r2, r3
 80017b4:	68bb      	ldr	r3, [r7, #8]
 80017b6:	401a      	ands	r2, r3
 80017b8:	697b      	ldr	r3, [r7, #20]
 80017ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017bc:	f04f 31ff 	mov.w	r1, #4294967295
 80017c0:	697b      	ldr	r3, [r7, #20]
 80017c2:	fa01 f303 	lsl.w	r3, r1, r3
 80017c6:	43d9      	mvns	r1, r3
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017cc:	4313      	orrs	r3, r2
         );
}
 80017ce:	4618      	mov	r0, r3
 80017d0:	3724      	adds	r7, #36	@ 0x24
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bc80      	pop	{r7}
 80017d6:	4770      	bx	lr

080017d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b082      	sub	sp, #8
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	3b01      	subs	r3, #1
 80017e4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80017e8:	d301      	bcc.n	80017ee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80017ea:	2301      	movs	r3, #1
 80017ec:	e00f      	b.n	800180e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80017ee:	4a0a      	ldr	r2, [pc, #40]	@ (8001818 <SysTick_Config+0x40>)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	3b01      	subs	r3, #1
 80017f4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80017f6:	210f      	movs	r1, #15
 80017f8:	f04f 30ff 	mov.w	r0, #4294967295
 80017fc:	f7ff ff90 	bl	8001720 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001800:	4b05      	ldr	r3, [pc, #20]	@ (8001818 <SysTick_Config+0x40>)
 8001802:	2200      	movs	r2, #0
 8001804:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001806:	4b04      	ldr	r3, [pc, #16]	@ (8001818 <SysTick_Config+0x40>)
 8001808:	2207      	movs	r2, #7
 800180a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800180c:	2300      	movs	r3, #0
}
 800180e:	4618      	mov	r0, r3
 8001810:	3708      	adds	r7, #8
 8001812:	46bd      	mov	sp, r7
 8001814:	bd80      	pop	{r7, pc}
 8001816:	bf00      	nop
 8001818:	e000e010 	.word	0xe000e010

0800181c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b082      	sub	sp, #8
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001824:	6878      	ldr	r0, [r7, #4]
 8001826:	f7ff ff2d 	bl	8001684 <__NVIC_SetPriorityGrouping>
}
 800182a:	bf00      	nop
 800182c:	3708      	adds	r7, #8
 800182e:	46bd      	mov	sp, r7
 8001830:	bd80      	pop	{r7, pc}

08001832 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001832:	b580      	push	{r7, lr}
 8001834:	b086      	sub	sp, #24
 8001836:	af00      	add	r7, sp, #0
 8001838:	4603      	mov	r3, r0
 800183a:	60b9      	str	r1, [r7, #8]
 800183c:	607a      	str	r2, [r7, #4]
 800183e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001840:	2300      	movs	r3, #0
 8001842:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001844:	f7ff ff42 	bl	80016cc <__NVIC_GetPriorityGrouping>
 8001848:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800184a:	687a      	ldr	r2, [r7, #4]
 800184c:	68b9      	ldr	r1, [r7, #8]
 800184e:	6978      	ldr	r0, [r7, #20]
 8001850:	f7ff ff90 	bl	8001774 <NVIC_EncodePriority>
 8001854:	4602      	mov	r2, r0
 8001856:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800185a:	4611      	mov	r1, r2
 800185c:	4618      	mov	r0, r3
 800185e:	f7ff ff5f 	bl	8001720 <__NVIC_SetPriority>
}
 8001862:	bf00      	nop
 8001864:	3718      	adds	r7, #24
 8001866:	46bd      	mov	sp, r7
 8001868:	bd80      	pop	{r7, pc}

0800186a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800186a:	b580      	push	{r7, lr}
 800186c:	b082      	sub	sp, #8
 800186e:	af00      	add	r7, sp, #0
 8001870:	4603      	mov	r3, r0
 8001872:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001874:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001878:	4618      	mov	r0, r3
 800187a:	f7ff ff35 	bl	80016e8 <__NVIC_EnableIRQ>
}
 800187e:	bf00      	nop
 8001880:	3708      	adds	r7, #8
 8001882:	46bd      	mov	sp, r7
 8001884:	bd80      	pop	{r7, pc}

08001886 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001886:	b580      	push	{r7, lr}
 8001888:	b082      	sub	sp, #8
 800188a:	af00      	add	r7, sp, #0
 800188c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800188e:	6878      	ldr	r0, [r7, #4]
 8001890:	f7ff ffa2 	bl	80017d8 <SysTick_Config>
 8001894:	4603      	mov	r3, r0
}
 8001896:	4618      	mov	r0, r3
 8001898:	3708      	adds	r7, #8
 800189a:	46bd      	mov	sp, r7
 800189c:	bd80      	pop	{r7, pc}
	...

080018a0 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80018a0:	b480      	push	{r7}
 80018a2:	b085      	sub	sp, #20
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80018a8:	2300      	movs	r3, #0
 80018aa:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d101      	bne.n	80018b6 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80018b2:	2301      	movs	r3, #1
 80018b4:	e043      	b.n	800193e <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	461a      	mov	r2, r3
 80018bc:	4b22      	ldr	r3, [pc, #136]	@ (8001948 <HAL_DMA_Init+0xa8>)
 80018be:	4413      	add	r3, r2
 80018c0:	4a22      	ldr	r2, [pc, #136]	@ (800194c <HAL_DMA_Init+0xac>)
 80018c2:	fba2 2303 	umull	r2, r3, r2, r3
 80018c6:	091b      	lsrs	r3, r3, #4
 80018c8:	009a      	lsls	r2, r3, #2
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	4a1f      	ldr	r2, [pc, #124]	@ (8001950 <HAL_DMA_Init+0xb0>)
 80018d2:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	2202      	movs	r2, #2
 80018d8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80018ea:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 80018ee:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80018f8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	68db      	ldr	r3, [r3, #12]
 80018fe:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001904:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	695b      	ldr	r3, [r3, #20]
 800190a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001910:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	69db      	ldr	r3, [r3, #28]
 8001916:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001918:	68fa      	ldr	r2, [r7, #12]
 800191a:	4313      	orrs	r3, r2
 800191c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	68fa      	ldr	r2, [r7, #12]
 8001924:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	2200      	movs	r2, #0
 800192a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	2201      	movs	r2, #1
 8001930:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	2200      	movs	r2, #0
 8001938:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800193c:	2300      	movs	r3, #0
}
 800193e:	4618      	mov	r0, r3
 8001940:	3714      	adds	r7, #20
 8001942:	46bd      	mov	sp, r7
 8001944:	bc80      	pop	{r7}
 8001946:	4770      	bx	lr
 8001948:	bffdfff8 	.word	0xbffdfff8
 800194c:	cccccccd 	.word	0xcccccccd
 8001950:	40020000 	.word	0x40020000

08001954 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	b086      	sub	sp, #24
 8001958:	af00      	add	r7, sp, #0
 800195a:	60f8      	str	r0, [r7, #12]
 800195c:	60b9      	str	r1, [r7, #8]
 800195e:	607a      	str	r2, [r7, #4]
 8001960:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001962:	2300      	movs	r3, #0
 8001964:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	f893 3020 	ldrb.w	r3, [r3, #32]
 800196c:	2b01      	cmp	r3, #1
 800196e:	d101      	bne.n	8001974 <HAL_DMA_Start_IT+0x20>
 8001970:	2302      	movs	r3, #2
 8001972:	e04b      	b.n	8001a0c <HAL_DMA_Start_IT+0xb8>
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	2201      	movs	r2, #1
 8001978:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001982:	b2db      	uxtb	r3, r3
 8001984:	2b01      	cmp	r3, #1
 8001986:	d13a      	bne.n	80019fe <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	2202      	movs	r2, #2
 800198c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	2200      	movs	r2, #0
 8001994:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	681a      	ldr	r2, [r3, #0]
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	f022 0201 	bic.w	r2, r2, #1
 80019a4:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80019a6:	683b      	ldr	r3, [r7, #0]
 80019a8:	687a      	ldr	r2, [r7, #4]
 80019aa:	68b9      	ldr	r1, [r7, #8]
 80019ac:	68f8      	ldr	r0, [r7, #12]
 80019ae:	f000 f9eb 	bl	8001d88 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d008      	beq.n	80019cc <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	681a      	ldr	r2, [r3, #0]
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	f042 020e 	orr.w	r2, r2, #14
 80019c8:	601a      	str	r2, [r3, #0]
 80019ca:	e00f      	b.n	80019ec <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	681a      	ldr	r2, [r3, #0]
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f022 0204 	bic.w	r2, r2, #4
 80019da:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	681a      	ldr	r2, [r3, #0]
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f042 020a 	orr.w	r2, r2, #10
 80019ea:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	681a      	ldr	r2, [r3, #0]
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f042 0201 	orr.w	r2, r2, #1
 80019fa:	601a      	str	r2, [r3, #0]
 80019fc:	e005      	b.n	8001a0a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	2200      	movs	r2, #0
 8001a02:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8001a06:	2302      	movs	r3, #2
 8001a08:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8001a0a:	7dfb      	ldrb	r3, [r7, #23]
}
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	3718      	adds	r7, #24
 8001a10:	46bd      	mov	sp, r7
 8001a12:	bd80      	pop	{r7, pc}

08001a14 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001a14:	b480      	push	{r7}
 8001a16:	b085      	sub	sp, #20
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001a26:	b2db      	uxtb	r3, r3
 8001a28:	2b02      	cmp	r3, #2
 8001a2a:	d008      	beq.n	8001a3e <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	2204      	movs	r2, #4
 8001a30:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	2200      	movs	r2, #0
 8001a36:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001a3a:	2301      	movs	r3, #1
 8001a3c:	e020      	b.n	8001a80 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	681a      	ldr	r2, [r3, #0]
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f022 020e 	bic.w	r2, r2, #14
 8001a4c:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	681a      	ldr	r2, [r3, #0]
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	f022 0201 	bic.w	r2, r2, #1
 8001a5c:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001a66:	2101      	movs	r1, #1
 8001a68:	fa01 f202 	lsl.w	r2, r1, r2
 8001a6c:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	2201      	movs	r2, #1
 8001a72:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	2200      	movs	r2, #0
 8001a7a:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001a7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a80:	4618      	mov	r0, r3
 8001a82:	3714      	adds	r7, #20
 8001a84:	46bd      	mov	sp, r7
 8001a86:	bc80      	pop	{r7}
 8001a88:	4770      	bx	lr
	...

08001a8c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b084      	sub	sp, #16
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001a94:	2300      	movs	r3, #0
 8001a96:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001a9e:	b2db      	uxtb	r3, r3
 8001aa0:	2b02      	cmp	r3, #2
 8001aa2:	d005      	beq.n	8001ab0 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	2204      	movs	r2, #4
 8001aa8:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8001aaa:	2301      	movs	r3, #1
 8001aac:	73fb      	strb	r3, [r7, #15]
 8001aae:	e051      	b.n	8001b54 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	681a      	ldr	r2, [r3, #0]
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f022 020e 	bic.w	r2, r2, #14
 8001abe:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	681a      	ldr	r2, [r3, #0]
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f022 0201 	bic.w	r2, r2, #1
 8001ace:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	4a22      	ldr	r2, [pc, #136]	@ (8001b60 <HAL_DMA_Abort_IT+0xd4>)
 8001ad6:	4293      	cmp	r3, r2
 8001ad8:	d029      	beq.n	8001b2e <HAL_DMA_Abort_IT+0xa2>
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	4a21      	ldr	r2, [pc, #132]	@ (8001b64 <HAL_DMA_Abort_IT+0xd8>)
 8001ae0:	4293      	cmp	r3, r2
 8001ae2:	d022      	beq.n	8001b2a <HAL_DMA_Abort_IT+0x9e>
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	4a1f      	ldr	r2, [pc, #124]	@ (8001b68 <HAL_DMA_Abort_IT+0xdc>)
 8001aea:	4293      	cmp	r3, r2
 8001aec:	d01a      	beq.n	8001b24 <HAL_DMA_Abort_IT+0x98>
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	4a1e      	ldr	r2, [pc, #120]	@ (8001b6c <HAL_DMA_Abort_IT+0xe0>)
 8001af4:	4293      	cmp	r3, r2
 8001af6:	d012      	beq.n	8001b1e <HAL_DMA_Abort_IT+0x92>
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	4a1c      	ldr	r2, [pc, #112]	@ (8001b70 <HAL_DMA_Abort_IT+0xe4>)
 8001afe:	4293      	cmp	r3, r2
 8001b00:	d00a      	beq.n	8001b18 <HAL_DMA_Abort_IT+0x8c>
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	4a1b      	ldr	r2, [pc, #108]	@ (8001b74 <HAL_DMA_Abort_IT+0xe8>)
 8001b08:	4293      	cmp	r3, r2
 8001b0a:	d102      	bne.n	8001b12 <HAL_DMA_Abort_IT+0x86>
 8001b0c:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8001b10:	e00e      	b.n	8001b30 <HAL_DMA_Abort_IT+0xa4>
 8001b12:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001b16:	e00b      	b.n	8001b30 <HAL_DMA_Abort_IT+0xa4>
 8001b18:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001b1c:	e008      	b.n	8001b30 <HAL_DMA_Abort_IT+0xa4>
 8001b1e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001b22:	e005      	b.n	8001b30 <HAL_DMA_Abort_IT+0xa4>
 8001b24:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001b28:	e002      	b.n	8001b30 <HAL_DMA_Abort_IT+0xa4>
 8001b2a:	2310      	movs	r3, #16
 8001b2c:	e000      	b.n	8001b30 <HAL_DMA_Abort_IT+0xa4>
 8001b2e:	2301      	movs	r3, #1
 8001b30:	4a11      	ldr	r2, [pc, #68]	@ (8001b78 <HAL_DMA_Abort_IT+0xec>)
 8001b32:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	2201      	movs	r2, #1
 8001b38:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	2200      	movs	r2, #0
 8001b40:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d003      	beq.n	8001b54 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001b50:	6878      	ldr	r0, [r7, #4]
 8001b52:	4798      	blx	r3
    } 
  }
  return status;
 8001b54:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b56:	4618      	mov	r0, r3
 8001b58:	3710      	adds	r7, #16
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bd80      	pop	{r7, pc}
 8001b5e:	bf00      	nop
 8001b60:	40020008 	.word	0x40020008
 8001b64:	4002001c 	.word	0x4002001c
 8001b68:	40020030 	.word	0x40020030
 8001b6c:	40020044 	.word	0x40020044
 8001b70:	40020058 	.word	0x40020058
 8001b74:	4002006c 	.word	0x4002006c
 8001b78:	40020000 	.word	0x40020000

08001b7c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b084      	sub	sp, #16
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b98:	2204      	movs	r2, #4
 8001b9a:	409a      	lsls	r2, r3
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	4013      	ands	r3, r2
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d04f      	beq.n	8001c44 <HAL_DMA_IRQHandler+0xc8>
 8001ba4:	68bb      	ldr	r3, [r7, #8]
 8001ba6:	f003 0304 	and.w	r3, r3, #4
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d04a      	beq.n	8001c44 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f003 0320 	and.w	r3, r3, #32
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d107      	bne.n	8001bcc <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	681a      	ldr	r2, [r3, #0]
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f022 0204 	bic.w	r2, r2, #4
 8001bca:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	4a66      	ldr	r2, [pc, #408]	@ (8001d6c <HAL_DMA_IRQHandler+0x1f0>)
 8001bd2:	4293      	cmp	r3, r2
 8001bd4:	d029      	beq.n	8001c2a <HAL_DMA_IRQHandler+0xae>
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	4a65      	ldr	r2, [pc, #404]	@ (8001d70 <HAL_DMA_IRQHandler+0x1f4>)
 8001bdc:	4293      	cmp	r3, r2
 8001bde:	d022      	beq.n	8001c26 <HAL_DMA_IRQHandler+0xaa>
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	4a63      	ldr	r2, [pc, #396]	@ (8001d74 <HAL_DMA_IRQHandler+0x1f8>)
 8001be6:	4293      	cmp	r3, r2
 8001be8:	d01a      	beq.n	8001c20 <HAL_DMA_IRQHandler+0xa4>
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	4a62      	ldr	r2, [pc, #392]	@ (8001d78 <HAL_DMA_IRQHandler+0x1fc>)
 8001bf0:	4293      	cmp	r3, r2
 8001bf2:	d012      	beq.n	8001c1a <HAL_DMA_IRQHandler+0x9e>
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	4a60      	ldr	r2, [pc, #384]	@ (8001d7c <HAL_DMA_IRQHandler+0x200>)
 8001bfa:	4293      	cmp	r3, r2
 8001bfc:	d00a      	beq.n	8001c14 <HAL_DMA_IRQHandler+0x98>
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	4a5f      	ldr	r2, [pc, #380]	@ (8001d80 <HAL_DMA_IRQHandler+0x204>)
 8001c04:	4293      	cmp	r3, r2
 8001c06:	d102      	bne.n	8001c0e <HAL_DMA_IRQHandler+0x92>
 8001c08:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001c0c:	e00e      	b.n	8001c2c <HAL_DMA_IRQHandler+0xb0>
 8001c0e:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8001c12:	e00b      	b.n	8001c2c <HAL_DMA_IRQHandler+0xb0>
 8001c14:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8001c18:	e008      	b.n	8001c2c <HAL_DMA_IRQHandler+0xb0>
 8001c1a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001c1e:	e005      	b.n	8001c2c <HAL_DMA_IRQHandler+0xb0>
 8001c20:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001c24:	e002      	b.n	8001c2c <HAL_DMA_IRQHandler+0xb0>
 8001c26:	2340      	movs	r3, #64	@ 0x40
 8001c28:	e000      	b.n	8001c2c <HAL_DMA_IRQHandler+0xb0>
 8001c2a:	2304      	movs	r3, #4
 8001c2c:	4a55      	ldr	r2, [pc, #340]	@ (8001d84 <HAL_DMA_IRQHandler+0x208>)
 8001c2e:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	f000 8094 	beq.w	8001d62 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c3e:	6878      	ldr	r0, [r7, #4]
 8001c40:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8001c42:	e08e      	b.n	8001d62 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c48:	2202      	movs	r2, #2
 8001c4a:	409a      	lsls	r2, r3
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	4013      	ands	r3, r2
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d056      	beq.n	8001d02 <HAL_DMA_IRQHandler+0x186>
 8001c54:	68bb      	ldr	r3, [r7, #8]
 8001c56:	f003 0302 	and.w	r3, r3, #2
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d051      	beq.n	8001d02 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	f003 0320 	and.w	r3, r3, #32
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d10b      	bne.n	8001c84 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	681a      	ldr	r2, [r3, #0]
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f022 020a 	bic.w	r2, r2, #10
 8001c7a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	2201      	movs	r2, #1
 8001c80:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	4a38      	ldr	r2, [pc, #224]	@ (8001d6c <HAL_DMA_IRQHandler+0x1f0>)
 8001c8a:	4293      	cmp	r3, r2
 8001c8c:	d029      	beq.n	8001ce2 <HAL_DMA_IRQHandler+0x166>
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	4a37      	ldr	r2, [pc, #220]	@ (8001d70 <HAL_DMA_IRQHandler+0x1f4>)
 8001c94:	4293      	cmp	r3, r2
 8001c96:	d022      	beq.n	8001cde <HAL_DMA_IRQHandler+0x162>
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	4a35      	ldr	r2, [pc, #212]	@ (8001d74 <HAL_DMA_IRQHandler+0x1f8>)
 8001c9e:	4293      	cmp	r3, r2
 8001ca0:	d01a      	beq.n	8001cd8 <HAL_DMA_IRQHandler+0x15c>
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	4a34      	ldr	r2, [pc, #208]	@ (8001d78 <HAL_DMA_IRQHandler+0x1fc>)
 8001ca8:	4293      	cmp	r3, r2
 8001caa:	d012      	beq.n	8001cd2 <HAL_DMA_IRQHandler+0x156>
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	4a32      	ldr	r2, [pc, #200]	@ (8001d7c <HAL_DMA_IRQHandler+0x200>)
 8001cb2:	4293      	cmp	r3, r2
 8001cb4:	d00a      	beq.n	8001ccc <HAL_DMA_IRQHandler+0x150>
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	4a31      	ldr	r2, [pc, #196]	@ (8001d80 <HAL_DMA_IRQHandler+0x204>)
 8001cbc:	4293      	cmp	r3, r2
 8001cbe:	d102      	bne.n	8001cc6 <HAL_DMA_IRQHandler+0x14a>
 8001cc0:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8001cc4:	e00e      	b.n	8001ce4 <HAL_DMA_IRQHandler+0x168>
 8001cc6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001cca:	e00b      	b.n	8001ce4 <HAL_DMA_IRQHandler+0x168>
 8001ccc:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001cd0:	e008      	b.n	8001ce4 <HAL_DMA_IRQHandler+0x168>
 8001cd2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001cd6:	e005      	b.n	8001ce4 <HAL_DMA_IRQHandler+0x168>
 8001cd8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001cdc:	e002      	b.n	8001ce4 <HAL_DMA_IRQHandler+0x168>
 8001cde:	2320      	movs	r3, #32
 8001ce0:	e000      	b.n	8001ce4 <HAL_DMA_IRQHandler+0x168>
 8001ce2:	2302      	movs	r3, #2
 8001ce4:	4a27      	ldr	r2, [pc, #156]	@ (8001d84 <HAL_DMA_IRQHandler+0x208>)
 8001ce6:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	2200      	movs	r2, #0
 8001cec:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d034      	beq.n	8001d62 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001cfc:	6878      	ldr	r0, [r7, #4]
 8001cfe:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001d00:	e02f      	b.n	8001d62 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d06:	2208      	movs	r2, #8
 8001d08:	409a      	lsls	r2, r3
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	4013      	ands	r3, r2
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d028      	beq.n	8001d64 <HAL_DMA_IRQHandler+0x1e8>
 8001d12:	68bb      	ldr	r3, [r7, #8]
 8001d14:	f003 0308 	and.w	r3, r3, #8
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d023      	beq.n	8001d64 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	681a      	ldr	r2, [r3, #0]
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f022 020e 	bic.w	r2, r2, #14
 8001d2a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001d34:	2101      	movs	r1, #1
 8001d36:	fa01 f202 	lsl.w	r2, r1, r2
 8001d3a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	2201      	movs	r2, #1
 8001d40:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	2201      	movs	r2, #1
 8001d46:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d004      	beq.n	8001d64 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d5e:	6878      	ldr	r0, [r7, #4]
 8001d60:	4798      	blx	r3
    }
  }
  return;
 8001d62:	bf00      	nop
 8001d64:	bf00      	nop
}
 8001d66:	3710      	adds	r7, #16
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	bd80      	pop	{r7, pc}
 8001d6c:	40020008 	.word	0x40020008
 8001d70:	4002001c 	.word	0x4002001c
 8001d74:	40020030 	.word	0x40020030
 8001d78:	40020044 	.word	0x40020044
 8001d7c:	40020058 	.word	0x40020058
 8001d80:	4002006c 	.word	0x4002006c
 8001d84:	40020000 	.word	0x40020000

08001d88 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	b085      	sub	sp, #20
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	60f8      	str	r0, [r7, #12]
 8001d90:	60b9      	str	r1, [r7, #8]
 8001d92:	607a      	str	r2, [r7, #4]
 8001d94:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001d9e:	2101      	movs	r1, #1
 8001da0:	fa01 f202 	lsl.w	r2, r1, r2
 8001da4:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	683a      	ldr	r2, [r7, #0]
 8001dac:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	685b      	ldr	r3, [r3, #4]
 8001db2:	2b10      	cmp	r3, #16
 8001db4:	d108      	bne.n	8001dc8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	687a      	ldr	r2, [r7, #4]
 8001dbc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	68ba      	ldr	r2, [r7, #8]
 8001dc4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001dc6:	e007      	b.n	8001dd8 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	68ba      	ldr	r2, [r7, #8]
 8001dce:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	687a      	ldr	r2, [r7, #4]
 8001dd6:	60da      	str	r2, [r3, #12]
}
 8001dd8:	bf00      	nop
 8001dda:	3714      	adds	r7, #20
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	bc80      	pop	{r7}
 8001de0:	4770      	bx	lr
	...

08001de4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001de4:	b480      	push	{r7}
 8001de6:	b08b      	sub	sp, #44	@ 0x2c
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
 8001dec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001dee:	2300      	movs	r3, #0
 8001df0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001df2:	2300      	movs	r3, #0
 8001df4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001df6:	e161      	b.n	80020bc <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001df8:	2201      	movs	r2, #1
 8001dfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dfc:	fa02 f303 	lsl.w	r3, r2, r3
 8001e00:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e02:	683b      	ldr	r3, [r7, #0]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	69fa      	ldr	r2, [r7, #28]
 8001e08:	4013      	ands	r3, r2
 8001e0a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001e0c:	69ba      	ldr	r2, [r7, #24]
 8001e0e:	69fb      	ldr	r3, [r7, #28]
 8001e10:	429a      	cmp	r2, r3
 8001e12:	f040 8150 	bne.w	80020b6 <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001e16:	683b      	ldr	r3, [r7, #0]
 8001e18:	685b      	ldr	r3, [r3, #4]
 8001e1a:	4a97      	ldr	r2, [pc, #604]	@ (8002078 <HAL_GPIO_Init+0x294>)
 8001e1c:	4293      	cmp	r3, r2
 8001e1e:	d05e      	beq.n	8001ede <HAL_GPIO_Init+0xfa>
 8001e20:	4a95      	ldr	r2, [pc, #596]	@ (8002078 <HAL_GPIO_Init+0x294>)
 8001e22:	4293      	cmp	r3, r2
 8001e24:	d875      	bhi.n	8001f12 <HAL_GPIO_Init+0x12e>
 8001e26:	4a95      	ldr	r2, [pc, #596]	@ (800207c <HAL_GPIO_Init+0x298>)
 8001e28:	4293      	cmp	r3, r2
 8001e2a:	d058      	beq.n	8001ede <HAL_GPIO_Init+0xfa>
 8001e2c:	4a93      	ldr	r2, [pc, #588]	@ (800207c <HAL_GPIO_Init+0x298>)
 8001e2e:	4293      	cmp	r3, r2
 8001e30:	d86f      	bhi.n	8001f12 <HAL_GPIO_Init+0x12e>
 8001e32:	4a93      	ldr	r2, [pc, #588]	@ (8002080 <HAL_GPIO_Init+0x29c>)
 8001e34:	4293      	cmp	r3, r2
 8001e36:	d052      	beq.n	8001ede <HAL_GPIO_Init+0xfa>
 8001e38:	4a91      	ldr	r2, [pc, #580]	@ (8002080 <HAL_GPIO_Init+0x29c>)
 8001e3a:	4293      	cmp	r3, r2
 8001e3c:	d869      	bhi.n	8001f12 <HAL_GPIO_Init+0x12e>
 8001e3e:	4a91      	ldr	r2, [pc, #580]	@ (8002084 <HAL_GPIO_Init+0x2a0>)
 8001e40:	4293      	cmp	r3, r2
 8001e42:	d04c      	beq.n	8001ede <HAL_GPIO_Init+0xfa>
 8001e44:	4a8f      	ldr	r2, [pc, #572]	@ (8002084 <HAL_GPIO_Init+0x2a0>)
 8001e46:	4293      	cmp	r3, r2
 8001e48:	d863      	bhi.n	8001f12 <HAL_GPIO_Init+0x12e>
 8001e4a:	4a8f      	ldr	r2, [pc, #572]	@ (8002088 <HAL_GPIO_Init+0x2a4>)
 8001e4c:	4293      	cmp	r3, r2
 8001e4e:	d046      	beq.n	8001ede <HAL_GPIO_Init+0xfa>
 8001e50:	4a8d      	ldr	r2, [pc, #564]	@ (8002088 <HAL_GPIO_Init+0x2a4>)
 8001e52:	4293      	cmp	r3, r2
 8001e54:	d85d      	bhi.n	8001f12 <HAL_GPIO_Init+0x12e>
 8001e56:	2b12      	cmp	r3, #18
 8001e58:	d82a      	bhi.n	8001eb0 <HAL_GPIO_Init+0xcc>
 8001e5a:	2b12      	cmp	r3, #18
 8001e5c:	d859      	bhi.n	8001f12 <HAL_GPIO_Init+0x12e>
 8001e5e:	a201      	add	r2, pc, #4	@ (adr r2, 8001e64 <HAL_GPIO_Init+0x80>)
 8001e60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e64:	08001edf 	.word	0x08001edf
 8001e68:	08001eb9 	.word	0x08001eb9
 8001e6c:	08001ecb 	.word	0x08001ecb
 8001e70:	08001f0d 	.word	0x08001f0d
 8001e74:	08001f13 	.word	0x08001f13
 8001e78:	08001f13 	.word	0x08001f13
 8001e7c:	08001f13 	.word	0x08001f13
 8001e80:	08001f13 	.word	0x08001f13
 8001e84:	08001f13 	.word	0x08001f13
 8001e88:	08001f13 	.word	0x08001f13
 8001e8c:	08001f13 	.word	0x08001f13
 8001e90:	08001f13 	.word	0x08001f13
 8001e94:	08001f13 	.word	0x08001f13
 8001e98:	08001f13 	.word	0x08001f13
 8001e9c:	08001f13 	.word	0x08001f13
 8001ea0:	08001f13 	.word	0x08001f13
 8001ea4:	08001f13 	.word	0x08001f13
 8001ea8:	08001ec1 	.word	0x08001ec1
 8001eac:	08001ed5 	.word	0x08001ed5
 8001eb0:	4a76      	ldr	r2, [pc, #472]	@ (800208c <HAL_GPIO_Init+0x2a8>)
 8001eb2:	4293      	cmp	r3, r2
 8001eb4:	d013      	beq.n	8001ede <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001eb6:	e02c      	b.n	8001f12 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001eb8:	683b      	ldr	r3, [r7, #0]
 8001eba:	68db      	ldr	r3, [r3, #12]
 8001ebc:	623b      	str	r3, [r7, #32]
          break;
 8001ebe:	e029      	b.n	8001f14 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001ec0:	683b      	ldr	r3, [r7, #0]
 8001ec2:	68db      	ldr	r3, [r3, #12]
 8001ec4:	3304      	adds	r3, #4
 8001ec6:	623b      	str	r3, [r7, #32]
          break;
 8001ec8:	e024      	b.n	8001f14 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001eca:	683b      	ldr	r3, [r7, #0]
 8001ecc:	68db      	ldr	r3, [r3, #12]
 8001ece:	3308      	adds	r3, #8
 8001ed0:	623b      	str	r3, [r7, #32]
          break;
 8001ed2:	e01f      	b.n	8001f14 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	68db      	ldr	r3, [r3, #12]
 8001ed8:	330c      	adds	r3, #12
 8001eda:	623b      	str	r3, [r7, #32]
          break;
 8001edc:	e01a      	b.n	8001f14 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001ede:	683b      	ldr	r3, [r7, #0]
 8001ee0:	689b      	ldr	r3, [r3, #8]
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d102      	bne.n	8001eec <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001ee6:	2304      	movs	r3, #4
 8001ee8:	623b      	str	r3, [r7, #32]
          break;
 8001eea:	e013      	b.n	8001f14 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	689b      	ldr	r3, [r3, #8]
 8001ef0:	2b01      	cmp	r3, #1
 8001ef2:	d105      	bne.n	8001f00 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001ef4:	2308      	movs	r3, #8
 8001ef6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	69fa      	ldr	r2, [r7, #28]
 8001efc:	611a      	str	r2, [r3, #16]
          break;
 8001efe:	e009      	b.n	8001f14 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001f00:	2308      	movs	r3, #8
 8001f02:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	69fa      	ldr	r2, [r7, #28]
 8001f08:	615a      	str	r2, [r3, #20]
          break;
 8001f0a:	e003      	b.n	8001f14 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	623b      	str	r3, [r7, #32]
          break;
 8001f10:	e000      	b.n	8001f14 <HAL_GPIO_Init+0x130>
          break;
 8001f12:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001f14:	69bb      	ldr	r3, [r7, #24]
 8001f16:	2bff      	cmp	r3, #255	@ 0xff
 8001f18:	d801      	bhi.n	8001f1e <HAL_GPIO_Init+0x13a>
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	e001      	b.n	8001f22 <HAL_GPIO_Init+0x13e>
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	3304      	adds	r3, #4
 8001f22:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001f24:	69bb      	ldr	r3, [r7, #24]
 8001f26:	2bff      	cmp	r3, #255	@ 0xff
 8001f28:	d802      	bhi.n	8001f30 <HAL_GPIO_Init+0x14c>
 8001f2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f2c:	009b      	lsls	r3, r3, #2
 8001f2e:	e002      	b.n	8001f36 <HAL_GPIO_Init+0x152>
 8001f30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f32:	3b08      	subs	r3, #8
 8001f34:	009b      	lsls	r3, r3, #2
 8001f36:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001f38:	697b      	ldr	r3, [r7, #20]
 8001f3a:	681a      	ldr	r2, [r3, #0]
 8001f3c:	210f      	movs	r1, #15
 8001f3e:	693b      	ldr	r3, [r7, #16]
 8001f40:	fa01 f303 	lsl.w	r3, r1, r3
 8001f44:	43db      	mvns	r3, r3
 8001f46:	401a      	ands	r2, r3
 8001f48:	6a39      	ldr	r1, [r7, #32]
 8001f4a:	693b      	ldr	r3, [r7, #16]
 8001f4c:	fa01 f303 	lsl.w	r3, r1, r3
 8001f50:	431a      	orrs	r2, r3
 8001f52:	697b      	ldr	r3, [r7, #20]
 8001f54:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001f56:	683b      	ldr	r3, [r7, #0]
 8001f58:	685b      	ldr	r3, [r3, #4]
 8001f5a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	f000 80a9 	beq.w	80020b6 <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001f64:	4b4a      	ldr	r3, [pc, #296]	@ (8002090 <HAL_GPIO_Init+0x2ac>)
 8001f66:	699b      	ldr	r3, [r3, #24]
 8001f68:	4a49      	ldr	r2, [pc, #292]	@ (8002090 <HAL_GPIO_Init+0x2ac>)
 8001f6a:	f043 0301 	orr.w	r3, r3, #1
 8001f6e:	6193      	str	r3, [r2, #24]
 8001f70:	4b47      	ldr	r3, [pc, #284]	@ (8002090 <HAL_GPIO_Init+0x2ac>)
 8001f72:	699b      	ldr	r3, [r3, #24]
 8001f74:	f003 0301 	and.w	r3, r3, #1
 8001f78:	60bb      	str	r3, [r7, #8]
 8001f7a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001f7c:	4a45      	ldr	r2, [pc, #276]	@ (8002094 <HAL_GPIO_Init+0x2b0>)
 8001f7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f80:	089b      	lsrs	r3, r3, #2
 8001f82:	3302      	adds	r3, #2
 8001f84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f88:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001f8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f8c:	f003 0303 	and.w	r3, r3, #3
 8001f90:	009b      	lsls	r3, r3, #2
 8001f92:	220f      	movs	r2, #15
 8001f94:	fa02 f303 	lsl.w	r3, r2, r3
 8001f98:	43db      	mvns	r3, r3
 8001f9a:	68fa      	ldr	r2, [r7, #12]
 8001f9c:	4013      	ands	r3, r2
 8001f9e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	4a3d      	ldr	r2, [pc, #244]	@ (8002098 <HAL_GPIO_Init+0x2b4>)
 8001fa4:	4293      	cmp	r3, r2
 8001fa6:	d00d      	beq.n	8001fc4 <HAL_GPIO_Init+0x1e0>
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	4a3c      	ldr	r2, [pc, #240]	@ (800209c <HAL_GPIO_Init+0x2b8>)
 8001fac:	4293      	cmp	r3, r2
 8001fae:	d007      	beq.n	8001fc0 <HAL_GPIO_Init+0x1dc>
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	4a3b      	ldr	r2, [pc, #236]	@ (80020a0 <HAL_GPIO_Init+0x2bc>)
 8001fb4:	4293      	cmp	r3, r2
 8001fb6:	d101      	bne.n	8001fbc <HAL_GPIO_Init+0x1d8>
 8001fb8:	2302      	movs	r3, #2
 8001fba:	e004      	b.n	8001fc6 <HAL_GPIO_Init+0x1e2>
 8001fbc:	2303      	movs	r3, #3
 8001fbe:	e002      	b.n	8001fc6 <HAL_GPIO_Init+0x1e2>
 8001fc0:	2301      	movs	r3, #1
 8001fc2:	e000      	b.n	8001fc6 <HAL_GPIO_Init+0x1e2>
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001fc8:	f002 0203 	and.w	r2, r2, #3
 8001fcc:	0092      	lsls	r2, r2, #2
 8001fce:	4093      	lsls	r3, r2
 8001fd0:	68fa      	ldr	r2, [r7, #12]
 8001fd2:	4313      	orrs	r3, r2
 8001fd4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001fd6:	492f      	ldr	r1, [pc, #188]	@ (8002094 <HAL_GPIO_Init+0x2b0>)
 8001fd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fda:	089b      	lsrs	r3, r3, #2
 8001fdc:	3302      	adds	r3, #2
 8001fde:	68fa      	ldr	r2, [r7, #12]
 8001fe0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	685b      	ldr	r3, [r3, #4]
 8001fe8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d006      	beq.n	8001ffe <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001ff0:	4b2c      	ldr	r3, [pc, #176]	@ (80020a4 <HAL_GPIO_Init+0x2c0>)
 8001ff2:	689a      	ldr	r2, [r3, #8]
 8001ff4:	492b      	ldr	r1, [pc, #172]	@ (80020a4 <HAL_GPIO_Init+0x2c0>)
 8001ff6:	69bb      	ldr	r3, [r7, #24]
 8001ff8:	4313      	orrs	r3, r2
 8001ffa:	608b      	str	r3, [r1, #8]
 8001ffc:	e006      	b.n	800200c <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001ffe:	4b29      	ldr	r3, [pc, #164]	@ (80020a4 <HAL_GPIO_Init+0x2c0>)
 8002000:	689a      	ldr	r2, [r3, #8]
 8002002:	69bb      	ldr	r3, [r7, #24]
 8002004:	43db      	mvns	r3, r3
 8002006:	4927      	ldr	r1, [pc, #156]	@ (80020a4 <HAL_GPIO_Init+0x2c0>)
 8002008:	4013      	ands	r3, r2
 800200a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	685b      	ldr	r3, [r3, #4]
 8002010:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002014:	2b00      	cmp	r3, #0
 8002016:	d006      	beq.n	8002026 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002018:	4b22      	ldr	r3, [pc, #136]	@ (80020a4 <HAL_GPIO_Init+0x2c0>)
 800201a:	68da      	ldr	r2, [r3, #12]
 800201c:	4921      	ldr	r1, [pc, #132]	@ (80020a4 <HAL_GPIO_Init+0x2c0>)
 800201e:	69bb      	ldr	r3, [r7, #24]
 8002020:	4313      	orrs	r3, r2
 8002022:	60cb      	str	r3, [r1, #12]
 8002024:	e006      	b.n	8002034 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002026:	4b1f      	ldr	r3, [pc, #124]	@ (80020a4 <HAL_GPIO_Init+0x2c0>)
 8002028:	68da      	ldr	r2, [r3, #12]
 800202a:	69bb      	ldr	r3, [r7, #24]
 800202c:	43db      	mvns	r3, r3
 800202e:	491d      	ldr	r1, [pc, #116]	@ (80020a4 <HAL_GPIO_Init+0x2c0>)
 8002030:	4013      	ands	r3, r2
 8002032:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	685b      	ldr	r3, [r3, #4]
 8002038:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800203c:	2b00      	cmp	r3, #0
 800203e:	d006      	beq.n	800204e <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002040:	4b18      	ldr	r3, [pc, #96]	@ (80020a4 <HAL_GPIO_Init+0x2c0>)
 8002042:	685a      	ldr	r2, [r3, #4]
 8002044:	4917      	ldr	r1, [pc, #92]	@ (80020a4 <HAL_GPIO_Init+0x2c0>)
 8002046:	69bb      	ldr	r3, [r7, #24]
 8002048:	4313      	orrs	r3, r2
 800204a:	604b      	str	r3, [r1, #4]
 800204c:	e006      	b.n	800205c <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800204e:	4b15      	ldr	r3, [pc, #84]	@ (80020a4 <HAL_GPIO_Init+0x2c0>)
 8002050:	685a      	ldr	r2, [r3, #4]
 8002052:	69bb      	ldr	r3, [r7, #24]
 8002054:	43db      	mvns	r3, r3
 8002056:	4913      	ldr	r1, [pc, #76]	@ (80020a4 <HAL_GPIO_Init+0x2c0>)
 8002058:	4013      	ands	r3, r2
 800205a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	685b      	ldr	r3, [r3, #4]
 8002060:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002064:	2b00      	cmp	r3, #0
 8002066:	d01f      	beq.n	80020a8 <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002068:	4b0e      	ldr	r3, [pc, #56]	@ (80020a4 <HAL_GPIO_Init+0x2c0>)
 800206a:	681a      	ldr	r2, [r3, #0]
 800206c:	490d      	ldr	r1, [pc, #52]	@ (80020a4 <HAL_GPIO_Init+0x2c0>)
 800206e:	69bb      	ldr	r3, [r7, #24]
 8002070:	4313      	orrs	r3, r2
 8002072:	600b      	str	r3, [r1, #0]
 8002074:	e01f      	b.n	80020b6 <HAL_GPIO_Init+0x2d2>
 8002076:	bf00      	nop
 8002078:	10320000 	.word	0x10320000
 800207c:	10310000 	.word	0x10310000
 8002080:	10220000 	.word	0x10220000
 8002084:	10210000 	.word	0x10210000
 8002088:	10120000 	.word	0x10120000
 800208c:	10110000 	.word	0x10110000
 8002090:	40021000 	.word	0x40021000
 8002094:	40010000 	.word	0x40010000
 8002098:	40010800 	.word	0x40010800
 800209c:	40010c00 	.word	0x40010c00
 80020a0:	40011000 	.word	0x40011000
 80020a4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80020a8:	4b0b      	ldr	r3, [pc, #44]	@ (80020d8 <HAL_GPIO_Init+0x2f4>)
 80020aa:	681a      	ldr	r2, [r3, #0]
 80020ac:	69bb      	ldr	r3, [r7, #24]
 80020ae:	43db      	mvns	r3, r3
 80020b0:	4909      	ldr	r1, [pc, #36]	@ (80020d8 <HAL_GPIO_Init+0x2f4>)
 80020b2:	4013      	ands	r3, r2
 80020b4:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80020b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020b8:	3301      	adds	r3, #1
 80020ba:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80020bc:	683b      	ldr	r3, [r7, #0]
 80020be:	681a      	ldr	r2, [r3, #0]
 80020c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020c2:	fa22 f303 	lsr.w	r3, r2, r3
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	f47f ae96 	bne.w	8001df8 <HAL_GPIO_Init+0x14>
  }
}
 80020cc:	bf00      	nop
 80020ce:	bf00      	nop
 80020d0:	372c      	adds	r7, #44	@ 0x2c
 80020d2:	46bd      	mov	sp, r7
 80020d4:	bc80      	pop	{r7}
 80020d6:	4770      	bx	lr
 80020d8:	40010400 	.word	0x40010400

080020dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80020dc:	b480      	push	{r7}
 80020de:	b083      	sub	sp, #12
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
 80020e4:	460b      	mov	r3, r1
 80020e6:	807b      	strh	r3, [r7, #2]
 80020e8:	4613      	mov	r3, r2
 80020ea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80020ec:	787b      	ldrb	r3, [r7, #1]
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d003      	beq.n	80020fa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80020f2:	887a      	ldrh	r2, [r7, #2]
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80020f8:	e003      	b.n	8002102 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80020fa:	887b      	ldrh	r3, [r7, #2]
 80020fc:	041a      	lsls	r2, r3, #16
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	611a      	str	r2, [r3, #16]
}
 8002102:	bf00      	nop
 8002104:	370c      	adds	r7, #12
 8002106:	46bd      	mov	sp, r7
 8002108:	bc80      	pop	{r7}
 800210a:	4770      	bx	lr

0800210c <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800210c:	b480      	push	{r7}
 800210e:	b085      	sub	sp, #20
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
 8002114:	460b      	mov	r3, r1
 8002116:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	68db      	ldr	r3, [r3, #12]
 800211c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800211e:	887a      	ldrh	r2, [r7, #2]
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	4013      	ands	r3, r2
 8002124:	041a      	lsls	r2, r3, #16
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	43d9      	mvns	r1, r3
 800212a:	887b      	ldrh	r3, [r7, #2]
 800212c:	400b      	ands	r3, r1
 800212e:	431a      	orrs	r2, r3
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	611a      	str	r2, [r3, #16]
}
 8002134:	bf00      	nop
 8002136:	3714      	adds	r7, #20
 8002138:	46bd      	mov	sp, r7
 800213a:	bc80      	pop	{r7}
 800213c:	4770      	bx	lr
	...

08002140 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	b084      	sub	sp, #16
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	2b00      	cmp	r3, #0
 800214c:	d101      	bne.n	8002152 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800214e:	2301      	movs	r3, #1
 8002150:	e12b      	b.n	80023aa <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002158:	b2db      	uxtb	r3, r3
 800215a:	2b00      	cmp	r3, #0
 800215c:	d106      	bne.n	800216c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	2200      	movs	r2, #0
 8002162:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002166:	6878      	ldr	r0, [r7, #4]
 8002168:	f7fe fff4 	bl	8001154 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	2224      	movs	r2, #36	@ 0x24
 8002170:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	681a      	ldr	r2, [r3, #0]
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f022 0201 	bic.w	r2, r2, #1
 8002182:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	681a      	ldr	r2, [r3, #0]
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002192:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	681a      	ldr	r2, [r3, #0]
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80021a2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80021a4:	f000 fcda 	bl	8002b5c <HAL_RCC_GetPCLK1Freq>
 80021a8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	685b      	ldr	r3, [r3, #4]
 80021ae:	4a81      	ldr	r2, [pc, #516]	@ (80023b4 <HAL_I2C_Init+0x274>)
 80021b0:	4293      	cmp	r3, r2
 80021b2:	d807      	bhi.n	80021c4 <HAL_I2C_Init+0x84>
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	4a80      	ldr	r2, [pc, #512]	@ (80023b8 <HAL_I2C_Init+0x278>)
 80021b8:	4293      	cmp	r3, r2
 80021ba:	bf94      	ite	ls
 80021bc:	2301      	movls	r3, #1
 80021be:	2300      	movhi	r3, #0
 80021c0:	b2db      	uxtb	r3, r3
 80021c2:	e006      	b.n	80021d2 <HAL_I2C_Init+0x92>
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	4a7d      	ldr	r2, [pc, #500]	@ (80023bc <HAL_I2C_Init+0x27c>)
 80021c8:	4293      	cmp	r3, r2
 80021ca:	bf94      	ite	ls
 80021cc:	2301      	movls	r3, #1
 80021ce:	2300      	movhi	r3, #0
 80021d0:	b2db      	uxtb	r3, r3
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d001      	beq.n	80021da <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80021d6:	2301      	movs	r3, #1
 80021d8:	e0e7      	b.n	80023aa <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	4a78      	ldr	r2, [pc, #480]	@ (80023c0 <HAL_I2C_Init+0x280>)
 80021de:	fba2 2303 	umull	r2, r3, r2, r3
 80021e2:	0c9b      	lsrs	r3, r3, #18
 80021e4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	685b      	ldr	r3, [r3, #4]
 80021ec:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	68ba      	ldr	r2, [r7, #8]
 80021f6:	430a      	orrs	r2, r1
 80021f8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	6a1b      	ldr	r3, [r3, #32]
 8002200:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	685b      	ldr	r3, [r3, #4]
 8002208:	4a6a      	ldr	r2, [pc, #424]	@ (80023b4 <HAL_I2C_Init+0x274>)
 800220a:	4293      	cmp	r3, r2
 800220c:	d802      	bhi.n	8002214 <HAL_I2C_Init+0xd4>
 800220e:	68bb      	ldr	r3, [r7, #8]
 8002210:	3301      	adds	r3, #1
 8002212:	e009      	b.n	8002228 <HAL_I2C_Init+0xe8>
 8002214:	68bb      	ldr	r3, [r7, #8]
 8002216:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800221a:	fb02 f303 	mul.w	r3, r2, r3
 800221e:	4a69      	ldr	r2, [pc, #420]	@ (80023c4 <HAL_I2C_Init+0x284>)
 8002220:	fba2 2303 	umull	r2, r3, r2, r3
 8002224:	099b      	lsrs	r3, r3, #6
 8002226:	3301      	adds	r3, #1
 8002228:	687a      	ldr	r2, [r7, #4]
 800222a:	6812      	ldr	r2, [r2, #0]
 800222c:	430b      	orrs	r3, r1
 800222e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	69db      	ldr	r3, [r3, #28]
 8002236:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800223a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	685b      	ldr	r3, [r3, #4]
 8002242:	495c      	ldr	r1, [pc, #368]	@ (80023b4 <HAL_I2C_Init+0x274>)
 8002244:	428b      	cmp	r3, r1
 8002246:	d819      	bhi.n	800227c <HAL_I2C_Init+0x13c>
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	1e59      	subs	r1, r3, #1
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	685b      	ldr	r3, [r3, #4]
 8002250:	005b      	lsls	r3, r3, #1
 8002252:	fbb1 f3f3 	udiv	r3, r1, r3
 8002256:	1c59      	adds	r1, r3, #1
 8002258:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800225c:	400b      	ands	r3, r1
 800225e:	2b00      	cmp	r3, #0
 8002260:	d00a      	beq.n	8002278 <HAL_I2C_Init+0x138>
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	1e59      	subs	r1, r3, #1
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	685b      	ldr	r3, [r3, #4]
 800226a:	005b      	lsls	r3, r3, #1
 800226c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002270:	3301      	adds	r3, #1
 8002272:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002276:	e051      	b.n	800231c <HAL_I2C_Init+0x1dc>
 8002278:	2304      	movs	r3, #4
 800227a:	e04f      	b.n	800231c <HAL_I2C_Init+0x1dc>
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	689b      	ldr	r3, [r3, #8]
 8002280:	2b00      	cmp	r3, #0
 8002282:	d111      	bne.n	80022a8 <HAL_I2C_Init+0x168>
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	1e58      	subs	r0, r3, #1
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	6859      	ldr	r1, [r3, #4]
 800228c:	460b      	mov	r3, r1
 800228e:	005b      	lsls	r3, r3, #1
 8002290:	440b      	add	r3, r1
 8002292:	fbb0 f3f3 	udiv	r3, r0, r3
 8002296:	3301      	adds	r3, #1
 8002298:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800229c:	2b00      	cmp	r3, #0
 800229e:	bf0c      	ite	eq
 80022a0:	2301      	moveq	r3, #1
 80022a2:	2300      	movne	r3, #0
 80022a4:	b2db      	uxtb	r3, r3
 80022a6:	e012      	b.n	80022ce <HAL_I2C_Init+0x18e>
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	1e58      	subs	r0, r3, #1
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	6859      	ldr	r1, [r3, #4]
 80022b0:	460b      	mov	r3, r1
 80022b2:	009b      	lsls	r3, r3, #2
 80022b4:	440b      	add	r3, r1
 80022b6:	0099      	lsls	r1, r3, #2
 80022b8:	440b      	add	r3, r1
 80022ba:	fbb0 f3f3 	udiv	r3, r0, r3
 80022be:	3301      	adds	r3, #1
 80022c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	bf0c      	ite	eq
 80022c8:	2301      	moveq	r3, #1
 80022ca:	2300      	movne	r3, #0
 80022cc:	b2db      	uxtb	r3, r3
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d001      	beq.n	80022d6 <HAL_I2C_Init+0x196>
 80022d2:	2301      	movs	r3, #1
 80022d4:	e022      	b.n	800231c <HAL_I2C_Init+0x1dc>
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	689b      	ldr	r3, [r3, #8]
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d10e      	bne.n	80022fc <HAL_I2C_Init+0x1bc>
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	1e58      	subs	r0, r3, #1
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	6859      	ldr	r1, [r3, #4]
 80022e6:	460b      	mov	r3, r1
 80022e8:	005b      	lsls	r3, r3, #1
 80022ea:	440b      	add	r3, r1
 80022ec:	fbb0 f3f3 	udiv	r3, r0, r3
 80022f0:	3301      	adds	r3, #1
 80022f2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80022f6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80022fa:	e00f      	b.n	800231c <HAL_I2C_Init+0x1dc>
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	1e58      	subs	r0, r3, #1
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	6859      	ldr	r1, [r3, #4]
 8002304:	460b      	mov	r3, r1
 8002306:	009b      	lsls	r3, r3, #2
 8002308:	440b      	add	r3, r1
 800230a:	0099      	lsls	r1, r3, #2
 800230c:	440b      	add	r3, r1
 800230e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002312:	3301      	adds	r3, #1
 8002314:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002318:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800231c:	6879      	ldr	r1, [r7, #4]
 800231e:	6809      	ldr	r1, [r1, #0]
 8002320:	4313      	orrs	r3, r2
 8002322:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	69da      	ldr	r2, [r3, #28]
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	6a1b      	ldr	r3, [r3, #32]
 8002336:	431a      	orrs	r2, r3
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	430a      	orrs	r2, r1
 800233e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	689b      	ldr	r3, [r3, #8]
 8002346:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800234a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800234e:	687a      	ldr	r2, [r7, #4]
 8002350:	6911      	ldr	r1, [r2, #16]
 8002352:	687a      	ldr	r2, [r7, #4]
 8002354:	68d2      	ldr	r2, [r2, #12]
 8002356:	4311      	orrs	r1, r2
 8002358:	687a      	ldr	r2, [r7, #4]
 800235a:	6812      	ldr	r2, [r2, #0]
 800235c:	430b      	orrs	r3, r1
 800235e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	68db      	ldr	r3, [r3, #12]
 8002366:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	695a      	ldr	r2, [r3, #20]
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	699b      	ldr	r3, [r3, #24]
 8002372:	431a      	orrs	r2, r3
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	430a      	orrs	r2, r1
 800237a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	681a      	ldr	r2, [r3, #0]
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f042 0201 	orr.w	r2, r2, #1
 800238a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	2200      	movs	r2, #0
 8002390:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	2220      	movs	r2, #32
 8002396:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	2200      	movs	r2, #0
 800239e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	2200      	movs	r2, #0
 80023a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80023a8:	2300      	movs	r3, #0
}
 80023aa:	4618      	mov	r0, r3
 80023ac:	3710      	adds	r7, #16
 80023ae:	46bd      	mov	sp, r7
 80023b0:	bd80      	pop	{r7, pc}
 80023b2:	bf00      	nop
 80023b4:	000186a0 	.word	0x000186a0
 80023b8:	001e847f 	.word	0x001e847f
 80023bc:	003d08ff 	.word	0x003d08ff
 80023c0:	431bde83 	.word	0x431bde83
 80023c4:	10624dd3 	.word	0x10624dd3

080023c8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b086      	sub	sp, #24
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d101      	bne.n	80023da <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80023d6:	2301      	movs	r3, #1
 80023d8:	e272      	b.n	80028c0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f003 0301 	and.w	r3, r3, #1
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	f000 8087 	beq.w	80024f6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80023e8:	4b92      	ldr	r3, [pc, #584]	@ (8002634 <HAL_RCC_OscConfig+0x26c>)
 80023ea:	685b      	ldr	r3, [r3, #4]
 80023ec:	f003 030c 	and.w	r3, r3, #12
 80023f0:	2b04      	cmp	r3, #4
 80023f2:	d00c      	beq.n	800240e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80023f4:	4b8f      	ldr	r3, [pc, #572]	@ (8002634 <HAL_RCC_OscConfig+0x26c>)
 80023f6:	685b      	ldr	r3, [r3, #4]
 80023f8:	f003 030c 	and.w	r3, r3, #12
 80023fc:	2b08      	cmp	r3, #8
 80023fe:	d112      	bne.n	8002426 <HAL_RCC_OscConfig+0x5e>
 8002400:	4b8c      	ldr	r3, [pc, #560]	@ (8002634 <HAL_RCC_OscConfig+0x26c>)
 8002402:	685b      	ldr	r3, [r3, #4]
 8002404:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002408:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800240c:	d10b      	bne.n	8002426 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800240e:	4b89      	ldr	r3, [pc, #548]	@ (8002634 <HAL_RCC_OscConfig+0x26c>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002416:	2b00      	cmp	r3, #0
 8002418:	d06c      	beq.n	80024f4 <HAL_RCC_OscConfig+0x12c>
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	685b      	ldr	r3, [r3, #4]
 800241e:	2b00      	cmp	r3, #0
 8002420:	d168      	bne.n	80024f4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002422:	2301      	movs	r3, #1
 8002424:	e24c      	b.n	80028c0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	685b      	ldr	r3, [r3, #4]
 800242a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800242e:	d106      	bne.n	800243e <HAL_RCC_OscConfig+0x76>
 8002430:	4b80      	ldr	r3, [pc, #512]	@ (8002634 <HAL_RCC_OscConfig+0x26c>)
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	4a7f      	ldr	r2, [pc, #508]	@ (8002634 <HAL_RCC_OscConfig+0x26c>)
 8002436:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800243a:	6013      	str	r3, [r2, #0]
 800243c:	e02e      	b.n	800249c <HAL_RCC_OscConfig+0xd4>
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	685b      	ldr	r3, [r3, #4]
 8002442:	2b00      	cmp	r3, #0
 8002444:	d10c      	bne.n	8002460 <HAL_RCC_OscConfig+0x98>
 8002446:	4b7b      	ldr	r3, [pc, #492]	@ (8002634 <HAL_RCC_OscConfig+0x26c>)
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	4a7a      	ldr	r2, [pc, #488]	@ (8002634 <HAL_RCC_OscConfig+0x26c>)
 800244c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002450:	6013      	str	r3, [r2, #0]
 8002452:	4b78      	ldr	r3, [pc, #480]	@ (8002634 <HAL_RCC_OscConfig+0x26c>)
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	4a77      	ldr	r2, [pc, #476]	@ (8002634 <HAL_RCC_OscConfig+0x26c>)
 8002458:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800245c:	6013      	str	r3, [r2, #0]
 800245e:	e01d      	b.n	800249c <HAL_RCC_OscConfig+0xd4>
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	685b      	ldr	r3, [r3, #4]
 8002464:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002468:	d10c      	bne.n	8002484 <HAL_RCC_OscConfig+0xbc>
 800246a:	4b72      	ldr	r3, [pc, #456]	@ (8002634 <HAL_RCC_OscConfig+0x26c>)
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	4a71      	ldr	r2, [pc, #452]	@ (8002634 <HAL_RCC_OscConfig+0x26c>)
 8002470:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002474:	6013      	str	r3, [r2, #0]
 8002476:	4b6f      	ldr	r3, [pc, #444]	@ (8002634 <HAL_RCC_OscConfig+0x26c>)
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	4a6e      	ldr	r2, [pc, #440]	@ (8002634 <HAL_RCC_OscConfig+0x26c>)
 800247c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002480:	6013      	str	r3, [r2, #0]
 8002482:	e00b      	b.n	800249c <HAL_RCC_OscConfig+0xd4>
 8002484:	4b6b      	ldr	r3, [pc, #428]	@ (8002634 <HAL_RCC_OscConfig+0x26c>)
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	4a6a      	ldr	r2, [pc, #424]	@ (8002634 <HAL_RCC_OscConfig+0x26c>)
 800248a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800248e:	6013      	str	r3, [r2, #0]
 8002490:	4b68      	ldr	r3, [pc, #416]	@ (8002634 <HAL_RCC_OscConfig+0x26c>)
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	4a67      	ldr	r2, [pc, #412]	@ (8002634 <HAL_RCC_OscConfig+0x26c>)
 8002496:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800249a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	685b      	ldr	r3, [r3, #4]
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d013      	beq.n	80024cc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024a4:	f7ff f8c0 	bl	8001628 <HAL_GetTick>
 80024a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024aa:	e008      	b.n	80024be <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024ac:	f7ff f8bc 	bl	8001628 <HAL_GetTick>
 80024b0:	4602      	mov	r2, r0
 80024b2:	693b      	ldr	r3, [r7, #16]
 80024b4:	1ad3      	subs	r3, r2, r3
 80024b6:	2b64      	cmp	r3, #100	@ 0x64
 80024b8:	d901      	bls.n	80024be <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80024ba:	2303      	movs	r3, #3
 80024bc:	e200      	b.n	80028c0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024be:	4b5d      	ldr	r3, [pc, #372]	@ (8002634 <HAL_RCC_OscConfig+0x26c>)
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d0f0      	beq.n	80024ac <HAL_RCC_OscConfig+0xe4>
 80024ca:	e014      	b.n	80024f6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024cc:	f7ff f8ac 	bl	8001628 <HAL_GetTick>
 80024d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024d2:	e008      	b.n	80024e6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024d4:	f7ff f8a8 	bl	8001628 <HAL_GetTick>
 80024d8:	4602      	mov	r2, r0
 80024da:	693b      	ldr	r3, [r7, #16]
 80024dc:	1ad3      	subs	r3, r2, r3
 80024de:	2b64      	cmp	r3, #100	@ 0x64
 80024e0:	d901      	bls.n	80024e6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80024e2:	2303      	movs	r3, #3
 80024e4:	e1ec      	b.n	80028c0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024e6:	4b53      	ldr	r3, [pc, #332]	@ (8002634 <HAL_RCC_OscConfig+0x26c>)
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d1f0      	bne.n	80024d4 <HAL_RCC_OscConfig+0x10c>
 80024f2:	e000      	b.n	80024f6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f003 0302 	and.w	r3, r3, #2
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d063      	beq.n	80025ca <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002502:	4b4c      	ldr	r3, [pc, #304]	@ (8002634 <HAL_RCC_OscConfig+0x26c>)
 8002504:	685b      	ldr	r3, [r3, #4]
 8002506:	f003 030c 	and.w	r3, r3, #12
 800250a:	2b00      	cmp	r3, #0
 800250c:	d00b      	beq.n	8002526 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800250e:	4b49      	ldr	r3, [pc, #292]	@ (8002634 <HAL_RCC_OscConfig+0x26c>)
 8002510:	685b      	ldr	r3, [r3, #4]
 8002512:	f003 030c 	and.w	r3, r3, #12
 8002516:	2b08      	cmp	r3, #8
 8002518:	d11c      	bne.n	8002554 <HAL_RCC_OscConfig+0x18c>
 800251a:	4b46      	ldr	r3, [pc, #280]	@ (8002634 <HAL_RCC_OscConfig+0x26c>)
 800251c:	685b      	ldr	r3, [r3, #4]
 800251e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002522:	2b00      	cmp	r3, #0
 8002524:	d116      	bne.n	8002554 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002526:	4b43      	ldr	r3, [pc, #268]	@ (8002634 <HAL_RCC_OscConfig+0x26c>)
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f003 0302 	and.w	r3, r3, #2
 800252e:	2b00      	cmp	r3, #0
 8002530:	d005      	beq.n	800253e <HAL_RCC_OscConfig+0x176>
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	691b      	ldr	r3, [r3, #16]
 8002536:	2b01      	cmp	r3, #1
 8002538:	d001      	beq.n	800253e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800253a:	2301      	movs	r3, #1
 800253c:	e1c0      	b.n	80028c0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800253e:	4b3d      	ldr	r3, [pc, #244]	@ (8002634 <HAL_RCC_OscConfig+0x26c>)
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	695b      	ldr	r3, [r3, #20]
 800254a:	00db      	lsls	r3, r3, #3
 800254c:	4939      	ldr	r1, [pc, #228]	@ (8002634 <HAL_RCC_OscConfig+0x26c>)
 800254e:	4313      	orrs	r3, r2
 8002550:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002552:	e03a      	b.n	80025ca <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	691b      	ldr	r3, [r3, #16]
 8002558:	2b00      	cmp	r3, #0
 800255a:	d020      	beq.n	800259e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800255c:	4b36      	ldr	r3, [pc, #216]	@ (8002638 <HAL_RCC_OscConfig+0x270>)
 800255e:	2201      	movs	r2, #1
 8002560:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002562:	f7ff f861 	bl	8001628 <HAL_GetTick>
 8002566:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002568:	e008      	b.n	800257c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800256a:	f7ff f85d 	bl	8001628 <HAL_GetTick>
 800256e:	4602      	mov	r2, r0
 8002570:	693b      	ldr	r3, [r7, #16]
 8002572:	1ad3      	subs	r3, r2, r3
 8002574:	2b02      	cmp	r3, #2
 8002576:	d901      	bls.n	800257c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002578:	2303      	movs	r3, #3
 800257a:	e1a1      	b.n	80028c0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800257c:	4b2d      	ldr	r3, [pc, #180]	@ (8002634 <HAL_RCC_OscConfig+0x26c>)
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f003 0302 	and.w	r3, r3, #2
 8002584:	2b00      	cmp	r3, #0
 8002586:	d0f0      	beq.n	800256a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002588:	4b2a      	ldr	r3, [pc, #168]	@ (8002634 <HAL_RCC_OscConfig+0x26c>)
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	695b      	ldr	r3, [r3, #20]
 8002594:	00db      	lsls	r3, r3, #3
 8002596:	4927      	ldr	r1, [pc, #156]	@ (8002634 <HAL_RCC_OscConfig+0x26c>)
 8002598:	4313      	orrs	r3, r2
 800259a:	600b      	str	r3, [r1, #0]
 800259c:	e015      	b.n	80025ca <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800259e:	4b26      	ldr	r3, [pc, #152]	@ (8002638 <HAL_RCC_OscConfig+0x270>)
 80025a0:	2200      	movs	r2, #0
 80025a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025a4:	f7ff f840 	bl	8001628 <HAL_GetTick>
 80025a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025aa:	e008      	b.n	80025be <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025ac:	f7ff f83c 	bl	8001628 <HAL_GetTick>
 80025b0:	4602      	mov	r2, r0
 80025b2:	693b      	ldr	r3, [r7, #16]
 80025b4:	1ad3      	subs	r3, r2, r3
 80025b6:	2b02      	cmp	r3, #2
 80025b8:	d901      	bls.n	80025be <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80025ba:	2303      	movs	r3, #3
 80025bc:	e180      	b.n	80028c0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025be:	4b1d      	ldr	r3, [pc, #116]	@ (8002634 <HAL_RCC_OscConfig+0x26c>)
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f003 0302 	and.w	r3, r3, #2
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d1f0      	bne.n	80025ac <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f003 0308 	and.w	r3, r3, #8
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d03a      	beq.n	800264c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	699b      	ldr	r3, [r3, #24]
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d019      	beq.n	8002612 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80025de:	4b17      	ldr	r3, [pc, #92]	@ (800263c <HAL_RCC_OscConfig+0x274>)
 80025e0:	2201      	movs	r2, #1
 80025e2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025e4:	f7ff f820 	bl	8001628 <HAL_GetTick>
 80025e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025ea:	e008      	b.n	80025fe <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80025ec:	f7ff f81c 	bl	8001628 <HAL_GetTick>
 80025f0:	4602      	mov	r2, r0
 80025f2:	693b      	ldr	r3, [r7, #16]
 80025f4:	1ad3      	subs	r3, r2, r3
 80025f6:	2b02      	cmp	r3, #2
 80025f8:	d901      	bls.n	80025fe <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80025fa:	2303      	movs	r3, #3
 80025fc:	e160      	b.n	80028c0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025fe:	4b0d      	ldr	r3, [pc, #52]	@ (8002634 <HAL_RCC_OscConfig+0x26c>)
 8002600:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002602:	f003 0302 	and.w	r3, r3, #2
 8002606:	2b00      	cmp	r3, #0
 8002608:	d0f0      	beq.n	80025ec <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800260a:	2001      	movs	r0, #1
 800260c:	f000 face 	bl	8002bac <RCC_Delay>
 8002610:	e01c      	b.n	800264c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002612:	4b0a      	ldr	r3, [pc, #40]	@ (800263c <HAL_RCC_OscConfig+0x274>)
 8002614:	2200      	movs	r2, #0
 8002616:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002618:	f7ff f806 	bl	8001628 <HAL_GetTick>
 800261c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800261e:	e00f      	b.n	8002640 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002620:	f7ff f802 	bl	8001628 <HAL_GetTick>
 8002624:	4602      	mov	r2, r0
 8002626:	693b      	ldr	r3, [r7, #16]
 8002628:	1ad3      	subs	r3, r2, r3
 800262a:	2b02      	cmp	r3, #2
 800262c:	d908      	bls.n	8002640 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800262e:	2303      	movs	r3, #3
 8002630:	e146      	b.n	80028c0 <HAL_RCC_OscConfig+0x4f8>
 8002632:	bf00      	nop
 8002634:	40021000 	.word	0x40021000
 8002638:	42420000 	.word	0x42420000
 800263c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002640:	4b92      	ldr	r3, [pc, #584]	@ (800288c <HAL_RCC_OscConfig+0x4c4>)
 8002642:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002644:	f003 0302 	and.w	r3, r3, #2
 8002648:	2b00      	cmp	r3, #0
 800264a:	d1e9      	bne.n	8002620 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f003 0304 	and.w	r3, r3, #4
 8002654:	2b00      	cmp	r3, #0
 8002656:	f000 80a6 	beq.w	80027a6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800265a:	2300      	movs	r3, #0
 800265c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800265e:	4b8b      	ldr	r3, [pc, #556]	@ (800288c <HAL_RCC_OscConfig+0x4c4>)
 8002660:	69db      	ldr	r3, [r3, #28]
 8002662:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002666:	2b00      	cmp	r3, #0
 8002668:	d10d      	bne.n	8002686 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800266a:	4b88      	ldr	r3, [pc, #544]	@ (800288c <HAL_RCC_OscConfig+0x4c4>)
 800266c:	69db      	ldr	r3, [r3, #28]
 800266e:	4a87      	ldr	r2, [pc, #540]	@ (800288c <HAL_RCC_OscConfig+0x4c4>)
 8002670:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002674:	61d3      	str	r3, [r2, #28]
 8002676:	4b85      	ldr	r3, [pc, #532]	@ (800288c <HAL_RCC_OscConfig+0x4c4>)
 8002678:	69db      	ldr	r3, [r3, #28]
 800267a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800267e:	60bb      	str	r3, [r7, #8]
 8002680:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002682:	2301      	movs	r3, #1
 8002684:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002686:	4b82      	ldr	r3, [pc, #520]	@ (8002890 <HAL_RCC_OscConfig+0x4c8>)
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800268e:	2b00      	cmp	r3, #0
 8002690:	d118      	bne.n	80026c4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002692:	4b7f      	ldr	r3, [pc, #508]	@ (8002890 <HAL_RCC_OscConfig+0x4c8>)
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	4a7e      	ldr	r2, [pc, #504]	@ (8002890 <HAL_RCC_OscConfig+0x4c8>)
 8002698:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800269c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800269e:	f7fe ffc3 	bl	8001628 <HAL_GetTick>
 80026a2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026a4:	e008      	b.n	80026b8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026a6:	f7fe ffbf 	bl	8001628 <HAL_GetTick>
 80026aa:	4602      	mov	r2, r0
 80026ac:	693b      	ldr	r3, [r7, #16]
 80026ae:	1ad3      	subs	r3, r2, r3
 80026b0:	2b64      	cmp	r3, #100	@ 0x64
 80026b2:	d901      	bls.n	80026b8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80026b4:	2303      	movs	r3, #3
 80026b6:	e103      	b.n	80028c0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026b8:	4b75      	ldr	r3, [pc, #468]	@ (8002890 <HAL_RCC_OscConfig+0x4c8>)
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d0f0      	beq.n	80026a6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	68db      	ldr	r3, [r3, #12]
 80026c8:	2b01      	cmp	r3, #1
 80026ca:	d106      	bne.n	80026da <HAL_RCC_OscConfig+0x312>
 80026cc:	4b6f      	ldr	r3, [pc, #444]	@ (800288c <HAL_RCC_OscConfig+0x4c4>)
 80026ce:	6a1b      	ldr	r3, [r3, #32]
 80026d0:	4a6e      	ldr	r2, [pc, #440]	@ (800288c <HAL_RCC_OscConfig+0x4c4>)
 80026d2:	f043 0301 	orr.w	r3, r3, #1
 80026d6:	6213      	str	r3, [r2, #32]
 80026d8:	e02d      	b.n	8002736 <HAL_RCC_OscConfig+0x36e>
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	68db      	ldr	r3, [r3, #12]
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d10c      	bne.n	80026fc <HAL_RCC_OscConfig+0x334>
 80026e2:	4b6a      	ldr	r3, [pc, #424]	@ (800288c <HAL_RCC_OscConfig+0x4c4>)
 80026e4:	6a1b      	ldr	r3, [r3, #32]
 80026e6:	4a69      	ldr	r2, [pc, #420]	@ (800288c <HAL_RCC_OscConfig+0x4c4>)
 80026e8:	f023 0301 	bic.w	r3, r3, #1
 80026ec:	6213      	str	r3, [r2, #32]
 80026ee:	4b67      	ldr	r3, [pc, #412]	@ (800288c <HAL_RCC_OscConfig+0x4c4>)
 80026f0:	6a1b      	ldr	r3, [r3, #32]
 80026f2:	4a66      	ldr	r2, [pc, #408]	@ (800288c <HAL_RCC_OscConfig+0x4c4>)
 80026f4:	f023 0304 	bic.w	r3, r3, #4
 80026f8:	6213      	str	r3, [r2, #32]
 80026fa:	e01c      	b.n	8002736 <HAL_RCC_OscConfig+0x36e>
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	68db      	ldr	r3, [r3, #12]
 8002700:	2b05      	cmp	r3, #5
 8002702:	d10c      	bne.n	800271e <HAL_RCC_OscConfig+0x356>
 8002704:	4b61      	ldr	r3, [pc, #388]	@ (800288c <HAL_RCC_OscConfig+0x4c4>)
 8002706:	6a1b      	ldr	r3, [r3, #32]
 8002708:	4a60      	ldr	r2, [pc, #384]	@ (800288c <HAL_RCC_OscConfig+0x4c4>)
 800270a:	f043 0304 	orr.w	r3, r3, #4
 800270e:	6213      	str	r3, [r2, #32]
 8002710:	4b5e      	ldr	r3, [pc, #376]	@ (800288c <HAL_RCC_OscConfig+0x4c4>)
 8002712:	6a1b      	ldr	r3, [r3, #32]
 8002714:	4a5d      	ldr	r2, [pc, #372]	@ (800288c <HAL_RCC_OscConfig+0x4c4>)
 8002716:	f043 0301 	orr.w	r3, r3, #1
 800271a:	6213      	str	r3, [r2, #32]
 800271c:	e00b      	b.n	8002736 <HAL_RCC_OscConfig+0x36e>
 800271e:	4b5b      	ldr	r3, [pc, #364]	@ (800288c <HAL_RCC_OscConfig+0x4c4>)
 8002720:	6a1b      	ldr	r3, [r3, #32]
 8002722:	4a5a      	ldr	r2, [pc, #360]	@ (800288c <HAL_RCC_OscConfig+0x4c4>)
 8002724:	f023 0301 	bic.w	r3, r3, #1
 8002728:	6213      	str	r3, [r2, #32]
 800272a:	4b58      	ldr	r3, [pc, #352]	@ (800288c <HAL_RCC_OscConfig+0x4c4>)
 800272c:	6a1b      	ldr	r3, [r3, #32]
 800272e:	4a57      	ldr	r2, [pc, #348]	@ (800288c <HAL_RCC_OscConfig+0x4c4>)
 8002730:	f023 0304 	bic.w	r3, r3, #4
 8002734:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	68db      	ldr	r3, [r3, #12]
 800273a:	2b00      	cmp	r3, #0
 800273c:	d015      	beq.n	800276a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800273e:	f7fe ff73 	bl	8001628 <HAL_GetTick>
 8002742:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002744:	e00a      	b.n	800275c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002746:	f7fe ff6f 	bl	8001628 <HAL_GetTick>
 800274a:	4602      	mov	r2, r0
 800274c:	693b      	ldr	r3, [r7, #16]
 800274e:	1ad3      	subs	r3, r2, r3
 8002750:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002754:	4293      	cmp	r3, r2
 8002756:	d901      	bls.n	800275c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002758:	2303      	movs	r3, #3
 800275a:	e0b1      	b.n	80028c0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800275c:	4b4b      	ldr	r3, [pc, #300]	@ (800288c <HAL_RCC_OscConfig+0x4c4>)
 800275e:	6a1b      	ldr	r3, [r3, #32]
 8002760:	f003 0302 	and.w	r3, r3, #2
 8002764:	2b00      	cmp	r3, #0
 8002766:	d0ee      	beq.n	8002746 <HAL_RCC_OscConfig+0x37e>
 8002768:	e014      	b.n	8002794 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800276a:	f7fe ff5d 	bl	8001628 <HAL_GetTick>
 800276e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002770:	e00a      	b.n	8002788 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002772:	f7fe ff59 	bl	8001628 <HAL_GetTick>
 8002776:	4602      	mov	r2, r0
 8002778:	693b      	ldr	r3, [r7, #16]
 800277a:	1ad3      	subs	r3, r2, r3
 800277c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002780:	4293      	cmp	r3, r2
 8002782:	d901      	bls.n	8002788 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002784:	2303      	movs	r3, #3
 8002786:	e09b      	b.n	80028c0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002788:	4b40      	ldr	r3, [pc, #256]	@ (800288c <HAL_RCC_OscConfig+0x4c4>)
 800278a:	6a1b      	ldr	r3, [r3, #32]
 800278c:	f003 0302 	and.w	r3, r3, #2
 8002790:	2b00      	cmp	r3, #0
 8002792:	d1ee      	bne.n	8002772 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002794:	7dfb      	ldrb	r3, [r7, #23]
 8002796:	2b01      	cmp	r3, #1
 8002798:	d105      	bne.n	80027a6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800279a:	4b3c      	ldr	r3, [pc, #240]	@ (800288c <HAL_RCC_OscConfig+0x4c4>)
 800279c:	69db      	ldr	r3, [r3, #28]
 800279e:	4a3b      	ldr	r2, [pc, #236]	@ (800288c <HAL_RCC_OscConfig+0x4c4>)
 80027a0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80027a4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	69db      	ldr	r3, [r3, #28]
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	f000 8087 	beq.w	80028be <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80027b0:	4b36      	ldr	r3, [pc, #216]	@ (800288c <HAL_RCC_OscConfig+0x4c4>)
 80027b2:	685b      	ldr	r3, [r3, #4]
 80027b4:	f003 030c 	and.w	r3, r3, #12
 80027b8:	2b08      	cmp	r3, #8
 80027ba:	d061      	beq.n	8002880 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	69db      	ldr	r3, [r3, #28]
 80027c0:	2b02      	cmp	r3, #2
 80027c2:	d146      	bne.n	8002852 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027c4:	4b33      	ldr	r3, [pc, #204]	@ (8002894 <HAL_RCC_OscConfig+0x4cc>)
 80027c6:	2200      	movs	r2, #0
 80027c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027ca:	f7fe ff2d 	bl	8001628 <HAL_GetTick>
 80027ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80027d0:	e008      	b.n	80027e4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027d2:	f7fe ff29 	bl	8001628 <HAL_GetTick>
 80027d6:	4602      	mov	r2, r0
 80027d8:	693b      	ldr	r3, [r7, #16]
 80027da:	1ad3      	subs	r3, r2, r3
 80027dc:	2b02      	cmp	r3, #2
 80027de:	d901      	bls.n	80027e4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80027e0:	2303      	movs	r3, #3
 80027e2:	e06d      	b.n	80028c0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80027e4:	4b29      	ldr	r3, [pc, #164]	@ (800288c <HAL_RCC_OscConfig+0x4c4>)
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d1f0      	bne.n	80027d2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	6a1b      	ldr	r3, [r3, #32]
 80027f4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80027f8:	d108      	bne.n	800280c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80027fa:	4b24      	ldr	r3, [pc, #144]	@ (800288c <HAL_RCC_OscConfig+0x4c4>)
 80027fc:	685b      	ldr	r3, [r3, #4]
 80027fe:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	689b      	ldr	r3, [r3, #8]
 8002806:	4921      	ldr	r1, [pc, #132]	@ (800288c <HAL_RCC_OscConfig+0x4c4>)
 8002808:	4313      	orrs	r3, r2
 800280a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800280c:	4b1f      	ldr	r3, [pc, #124]	@ (800288c <HAL_RCC_OscConfig+0x4c4>)
 800280e:	685b      	ldr	r3, [r3, #4]
 8002810:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	6a19      	ldr	r1, [r3, #32]
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800281c:	430b      	orrs	r3, r1
 800281e:	491b      	ldr	r1, [pc, #108]	@ (800288c <HAL_RCC_OscConfig+0x4c4>)
 8002820:	4313      	orrs	r3, r2
 8002822:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002824:	4b1b      	ldr	r3, [pc, #108]	@ (8002894 <HAL_RCC_OscConfig+0x4cc>)
 8002826:	2201      	movs	r2, #1
 8002828:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800282a:	f7fe fefd 	bl	8001628 <HAL_GetTick>
 800282e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002830:	e008      	b.n	8002844 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002832:	f7fe fef9 	bl	8001628 <HAL_GetTick>
 8002836:	4602      	mov	r2, r0
 8002838:	693b      	ldr	r3, [r7, #16]
 800283a:	1ad3      	subs	r3, r2, r3
 800283c:	2b02      	cmp	r3, #2
 800283e:	d901      	bls.n	8002844 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002840:	2303      	movs	r3, #3
 8002842:	e03d      	b.n	80028c0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002844:	4b11      	ldr	r3, [pc, #68]	@ (800288c <HAL_RCC_OscConfig+0x4c4>)
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800284c:	2b00      	cmp	r3, #0
 800284e:	d0f0      	beq.n	8002832 <HAL_RCC_OscConfig+0x46a>
 8002850:	e035      	b.n	80028be <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002852:	4b10      	ldr	r3, [pc, #64]	@ (8002894 <HAL_RCC_OscConfig+0x4cc>)
 8002854:	2200      	movs	r2, #0
 8002856:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002858:	f7fe fee6 	bl	8001628 <HAL_GetTick>
 800285c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800285e:	e008      	b.n	8002872 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002860:	f7fe fee2 	bl	8001628 <HAL_GetTick>
 8002864:	4602      	mov	r2, r0
 8002866:	693b      	ldr	r3, [r7, #16]
 8002868:	1ad3      	subs	r3, r2, r3
 800286a:	2b02      	cmp	r3, #2
 800286c:	d901      	bls.n	8002872 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800286e:	2303      	movs	r3, #3
 8002870:	e026      	b.n	80028c0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002872:	4b06      	ldr	r3, [pc, #24]	@ (800288c <HAL_RCC_OscConfig+0x4c4>)
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800287a:	2b00      	cmp	r3, #0
 800287c:	d1f0      	bne.n	8002860 <HAL_RCC_OscConfig+0x498>
 800287e:	e01e      	b.n	80028be <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	69db      	ldr	r3, [r3, #28]
 8002884:	2b01      	cmp	r3, #1
 8002886:	d107      	bne.n	8002898 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002888:	2301      	movs	r3, #1
 800288a:	e019      	b.n	80028c0 <HAL_RCC_OscConfig+0x4f8>
 800288c:	40021000 	.word	0x40021000
 8002890:	40007000 	.word	0x40007000
 8002894:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002898:	4b0b      	ldr	r3, [pc, #44]	@ (80028c8 <HAL_RCC_OscConfig+0x500>)
 800289a:	685b      	ldr	r3, [r3, #4]
 800289c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	6a1b      	ldr	r3, [r3, #32]
 80028a8:	429a      	cmp	r2, r3
 80028aa:	d106      	bne.n	80028ba <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028b6:	429a      	cmp	r2, r3
 80028b8:	d001      	beq.n	80028be <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80028ba:	2301      	movs	r3, #1
 80028bc:	e000      	b.n	80028c0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80028be:	2300      	movs	r3, #0
}
 80028c0:	4618      	mov	r0, r3
 80028c2:	3718      	adds	r7, #24
 80028c4:	46bd      	mov	sp, r7
 80028c6:	bd80      	pop	{r7, pc}
 80028c8:	40021000 	.word	0x40021000

080028cc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b084      	sub	sp, #16
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
 80028d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d101      	bne.n	80028e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80028dc:	2301      	movs	r3, #1
 80028de:	e0d0      	b.n	8002a82 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80028e0:	4b6a      	ldr	r3, [pc, #424]	@ (8002a8c <HAL_RCC_ClockConfig+0x1c0>)
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f003 0307 	and.w	r3, r3, #7
 80028e8:	683a      	ldr	r2, [r7, #0]
 80028ea:	429a      	cmp	r2, r3
 80028ec:	d910      	bls.n	8002910 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028ee:	4b67      	ldr	r3, [pc, #412]	@ (8002a8c <HAL_RCC_ClockConfig+0x1c0>)
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f023 0207 	bic.w	r2, r3, #7
 80028f6:	4965      	ldr	r1, [pc, #404]	@ (8002a8c <HAL_RCC_ClockConfig+0x1c0>)
 80028f8:	683b      	ldr	r3, [r7, #0]
 80028fa:	4313      	orrs	r3, r2
 80028fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80028fe:	4b63      	ldr	r3, [pc, #396]	@ (8002a8c <HAL_RCC_ClockConfig+0x1c0>)
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f003 0307 	and.w	r3, r3, #7
 8002906:	683a      	ldr	r2, [r7, #0]
 8002908:	429a      	cmp	r2, r3
 800290a:	d001      	beq.n	8002910 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800290c:	2301      	movs	r3, #1
 800290e:	e0b8      	b.n	8002a82 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f003 0302 	and.w	r3, r3, #2
 8002918:	2b00      	cmp	r3, #0
 800291a:	d020      	beq.n	800295e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f003 0304 	and.w	r3, r3, #4
 8002924:	2b00      	cmp	r3, #0
 8002926:	d005      	beq.n	8002934 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002928:	4b59      	ldr	r3, [pc, #356]	@ (8002a90 <HAL_RCC_ClockConfig+0x1c4>)
 800292a:	685b      	ldr	r3, [r3, #4]
 800292c:	4a58      	ldr	r2, [pc, #352]	@ (8002a90 <HAL_RCC_ClockConfig+0x1c4>)
 800292e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002932:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f003 0308 	and.w	r3, r3, #8
 800293c:	2b00      	cmp	r3, #0
 800293e:	d005      	beq.n	800294c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002940:	4b53      	ldr	r3, [pc, #332]	@ (8002a90 <HAL_RCC_ClockConfig+0x1c4>)
 8002942:	685b      	ldr	r3, [r3, #4]
 8002944:	4a52      	ldr	r2, [pc, #328]	@ (8002a90 <HAL_RCC_ClockConfig+0x1c4>)
 8002946:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800294a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800294c:	4b50      	ldr	r3, [pc, #320]	@ (8002a90 <HAL_RCC_ClockConfig+0x1c4>)
 800294e:	685b      	ldr	r3, [r3, #4]
 8002950:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	689b      	ldr	r3, [r3, #8]
 8002958:	494d      	ldr	r1, [pc, #308]	@ (8002a90 <HAL_RCC_ClockConfig+0x1c4>)
 800295a:	4313      	orrs	r3, r2
 800295c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f003 0301 	and.w	r3, r3, #1
 8002966:	2b00      	cmp	r3, #0
 8002968:	d040      	beq.n	80029ec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	685b      	ldr	r3, [r3, #4]
 800296e:	2b01      	cmp	r3, #1
 8002970:	d107      	bne.n	8002982 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002972:	4b47      	ldr	r3, [pc, #284]	@ (8002a90 <HAL_RCC_ClockConfig+0x1c4>)
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800297a:	2b00      	cmp	r3, #0
 800297c:	d115      	bne.n	80029aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800297e:	2301      	movs	r3, #1
 8002980:	e07f      	b.n	8002a82 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	685b      	ldr	r3, [r3, #4]
 8002986:	2b02      	cmp	r3, #2
 8002988:	d107      	bne.n	800299a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800298a:	4b41      	ldr	r3, [pc, #260]	@ (8002a90 <HAL_RCC_ClockConfig+0x1c4>)
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002992:	2b00      	cmp	r3, #0
 8002994:	d109      	bne.n	80029aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002996:	2301      	movs	r3, #1
 8002998:	e073      	b.n	8002a82 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800299a:	4b3d      	ldr	r3, [pc, #244]	@ (8002a90 <HAL_RCC_ClockConfig+0x1c4>)
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f003 0302 	and.w	r3, r3, #2
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d101      	bne.n	80029aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029a6:	2301      	movs	r3, #1
 80029a8:	e06b      	b.n	8002a82 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80029aa:	4b39      	ldr	r3, [pc, #228]	@ (8002a90 <HAL_RCC_ClockConfig+0x1c4>)
 80029ac:	685b      	ldr	r3, [r3, #4]
 80029ae:	f023 0203 	bic.w	r2, r3, #3
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	685b      	ldr	r3, [r3, #4]
 80029b6:	4936      	ldr	r1, [pc, #216]	@ (8002a90 <HAL_RCC_ClockConfig+0x1c4>)
 80029b8:	4313      	orrs	r3, r2
 80029ba:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80029bc:	f7fe fe34 	bl	8001628 <HAL_GetTick>
 80029c0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029c2:	e00a      	b.n	80029da <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029c4:	f7fe fe30 	bl	8001628 <HAL_GetTick>
 80029c8:	4602      	mov	r2, r0
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	1ad3      	subs	r3, r2, r3
 80029ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 80029d2:	4293      	cmp	r3, r2
 80029d4:	d901      	bls.n	80029da <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80029d6:	2303      	movs	r3, #3
 80029d8:	e053      	b.n	8002a82 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029da:	4b2d      	ldr	r3, [pc, #180]	@ (8002a90 <HAL_RCC_ClockConfig+0x1c4>)
 80029dc:	685b      	ldr	r3, [r3, #4]
 80029de:	f003 020c 	and.w	r2, r3, #12
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	685b      	ldr	r3, [r3, #4]
 80029e6:	009b      	lsls	r3, r3, #2
 80029e8:	429a      	cmp	r2, r3
 80029ea:	d1eb      	bne.n	80029c4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80029ec:	4b27      	ldr	r3, [pc, #156]	@ (8002a8c <HAL_RCC_ClockConfig+0x1c0>)
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f003 0307 	and.w	r3, r3, #7
 80029f4:	683a      	ldr	r2, [r7, #0]
 80029f6:	429a      	cmp	r2, r3
 80029f8:	d210      	bcs.n	8002a1c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029fa:	4b24      	ldr	r3, [pc, #144]	@ (8002a8c <HAL_RCC_ClockConfig+0x1c0>)
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f023 0207 	bic.w	r2, r3, #7
 8002a02:	4922      	ldr	r1, [pc, #136]	@ (8002a8c <HAL_RCC_ClockConfig+0x1c0>)
 8002a04:	683b      	ldr	r3, [r7, #0]
 8002a06:	4313      	orrs	r3, r2
 8002a08:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a0a:	4b20      	ldr	r3, [pc, #128]	@ (8002a8c <HAL_RCC_ClockConfig+0x1c0>)
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f003 0307 	and.w	r3, r3, #7
 8002a12:	683a      	ldr	r2, [r7, #0]
 8002a14:	429a      	cmp	r2, r3
 8002a16:	d001      	beq.n	8002a1c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002a18:	2301      	movs	r3, #1
 8002a1a:	e032      	b.n	8002a82 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f003 0304 	and.w	r3, r3, #4
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d008      	beq.n	8002a3a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a28:	4b19      	ldr	r3, [pc, #100]	@ (8002a90 <HAL_RCC_ClockConfig+0x1c4>)
 8002a2a:	685b      	ldr	r3, [r3, #4]
 8002a2c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	68db      	ldr	r3, [r3, #12]
 8002a34:	4916      	ldr	r1, [pc, #88]	@ (8002a90 <HAL_RCC_ClockConfig+0x1c4>)
 8002a36:	4313      	orrs	r3, r2
 8002a38:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f003 0308 	and.w	r3, r3, #8
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d009      	beq.n	8002a5a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002a46:	4b12      	ldr	r3, [pc, #72]	@ (8002a90 <HAL_RCC_ClockConfig+0x1c4>)
 8002a48:	685b      	ldr	r3, [r3, #4]
 8002a4a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	691b      	ldr	r3, [r3, #16]
 8002a52:	00db      	lsls	r3, r3, #3
 8002a54:	490e      	ldr	r1, [pc, #56]	@ (8002a90 <HAL_RCC_ClockConfig+0x1c4>)
 8002a56:	4313      	orrs	r3, r2
 8002a58:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002a5a:	f000 f821 	bl	8002aa0 <HAL_RCC_GetSysClockFreq>
 8002a5e:	4602      	mov	r2, r0
 8002a60:	4b0b      	ldr	r3, [pc, #44]	@ (8002a90 <HAL_RCC_ClockConfig+0x1c4>)
 8002a62:	685b      	ldr	r3, [r3, #4]
 8002a64:	091b      	lsrs	r3, r3, #4
 8002a66:	f003 030f 	and.w	r3, r3, #15
 8002a6a:	490a      	ldr	r1, [pc, #40]	@ (8002a94 <HAL_RCC_ClockConfig+0x1c8>)
 8002a6c:	5ccb      	ldrb	r3, [r1, r3]
 8002a6e:	fa22 f303 	lsr.w	r3, r2, r3
 8002a72:	4a09      	ldr	r2, [pc, #36]	@ (8002a98 <HAL_RCC_ClockConfig+0x1cc>)
 8002a74:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002a76:	4b09      	ldr	r3, [pc, #36]	@ (8002a9c <HAL_RCC_ClockConfig+0x1d0>)
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	f7fe fd92 	bl	80015a4 <HAL_InitTick>

  return HAL_OK;
 8002a80:	2300      	movs	r3, #0
}
 8002a82:	4618      	mov	r0, r3
 8002a84:	3710      	adds	r7, #16
 8002a86:	46bd      	mov	sp, r7
 8002a88:	bd80      	pop	{r7, pc}
 8002a8a:	bf00      	nop
 8002a8c:	40022000 	.word	0x40022000
 8002a90:	40021000 	.word	0x40021000
 8002a94:	0800445c 	.word	0x0800445c
 8002a98:	20000010 	.word	0x20000010
 8002a9c:	20000014 	.word	0x20000014

08002aa0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002aa0:	b480      	push	{r7}
 8002aa2:	b087      	sub	sp, #28
 8002aa4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	60fb      	str	r3, [r7, #12]
 8002aaa:	2300      	movs	r3, #0
 8002aac:	60bb      	str	r3, [r7, #8]
 8002aae:	2300      	movs	r3, #0
 8002ab0:	617b      	str	r3, [r7, #20]
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002aba:	4b1e      	ldr	r3, [pc, #120]	@ (8002b34 <HAL_RCC_GetSysClockFreq+0x94>)
 8002abc:	685b      	ldr	r3, [r3, #4]
 8002abe:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	f003 030c 	and.w	r3, r3, #12
 8002ac6:	2b04      	cmp	r3, #4
 8002ac8:	d002      	beq.n	8002ad0 <HAL_RCC_GetSysClockFreq+0x30>
 8002aca:	2b08      	cmp	r3, #8
 8002acc:	d003      	beq.n	8002ad6 <HAL_RCC_GetSysClockFreq+0x36>
 8002ace:	e027      	b.n	8002b20 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002ad0:	4b19      	ldr	r3, [pc, #100]	@ (8002b38 <HAL_RCC_GetSysClockFreq+0x98>)
 8002ad2:	613b      	str	r3, [r7, #16]
      break;
 8002ad4:	e027      	b.n	8002b26 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	0c9b      	lsrs	r3, r3, #18
 8002ada:	f003 030f 	and.w	r3, r3, #15
 8002ade:	4a17      	ldr	r2, [pc, #92]	@ (8002b3c <HAL_RCC_GetSysClockFreq+0x9c>)
 8002ae0:	5cd3      	ldrb	r3, [r2, r3]
 8002ae2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d010      	beq.n	8002b10 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002aee:	4b11      	ldr	r3, [pc, #68]	@ (8002b34 <HAL_RCC_GetSysClockFreq+0x94>)
 8002af0:	685b      	ldr	r3, [r3, #4]
 8002af2:	0c5b      	lsrs	r3, r3, #17
 8002af4:	f003 0301 	and.w	r3, r3, #1
 8002af8:	4a11      	ldr	r2, [pc, #68]	@ (8002b40 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002afa:	5cd3      	ldrb	r3, [r2, r3]
 8002afc:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	4a0d      	ldr	r2, [pc, #52]	@ (8002b38 <HAL_RCC_GetSysClockFreq+0x98>)
 8002b02:	fb03 f202 	mul.w	r2, r3, r2
 8002b06:	68bb      	ldr	r3, [r7, #8]
 8002b08:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b0c:	617b      	str	r3, [r7, #20]
 8002b0e:	e004      	b.n	8002b1a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	4a0c      	ldr	r2, [pc, #48]	@ (8002b44 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002b14:	fb02 f303 	mul.w	r3, r2, r3
 8002b18:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002b1a:	697b      	ldr	r3, [r7, #20]
 8002b1c:	613b      	str	r3, [r7, #16]
      break;
 8002b1e:	e002      	b.n	8002b26 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002b20:	4b05      	ldr	r3, [pc, #20]	@ (8002b38 <HAL_RCC_GetSysClockFreq+0x98>)
 8002b22:	613b      	str	r3, [r7, #16]
      break;
 8002b24:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002b26:	693b      	ldr	r3, [r7, #16]
}
 8002b28:	4618      	mov	r0, r3
 8002b2a:	371c      	adds	r7, #28
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	bc80      	pop	{r7}
 8002b30:	4770      	bx	lr
 8002b32:	bf00      	nop
 8002b34:	40021000 	.word	0x40021000
 8002b38:	007a1200 	.word	0x007a1200
 8002b3c:	08004474 	.word	0x08004474
 8002b40:	08004484 	.word	0x08004484
 8002b44:	003d0900 	.word	0x003d0900

08002b48 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002b48:	b480      	push	{r7}
 8002b4a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002b4c:	4b02      	ldr	r3, [pc, #8]	@ (8002b58 <HAL_RCC_GetHCLKFreq+0x10>)
 8002b4e:	681b      	ldr	r3, [r3, #0]
}
 8002b50:	4618      	mov	r0, r3
 8002b52:	46bd      	mov	sp, r7
 8002b54:	bc80      	pop	{r7}
 8002b56:	4770      	bx	lr
 8002b58:	20000010 	.word	0x20000010

08002b5c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002b60:	f7ff fff2 	bl	8002b48 <HAL_RCC_GetHCLKFreq>
 8002b64:	4602      	mov	r2, r0
 8002b66:	4b05      	ldr	r3, [pc, #20]	@ (8002b7c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002b68:	685b      	ldr	r3, [r3, #4]
 8002b6a:	0a1b      	lsrs	r3, r3, #8
 8002b6c:	f003 0307 	and.w	r3, r3, #7
 8002b70:	4903      	ldr	r1, [pc, #12]	@ (8002b80 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002b72:	5ccb      	ldrb	r3, [r1, r3]
 8002b74:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b78:	4618      	mov	r0, r3
 8002b7a:	bd80      	pop	{r7, pc}
 8002b7c:	40021000 	.word	0x40021000
 8002b80:	0800446c 	.word	0x0800446c

08002b84 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002b88:	f7ff ffde 	bl	8002b48 <HAL_RCC_GetHCLKFreq>
 8002b8c:	4602      	mov	r2, r0
 8002b8e:	4b05      	ldr	r3, [pc, #20]	@ (8002ba4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002b90:	685b      	ldr	r3, [r3, #4]
 8002b92:	0adb      	lsrs	r3, r3, #11
 8002b94:	f003 0307 	and.w	r3, r3, #7
 8002b98:	4903      	ldr	r1, [pc, #12]	@ (8002ba8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002b9a:	5ccb      	ldrb	r3, [r1, r3]
 8002b9c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	bd80      	pop	{r7, pc}
 8002ba4:	40021000 	.word	0x40021000
 8002ba8:	0800446c 	.word	0x0800446c

08002bac <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002bac:	b480      	push	{r7}
 8002bae:	b085      	sub	sp, #20
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002bb4:	4b0a      	ldr	r3, [pc, #40]	@ (8002be0 <RCC_Delay+0x34>)
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	4a0a      	ldr	r2, [pc, #40]	@ (8002be4 <RCC_Delay+0x38>)
 8002bba:	fba2 2303 	umull	r2, r3, r2, r3
 8002bbe:	0a5b      	lsrs	r3, r3, #9
 8002bc0:	687a      	ldr	r2, [r7, #4]
 8002bc2:	fb02 f303 	mul.w	r3, r2, r3
 8002bc6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002bc8:	bf00      	nop
  }
  while (Delay --);
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	1e5a      	subs	r2, r3, #1
 8002bce:	60fa      	str	r2, [r7, #12]
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d1f9      	bne.n	8002bc8 <RCC_Delay+0x1c>
}
 8002bd4:	bf00      	nop
 8002bd6:	bf00      	nop
 8002bd8:	3714      	adds	r7, #20
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	bc80      	pop	{r7}
 8002bde:	4770      	bx	lr
 8002be0:	20000010 	.word	0x20000010
 8002be4:	10624dd3 	.word	0x10624dd3

08002be8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b082      	sub	sp, #8
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d101      	bne.n	8002bfa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002bf6:	2301      	movs	r3, #1
 8002bf8:	e042      	b.n	8002c80 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002c00:	b2db      	uxtb	r3, r3
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d106      	bne.n	8002c14 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	2200      	movs	r2, #0
 8002c0a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002c0e:	6878      	ldr	r0, [r7, #4]
 8002c10:	f7fe fae0 	bl	80011d4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	2224      	movs	r2, #36	@ 0x24
 8002c18:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	68da      	ldr	r2, [r3, #12]
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002c2a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002c2c:	6878      	ldr	r0, [r7, #4]
 8002c2e:	f000 fefd 	bl	8003a2c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	691a      	ldr	r2, [r3, #16]
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002c40:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	695a      	ldr	r2, [r3, #20]
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002c50:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	68da      	ldr	r2, [r3, #12]
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002c60:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	2200      	movs	r2, #0
 8002c66:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	2220      	movs	r2, #32
 8002c6c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	2220      	movs	r2, #32
 8002c74:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002c7e:	2300      	movs	r3, #0
}
 8002c80:	4618      	mov	r0, r3
 8002c82:	3708      	adds	r7, #8
 8002c84:	46bd      	mov	sp, r7
 8002c86:	bd80      	pop	{r7, pc}

08002c88 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	b08a      	sub	sp, #40	@ 0x28
 8002c8c:	af02      	add	r7, sp, #8
 8002c8e:	60f8      	str	r0, [r7, #12]
 8002c90:	60b9      	str	r1, [r7, #8]
 8002c92:	603b      	str	r3, [r7, #0]
 8002c94:	4613      	mov	r3, r2
 8002c96:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002c98:	2300      	movs	r3, #0
 8002c9a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002ca2:	b2db      	uxtb	r3, r3
 8002ca4:	2b20      	cmp	r3, #32
 8002ca6:	d175      	bne.n	8002d94 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002ca8:	68bb      	ldr	r3, [r7, #8]
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d002      	beq.n	8002cb4 <HAL_UART_Transmit+0x2c>
 8002cae:	88fb      	ldrh	r3, [r7, #6]
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d101      	bne.n	8002cb8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002cb4:	2301      	movs	r3, #1
 8002cb6:	e06e      	b.n	8002d96 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	2200      	movs	r2, #0
 8002cbc:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	2221      	movs	r2, #33	@ 0x21
 8002cc2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002cc6:	f7fe fcaf 	bl	8001628 <HAL_GetTick>
 8002cca:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	88fa      	ldrh	r2, [r7, #6]
 8002cd0:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	88fa      	ldrh	r2, [r7, #6]
 8002cd6:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	689b      	ldr	r3, [r3, #8]
 8002cdc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002ce0:	d108      	bne.n	8002cf4 <HAL_UART_Transmit+0x6c>
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	691b      	ldr	r3, [r3, #16]
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d104      	bne.n	8002cf4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002cea:	2300      	movs	r3, #0
 8002cec:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002cee:	68bb      	ldr	r3, [r7, #8]
 8002cf0:	61bb      	str	r3, [r7, #24]
 8002cf2:	e003      	b.n	8002cfc <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002cf4:	68bb      	ldr	r3, [r7, #8]
 8002cf6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002cf8:	2300      	movs	r3, #0
 8002cfa:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002cfc:	e02e      	b.n	8002d5c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002cfe:	683b      	ldr	r3, [r7, #0]
 8002d00:	9300      	str	r3, [sp, #0]
 8002d02:	697b      	ldr	r3, [r7, #20]
 8002d04:	2200      	movs	r2, #0
 8002d06:	2180      	movs	r1, #128	@ 0x80
 8002d08:	68f8      	ldr	r0, [r7, #12]
 8002d0a:	f000 fc3a 	bl	8003582 <UART_WaitOnFlagUntilTimeout>
 8002d0e:	4603      	mov	r3, r0
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d005      	beq.n	8002d20 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	2220      	movs	r2, #32
 8002d18:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8002d1c:	2303      	movs	r3, #3
 8002d1e:	e03a      	b.n	8002d96 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002d20:	69fb      	ldr	r3, [r7, #28]
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d10b      	bne.n	8002d3e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002d26:	69bb      	ldr	r3, [r7, #24]
 8002d28:	881b      	ldrh	r3, [r3, #0]
 8002d2a:	461a      	mov	r2, r3
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002d34:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002d36:	69bb      	ldr	r3, [r7, #24]
 8002d38:	3302      	adds	r3, #2
 8002d3a:	61bb      	str	r3, [r7, #24]
 8002d3c:	e007      	b.n	8002d4e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002d3e:	69fb      	ldr	r3, [r7, #28]
 8002d40:	781a      	ldrb	r2, [r3, #0]
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002d48:	69fb      	ldr	r3, [r7, #28]
 8002d4a:	3301      	adds	r3, #1
 8002d4c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002d52:	b29b      	uxth	r3, r3
 8002d54:	3b01      	subs	r3, #1
 8002d56:	b29a      	uxth	r2, r3
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002d60:	b29b      	uxth	r3, r3
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d1cb      	bne.n	8002cfe <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002d66:	683b      	ldr	r3, [r7, #0]
 8002d68:	9300      	str	r3, [sp, #0]
 8002d6a:	697b      	ldr	r3, [r7, #20]
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	2140      	movs	r1, #64	@ 0x40
 8002d70:	68f8      	ldr	r0, [r7, #12]
 8002d72:	f000 fc06 	bl	8003582 <UART_WaitOnFlagUntilTimeout>
 8002d76:	4603      	mov	r3, r0
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d005      	beq.n	8002d88 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	2220      	movs	r2, #32
 8002d80:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8002d84:	2303      	movs	r3, #3
 8002d86:	e006      	b.n	8002d96 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	2220      	movs	r2, #32
 8002d8c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8002d90:	2300      	movs	r3, #0
 8002d92:	e000      	b.n	8002d96 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002d94:	2302      	movs	r3, #2
  }
}
 8002d96:	4618      	mov	r0, r3
 8002d98:	3720      	adds	r7, #32
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	bd80      	pop	{r7, pc}

08002d9e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002d9e:	b580      	push	{r7, lr}
 8002da0:	b084      	sub	sp, #16
 8002da2:	af00      	add	r7, sp, #0
 8002da4:	60f8      	str	r0, [r7, #12]
 8002da6:	60b9      	str	r1, [r7, #8]
 8002da8:	4613      	mov	r3, r2
 8002daa:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002db2:	b2db      	uxtb	r3, r3
 8002db4:	2b20      	cmp	r3, #32
 8002db6:	d112      	bne.n	8002dde <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8002db8:	68bb      	ldr	r3, [r7, #8]
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d002      	beq.n	8002dc4 <HAL_UART_Receive_IT+0x26>
 8002dbe:	88fb      	ldrh	r3, [r7, #6]
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d101      	bne.n	8002dc8 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002dc4:	2301      	movs	r3, #1
 8002dc6:	e00b      	b.n	8002de0 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	2200      	movs	r2, #0
 8002dcc:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002dce:	88fb      	ldrh	r3, [r7, #6]
 8002dd0:	461a      	mov	r2, r3
 8002dd2:	68b9      	ldr	r1, [r7, #8]
 8002dd4:	68f8      	ldr	r0, [r7, #12]
 8002dd6:	f000 fc2d 	bl	8003634 <UART_Start_Receive_IT>
 8002dda:	4603      	mov	r3, r0
 8002ddc:	e000      	b.n	8002de0 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8002dde:	2302      	movs	r3, #2
  }
}
 8002de0:	4618      	mov	r0, r3
 8002de2:	3710      	adds	r7, #16
 8002de4:	46bd      	mov	sp, r7
 8002de6:	bd80      	pop	{r7, pc}

08002de8 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	b08c      	sub	sp, #48	@ 0x30
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	60f8      	str	r0, [r7, #12]
 8002df0:	60b9      	str	r1, [r7, #8]
 8002df2:	4613      	mov	r3, r2
 8002df4:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002dfc:	b2db      	uxtb	r3, r3
 8002dfe:	2b20      	cmp	r3, #32
 8002e00:	d156      	bne.n	8002eb0 <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 8002e02:	68bb      	ldr	r3, [r7, #8]
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d002      	beq.n	8002e0e <HAL_UART_Transmit_DMA+0x26>
 8002e08:	88fb      	ldrh	r3, [r7, #6]
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d101      	bne.n	8002e12 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8002e0e:	2301      	movs	r3, #1
 8002e10:	e04f      	b.n	8002eb2 <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 8002e12:	68ba      	ldr	r2, [r7, #8]
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	88fa      	ldrh	r2, [r7, #6]
 8002e1c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	88fa      	ldrh	r2, [r7, #6]
 8002e22:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	2200      	movs	r2, #0
 8002e28:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	2221      	movs	r2, #33	@ 0x21
 8002e2e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e36:	4a21      	ldr	r2, [pc, #132]	@ (8002ebc <HAL_UART_Transmit_DMA+0xd4>)
 8002e38:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e3e:	4a20      	ldr	r2, [pc, #128]	@ (8002ec0 <HAL_UART_Transmit_DMA+0xd8>)
 8002e40:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e46:	4a1f      	ldr	r2, [pc, #124]	@ (8002ec4 <HAL_UART_Transmit_DMA+0xdc>)
 8002e48:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e4e:	2200      	movs	r2, #0
 8002e50:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Enable the UART transmit DMA channel */
    tmp = (const uint32_t *)&pData;
 8002e52:	f107 0308 	add.w	r3, r7, #8
 8002e56:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8002e5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e5e:	6819      	ldr	r1, [r3, #0]
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	3304      	adds	r3, #4
 8002e66:	461a      	mov	r2, r3
 8002e68:	88fb      	ldrh	r3, [r7, #6]
 8002e6a:	f7fe fd73 	bl	8001954 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002e76:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	3314      	adds	r3, #20
 8002e7e:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e80:	69bb      	ldr	r3, [r7, #24]
 8002e82:	e853 3f00 	ldrex	r3, [r3]
 8002e86:	617b      	str	r3, [r7, #20]
   return(result);
 8002e88:	697b      	ldr	r3, [r7, #20]
 8002e8a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002e8e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	3314      	adds	r3, #20
 8002e96:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002e98:	627a      	str	r2, [r7, #36]	@ 0x24
 8002e9a:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e9c:	6a39      	ldr	r1, [r7, #32]
 8002e9e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002ea0:	e841 2300 	strex	r3, r2, [r1]
 8002ea4:	61fb      	str	r3, [r7, #28]
   return(result);
 8002ea6:	69fb      	ldr	r3, [r7, #28]
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d1e5      	bne.n	8002e78 <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 8002eac:	2300      	movs	r3, #0
 8002eae:	e000      	b.n	8002eb2 <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 8002eb0:	2302      	movs	r3, #2
  }
}
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	3730      	adds	r7, #48	@ 0x30
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	bd80      	pop	{r7, pc}
 8002eba:	bf00      	nop
 8002ebc:	08003439 	.word	0x08003439
 8002ec0:	080034d3 	.word	0x080034d3
 8002ec4:	080034ef 	.word	0x080034ef

08002ec8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	b0ba      	sub	sp, #232	@ 0xe8
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	68db      	ldr	r3, [r3, #12]
 8002ee0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	695b      	ldr	r3, [r3, #20]
 8002eea:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8002eee:	2300      	movs	r3, #0
 8002ef0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8002ef4:	2300      	movs	r3, #0
 8002ef6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002efa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002efe:	f003 030f 	and.w	r3, r3, #15
 8002f02:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8002f06:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d10f      	bne.n	8002f2e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002f0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002f12:	f003 0320 	and.w	r3, r3, #32
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d009      	beq.n	8002f2e <HAL_UART_IRQHandler+0x66>
 8002f1a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002f1e:	f003 0320 	and.w	r3, r3, #32
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d003      	beq.n	8002f2e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002f26:	6878      	ldr	r0, [r7, #4]
 8002f28:	f000 fcc1 	bl	80038ae <UART_Receive_IT>
      return;
 8002f2c:	e25b      	b.n	80033e6 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002f2e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	f000 80de 	beq.w	80030f4 <HAL_UART_IRQHandler+0x22c>
 8002f38:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002f3c:	f003 0301 	and.w	r3, r3, #1
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d106      	bne.n	8002f52 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002f44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002f48:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	f000 80d1 	beq.w	80030f4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002f52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002f56:	f003 0301 	and.w	r3, r3, #1
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d00b      	beq.n	8002f76 <HAL_UART_IRQHandler+0xae>
 8002f5e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002f62:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d005      	beq.n	8002f76 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f6e:	f043 0201 	orr.w	r2, r3, #1
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002f76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002f7a:	f003 0304 	and.w	r3, r3, #4
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d00b      	beq.n	8002f9a <HAL_UART_IRQHandler+0xd2>
 8002f82:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002f86:	f003 0301 	and.w	r3, r3, #1
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d005      	beq.n	8002f9a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f92:	f043 0202 	orr.w	r2, r3, #2
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002f9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002f9e:	f003 0302 	and.w	r3, r3, #2
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d00b      	beq.n	8002fbe <HAL_UART_IRQHandler+0xf6>
 8002fa6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002faa:	f003 0301 	and.w	r3, r3, #1
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d005      	beq.n	8002fbe <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002fb6:	f043 0204 	orr.w	r2, r3, #4
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002fbe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002fc2:	f003 0308 	and.w	r3, r3, #8
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d011      	beq.n	8002fee <HAL_UART_IRQHandler+0x126>
 8002fca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002fce:	f003 0320 	and.w	r3, r3, #32
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d105      	bne.n	8002fe2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002fd6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002fda:	f003 0301 	and.w	r3, r3, #1
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d005      	beq.n	8002fee <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002fe6:	f043 0208 	orr.w	r2, r3, #8
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	f000 81f2 	beq.w	80033dc <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002ff8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002ffc:	f003 0320 	and.w	r3, r3, #32
 8003000:	2b00      	cmp	r3, #0
 8003002:	d008      	beq.n	8003016 <HAL_UART_IRQHandler+0x14e>
 8003004:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003008:	f003 0320 	and.w	r3, r3, #32
 800300c:	2b00      	cmp	r3, #0
 800300e:	d002      	beq.n	8003016 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003010:	6878      	ldr	r0, [r7, #4]
 8003012:	f000 fc4c 	bl	80038ae <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	695b      	ldr	r3, [r3, #20]
 800301c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003020:	2b00      	cmp	r3, #0
 8003022:	bf14      	ite	ne
 8003024:	2301      	movne	r3, #1
 8003026:	2300      	moveq	r3, #0
 8003028:	b2db      	uxtb	r3, r3
 800302a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003032:	f003 0308 	and.w	r3, r3, #8
 8003036:	2b00      	cmp	r3, #0
 8003038:	d103      	bne.n	8003042 <HAL_UART_IRQHandler+0x17a>
 800303a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800303e:	2b00      	cmp	r3, #0
 8003040:	d04f      	beq.n	80030e2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003042:	6878      	ldr	r0, [r7, #4]
 8003044:	f000 fb56 	bl	80036f4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	695b      	ldr	r3, [r3, #20]
 800304e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003052:	2b00      	cmp	r3, #0
 8003054:	d041      	beq.n	80030da <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	3314      	adds	r3, #20
 800305c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003060:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003064:	e853 3f00 	ldrex	r3, [r3]
 8003068:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800306c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003070:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003074:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	3314      	adds	r3, #20
 800307e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003082:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8003086:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800308a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800308e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8003092:	e841 2300 	strex	r3, r2, [r1]
 8003096:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800309a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d1d9      	bne.n	8003056 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d013      	beq.n	80030d2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80030ae:	4a7e      	ldr	r2, [pc, #504]	@ (80032a8 <HAL_UART_IRQHandler+0x3e0>)
 80030b0:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80030b6:	4618      	mov	r0, r3
 80030b8:	f7fe fce8 	bl	8001a8c <HAL_DMA_Abort_IT>
 80030bc:	4603      	mov	r3, r0
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d016      	beq.n	80030f0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80030c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80030c8:	687a      	ldr	r2, [r7, #4]
 80030ca:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80030cc:	4610      	mov	r0, r2
 80030ce:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80030d0:	e00e      	b.n	80030f0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80030d2:	6878      	ldr	r0, [r7, #4]
 80030d4:	f000 f99c 	bl	8003410 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80030d8:	e00a      	b.n	80030f0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80030da:	6878      	ldr	r0, [r7, #4]
 80030dc:	f000 f998 	bl	8003410 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80030e0:	e006      	b.n	80030f0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80030e2:	6878      	ldr	r0, [r7, #4]
 80030e4:	f000 f994 	bl	8003410 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	2200      	movs	r2, #0
 80030ec:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80030ee:	e175      	b.n	80033dc <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80030f0:	bf00      	nop
    return;
 80030f2:	e173      	b.n	80033dc <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030f8:	2b01      	cmp	r3, #1
 80030fa:	f040 814f 	bne.w	800339c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80030fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003102:	f003 0310 	and.w	r3, r3, #16
 8003106:	2b00      	cmp	r3, #0
 8003108:	f000 8148 	beq.w	800339c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800310c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003110:	f003 0310 	and.w	r3, r3, #16
 8003114:	2b00      	cmp	r3, #0
 8003116:	f000 8141 	beq.w	800339c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800311a:	2300      	movs	r3, #0
 800311c:	60bb      	str	r3, [r7, #8]
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	60bb      	str	r3, [r7, #8]
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	685b      	ldr	r3, [r3, #4]
 800312c:	60bb      	str	r3, [r7, #8]
 800312e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	695b      	ldr	r3, [r3, #20]
 8003136:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800313a:	2b00      	cmp	r3, #0
 800313c:	f000 80b6 	beq.w	80032ac <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	685b      	ldr	r3, [r3, #4]
 8003148:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800314c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003150:	2b00      	cmp	r3, #0
 8003152:	f000 8145 	beq.w	80033e0 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800315a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800315e:	429a      	cmp	r2, r3
 8003160:	f080 813e 	bcs.w	80033e0 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800316a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003170:	699b      	ldr	r3, [r3, #24]
 8003172:	2b20      	cmp	r3, #32
 8003174:	f000 8088 	beq.w	8003288 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	330c      	adds	r3, #12
 800317e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003182:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003186:	e853 3f00 	ldrex	r3, [r3]
 800318a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800318e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003192:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003196:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	330c      	adds	r3, #12
 80031a0:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80031a4:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80031a8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031ac:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80031b0:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80031b4:	e841 2300 	strex	r3, r2, [r1]
 80031b8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80031bc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d1d9      	bne.n	8003178 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	3314      	adds	r3, #20
 80031ca:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031cc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80031ce:	e853 3f00 	ldrex	r3, [r3]
 80031d2:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80031d4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80031d6:	f023 0301 	bic.w	r3, r3, #1
 80031da:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	3314      	adds	r3, #20
 80031e4:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80031e8:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80031ec:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031ee:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80031f0:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80031f4:	e841 2300 	strex	r3, r2, [r1]
 80031f8:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80031fa:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d1e1      	bne.n	80031c4 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	3314      	adds	r3, #20
 8003206:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003208:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800320a:	e853 3f00 	ldrex	r3, [r3]
 800320e:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003210:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003212:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003216:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	3314      	adds	r3, #20
 8003220:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003224:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003226:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003228:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800322a:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800322c:	e841 2300 	strex	r3, r2, [r1]
 8003230:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003232:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003234:	2b00      	cmp	r3, #0
 8003236:	d1e3      	bne.n	8003200 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	2220      	movs	r2, #32
 800323c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	2200      	movs	r2, #0
 8003244:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	330c      	adds	r3, #12
 800324c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800324e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003250:	e853 3f00 	ldrex	r3, [r3]
 8003254:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003256:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003258:	f023 0310 	bic.w	r3, r3, #16
 800325c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	330c      	adds	r3, #12
 8003266:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800326a:	65ba      	str	r2, [r7, #88]	@ 0x58
 800326c:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800326e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003270:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003272:	e841 2300 	strex	r3, r2, [r1]
 8003276:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003278:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800327a:	2b00      	cmp	r3, #0
 800327c:	d1e3      	bne.n	8003246 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003282:	4618      	mov	r0, r3
 8003284:	f7fe fbc6 	bl	8001a14 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	2202      	movs	r2, #2
 800328c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003296:	b29b      	uxth	r3, r3
 8003298:	1ad3      	subs	r3, r2, r3
 800329a:	b29b      	uxth	r3, r3
 800329c:	4619      	mov	r1, r3
 800329e:	6878      	ldr	r0, [r7, #4]
 80032a0:	f000 f8bf 	bl	8003422 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80032a4:	e09c      	b.n	80033e0 <HAL_UART_IRQHandler+0x518>
 80032a6:	bf00      	nop
 80032a8:	080037b9 	.word	0x080037b9
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80032b4:	b29b      	uxth	r3, r3
 80032b6:	1ad3      	subs	r3, r2, r3
 80032b8:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80032c0:	b29b      	uxth	r3, r3
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	f000 808e 	beq.w	80033e4 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80032c8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	f000 8089 	beq.w	80033e4 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	330c      	adds	r3, #12
 80032d8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80032dc:	e853 3f00 	ldrex	r3, [r3]
 80032e0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80032e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80032e4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80032e8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	330c      	adds	r3, #12
 80032f2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80032f6:	647a      	str	r2, [r7, #68]	@ 0x44
 80032f8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032fa:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80032fc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80032fe:	e841 2300 	strex	r3, r2, [r1]
 8003302:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003304:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003306:	2b00      	cmp	r3, #0
 8003308:	d1e3      	bne.n	80032d2 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	3314      	adds	r3, #20
 8003310:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003312:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003314:	e853 3f00 	ldrex	r3, [r3]
 8003318:	623b      	str	r3, [r7, #32]
   return(result);
 800331a:	6a3b      	ldr	r3, [r7, #32]
 800331c:	f023 0301 	bic.w	r3, r3, #1
 8003320:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	3314      	adds	r3, #20
 800332a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800332e:	633a      	str	r2, [r7, #48]	@ 0x30
 8003330:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003332:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003334:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003336:	e841 2300 	strex	r3, r2, [r1]
 800333a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800333c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800333e:	2b00      	cmp	r3, #0
 8003340:	d1e3      	bne.n	800330a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	2220      	movs	r2, #32
 8003346:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	2200      	movs	r2, #0
 800334e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	330c      	adds	r3, #12
 8003356:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003358:	693b      	ldr	r3, [r7, #16]
 800335a:	e853 3f00 	ldrex	r3, [r3]
 800335e:	60fb      	str	r3, [r7, #12]
   return(result);
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	f023 0310 	bic.w	r3, r3, #16
 8003366:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	330c      	adds	r3, #12
 8003370:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8003374:	61fa      	str	r2, [r7, #28]
 8003376:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003378:	69b9      	ldr	r1, [r7, #24]
 800337a:	69fa      	ldr	r2, [r7, #28]
 800337c:	e841 2300 	strex	r3, r2, [r1]
 8003380:	617b      	str	r3, [r7, #20]
   return(result);
 8003382:	697b      	ldr	r3, [r7, #20]
 8003384:	2b00      	cmp	r3, #0
 8003386:	d1e3      	bne.n	8003350 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	2202      	movs	r2, #2
 800338c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800338e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003392:	4619      	mov	r1, r3
 8003394:	6878      	ldr	r0, [r7, #4]
 8003396:	f000 f844 	bl	8003422 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800339a:	e023      	b.n	80033e4 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800339c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80033a0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d009      	beq.n	80033bc <HAL_UART_IRQHandler+0x4f4>
 80033a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80033ac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d003      	beq.n	80033bc <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80033b4:	6878      	ldr	r0, [r7, #4]
 80033b6:	f000 fa13 	bl	80037e0 <UART_Transmit_IT>
    return;
 80033ba:	e014      	b.n	80033e6 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80033bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80033c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d00e      	beq.n	80033e6 <HAL_UART_IRQHandler+0x51e>
 80033c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80033cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d008      	beq.n	80033e6 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80033d4:	6878      	ldr	r0, [r7, #4]
 80033d6:	f000 fa52 	bl	800387e <UART_EndTransmit_IT>
    return;
 80033da:	e004      	b.n	80033e6 <HAL_UART_IRQHandler+0x51e>
    return;
 80033dc:	bf00      	nop
 80033de:	e002      	b.n	80033e6 <HAL_UART_IRQHandler+0x51e>
      return;
 80033e0:	bf00      	nop
 80033e2:	e000      	b.n	80033e6 <HAL_UART_IRQHandler+0x51e>
      return;
 80033e4:	bf00      	nop
  }
}
 80033e6:	37e8      	adds	r7, #232	@ 0xe8
 80033e8:	46bd      	mov	sp, r7
 80033ea:	bd80      	pop	{r7, pc}

080033ec <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80033ec:	b480      	push	{r7}
 80033ee:	b083      	sub	sp, #12
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80033f4:	bf00      	nop
 80033f6:	370c      	adds	r7, #12
 80033f8:	46bd      	mov	sp, r7
 80033fa:	bc80      	pop	{r7}
 80033fc:	4770      	bx	lr

080033fe <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80033fe:	b480      	push	{r7}
 8003400:	b083      	sub	sp, #12
 8003402:	af00      	add	r7, sp, #0
 8003404:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8003406:	bf00      	nop
 8003408:	370c      	adds	r7, #12
 800340a:	46bd      	mov	sp, r7
 800340c:	bc80      	pop	{r7}
 800340e:	4770      	bx	lr

08003410 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003410:	b480      	push	{r7}
 8003412:	b083      	sub	sp, #12
 8003414:	af00      	add	r7, sp, #0
 8003416:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003418:	bf00      	nop
 800341a:	370c      	adds	r7, #12
 800341c:	46bd      	mov	sp, r7
 800341e:	bc80      	pop	{r7}
 8003420:	4770      	bx	lr

08003422 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003422:	b480      	push	{r7}
 8003424:	b083      	sub	sp, #12
 8003426:	af00      	add	r7, sp, #0
 8003428:	6078      	str	r0, [r7, #4]
 800342a:	460b      	mov	r3, r1
 800342c:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800342e:	bf00      	nop
 8003430:	370c      	adds	r7, #12
 8003432:	46bd      	mov	sp, r7
 8003434:	bc80      	pop	{r7}
 8003436:	4770      	bx	lr

08003438 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8003438:	b580      	push	{r7, lr}
 800343a:	b090      	sub	sp, #64	@ 0x40
 800343c:	af00      	add	r7, sp, #0
 800343e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003444:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f003 0320 	and.w	r3, r3, #32
 8003450:	2b00      	cmp	r3, #0
 8003452:	d137      	bne.n	80034c4 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8003454:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003456:	2200      	movs	r2, #0
 8003458:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800345a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	3314      	adds	r3, #20
 8003460:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003462:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003464:	e853 3f00 	ldrex	r3, [r3]
 8003468:	623b      	str	r3, [r7, #32]
   return(result);
 800346a:	6a3b      	ldr	r3, [r7, #32]
 800346c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003470:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003472:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	3314      	adds	r3, #20
 8003478:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800347a:	633a      	str	r2, [r7, #48]	@ 0x30
 800347c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800347e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003480:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003482:	e841 2300 	strex	r3, r2, [r1]
 8003486:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003488:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800348a:	2b00      	cmp	r3, #0
 800348c:	d1e5      	bne.n	800345a <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800348e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	330c      	adds	r3, #12
 8003494:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003496:	693b      	ldr	r3, [r7, #16]
 8003498:	e853 3f00 	ldrex	r3, [r3]
 800349c:	60fb      	str	r3, [r7, #12]
   return(result);
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80034a4:	637b      	str	r3, [r7, #52]	@ 0x34
 80034a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	330c      	adds	r3, #12
 80034ac:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80034ae:	61fa      	str	r2, [r7, #28]
 80034b0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034b2:	69b9      	ldr	r1, [r7, #24]
 80034b4:	69fa      	ldr	r2, [r7, #28]
 80034b6:	e841 2300 	strex	r3, r2, [r1]
 80034ba:	617b      	str	r3, [r7, #20]
   return(result);
 80034bc:	697b      	ldr	r3, [r7, #20]
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d1e5      	bne.n	800348e <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80034c2:	e002      	b.n	80034ca <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 80034c4:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80034c6:	f7ff ff91 	bl	80033ec <HAL_UART_TxCpltCallback>
}
 80034ca:	bf00      	nop
 80034cc:	3740      	adds	r7, #64	@ 0x40
 80034ce:	46bd      	mov	sp, r7
 80034d0:	bd80      	pop	{r7, pc}

080034d2 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80034d2:	b580      	push	{r7, lr}
 80034d4:	b084      	sub	sp, #16
 80034d6:	af00      	add	r7, sp, #0
 80034d8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034de:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80034e0:	68f8      	ldr	r0, [r7, #12]
 80034e2:	f7ff ff8c 	bl	80033fe <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80034e6:	bf00      	nop
 80034e8:	3710      	adds	r7, #16
 80034ea:	46bd      	mov	sp, r7
 80034ec:	bd80      	pop	{r7, pc}

080034ee <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80034ee:	b580      	push	{r7, lr}
 80034f0:	b084      	sub	sp, #16
 80034f2:	af00      	add	r7, sp, #0
 80034f4:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80034f6:	2300      	movs	r3, #0
 80034f8:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034fe:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8003500:	68bb      	ldr	r3, [r7, #8]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	695b      	ldr	r3, [r3, #20]
 8003506:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800350a:	2b00      	cmp	r3, #0
 800350c:	bf14      	ite	ne
 800350e:	2301      	movne	r3, #1
 8003510:	2300      	moveq	r3, #0
 8003512:	b2db      	uxtb	r3, r3
 8003514:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8003516:	68bb      	ldr	r3, [r7, #8]
 8003518:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800351c:	b2db      	uxtb	r3, r3
 800351e:	2b21      	cmp	r3, #33	@ 0x21
 8003520:	d108      	bne.n	8003534 <UART_DMAError+0x46>
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	2b00      	cmp	r3, #0
 8003526:	d005      	beq.n	8003534 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8003528:	68bb      	ldr	r3, [r7, #8]
 800352a:	2200      	movs	r2, #0
 800352c:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 800352e:	68b8      	ldr	r0, [r7, #8]
 8003530:	f000 f8b9 	bl	80036a6 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003534:	68bb      	ldr	r3, [r7, #8]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	695b      	ldr	r3, [r3, #20]
 800353a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800353e:	2b00      	cmp	r3, #0
 8003540:	bf14      	ite	ne
 8003542:	2301      	movne	r3, #1
 8003544:	2300      	moveq	r3, #0
 8003546:	b2db      	uxtb	r3, r3
 8003548:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800354a:	68bb      	ldr	r3, [r7, #8]
 800354c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003550:	b2db      	uxtb	r3, r3
 8003552:	2b22      	cmp	r3, #34	@ 0x22
 8003554:	d108      	bne.n	8003568 <UART_DMAError+0x7a>
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	2b00      	cmp	r3, #0
 800355a:	d005      	beq.n	8003568 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800355c:	68bb      	ldr	r3, [r7, #8]
 800355e:	2200      	movs	r2, #0
 8003560:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8003562:	68b8      	ldr	r0, [r7, #8]
 8003564:	f000 f8c6 	bl	80036f4 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8003568:	68bb      	ldr	r3, [r7, #8]
 800356a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800356c:	f043 0210 	orr.w	r2, r3, #16
 8003570:	68bb      	ldr	r3, [r7, #8]
 8003572:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003574:	68b8      	ldr	r0, [r7, #8]
 8003576:	f7ff ff4b 	bl	8003410 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800357a:	bf00      	nop
 800357c:	3710      	adds	r7, #16
 800357e:	46bd      	mov	sp, r7
 8003580:	bd80      	pop	{r7, pc}

08003582 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003582:	b580      	push	{r7, lr}
 8003584:	b086      	sub	sp, #24
 8003586:	af00      	add	r7, sp, #0
 8003588:	60f8      	str	r0, [r7, #12]
 800358a:	60b9      	str	r1, [r7, #8]
 800358c:	603b      	str	r3, [r7, #0]
 800358e:	4613      	mov	r3, r2
 8003590:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003592:	e03b      	b.n	800360c <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003594:	6a3b      	ldr	r3, [r7, #32]
 8003596:	f1b3 3fff 	cmp.w	r3, #4294967295
 800359a:	d037      	beq.n	800360c <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800359c:	f7fe f844 	bl	8001628 <HAL_GetTick>
 80035a0:	4602      	mov	r2, r0
 80035a2:	683b      	ldr	r3, [r7, #0]
 80035a4:	1ad3      	subs	r3, r2, r3
 80035a6:	6a3a      	ldr	r2, [r7, #32]
 80035a8:	429a      	cmp	r2, r3
 80035aa:	d302      	bcc.n	80035b2 <UART_WaitOnFlagUntilTimeout+0x30>
 80035ac:	6a3b      	ldr	r3, [r7, #32]
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d101      	bne.n	80035b6 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80035b2:	2303      	movs	r3, #3
 80035b4:	e03a      	b.n	800362c <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	68db      	ldr	r3, [r3, #12]
 80035bc:	f003 0304 	and.w	r3, r3, #4
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d023      	beq.n	800360c <UART_WaitOnFlagUntilTimeout+0x8a>
 80035c4:	68bb      	ldr	r3, [r7, #8]
 80035c6:	2b80      	cmp	r3, #128	@ 0x80
 80035c8:	d020      	beq.n	800360c <UART_WaitOnFlagUntilTimeout+0x8a>
 80035ca:	68bb      	ldr	r3, [r7, #8]
 80035cc:	2b40      	cmp	r3, #64	@ 0x40
 80035ce:	d01d      	beq.n	800360c <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f003 0308 	and.w	r3, r3, #8
 80035da:	2b08      	cmp	r3, #8
 80035dc:	d116      	bne.n	800360c <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80035de:	2300      	movs	r3, #0
 80035e0:	617b      	str	r3, [r7, #20]
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	617b      	str	r3, [r7, #20]
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	685b      	ldr	r3, [r3, #4]
 80035f0:	617b      	str	r3, [r7, #20]
 80035f2:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80035f4:	68f8      	ldr	r0, [r7, #12]
 80035f6:	f000 f87d 	bl	80036f4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	2208      	movs	r2, #8
 80035fe:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	2200      	movs	r2, #0
 8003604:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003608:	2301      	movs	r3, #1
 800360a:	e00f      	b.n	800362c <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	681a      	ldr	r2, [r3, #0]
 8003612:	68bb      	ldr	r3, [r7, #8]
 8003614:	4013      	ands	r3, r2
 8003616:	68ba      	ldr	r2, [r7, #8]
 8003618:	429a      	cmp	r2, r3
 800361a:	bf0c      	ite	eq
 800361c:	2301      	moveq	r3, #1
 800361e:	2300      	movne	r3, #0
 8003620:	b2db      	uxtb	r3, r3
 8003622:	461a      	mov	r2, r3
 8003624:	79fb      	ldrb	r3, [r7, #7]
 8003626:	429a      	cmp	r2, r3
 8003628:	d0b4      	beq.n	8003594 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800362a:	2300      	movs	r3, #0
}
 800362c:	4618      	mov	r0, r3
 800362e:	3718      	adds	r7, #24
 8003630:	46bd      	mov	sp, r7
 8003632:	bd80      	pop	{r7, pc}

08003634 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003634:	b480      	push	{r7}
 8003636:	b085      	sub	sp, #20
 8003638:	af00      	add	r7, sp, #0
 800363a:	60f8      	str	r0, [r7, #12]
 800363c:	60b9      	str	r1, [r7, #8]
 800363e:	4613      	mov	r3, r2
 8003640:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	68ba      	ldr	r2, [r7, #8]
 8003646:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	88fa      	ldrh	r2, [r7, #6]
 800364c:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	88fa      	ldrh	r2, [r7, #6]
 8003652:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	2200      	movs	r2, #0
 8003658:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	2222      	movs	r2, #34	@ 0x22
 800365e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	691b      	ldr	r3, [r3, #16]
 8003666:	2b00      	cmp	r3, #0
 8003668:	d007      	beq.n	800367a <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	68da      	ldr	r2, [r3, #12]
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003678:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	695a      	ldr	r2, [r3, #20]
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f042 0201 	orr.w	r2, r2, #1
 8003688:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	68da      	ldr	r2, [r3, #12]
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f042 0220 	orr.w	r2, r2, #32
 8003698:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800369a:	2300      	movs	r3, #0
}
 800369c:	4618      	mov	r0, r3
 800369e:	3714      	adds	r7, #20
 80036a0:	46bd      	mov	sp, r7
 80036a2:	bc80      	pop	{r7}
 80036a4:	4770      	bx	lr

080036a6 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80036a6:	b480      	push	{r7}
 80036a8:	b089      	sub	sp, #36	@ 0x24
 80036aa:	af00      	add	r7, sp, #0
 80036ac:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	330c      	adds	r3, #12
 80036b4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	e853 3f00 	ldrex	r3, [r3]
 80036bc:	60bb      	str	r3, [r7, #8]
   return(result);
 80036be:	68bb      	ldr	r3, [r7, #8]
 80036c0:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80036c4:	61fb      	str	r3, [r7, #28]
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	330c      	adds	r3, #12
 80036cc:	69fa      	ldr	r2, [r7, #28]
 80036ce:	61ba      	str	r2, [r7, #24]
 80036d0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036d2:	6979      	ldr	r1, [r7, #20]
 80036d4:	69ba      	ldr	r2, [r7, #24]
 80036d6:	e841 2300 	strex	r3, r2, [r1]
 80036da:	613b      	str	r3, [r7, #16]
   return(result);
 80036dc:	693b      	ldr	r3, [r7, #16]
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d1e5      	bne.n	80036ae <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	2220      	movs	r2, #32
 80036e6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 80036ea:	bf00      	nop
 80036ec:	3724      	adds	r7, #36	@ 0x24
 80036ee:	46bd      	mov	sp, r7
 80036f0:	bc80      	pop	{r7}
 80036f2:	4770      	bx	lr

080036f4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80036f4:	b480      	push	{r7}
 80036f6:	b095      	sub	sp, #84	@ 0x54
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	330c      	adds	r3, #12
 8003702:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003704:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003706:	e853 3f00 	ldrex	r3, [r3]
 800370a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800370c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800370e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003712:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	330c      	adds	r3, #12
 800371a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800371c:	643a      	str	r2, [r7, #64]	@ 0x40
 800371e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003720:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003722:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003724:	e841 2300 	strex	r3, r2, [r1]
 8003728:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800372a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800372c:	2b00      	cmp	r3, #0
 800372e:	d1e5      	bne.n	80036fc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	3314      	adds	r3, #20
 8003736:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003738:	6a3b      	ldr	r3, [r7, #32]
 800373a:	e853 3f00 	ldrex	r3, [r3]
 800373e:	61fb      	str	r3, [r7, #28]
   return(result);
 8003740:	69fb      	ldr	r3, [r7, #28]
 8003742:	f023 0301 	bic.w	r3, r3, #1
 8003746:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	3314      	adds	r3, #20
 800374e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003750:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003752:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003754:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003756:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003758:	e841 2300 	strex	r3, r2, [r1]
 800375c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800375e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003760:	2b00      	cmp	r3, #0
 8003762:	d1e5      	bne.n	8003730 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003768:	2b01      	cmp	r3, #1
 800376a:	d119      	bne.n	80037a0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	330c      	adds	r3, #12
 8003772:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	e853 3f00 	ldrex	r3, [r3]
 800377a:	60bb      	str	r3, [r7, #8]
   return(result);
 800377c:	68bb      	ldr	r3, [r7, #8]
 800377e:	f023 0310 	bic.w	r3, r3, #16
 8003782:	647b      	str	r3, [r7, #68]	@ 0x44
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	330c      	adds	r3, #12
 800378a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800378c:	61ba      	str	r2, [r7, #24]
 800378e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003790:	6979      	ldr	r1, [r7, #20]
 8003792:	69ba      	ldr	r2, [r7, #24]
 8003794:	e841 2300 	strex	r3, r2, [r1]
 8003798:	613b      	str	r3, [r7, #16]
   return(result);
 800379a:	693b      	ldr	r3, [r7, #16]
 800379c:	2b00      	cmp	r3, #0
 800379e:	d1e5      	bne.n	800376c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	2220      	movs	r2, #32
 80037a4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	2200      	movs	r2, #0
 80037ac:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80037ae:	bf00      	nop
 80037b0:	3754      	adds	r7, #84	@ 0x54
 80037b2:	46bd      	mov	sp, r7
 80037b4:	bc80      	pop	{r7}
 80037b6:	4770      	bx	lr

080037b8 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80037b8:	b580      	push	{r7, lr}
 80037ba:	b084      	sub	sp, #16
 80037bc:	af00      	add	r7, sp, #0
 80037be:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037c4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	2200      	movs	r2, #0
 80037ca:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	2200      	movs	r2, #0
 80037d0:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80037d2:	68f8      	ldr	r0, [r7, #12]
 80037d4:	f7ff fe1c 	bl	8003410 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80037d8:	bf00      	nop
 80037da:	3710      	adds	r7, #16
 80037dc:	46bd      	mov	sp, r7
 80037de:	bd80      	pop	{r7, pc}

080037e0 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80037e0:	b480      	push	{r7}
 80037e2:	b085      	sub	sp, #20
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80037ee:	b2db      	uxtb	r3, r3
 80037f0:	2b21      	cmp	r3, #33	@ 0x21
 80037f2:	d13e      	bne.n	8003872 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	689b      	ldr	r3, [r3, #8]
 80037f8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80037fc:	d114      	bne.n	8003828 <UART_Transmit_IT+0x48>
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	691b      	ldr	r3, [r3, #16]
 8003802:	2b00      	cmp	r3, #0
 8003804:	d110      	bne.n	8003828 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	6a1b      	ldr	r3, [r3, #32]
 800380a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	881b      	ldrh	r3, [r3, #0]
 8003810:	461a      	mov	r2, r3
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800381a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	6a1b      	ldr	r3, [r3, #32]
 8003820:	1c9a      	adds	r2, r3, #2
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	621a      	str	r2, [r3, #32]
 8003826:	e008      	b.n	800383a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	6a1b      	ldr	r3, [r3, #32]
 800382c:	1c59      	adds	r1, r3, #1
 800382e:	687a      	ldr	r2, [r7, #4]
 8003830:	6211      	str	r1, [r2, #32]
 8003832:	781a      	ldrb	r2, [r3, #0]
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800383e:	b29b      	uxth	r3, r3
 8003840:	3b01      	subs	r3, #1
 8003842:	b29b      	uxth	r3, r3
 8003844:	687a      	ldr	r2, [r7, #4]
 8003846:	4619      	mov	r1, r3
 8003848:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800384a:	2b00      	cmp	r3, #0
 800384c:	d10f      	bne.n	800386e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	68da      	ldr	r2, [r3, #12]
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800385c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	68da      	ldr	r2, [r3, #12]
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800386c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800386e:	2300      	movs	r3, #0
 8003870:	e000      	b.n	8003874 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003872:	2302      	movs	r3, #2
  }
}
 8003874:	4618      	mov	r0, r3
 8003876:	3714      	adds	r7, #20
 8003878:	46bd      	mov	sp, r7
 800387a:	bc80      	pop	{r7}
 800387c:	4770      	bx	lr

0800387e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800387e:	b580      	push	{r7, lr}
 8003880:	b082      	sub	sp, #8
 8003882:	af00      	add	r7, sp, #0
 8003884:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	68da      	ldr	r2, [r3, #12]
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003894:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	2220      	movs	r2, #32
 800389a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800389e:	6878      	ldr	r0, [r7, #4]
 80038a0:	f7ff fda4 	bl	80033ec <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80038a4:	2300      	movs	r3, #0
}
 80038a6:	4618      	mov	r0, r3
 80038a8:	3708      	adds	r7, #8
 80038aa:	46bd      	mov	sp, r7
 80038ac:	bd80      	pop	{r7, pc}

080038ae <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80038ae:	b580      	push	{r7, lr}
 80038b0:	b08c      	sub	sp, #48	@ 0x30
 80038b2:	af00      	add	r7, sp, #0
 80038b4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80038bc:	b2db      	uxtb	r3, r3
 80038be:	2b22      	cmp	r3, #34	@ 0x22
 80038c0:	f040 80ae 	bne.w	8003a20 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	689b      	ldr	r3, [r3, #8]
 80038c8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80038cc:	d117      	bne.n	80038fe <UART_Receive_IT+0x50>
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	691b      	ldr	r3, [r3, #16]
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d113      	bne.n	80038fe <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80038d6:	2300      	movs	r3, #0
 80038d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038de:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	685b      	ldr	r3, [r3, #4]
 80038e6:	b29b      	uxth	r3, r3
 80038e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80038ec:	b29a      	uxth	r2, r3
 80038ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80038f0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038f6:	1c9a      	adds	r2, r3, #2
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	629a      	str	r2, [r3, #40]	@ 0x28
 80038fc:	e026      	b.n	800394c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003902:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8003904:	2300      	movs	r3, #0
 8003906:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	689b      	ldr	r3, [r3, #8]
 800390c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003910:	d007      	beq.n	8003922 <UART_Receive_IT+0x74>
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	689b      	ldr	r3, [r3, #8]
 8003916:	2b00      	cmp	r3, #0
 8003918:	d10a      	bne.n	8003930 <UART_Receive_IT+0x82>
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	691b      	ldr	r3, [r3, #16]
 800391e:	2b00      	cmp	r3, #0
 8003920:	d106      	bne.n	8003930 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	685b      	ldr	r3, [r3, #4]
 8003928:	b2da      	uxtb	r2, r3
 800392a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800392c:	701a      	strb	r2, [r3, #0]
 800392e:	e008      	b.n	8003942 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	685b      	ldr	r3, [r3, #4]
 8003936:	b2db      	uxtb	r3, r3
 8003938:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800393c:	b2da      	uxtb	r2, r3
 800393e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003940:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003946:	1c5a      	adds	r2, r3, #1
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003950:	b29b      	uxth	r3, r3
 8003952:	3b01      	subs	r3, #1
 8003954:	b29b      	uxth	r3, r3
 8003956:	687a      	ldr	r2, [r7, #4]
 8003958:	4619      	mov	r1, r3
 800395a:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800395c:	2b00      	cmp	r3, #0
 800395e:	d15d      	bne.n	8003a1c <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	68da      	ldr	r2, [r3, #12]
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f022 0220 	bic.w	r2, r2, #32
 800396e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	68da      	ldr	r2, [r3, #12]
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800397e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	695a      	ldr	r2, [r3, #20]
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f022 0201 	bic.w	r2, r2, #1
 800398e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	2220      	movs	r2, #32
 8003994:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2200      	movs	r2, #0
 800399c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039a2:	2b01      	cmp	r3, #1
 80039a4:	d135      	bne.n	8003a12 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	2200      	movs	r2, #0
 80039aa:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	330c      	adds	r3, #12
 80039b2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039b4:	697b      	ldr	r3, [r7, #20]
 80039b6:	e853 3f00 	ldrex	r3, [r3]
 80039ba:	613b      	str	r3, [r7, #16]
   return(result);
 80039bc:	693b      	ldr	r3, [r7, #16]
 80039be:	f023 0310 	bic.w	r3, r3, #16
 80039c2:	627b      	str	r3, [r7, #36]	@ 0x24
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	330c      	adds	r3, #12
 80039ca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80039cc:	623a      	str	r2, [r7, #32]
 80039ce:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039d0:	69f9      	ldr	r1, [r7, #28]
 80039d2:	6a3a      	ldr	r2, [r7, #32]
 80039d4:	e841 2300 	strex	r3, r2, [r1]
 80039d8:	61bb      	str	r3, [r7, #24]
   return(result);
 80039da:	69bb      	ldr	r3, [r7, #24]
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d1e5      	bne.n	80039ac <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f003 0310 	and.w	r3, r3, #16
 80039ea:	2b10      	cmp	r3, #16
 80039ec:	d10a      	bne.n	8003a04 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80039ee:	2300      	movs	r3, #0
 80039f0:	60fb      	str	r3, [r7, #12]
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	60fb      	str	r3, [r7, #12]
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	685b      	ldr	r3, [r3, #4]
 8003a00:	60fb      	str	r3, [r7, #12]
 8003a02:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003a08:	4619      	mov	r1, r3
 8003a0a:	6878      	ldr	r0, [r7, #4]
 8003a0c:	f7ff fd09 	bl	8003422 <HAL_UARTEx_RxEventCallback>
 8003a10:	e002      	b.n	8003a18 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003a12:	6878      	ldr	r0, [r7, #4]
 8003a14:	f7fc fbc8 	bl	80001a8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003a18:	2300      	movs	r3, #0
 8003a1a:	e002      	b.n	8003a22 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8003a1c:	2300      	movs	r3, #0
 8003a1e:	e000      	b.n	8003a22 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8003a20:	2302      	movs	r3, #2
  }
}
 8003a22:	4618      	mov	r0, r3
 8003a24:	3730      	adds	r7, #48	@ 0x30
 8003a26:	46bd      	mov	sp, r7
 8003a28:	bd80      	pop	{r7, pc}
	...

08003a2c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	b084      	sub	sp, #16
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	691b      	ldr	r3, [r3, #16]
 8003a3a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	68da      	ldr	r2, [r3, #12]
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	430a      	orrs	r2, r1
 8003a48:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	689a      	ldr	r2, [r3, #8]
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	691b      	ldr	r3, [r3, #16]
 8003a52:	431a      	orrs	r2, r3
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	695b      	ldr	r3, [r3, #20]
 8003a58:	4313      	orrs	r3, r2
 8003a5a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	68db      	ldr	r3, [r3, #12]
 8003a62:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8003a66:	f023 030c 	bic.w	r3, r3, #12
 8003a6a:	687a      	ldr	r2, [r7, #4]
 8003a6c:	6812      	ldr	r2, [r2, #0]
 8003a6e:	68b9      	ldr	r1, [r7, #8]
 8003a70:	430b      	orrs	r3, r1
 8003a72:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	695b      	ldr	r3, [r3, #20]
 8003a7a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	699a      	ldr	r2, [r3, #24]
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	430a      	orrs	r2, r1
 8003a88:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	4a2c      	ldr	r2, [pc, #176]	@ (8003b40 <UART_SetConfig+0x114>)
 8003a90:	4293      	cmp	r3, r2
 8003a92:	d103      	bne.n	8003a9c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003a94:	f7ff f876 	bl	8002b84 <HAL_RCC_GetPCLK2Freq>
 8003a98:	60f8      	str	r0, [r7, #12]
 8003a9a:	e002      	b.n	8003aa2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003a9c:	f7ff f85e 	bl	8002b5c <HAL_RCC_GetPCLK1Freq>
 8003aa0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003aa2:	68fa      	ldr	r2, [r7, #12]
 8003aa4:	4613      	mov	r3, r2
 8003aa6:	009b      	lsls	r3, r3, #2
 8003aa8:	4413      	add	r3, r2
 8003aaa:	009a      	lsls	r2, r3, #2
 8003aac:	441a      	add	r2, r3
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	685b      	ldr	r3, [r3, #4]
 8003ab2:	009b      	lsls	r3, r3, #2
 8003ab4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ab8:	4a22      	ldr	r2, [pc, #136]	@ (8003b44 <UART_SetConfig+0x118>)
 8003aba:	fba2 2303 	umull	r2, r3, r2, r3
 8003abe:	095b      	lsrs	r3, r3, #5
 8003ac0:	0119      	lsls	r1, r3, #4
 8003ac2:	68fa      	ldr	r2, [r7, #12]
 8003ac4:	4613      	mov	r3, r2
 8003ac6:	009b      	lsls	r3, r3, #2
 8003ac8:	4413      	add	r3, r2
 8003aca:	009a      	lsls	r2, r3, #2
 8003acc:	441a      	add	r2, r3
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	685b      	ldr	r3, [r3, #4]
 8003ad2:	009b      	lsls	r3, r3, #2
 8003ad4:	fbb2 f2f3 	udiv	r2, r2, r3
 8003ad8:	4b1a      	ldr	r3, [pc, #104]	@ (8003b44 <UART_SetConfig+0x118>)
 8003ada:	fba3 0302 	umull	r0, r3, r3, r2
 8003ade:	095b      	lsrs	r3, r3, #5
 8003ae0:	2064      	movs	r0, #100	@ 0x64
 8003ae2:	fb00 f303 	mul.w	r3, r0, r3
 8003ae6:	1ad3      	subs	r3, r2, r3
 8003ae8:	011b      	lsls	r3, r3, #4
 8003aea:	3332      	adds	r3, #50	@ 0x32
 8003aec:	4a15      	ldr	r2, [pc, #84]	@ (8003b44 <UART_SetConfig+0x118>)
 8003aee:	fba2 2303 	umull	r2, r3, r2, r3
 8003af2:	095b      	lsrs	r3, r3, #5
 8003af4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003af8:	4419      	add	r1, r3
 8003afa:	68fa      	ldr	r2, [r7, #12]
 8003afc:	4613      	mov	r3, r2
 8003afe:	009b      	lsls	r3, r3, #2
 8003b00:	4413      	add	r3, r2
 8003b02:	009a      	lsls	r2, r3, #2
 8003b04:	441a      	add	r2, r3
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	685b      	ldr	r3, [r3, #4]
 8003b0a:	009b      	lsls	r3, r3, #2
 8003b0c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003b10:	4b0c      	ldr	r3, [pc, #48]	@ (8003b44 <UART_SetConfig+0x118>)
 8003b12:	fba3 0302 	umull	r0, r3, r3, r2
 8003b16:	095b      	lsrs	r3, r3, #5
 8003b18:	2064      	movs	r0, #100	@ 0x64
 8003b1a:	fb00 f303 	mul.w	r3, r0, r3
 8003b1e:	1ad3      	subs	r3, r2, r3
 8003b20:	011b      	lsls	r3, r3, #4
 8003b22:	3332      	adds	r3, #50	@ 0x32
 8003b24:	4a07      	ldr	r2, [pc, #28]	@ (8003b44 <UART_SetConfig+0x118>)
 8003b26:	fba2 2303 	umull	r2, r3, r2, r3
 8003b2a:	095b      	lsrs	r3, r3, #5
 8003b2c:	f003 020f 	and.w	r2, r3, #15
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	440a      	add	r2, r1
 8003b36:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003b38:	bf00      	nop
 8003b3a:	3710      	adds	r7, #16
 8003b3c:	46bd      	mov	sp, r7
 8003b3e:	bd80      	pop	{r7, pc}
 8003b40:	40013800 	.word	0x40013800
 8003b44:	51eb851f 	.word	0x51eb851f

08003b48 <memset>:
 8003b48:	4603      	mov	r3, r0
 8003b4a:	4402      	add	r2, r0
 8003b4c:	4293      	cmp	r3, r2
 8003b4e:	d100      	bne.n	8003b52 <memset+0xa>
 8003b50:	4770      	bx	lr
 8003b52:	f803 1b01 	strb.w	r1, [r3], #1
 8003b56:	e7f9      	b.n	8003b4c <memset+0x4>

08003b58 <strncpy>:
 8003b58:	4603      	mov	r3, r0
 8003b5a:	b510      	push	{r4, lr}
 8003b5c:	3901      	subs	r1, #1
 8003b5e:	b132      	cbz	r2, 8003b6e <strncpy+0x16>
 8003b60:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8003b64:	3a01      	subs	r2, #1
 8003b66:	f803 4b01 	strb.w	r4, [r3], #1
 8003b6a:	2c00      	cmp	r4, #0
 8003b6c:	d1f7      	bne.n	8003b5e <strncpy+0x6>
 8003b6e:	2100      	movs	r1, #0
 8003b70:	441a      	add	r2, r3
 8003b72:	4293      	cmp	r3, r2
 8003b74:	d100      	bne.n	8003b78 <strncpy+0x20>
 8003b76:	bd10      	pop	{r4, pc}
 8003b78:	f803 1b01 	strb.w	r1, [r3], #1
 8003b7c:	e7f9      	b.n	8003b72 <strncpy+0x1a>

08003b7e <strstr>:
 8003b7e:	780a      	ldrb	r2, [r1, #0]
 8003b80:	b570      	push	{r4, r5, r6, lr}
 8003b82:	b96a      	cbnz	r2, 8003ba0 <strstr+0x22>
 8003b84:	bd70      	pop	{r4, r5, r6, pc}
 8003b86:	429a      	cmp	r2, r3
 8003b88:	d109      	bne.n	8003b9e <strstr+0x20>
 8003b8a:	460c      	mov	r4, r1
 8003b8c:	4605      	mov	r5, r0
 8003b8e:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d0f6      	beq.n	8003b84 <strstr+0x6>
 8003b96:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8003b9a:	429e      	cmp	r6, r3
 8003b9c:	d0f7      	beq.n	8003b8e <strstr+0x10>
 8003b9e:	3001      	adds	r0, #1
 8003ba0:	7803      	ldrb	r3, [r0, #0]
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d1ef      	bne.n	8003b86 <strstr+0x8>
 8003ba6:	4618      	mov	r0, r3
 8003ba8:	e7ec      	b.n	8003b84 <strstr+0x6>
	...

08003bac <__libc_init_array>:
 8003bac:	b570      	push	{r4, r5, r6, lr}
 8003bae:	2600      	movs	r6, #0
 8003bb0:	4d0c      	ldr	r5, [pc, #48]	@ (8003be4 <__libc_init_array+0x38>)
 8003bb2:	4c0d      	ldr	r4, [pc, #52]	@ (8003be8 <__libc_init_array+0x3c>)
 8003bb4:	1b64      	subs	r4, r4, r5
 8003bb6:	10a4      	asrs	r4, r4, #2
 8003bb8:	42a6      	cmp	r6, r4
 8003bba:	d109      	bne.n	8003bd0 <__libc_init_array+0x24>
 8003bbc:	f000 f81a 	bl	8003bf4 <_init>
 8003bc0:	2600      	movs	r6, #0
 8003bc2:	4d0a      	ldr	r5, [pc, #40]	@ (8003bec <__libc_init_array+0x40>)
 8003bc4:	4c0a      	ldr	r4, [pc, #40]	@ (8003bf0 <__libc_init_array+0x44>)
 8003bc6:	1b64      	subs	r4, r4, r5
 8003bc8:	10a4      	asrs	r4, r4, #2
 8003bca:	42a6      	cmp	r6, r4
 8003bcc:	d105      	bne.n	8003bda <__libc_init_array+0x2e>
 8003bce:	bd70      	pop	{r4, r5, r6, pc}
 8003bd0:	f855 3b04 	ldr.w	r3, [r5], #4
 8003bd4:	4798      	blx	r3
 8003bd6:	3601      	adds	r6, #1
 8003bd8:	e7ee      	b.n	8003bb8 <__libc_init_array+0xc>
 8003bda:	f855 3b04 	ldr.w	r3, [r5], #4
 8003bde:	4798      	blx	r3
 8003be0:	3601      	adds	r6, #1
 8003be2:	e7f2      	b.n	8003bca <__libc_init_array+0x1e>
 8003be4:	08004488 	.word	0x08004488
 8003be8:	08004488 	.word	0x08004488
 8003bec:	08004488 	.word	0x08004488
 8003bf0:	0800448c 	.word	0x0800448c

08003bf4 <_init>:
 8003bf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003bf6:	bf00      	nop
 8003bf8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003bfa:	bc08      	pop	{r3}
 8003bfc:	469e      	mov	lr, r3
 8003bfe:	4770      	bx	lr

08003c00 <_fini>:
 8003c00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c02:	bf00      	nop
 8003c04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c06:	bc08      	pop	{r3}
 8003c08:	469e      	mov	lr, r3
 8003c0a:	4770      	bx	lr
