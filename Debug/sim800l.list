
sim800l.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004d74  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a3c  08004e80  08004e80  00014e80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080058bc  080058bc  0002008c  2**0
                  CONTENTS
  4 .ARM          00000000  080058bc  080058bc  0002008c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080058bc  080058bc  0002008c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080058bc  080058bc  000158bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080058c0  080058c0  000158c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000008c  20000000  080058c4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000b5c  2000008c  08005950  0002008c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000be8  08005950  00020be8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bd4a  00000000  00000000  000200b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001eb2  00000000  00000000  0002bdff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ac0  00000000  00000000  0002dcb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a10  00000000  00000000  0002e778  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016031  00000000  00000000  0002f188  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e2be  00000000  00000000  000451b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00083503  00000000  00000000  00053477  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d697a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000031cc  00000000  00000000  000d69cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000008c 	.word	0x2000008c
 8000128:	00000000 	.word	0x00000000
 800012c:	08004e68 	.word	0x08004e68

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000090 	.word	0x20000090
 8000148:	08004e68 	.word	0x08004e68

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <s800LSend>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void s800LSend(uint8_t *text, int nums) {
 800015c:	b580      	push	{r7, lr}
 800015e:	b082      	sub	sp, #8
 8000160:	af00      	add	r7, sp, #0
 8000162:	6078      	str	r0, [r7, #4]
 8000164:	6039      	str	r1, [r7, #0]
	HAL_UART_Transmit(&huart2, text, nums, 0xFFFF);
 8000166:	683b      	ldr	r3, [r7, #0]
 8000168:	b29a      	uxth	r2, r3
 800016a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800016e:	6879      	ldr	r1, [r7, #4]
 8000170:	480e      	ldr	r0, [pc, #56]	; (80001ac <s800LSend+0x50>)
 8000172:	f003 fa0f 	bl	8003594 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, (uint8_t*)"\r\n", 2, 0xFFFF);
 8000176:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800017a:	2202      	movs	r2, #2
 800017c:	490c      	ldr	r1, [pc, #48]	; (80001b0 <s800LSend+0x54>)
 800017e:	480b      	ldr	r0, [pc, #44]	; (80001ac <s800LSend+0x50>)
 8000180:	f003 fa08 	bl	8003594 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, text, nums, 0xFFFF);
 8000184:	683b      	ldr	r3, [r7, #0]
 8000186:	b29a      	uxth	r2, r3
 8000188:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800018c:	6879      	ldr	r1, [r7, #4]
 800018e:	4809      	ldr	r0, [pc, #36]	; (80001b4 <s800LSend+0x58>)
 8000190:	f003 fa00 	bl	8003594 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, (uint8_t*)"\r\n", 2, 0xFFFF);
 8000194:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000198:	2202      	movs	r2, #2
 800019a:	4905      	ldr	r1, [pc, #20]	; (80001b0 <s800LSend+0x54>)
 800019c:	4805      	ldr	r0, [pc, #20]	; (80001b4 <s800LSend+0x58>)
 800019e:	f003 f9f9 	bl	8003594 <HAL_UART_Transmit>
	return;
 80001a2:	bf00      	nop
}
 80001a4:	3708      	adds	r7, #8
 80001a6:	46bd      	mov	sp, r7
 80001a8:	bd80      	pop	{r7, pc}
 80001aa:	bf00      	nop
 80001ac:	20000148 	.word	0x20000148
 80001b0:	08004e80 	.word	0x08004e80
 80001b4:	20000100 	.word	0x20000100

080001b8 <s800lMessAdd>:

int s800lMessAdd(uint8_t* text) {
 80001b8:	b480      	push	{r7}
 80001ba:	b085      	sub	sp, #20
 80001bc:	af00      	add	r7, sp, #0
 80001be:	6078      	str	r0, [r7, #4]
	int i = 0;
 80001c0:	2300      	movs	r3, #0
 80001c2:	60fb      	str	r3, [r7, #12]
	for (i; i<250; i++) {
 80001c4:	e00a      	b.n	80001dc <s800lMessAdd+0x24>
		if (text[i]=='!') return i;
 80001c6:	68fb      	ldr	r3, [r7, #12]
 80001c8:	687a      	ldr	r2, [r7, #4]
 80001ca:	4413      	add	r3, r2
 80001cc:	781b      	ldrb	r3, [r3, #0]
 80001ce:	2b21      	cmp	r3, #33	; 0x21
 80001d0:	d101      	bne.n	80001d6 <s800lMessAdd+0x1e>
 80001d2:	68fb      	ldr	r3, [r7, #12]
 80001d4:	e005      	b.n	80001e2 <s800lMessAdd+0x2a>
	for (i; i<250; i++) {
 80001d6:	68fb      	ldr	r3, [r7, #12]
 80001d8:	3301      	adds	r3, #1
 80001da:	60fb      	str	r3, [r7, #12]
 80001dc:	68fb      	ldr	r3, [r7, #12]
 80001de:	2bf9      	cmp	r3, #249	; 0xf9
 80001e0:	ddf1      	ble.n	80001c6 <s800lMessAdd+0xe>
	}
}
 80001e2:	4618      	mov	r0, r3
 80001e4:	3714      	adds	r7, #20
 80001e6:	46bd      	mov	sp, r7
 80001e8:	bc80      	pop	{r7}
 80001ea:	4770      	bx	lr

080001ec <txATcommand>:

void txATcommand() {
 80001ec:	b580      	push	{r7, lr}
 80001ee:	b0ce      	sub	sp, #312	; 0x138
 80001f0:	af02      	add	r7, sp, #8
	//HAL_Delay(500);
	switch (step) {
 80001f2:	4b8a      	ldr	r3, [pc, #552]	; (800041c <txATcommand+0x230>)
 80001f4:	681b      	ldr	r3, [r3, #0]
 80001f6:	2b18      	cmp	r3, #24
 80001f8:	f200 810b 	bhi.w	8000412 <txATcommand+0x226>
 80001fc:	a201      	add	r2, pc, #4	; (adr r2, 8000204 <txATcommand+0x18>)
 80001fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000202:	bf00      	nop
 8000204:	08000269 	.word	0x08000269
 8000208:	08000279 	.word	0x08000279
 800020c:	08000289 	.word	0x08000289
 8000210:	08000299 	.word	0x08000299
 8000214:	080002a9 	.word	0x080002a9
 8000218:	080002c1 	.word	0x080002c1
 800021c:	080002d1 	.word	0x080002d1
 8000220:	080002e1 	.word	0x080002e1
 8000224:	08000333 	.word	0x08000333
 8000228:	08000343 	.word	0x08000343
 800022c:	08000353 	.word	0x08000353
 8000230:	08000363 	.word	0x08000363
 8000234:	08000413 	.word	0x08000413
 8000238:	08000413 	.word	0x08000413
 800023c:	08000413 	.word	0x08000413
 8000240:	08000413 	.word	0x08000413
 8000244:	08000413 	.word	0x08000413
 8000248:	08000413 	.word	0x08000413
 800024c:	08000413 	.word	0x08000413
 8000250:	08000413 	.word	0x08000413
 8000254:	08000373 	.word	0x08000373
 8000258:	08000383 	.word	0x08000383
 800025c:	080003c3 	.word	0x080003c3
 8000260:	080003d3 	.word	0x080003d3
 8000264:	080003e9 	.word	0x080003e9
		case 0: {
			ready=false;
 8000268:	4b6d      	ldr	r3, [pc, #436]	; (8000420 <txATcommand+0x234>)
 800026a:	2200      	movs	r2, #0
 800026c:	701a      	strb	r2, [r3, #0]
			s800LSend((uint8_t*)"ATE0", 4);
 800026e:	2104      	movs	r1, #4
 8000270:	486c      	ldr	r0, [pc, #432]	; (8000424 <txATcommand+0x238>)
 8000272:	f7ff ff73 	bl	800015c <s800LSend>
			break;
 8000276:	e0cb      	b.n	8000410 <txATcommand+0x224>
		}
		case 1: {
			ready=false;
 8000278:	4b69      	ldr	r3, [pc, #420]	; (8000420 <txATcommand+0x234>)
 800027a:	2200      	movs	r2, #0
 800027c:	701a      	strb	r2, [r3, #0]
			s800LSend((uint8_t*)"AT+CSQ", 6);
 800027e:	2106      	movs	r1, #6
 8000280:	4869      	ldr	r0, [pc, #420]	; (8000428 <txATcommand+0x23c>)
 8000282:	f7ff ff6b 	bl	800015c <s800LSend>
			break;
 8000286:	e0c3      	b.n	8000410 <txATcommand+0x224>
		}
		case 2: {
			ready=false;
 8000288:	4b65      	ldr	r3, [pc, #404]	; (8000420 <txATcommand+0x234>)
 800028a:	2200      	movs	r2, #0
 800028c:	701a      	strb	r2, [r3, #0]
			s800LSend((uint8_t*)"AT+CBC", 6);
 800028e:	2106      	movs	r1, #6
 8000290:	4866      	ldr	r0, [pc, #408]	; (800042c <txATcommand+0x240>)
 8000292:	f7ff ff63 	bl	800015c <s800LSend>
			break;
 8000296:	e0bb      	b.n	8000410 <txATcommand+0x224>
		}
		case 3: {
			ready=false;
 8000298:	4b61      	ldr	r3, [pc, #388]	; (8000420 <txATcommand+0x234>)
 800029a:	2200      	movs	r2, #0
 800029c:	701a      	strb	r2, [r3, #0]
			s800LSend((uint8_t*)"AT+CREG?", 8);
 800029e:	2108      	movs	r1, #8
 80002a0:	4863      	ldr	r0, [pc, #396]	; (8000430 <txATcommand+0x244>)
 80002a2:	f7ff ff5b 	bl	800015c <s800LSend>
			break;
 80002a6:	e0b3      	b.n	8000410 <txATcommand+0x224>
		}
		case 4: {
			ready=false;
 80002a8:	4b5d      	ldr	r3, [pc, #372]	; (8000420 <txATcommand+0x234>)
 80002aa:	2200      	movs	r2, #0
 80002ac:	701a      	strb	r2, [r3, #0]
			s800LSend((uint8_t*)"AT+SAPBR=1,1", 12);
 80002ae:	210c      	movs	r1, #12
 80002b0:	4860      	ldr	r0, [pc, #384]	; (8000434 <txATcommand+0x248>)
 80002b2:	f7ff ff53 	bl	800015c <s800LSend>
			HAL_Delay(2000);
 80002b6:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80002ba:	f001 fe5f 	bl	8001f7c <HAL_Delay>
			break;
 80002be:	e0a7      	b.n	8000410 <txATcommand+0x224>
		}
		case 5: {
			ready=false;
 80002c0:	4b57      	ldr	r3, [pc, #348]	; (8000420 <txATcommand+0x234>)
 80002c2:	2200      	movs	r2, #0
 80002c4:	701a      	strb	r2, [r3, #0]
			s800LSend((uint8_t*)"AT+HTTPINIT", 11);
 80002c6:	210b      	movs	r1, #11
 80002c8:	485b      	ldr	r0, [pc, #364]	; (8000438 <txATcommand+0x24c>)
 80002ca:	f7ff ff47 	bl	800015c <s800LSend>
			break;
 80002ce:	e09f      	b.n	8000410 <txATcommand+0x224>
		}
		case 6: {
			ready=false;
 80002d0:	4b53      	ldr	r3, [pc, #332]	; (8000420 <txATcommand+0x234>)
 80002d2:	2200      	movs	r2, #0
 80002d4:	701a      	strb	r2, [r3, #0]
			s800LSend((uint8_t*)"AT+HTTPPARA=\"CID\",1",19);
 80002d6:	2113      	movs	r1, #19
 80002d8:	4858      	ldr	r0, [pc, #352]	; (800043c <txATcommand+0x250>)
 80002da:	f7ff ff3f 	bl	800015c <s800LSend>
			break;
 80002de:	e097      	b.n	8000410 <txATcommand+0x224>
		}
		case 7: {
			ready=false;
 80002e0:	4b4f      	ldr	r3, [pc, #316]	; (8000420 <txATcommand+0x234>)
 80002e2:	2200      	movs	r2, #0
 80002e4:	701a      	strb	r2, [r3, #0]
			bat[7]=0;
 80002e6:	4b56      	ldr	r3, [pc, #344]	; (8000440 <txATcommand+0x254>)
 80002e8:	2200      	movs	r2, #0
 80002ea:	71da      	strb	r2, [r3, #7]
			//uint8_t end[] = "\"";
			//uint8_t mess[] = "AT+HTTPPARA=\"URL\",\"http://simple.spamigor.ru/api/gst?csq=19&bat=99&mes=";//"AT+HTTPPARA=\"URL\",\"http://simple.spamigor.ru/api/test?a=send%20from%20stm32mod&sms=";
			uint8_t ext[250];
			if (answ) snprintf(ext, 250, "AT+HTTPPARA=\"URL\",\"http://simple.spamigor.ru/api/gst?csq=%s&bat=%s&mes=.%s.\"", csqlvl, bat, smsText);
 80002ec:	4b55      	ldr	r3, [pc, #340]	; (8000444 <txATcommand+0x258>)
 80002ee:	781b      	ldrb	r3, [r3, #0]
 80002f0:	2b00      	cmp	r3, #0
 80002f2:	d00a      	beq.n	800030a <txATcommand+0x11e>
 80002f4:	1d38      	adds	r0, r7, #4
 80002f6:	4b54      	ldr	r3, [pc, #336]	; (8000448 <txATcommand+0x25c>)
 80002f8:	9301      	str	r3, [sp, #4]
 80002fa:	4b51      	ldr	r3, [pc, #324]	; (8000440 <txATcommand+0x254>)
 80002fc:	9300      	str	r3, [sp, #0]
 80002fe:	4b53      	ldr	r3, [pc, #332]	; (800044c <txATcommand+0x260>)
 8000300:	4a53      	ldr	r2, [pc, #332]	; (8000450 <txATcommand+0x264>)
 8000302:	21fa      	movs	r1, #250	; 0xfa
 8000304:	f004 f9d2 	bl	80046ac <sniprintf>
 8000308:	e007      	b.n	800031a <txATcommand+0x12e>
			else snprintf(ext, 250, "AT+HTTPPARA=\"URL\",\"http://simple.spamigor.ru/api/gst?csq=%s&bat=%s\"", csqlvl, bat);
 800030a:	1d38      	adds	r0, r7, #4
 800030c:	4b4c      	ldr	r3, [pc, #304]	; (8000440 <txATcommand+0x254>)
 800030e:	9300      	str	r3, [sp, #0]
 8000310:	4b4e      	ldr	r3, [pc, #312]	; (800044c <txATcommand+0x260>)
 8000312:	4a50      	ldr	r2, [pc, #320]	; (8000454 <txATcommand+0x268>)
 8000314:	21fa      	movs	r1, #250	; 0xfa
 8000316:	f004 f9c9 	bl	80046ac <sniprintf>
			s800LSend(ext, strlen(ext));
 800031a:	1d3b      	adds	r3, r7, #4
 800031c:	4618      	mov	r0, r3
 800031e:	f7ff ff15 	bl	800014c <strlen>
 8000322:	4603      	mov	r3, r0
 8000324:	461a      	mov	r2, r3
 8000326:	1d3b      	adds	r3, r7, #4
 8000328:	4611      	mov	r1, r2
 800032a:	4618      	mov	r0, r3
 800032c:	f7ff ff16 	bl	800015c <s800LSend>
			break;
 8000330:	e06e      	b.n	8000410 <txATcommand+0x224>
		}
		case 8: {
			ready=false;
 8000332:	4b3b      	ldr	r3, [pc, #236]	; (8000420 <txATcommand+0x234>)
 8000334:	2200      	movs	r2, #0
 8000336:	701a      	strb	r2, [r3, #0]
			s800LSend((uint8_t*)"AT+HTTPACTION=0",15);
 8000338:	210f      	movs	r1, #15
 800033a:	4847      	ldr	r0, [pc, #284]	; (8000458 <txATcommand+0x26c>)
 800033c:	f7ff ff0e 	bl	800015c <s800LSend>
			break;
 8000340:	e066      	b.n	8000410 <txATcommand+0x224>
		}
		case 9: {
			ready=false;
 8000342:	4b37      	ldr	r3, [pc, #220]	; (8000420 <txATcommand+0x234>)
 8000344:	2200      	movs	r2, #0
 8000346:	701a      	strb	r2, [r3, #0]
			s800LSend((uint8_t*)"AT+HTTPREAD",11);
 8000348:	210b      	movs	r1, #11
 800034a:	4844      	ldr	r0, [pc, #272]	; (800045c <txATcommand+0x270>)
 800034c:	f7ff ff06 	bl	800015c <s800LSend>
			break;
 8000350:	e05e      	b.n	8000410 <txATcommand+0x224>
		}
		case 10: {
			ready=false;
 8000352:	4b33      	ldr	r3, [pc, #204]	; (8000420 <txATcommand+0x234>)
 8000354:	2200      	movs	r2, #0
 8000356:	701a      	strb	r2, [r3, #0]
			s800LSend((uint8_t*)"AT+HTTPTERM",11);
 8000358:	210b      	movs	r1, #11
 800035a:	4841      	ldr	r0, [pc, #260]	; (8000460 <txATcommand+0x274>)
 800035c:	f7ff fefe 	bl	800015c <s800LSend>
			break;
 8000360:	e056      	b.n	8000410 <txATcommand+0x224>
		}
		case 11: {
			ready=false;
 8000362:	4b2f      	ldr	r3, [pc, #188]	; (8000420 <txATcommand+0x234>)
 8000364:	2200      	movs	r2, #0
 8000366:	701a      	strb	r2, [r3, #0]
			s800LSend((uint8_t*)"AT+SAPBR=0,1", 12);
 8000368:	210c      	movs	r1, #12
 800036a:	483e      	ldr	r0, [pc, #248]	; (8000464 <txATcommand+0x278>)
 800036c:	f7ff fef6 	bl	800015c <s800LSend>
			break;
 8000370:	e04e      	b.n	8000410 <txATcommand+0x224>
		}
		case 20: {
			ready = false;
 8000372:	4b2b      	ldr	r3, [pc, #172]	; (8000420 <txATcommand+0x234>)
 8000374:	2200      	movs	r2, #0
 8000376:	701a      	strb	r2, [r3, #0]
			s800LSend((uint8_t*)"AT+CMGF=1", 9);
 8000378:	2109      	movs	r1, #9
 800037a:	483b      	ldr	r0, [pc, #236]	; (8000468 <txATcommand+0x27c>)
 800037c:	f7ff feee 	bl	800015c <s800LSend>
			break;
 8000380:	e046      	b.n	8000410 <txATcommand+0x224>
		}
		case 21: {
			ready=false;
 8000382:	4b27      	ldr	r3, [pc, #156]	; (8000420 <txATcommand+0x234>)
 8000384:	2200      	movs	r2, #0
 8000386:	701a      	strb	r2, [r3, #0]
			uint8_t ext[15];
			uint8_t at[] = "AT+CMGR=";
 8000388:	4a38      	ldr	r2, [pc, #224]	; (800046c <txATcommand+0x280>)
 800038a:	f507 738a 	add.w	r3, r7, #276	; 0x114
 800038e:	ca07      	ldmia	r2, {r0, r1, r2}
 8000390:	c303      	stmia	r3!, {r0, r1}
 8000392:	701a      	strb	r2, [r3, #0]
			snprintf(ext, 15, "%s%s", at, smsNum);
 8000394:	f507 738a 	add.w	r3, r7, #276	; 0x114
 8000398:	f507 7090 	add.w	r0, r7, #288	; 0x120
 800039c:	4a34      	ldr	r2, [pc, #208]	; (8000470 <txATcommand+0x284>)
 800039e:	9200      	str	r2, [sp, #0]
 80003a0:	4a34      	ldr	r2, [pc, #208]	; (8000474 <txATcommand+0x288>)
 80003a2:	210f      	movs	r1, #15
 80003a4:	f004 f982 	bl	80046ac <sniprintf>
			s800LSend(ext, s800lMessAdd(ext));
 80003a8:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80003ac:	4618      	mov	r0, r3
 80003ae:	f7ff ff03 	bl	80001b8 <s800lMessAdd>
 80003b2:	4602      	mov	r2, r0
 80003b4:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80003b8:	4611      	mov	r1, r2
 80003ba:	4618      	mov	r0, r3
 80003bc:	f7ff fece 	bl	800015c <s800LSend>
			break;
 80003c0:	e026      	b.n	8000410 <txATcommand+0x224>
		}
		case 22: {
			ready = false;
 80003c2:	4b17      	ldr	r3, [pc, #92]	; (8000420 <txATcommand+0x234>)
 80003c4:	2200      	movs	r2, #0
 80003c6:	701a      	strb	r2, [r3, #0]
			s800LSend((uint8_t*)"AT+CMGDA=\"DEL ALL\"", 18);
 80003c8:	2112      	movs	r1, #18
 80003ca:	482b      	ldr	r0, [pc, #172]	; (8000478 <txATcommand+0x28c>)
 80003cc:	f7ff fec6 	bl	800015c <s800LSend>
			break;
 80003d0:	e01e      	b.n	8000410 <txATcommand+0x224>
		}
		case 23: {
			step=24;
 80003d2:	4b12      	ldr	r3, [pc, #72]	; (800041c <txATcommand+0x230>)
 80003d4:	2218      	movs	r2, #24
 80003d6:	601a      	str	r2, [r3, #0]
			ready = true;
 80003d8:	4b11      	ldr	r3, [pc, #68]	; (8000420 <txATcommand+0x234>)
 80003da:	2201      	movs	r2, #1
 80003dc:	701a      	strb	r2, [r3, #0]
			s800LSend((uint8_t*)"AT+CMGS=\"+79999811066\"", 22);
 80003de:	2116      	movs	r1, #22
 80003e0:	4826      	ldr	r0, [pc, #152]	; (800047c <txATcommand+0x290>)
 80003e2:	f7ff febb 	bl	800015c <s800LSend>
			break;
 80003e6:	e013      	b.n	8000410 <txATcommand+0x224>
		}
		case 24: {
			ready = false;
 80003e8:	4b0d      	ldr	r3, [pc, #52]	; (8000420 <txATcommand+0x234>)
 80003ea:	2200      	movs	r2, #0
 80003ec:	701a      	strb	r2, [r3, #0]
			step=24;
 80003ee:	4b0b      	ldr	r3, [pc, #44]	; (800041c <txATcommand+0x230>)
 80003f0:	2218      	movs	r2, #24
 80003f2:	601a      	str	r2, [r3, #0]
			uint8_t ggg[20];
			sprintf(ggg, "%s%c", (uint8_t*)"stm32 is working", (uint8_t)0x1A);
 80003f4:	f507 7080 	add.w	r0, r7, #256	; 0x100
 80003f8:	231a      	movs	r3, #26
 80003fa:	4a21      	ldr	r2, [pc, #132]	; (8000480 <txATcommand+0x294>)
 80003fc:	4921      	ldr	r1, [pc, #132]	; (8000484 <txATcommand+0x298>)
 80003fe:	f004 f989 	bl	8004714 <siprintf>
			s800LSend(ggg, 17);
 8000402:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8000406:	2111      	movs	r1, #17
 8000408:	4618      	mov	r0, r3
 800040a:	f7ff fea7 	bl	800015c <s800LSend>
			break;
 800040e:	bf00      	nop
		}
	}
	return;
 8000410:	bf00      	nop
 8000412:	bf00      	nop
}
 8000414:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8000418:	46bd      	mov	sp, r7
 800041a:	bd80      	pop	{r7, pc}
 800041c:	200007ac 	.word	0x200007ac
 8000420:	200007b4 	.word	0x200007b4
 8000424:	08004e84 	.word	0x08004e84
 8000428:	08004e8c 	.word	0x08004e8c
 800042c:	08004e94 	.word	0x08004e94
 8000430:	08004e9c 	.word	0x08004e9c
 8000434:	08004ea8 	.word	0x08004ea8
 8000438:	08004eb8 	.word	0x08004eb8
 800043c:	08004ec4 	.word	0x08004ec4
 8000440:	200007bc 	.word	0x200007bc
 8000444:	200007b8 	.word	0x200007b8
 8000448:	20000010 	.word	0x20000010
 800044c:	20000018 	.word	0x20000018
 8000450:	08004ed8 	.word	0x08004ed8
 8000454:	08004f28 	.word	0x08004f28
 8000458:	08004f6c 	.word	0x08004f6c
 800045c:	08004f7c 	.word	0x08004f7c
 8000460:	08004f88 	.word	0x08004f88
 8000464:	08004f94 	.word	0x08004f94
 8000468:	08004fa4 	.word	0x08004fa4
 800046c:	08005000 	.word	0x08005000
 8000470:	20000794 	.word	0x20000794
 8000474:	08004fb0 	.word	0x08004fb0
 8000478:	08004fb8 	.word	0x08004fb8
 800047c:	08004fcc 	.word	0x08004fcc
 8000480:	08004fe4 	.word	0x08004fe4
 8000484:	08004ff8 	.word	0x08004ff8

08000488 <rxATcommand>:

void rxATcommand(uint8_t* text) {
 8000488:	b580      	push	{r7, lr}
 800048a:	b086      	sub	sp, #24
 800048c:	af00      	add	r7, sp, #0
 800048e:	6078      	str	r0, [r7, #4]
	switch (step) {
 8000490:	4ba2      	ldr	r3, [pc, #648]	; (800071c <rxATcommand+0x294>)
 8000492:	681b      	ldr	r3, [r3, #0]
 8000494:	2b18      	cmp	r3, #24
 8000496:	f200 8328 	bhi.w	8000aea <rxATcommand+0x662>
 800049a:	a201      	add	r2, pc, #4	; (adr r2, 80004a0 <rxATcommand+0x18>)
 800049c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80004a0:	08000505 	.word	0x08000505
 80004a4:	0800054f 	.word	0x0800054f
 80004a8:	0800057f 	.word	0x0800057f
 80004ac:	080005df 	.word	0x080005df
 80004b0:	08000607 	.word	0x08000607
 80004b4:	0800063d 	.word	0x0800063d
 80004b8:	08000673 	.word	0x08000673
 80004bc:	080006a1 	.word	0x080006a1
 80004c0:	080006cf 	.word	0x080006cf
 80004c4:	08000755 	.word	0x08000755
 80004c8:	08000911 	.word	0x08000911
 80004cc:	0800091f 	.word	0x0800091f
 80004d0:	08000949 	.word	0x08000949
 80004d4:	08000aeb 	.word	0x08000aeb
 80004d8:	08000aeb 	.word	0x08000aeb
 80004dc:	08000aeb 	.word	0x08000aeb
 80004e0:	08000aeb 	.word	0x08000aeb
 80004e4:	08000aeb 	.word	0x08000aeb
 80004e8:	08000aeb 	.word	0x08000aeb
 80004ec:	08000aeb 	.word	0x08000aeb
 80004f0:	080009ed 	.word	0x080009ed
 80004f4:	08000a5b 	.word	0x08000a5b
 80004f8:	08000a7f 	.word	0x08000a7f
 80004fc:	08000a91 	.word	0x08000a91
 8000500:	08000aa3 	.word	0x08000aa3
		case 0: {
			if (strstr((char*)text, (char*)"OK")) {
 8000504:	4986      	ldr	r1, [pc, #536]	; (8000720 <rxATcommand+0x298>)
 8000506:	6878      	ldr	r0, [r7, #4]
 8000508:	f004 f939 	bl	800477e <strstr>
 800050c:	4603      	mov	r3, r0
 800050e:	2b00      	cmp	r3, #0
 8000510:	d008      	beq.n	8000524 <rxATcommand+0x9c>
				step++;
 8000512:	4b82      	ldr	r3, [pc, #520]	; (800071c <rxATcommand+0x294>)
 8000514:	681b      	ldr	r3, [r3, #0]
 8000516:	3301      	adds	r3, #1
 8000518:	4a80      	ldr	r2, [pc, #512]	; (800071c <rxATcommand+0x294>)
 800051a:	6013      	str	r3, [r2, #0]
				ready=true;
 800051c:	4b81      	ldr	r3, [pc, #516]	; (8000724 <rxATcommand+0x29c>)
 800051e:	2201      	movs	r2, #1
 8000520:	701a      	strb	r2, [r3, #0]
			}
			else {
				step=0;
				ready=true;
			}
			break;
 8000522:	e2e2      	b.n	8000aea <rxATcommand+0x662>
			else if (strstr((char*)text, (char*)"CMTI")) {
 8000524:	4980      	ldr	r1, [pc, #512]	; (8000728 <rxATcommand+0x2a0>)
 8000526:	6878      	ldr	r0, [r7, #4]
 8000528:	f004 f929 	bl	800477e <strstr>
 800052c:	4603      	mov	r3, r0
 800052e:	2b00      	cmp	r3, #0
 8000530:	d006      	beq.n	8000540 <rxATcommand+0xb8>
				step=20;
 8000532:	4b7a      	ldr	r3, [pc, #488]	; (800071c <rxATcommand+0x294>)
 8000534:	2214      	movs	r2, #20
 8000536:	601a      	str	r2, [r3, #0]
				ready=true;
 8000538:	4b7a      	ldr	r3, [pc, #488]	; (8000724 <rxATcommand+0x29c>)
 800053a:	2201      	movs	r2, #1
 800053c:	701a      	strb	r2, [r3, #0]
			break;
 800053e:	e2d4      	b.n	8000aea <rxATcommand+0x662>
				step=0;
 8000540:	4b76      	ldr	r3, [pc, #472]	; (800071c <rxATcommand+0x294>)
 8000542:	2200      	movs	r2, #0
 8000544:	601a      	str	r2, [r3, #0]
				ready=true;
 8000546:	4b77      	ldr	r3, [pc, #476]	; (8000724 <rxATcommand+0x29c>)
 8000548:	2201      	movs	r2, #1
 800054a:	701a      	strb	r2, [r3, #0]
			break;
 800054c:	e2cd      	b.n	8000aea <rxATcommand+0x662>
		}
		case 1: {
			if (strstr((char*)oldModem3, (char*)"CSQ")) {
 800054e:	4977      	ldr	r1, [pc, #476]	; (800072c <rxATcommand+0x2a4>)
 8000550:	4877      	ldr	r0, [pc, #476]	; (8000730 <rxATcommand+0x2a8>)
 8000552:	f004 f914 	bl	800477e <strstr>
 8000556:	4603      	mov	r3, r0
 8000558:	2b00      	cmp	r3, #0
 800055a:	d00c      	beq.n	8000576 <rxATcommand+0xee>
				csqlvl[0]=oldModem3[6];
 800055c:	4b74      	ldr	r3, [pc, #464]	; (8000730 <rxATcommand+0x2a8>)
 800055e:	799a      	ldrb	r2, [r3, #6]
 8000560:	4b74      	ldr	r3, [pc, #464]	; (8000734 <rxATcommand+0x2ac>)
 8000562:	701a      	strb	r2, [r3, #0]
				csqlvl[1]=oldModem3[7];
 8000564:	4b72      	ldr	r3, [pc, #456]	; (8000730 <rxATcommand+0x2a8>)
 8000566:	79da      	ldrb	r2, [r3, #7]
 8000568:	4b72      	ldr	r3, [pc, #456]	; (8000734 <rxATcommand+0x2ac>)
 800056a:	705a      	strb	r2, [r3, #1]
				step++;
 800056c:	4b6b      	ldr	r3, [pc, #428]	; (800071c <rxATcommand+0x294>)
 800056e:	681b      	ldr	r3, [r3, #0]
 8000570:	3301      	adds	r3, #1
 8000572:	4a6a      	ldr	r2, [pc, #424]	; (800071c <rxATcommand+0x294>)
 8000574:	6013      	str	r3, [r2, #0]
			}
			ready=true;
 8000576:	4b6b      	ldr	r3, [pc, #428]	; (8000724 <rxATcommand+0x29c>)
 8000578:	2201      	movs	r2, #1
 800057a:	701a      	strb	r2, [r3, #0]
			break;
 800057c:	e2b5      	b.n	8000aea <rxATcommand+0x662>
		}
		case 2: {
			if (strstr((char*)oldModem3, (char*)"CBC")) {
 800057e:	496e      	ldr	r1, [pc, #440]	; (8000738 <rxATcommand+0x2b0>)
 8000580:	486b      	ldr	r0, [pc, #428]	; (8000730 <rxATcommand+0x2a8>)
 8000582:	f004 f8fc 	bl	800477e <strstr>
 8000586:	4603      	mov	r3, r0
 8000588:	2b00      	cmp	r3, #0
 800058a:	d024      	beq.n	80005d6 <rxATcommand+0x14e>
				bat[0]=oldModem3[8];
 800058c:	4b68      	ldr	r3, [pc, #416]	; (8000730 <rxATcommand+0x2a8>)
 800058e:	7a1a      	ldrb	r2, [r3, #8]
 8000590:	4b6a      	ldr	r3, [pc, #424]	; (800073c <rxATcommand+0x2b4>)
 8000592:	701a      	strb	r2, [r3, #0]
				bat[1]=oldModem3[9];
 8000594:	4b66      	ldr	r3, [pc, #408]	; (8000730 <rxATcommand+0x2a8>)
 8000596:	7a5a      	ldrb	r2, [r3, #9]
 8000598:	4b68      	ldr	r3, [pc, #416]	; (800073c <rxATcommand+0x2b4>)
 800059a:	705a      	strb	r2, [r3, #1]
				bat[2]=oldModem3[10];
 800059c:	4b64      	ldr	r3, [pc, #400]	; (8000730 <rxATcommand+0x2a8>)
 800059e:	7a9a      	ldrb	r2, [r3, #10]
 80005a0:	4b66      	ldr	r3, [pc, #408]	; (800073c <rxATcommand+0x2b4>)
 80005a2:	709a      	strb	r2, [r3, #2]
				bat[3]=oldModem3[11];
 80005a4:	4b62      	ldr	r3, [pc, #392]	; (8000730 <rxATcommand+0x2a8>)
 80005a6:	7ada      	ldrb	r2, [r3, #11]
 80005a8:	4b64      	ldr	r3, [pc, #400]	; (800073c <rxATcommand+0x2b4>)
 80005aa:	70da      	strb	r2, [r3, #3]
				bat[4]=oldModem3[12];
 80005ac:	4b60      	ldr	r3, [pc, #384]	; (8000730 <rxATcommand+0x2a8>)
 80005ae:	7b1a      	ldrb	r2, [r3, #12]
 80005b0:	4b62      	ldr	r3, [pc, #392]	; (800073c <rxATcommand+0x2b4>)
 80005b2:	711a      	strb	r2, [r3, #4]
				bat[5]=oldModem3[13];
 80005b4:	4b5e      	ldr	r3, [pc, #376]	; (8000730 <rxATcommand+0x2a8>)
 80005b6:	7b5a      	ldrb	r2, [r3, #13]
 80005b8:	4b60      	ldr	r3, [pc, #384]	; (800073c <rxATcommand+0x2b4>)
 80005ba:	715a      	strb	r2, [r3, #5]
				bat[6]=oldModem3[14];
 80005bc:	4b5c      	ldr	r3, [pc, #368]	; (8000730 <rxATcommand+0x2a8>)
 80005be:	7b9a      	ldrb	r2, [r3, #14]
 80005c0:	4b5e      	ldr	r3, [pc, #376]	; (800073c <rxATcommand+0x2b4>)
 80005c2:	719a      	strb	r2, [r3, #6]
				bat[7]=oldModem3[15];
 80005c4:	4b5a      	ldr	r3, [pc, #360]	; (8000730 <rxATcommand+0x2a8>)
 80005c6:	7bda      	ldrb	r2, [r3, #15]
 80005c8:	4b5c      	ldr	r3, [pc, #368]	; (800073c <rxATcommand+0x2b4>)
 80005ca:	71da      	strb	r2, [r3, #7]
				step++;
 80005cc:	4b53      	ldr	r3, [pc, #332]	; (800071c <rxATcommand+0x294>)
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	3301      	adds	r3, #1
 80005d2:	4a52      	ldr	r2, [pc, #328]	; (800071c <rxATcommand+0x294>)
 80005d4:	6013      	str	r3, [r2, #0]
			}
			ready=true;
 80005d6:	4b53      	ldr	r3, [pc, #332]	; (8000724 <rxATcommand+0x29c>)
 80005d8:	2201      	movs	r2, #1
 80005da:	701a      	strb	r2, [r3, #0]
			break;
 80005dc:	e285      	b.n	8000aea <rxATcommand+0x662>
		}
		case 3: {
			if (strstr((char*)oldModem3, (char*)"0,1")) {
 80005de:	4958      	ldr	r1, [pc, #352]	; (8000740 <rxATcommand+0x2b8>)
 80005e0:	4853      	ldr	r0, [pc, #332]	; (8000730 <rxATcommand+0x2a8>)
 80005e2:	f004 f8cc 	bl	800477e <strstr>
 80005e6:	4603      	mov	r3, r0
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	d008      	beq.n	80005fe <rxATcommand+0x176>
				step++;
 80005ec:	4b4b      	ldr	r3, [pc, #300]	; (800071c <rxATcommand+0x294>)
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	3301      	adds	r3, #1
 80005f2:	4a4a      	ldr	r2, [pc, #296]	; (800071c <rxATcommand+0x294>)
 80005f4:	6013      	str	r3, [r2, #0]
				ready=true;
 80005f6:	4b4b      	ldr	r3, [pc, #300]	; (8000724 <rxATcommand+0x29c>)
 80005f8:	2201      	movs	r2, #1
 80005fa:	701a      	strb	r2, [r3, #0]
				break;
 80005fc:	e275      	b.n	8000aea <rxATcommand+0x662>
			}
			else {
				ready=false;
 80005fe:	4b49      	ldr	r3, [pc, #292]	; (8000724 <rxATcommand+0x29c>)
 8000600:	2200      	movs	r2, #0
 8000602:	701a      	strb	r2, [r3, #0]
			}
			break;
 8000604:	e271      	b.n	8000aea <rxATcommand+0x662>
		}
		case 4: {
			if (strstr((char*)text, (char*)"OK")) {
 8000606:	4946      	ldr	r1, [pc, #280]	; (8000720 <rxATcommand+0x298>)
 8000608:	6878      	ldr	r0, [r7, #4]
 800060a:	f004 f8b8 	bl	800477e <strstr>
 800060e:	4603      	mov	r3, r0
 8000610:	2b00      	cmp	r3, #0
 8000612:	d005      	beq.n	8000620 <rxATcommand+0x198>
				step++;
 8000614:	4b41      	ldr	r3, [pc, #260]	; (800071c <rxATcommand+0x294>)
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	3301      	adds	r3, #1
 800061a:	4a40      	ldr	r2, [pc, #256]	; (800071c <rxATcommand+0x294>)
 800061c:	6013      	str	r3, [r2, #0]
 800061e:	e009      	b.n	8000634 <rxATcommand+0x1ac>
			}
			else if (strstr((char*)text, (char*)"ERROR")){
 8000620:	4948      	ldr	r1, [pc, #288]	; (8000744 <rxATcommand+0x2bc>)
 8000622:	6878      	ldr	r0, [r7, #4]
 8000624:	f004 f8ab 	bl	800477e <strstr>
 8000628:	4603      	mov	r3, r0
 800062a:	2b00      	cmp	r3, #0
 800062c:	d002      	beq.n	8000634 <rxATcommand+0x1ac>
				step=10;
 800062e:	4b3b      	ldr	r3, [pc, #236]	; (800071c <rxATcommand+0x294>)
 8000630:	220a      	movs	r2, #10
 8000632:	601a      	str	r2, [r3, #0]
			}
			ready=true;
 8000634:	4b3b      	ldr	r3, [pc, #236]	; (8000724 <rxATcommand+0x29c>)
 8000636:	2201      	movs	r2, #1
 8000638:	701a      	strb	r2, [r3, #0]
			break;
 800063a:	e256      	b.n	8000aea <rxATcommand+0x662>
		}
		case 5: {
			if (strstr((char*)text, (char*)"OK")) {
 800063c:	4938      	ldr	r1, [pc, #224]	; (8000720 <rxATcommand+0x298>)
 800063e:	6878      	ldr	r0, [r7, #4]
 8000640:	f004 f89d 	bl	800477e <strstr>
 8000644:	4603      	mov	r3, r0
 8000646:	2b00      	cmp	r3, #0
 8000648:	d005      	beq.n	8000656 <rxATcommand+0x1ce>
				step++;
 800064a:	4b34      	ldr	r3, [pc, #208]	; (800071c <rxATcommand+0x294>)
 800064c:	681b      	ldr	r3, [r3, #0]
 800064e:	3301      	adds	r3, #1
 8000650:	4a32      	ldr	r2, [pc, #200]	; (800071c <rxATcommand+0x294>)
 8000652:	6013      	str	r3, [r2, #0]
 8000654:	e009      	b.n	800066a <rxATcommand+0x1e2>
			}
			else if (strstr((char*)text, (char*)"ERROR")){
 8000656:	493b      	ldr	r1, [pc, #236]	; (8000744 <rxATcommand+0x2bc>)
 8000658:	6878      	ldr	r0, [r7, #4]
 800065a:	f004 f890 	bl	800477e <strstr>
 800065e:	4603      	mov	r3, r0
 8000660:	2b00      	cmp	r3, #0
 8000662:	d002      	beq.n	800066a <rxATcommand+0x1e2>
				step=10;
 8000664:	4b2d      	ldr	r3, [pc, #180]	; (800071c <rxATcommand+0x294>)
 8000666:	220a      	movs	r2, #10
 8000668:	601a      	str	r2, [r3, #0]
			}
			ready=true;
 800066a:	4b2e      	ldr	r3, [pc, #184]	; (8000724 <rxATcommand+0x29c>)
 800066c:	2201      	movs	r2, #1
 800066e:	701a      	strb	r2, [r3, #0]
			break;
 8000670:	e23b      	b.n	8000aea <rxATcommand+0x662>
		}
		case 6: {
			if (strstr((char*)text, (char*)"OK")) {
 8000672:	492b      	ldr	r1, [pc, #172]	; (8000720 <rxATcommand+0x298>)
 8000674:	6878      	ldr	r0, [r7, #4]
 8000676:	f004 f882 	bl	800477e <strstr>
 800067a:	4603      	mov	r3, r0
 800067c:	2b00      	cmp	r3, #0
 800067e:	d008      	beq.n	8000692 <rxATcommand+0x20a>
				step++;
 8000680:	4b26      	ldr	r3, [pc, #152]	; (800071c <rxATcommand+0x294>)
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	3301      	adds	r3, #1
 8000686:	4a25      	ldr	r2, [pc, #148]	; (800071c <rxATcommand+0x294>)
 8000688:	6013      	str	r3, [r2, #0]
				ready=true;
 800068a:	4b26      	ldr	r3, [pc, #152]	; (8000724 <rxATcommand+0x29c>)
 800068c:	2201      	movs	r2, #1
 800068e:	701a      	strb	r2, [r3, #0]
			}
			else {
				step=10;
				ready=true;
			}
			break;
 8000690:	e22b      	b.n	8000aea <rxATcommand+0x662>
				step=10;
 8000692:	4b22      	ldr	r3, [pc, #136]	; (800071c <rxATcommand+0x294>)
 8000694:	220a      	movs	r2, #10
 8000696:	601a      	str	r2, [r3, #0]
				ready=true;
 8000698:	4b22      	ldr	r3, [pc, #136]	; (8000724 <rxATcommand+0x29c>)
 800069a:	2201      	movs	r2, #1
 800069c:	701a      	strb	r2, [r3, #0]
			break;
 800069e:	e224      	b.n	8000aea <rxATcommand+0x662>
		}
		case 7: {
			if (strstr((char*)text, (char*)"OK")) {
 80006a0:	491f      	ldr	r1, [pc, #124]	; (8000720 <rxATcommand+0x298>)
 80006a2:	6878      	ldr	r0, [r7, #4]
 80006a4:	f004 f86b 	bl	800477e <strstr>
 80006a8:	4603      	mov	r3, r0
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d008      	beq.n	80006c0 <rxATcommand+0x238>
				step++;
 80006ae:	4b1b      	ldr	r3, [pc, #108]	; (800071c <rxATcommand+0x294>)
 80006b0:	681b      	ldr	r3, [r3, #0]
 80006b2:	3301      	adds	r3, #1
 80006b4:	4a19      	ldr	r2, [pc, #100]	; (800071c <rxATcommand+0x294>)
 80006b6:	6013      	str	r3, [r2, #0]
				ready=true;
 80006b8:	4b1a      	ldr	r3, [pc, #104]	; (8000724 <rxATcommand+0x29c>)
 80006ba:	2201      	movs	r2, #1
 80006bc:	701a      	strb	r2, [r3, #0]
			}
			else {
				step=10;
				ready=true;
			}
			break;
 80006be:	e214      	b.n	8000aea <rxATcommand+0x662>
				step=10;
 80006c0:	4b16      	ldr	r3, [pc, #88]	; (800071c <rxATcommand+0x294>)
 80006c2:	220a      	movs	r2, #10
 80006c4:	601a      	str	r2, [r3, #0]
				ready=true;
 80006c6:	4b17      	ldr	r3, [pc, #92]	; (8000724 <rxATcommand+0x29c>)
 80006c8:	2201      	movs	r2, #1
 80006ca:	701a      	strb	r2, [r3, #0]
			break;
 80006cc:	e20d      	b.n	8000aea <rxATcommand+0x662>
		}
		case 8: {
			if (strstr((char*)text, (char*)"200")) {
 80006ce:	491e      	ldr	r1, [pc, #120]	; (8000748 <rxATcommand+0x2c0>)
 80006d0:	6878      	ldr	r0, [r7, #4]
 80006d2:	f004 f854 	bl	800477e <strstr>
 80006d6:	4603      	mov	r3, r0
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d008      	beq.n	80006ee <rxATcommand+0x266>
				step++;
 80006dc:	4b0f      	ldr	r3, [pc, #60]	; (800071c <rxATcommand+0x294>)
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	3301      	adds	r3, #1
 80006e2:	4a0e      	ldr	r2, [pc, #56]	; (800071c <rxATcommand+0x294>)
 80006e4:	6013      	str	r3, [r2, #0]
				ready=true;
 80006e6:	4b0f      	ldr	r3, [pc, #60]	; (8000724 <rxATcommand+0x29c>)
 80006e8:	2201      	movs	r2, #1
 80006ea:	701a      	strb	r2, [r3, #0]
			}
			else if ((strstr((char*)text, (char*)"0,60"))||(strstr((char*)text, (char*)"0,40"))) {
				step=10;
				ready=true;
			}
			break;
 80006ec:	e1fc      	b.n	8000ae8 <rxATcommand+0x660>
			else if ((strstr((char*)text, (char*)"0,60"))||(strstr((char*)text, (char*)"0,40"))) {
 80006ee:	4917      	ldr	r1, [pc, #92]	; (800074c <rxATcommand+0x2c4>)
 80006f0:	6878      	ldr	r0, [r7, #4]
 80006f2:	f004 f844 	bl	800477e <strstr>
 80006f6:	4603      	mov	r3, r0
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d107      	bne.n	800070c <rxATcommand+0x284>
 80006fc:	4914      	ldr	r1, [pc, #80]	; (8000750 <rxATcommand+0x2c8>)
 80006fe:	6878      	ldr	r0, [r7, #4]
 8000700:	f004 f83d 	bl	800477e <strstr>
 8000704:	4603      	mov	r3, r0
 8000706:	2b00      	cmp	r3, #0
 8000708:	f000 81ee 	beq.w	8000ae8 <rxATcommand+0x660>
				step=10;
 800070c:	4b03      	ldr	r3, [pc, #12]	; (800071c <rxATcommand+0x294>)
 800070e:	220a      	movs	r2, #10
 8000710:	601a      	str	r2, [r3, #0]
				ready=true;
 8000712:	4b04      	ldr	r3, [pc, #16]	; (8000724 <rxATcommand+0x29c>)
 8000714:	2201      	movs	r2, #1
 8000716:	701a      	strb	r2, [r3, #0]
			break;
 8000718:	e1e6      	b.n	8000ae8 <rxATcommand+0x660>
 800071a:	bf00      	nop
 800071c:	200007ac 	.word	0x200007ac
 8000720:	0800500c 	.word	0x0800500c
 8000724:	200007b4 	.word	0x200007b4
 8000728:	08005010 	.word	0x08005010
 800072c:	08005018 	.word	0x08005018
 8000730:	20000698 	.word	0x20000698
 8000734:	20000018 	.word	0x20000018
 8000738:	0800501c 	.word	0x0800501c
 800073c:	200007bc 	.word	0x200007bc
 8000740:	08005020 	.word	0x08005020
 8000744:	08005024 	.word	0x08005024
 8000748:	0800502c 	.word	0x0800502c
 800074c:	08005030 	.word	0x08005030
 8000750:	08005038 	.word	0x08005038
		}
		case 9: {
			if (!answ) {
 8000754:	4bad      	ldr	r3, [pc, #692]	; (8000a0c <rxATcommand+0x584>)
 8000756:	781b      	ldrb	r3, [r3, #0]
 8000758:	f083 0301 	eor.w	r3, r3, #1
 800075c:	b2db      	uxtb	r3, r3
 800075e:	2b00      	cmp	r3, #0
 8000760:	f000 80b9 	beq.w	80008d6 <rxATcommand+0x44e>
				if (strstr((char*)text, (char*)"OK")) {
 8000764:	49aa      	ldr	r1, [pc, #680]	; (8000a10 <rxATcommand+0x588>)
 8000766:	6878      	ldr	r0, [r7, #4]
 8000768:	f004 f809 	bl	800477e <strstr>
 800076c:	4603      	mov	r3, r0
 800076e:	2b00      	cmp	r3, #0
 8000770:	f000 80a7 	beq.w	80008c2 <rxATcommand+0x43a>
					if (strstr((char*)oldModem2, "res")) {
 8000774:	49a7      	ldr	r1, [pc, #668]	; (8000a14 <rxATcommand+0x58c>)
 8000776:	48a8      	ldr	r0, [pc, #672]	; (8000a18 <rxATcommand+0x590>)
 8000778:	f004 f801 	bl	800477e <strstr>
 800077c:	4603      	mov	r3, r0
 800077e:	2b00      	cmp	r3, #0
 8000780:	f000 8095 	beq.w	80008ae <rxATcommand+0x426>
						comStart = false;
 8000784:	4ba5      	ldr	r3, [pc, #660]	; (8000a1c <rxATcommand+0x594>)
 8000786:	2200      	movs	r2, #0
 8000788:	701a      	strb	r2, [r3, #0]
						comOpen = false;
 800078a:	4ba5      	ldr	r3, [pc, #660]	; (8000a20 <rxATcommand+0x598>)
 800078c:	2200      	movs	r2, #0
 800078e:	701a      	strb	r2, [r3, #0]
						comClose = false;
 8000790:	4ba4      	ldr	r3, [pc, #656]	; (8000a24 <rxATcommand+0x59c>)
 8000792:	2200      	movs	r2, #0
 8000794:	701a      	strb	r2, [r3, #0]
						memset(smsText, 0, strlen(smsText));
 8000796:	48a4      	ldr	r0, [pc, #656]	; (8000a28 <rxATcommand+0x5a0>)
 8000798:	f7ff fcd8 	bl	800014c <strlen>
 800079c:	4603      	mov	r3, r0
 800079e:	461a      	mov	r2, r3
 80007a0:	2100      	movs	r1, #0
 80007a2:	48a1      	ldr	r0, [pc, #644]	; (8000a28 <rxATcommand+0x5a0>)
 80007a4:	f003 fe8e 	bl	80044c4 <memset>
						if (oldModem2[6]=='t') {
 80007a8:	4b9b      	ldr	r3, [pc, #620]	; (8000a18 <rxATcommand+0x590>)
 80007aa:	799b      	ldrb	r3, [r3, #6]
 80007ac:	2b74      	cmp	r3, #116	; 0x74
 80007ae:	d152      	bne.n	8000856 <rxATcommand+0x3ce>
							comStart=true;
 80007b0:	4b9a      	ldr	r3, [pc, #616]	; (8000a1c <rxATcommand+0x594>)
 80007b2:	2201      	movs	r2, #1
 80007b4:	701a      	strb	r2, [r3, #0]
							strcpy(smsText, (uint8_t*)"Start");
 80007b6:	4b9c      	ldr	r3, [pc, #624]	; (8000a28 <rxATcommand+0x5a0>)
 80007b8:	4a9c      	ldr	r2, [pc, #624]	; (8000a2c <rxATcommand+0x5a4>)
 80007ba:	e892 0003 	ldmia.w	r2, {r0, r1}
 80007be:	6018      	str	r0, [r3, #0]
 80007c0:	3304      	adds	r3, #4
 80007c2:	8019      	strh	r1, [r3, #0]
							HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 0);
 80007c4:	2200      	movs	r2, #0
 80007c6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80007ca:	4899      	ldr	r0, [pc, #612]	; (8000a30 <rxATcommand+0x5a8>)
 80007cc:	f002 f926 	bl	8002a1c <HAL_GPIO_WritePin>
							HAL_Delay(100);
 80007d0:	2064      	movs	r0, #100	; 0x64
 80007d2:	f001 fbd3 	bl	8001f7c <HAL_Delay>
							HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 1);
 80007d6:	2201      	movs	r2, #1
 80007d8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80007dc:	4894      	ldr	r0, [pc, #592]	; (8000a30 <rxATcommand+0x5a8>)
 80007de:	f002 f91d 	bl	8002a1c <HAL_GPIO_WritePin>
							HAL_Delay(100);
 80007e2:	2064      	movs	r0, #100	; 0x64
 80007e4:	f001 fbca 	bl	8001f7c <HAL_Delay>
							HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 0);
 80007e8:	2200      	movs	r2, #0
 80007ea:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80007ee:	4890      	ldr	r0, [pc, #576]	; (8000a30 <rxATcommand+0x5a8>)
 80007f0:	f002 f914 	bl	8002a1c <HAL_GPIO_WritePin>
							HAL_Delay(100);
 80007f4:	2064      	movs	r0, #100	; 0x64
 80007f6:	f001 fbc1 	bl	8001f7c <HAL_Delay>
							HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 1);
 80007fa:	2201      	movs	r2, #1
 80007fc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000800:	488b      	ldr	r0, [pc, #556]	; (8000a30 <rxATcommand+0x5a8>)
 8000802:	f002 f90b 	bl	8002a1c <HAL_GPIO_WritePin>
							HAL_Delay(100);
 8000806:	2064      	movs	r0, #100	; 0x64
 8000808:	f001 fbb8 	bl	8001f7c <HAL_Delay>
							HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 0);
 800080c:	2200      	movs	r2, #0
 800080e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000812:	4887      	ldr	r0, [pc, #540]	; (8000a30 <rxATcommand+0x5a8>)
 8000814:	f002 f902 	bl	8002a1c <HAL_GPIO_WritePin>
							HAL_Delay(100);
 8000818:	2064      	movs	r0, #100	; 0x64
 800081a:	f001 fbaf 	bl	8001f7c <HAL_Delay>
							HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 1);
 800081e:	2201      	movs	r2, #1
 8000820:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000824:	4882      	ldr	r0, [pc, #520]	; (8000a30 <rxATcommand+0x5a8>)
 8000826:	f002 f8f9 	bl	8002a1c <HAL_GPIO_WritePin>
							HAL_Delay(100);
 800082a:	2064      	movs	r0, #100	; 0x64
 800082c:	f001 fba6 	bl	8001f7c <HAL_Delay>
							HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 0);
 8000830:	2200      	movs	r2, #0
 8000832:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000836:	487e      	ldr	r0, [pc, #504]	; (8000a30 <rxATcommand+0x5a8>)
 8000838:	f002 f8f0 	bl	8002a1c <HAL_GPIO_WritePin>
							HAL_Delay(100);
 800083c:	2064      	movs	r0, #100	; 0x64
 800083e:	f001 fb9d 	bl	8001f7c <HAL_Delay>
							HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 1);
 8000842:	2201      	movs	r2, #1
 8000844:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000848:	4879      	ldr	r0, [pc, #484]	; (8000a30 <rxATcommand+0x5a8>)
 800084a:	f002 f8e7 	bl	8002a1c <HAL_GPIO_WritePin>
							HAL_Delay(100);
 800084e:	2064      	movs	r0, #100	; 0x64
 8000850:	f001 fb94 	bl	8001f7c <HAL_Delay>
 8000854:	e02b      	b.n	80008ae <rxATcommand+0x426>
						}
						else if (oldModem2[17]=='t') {
 8000856:	4b70      	ldr	r3, [pc, #448]	; (8000a18 <rxATcommand+0x590>)
 8000858:	7c5b      	ldrb	r3, [r3, #17]
 800085a:	2b74      	cmp	r3, #116	; 0x74
 800085c:	d110      	bne.n	8000880 <rxATcommand+0x3f8>
							comOpen=true;
 800085e:	4b70      	ldr	r3, [pc, #448]	; (8000a20 <rxATcommand+0x598>)
 8000860:	2201      	movs	r2, #1
 8000862:	701a      	strb	r2, [r3, #0]
							strcpy(smsText, (uint8_t*)"Open");
 8000864:	4b70      	ldr	r3, [pc, #448]	; (8000a28 <rxATcommand+0x5a0>)
 8000866:	4a73      	ldr	r2, [pc, #460]	; (8000a34 <rxATcommand+0x5ac>)
 8000868:	e892 0003 	ldmia.w	r2, {r0, r1}
 800086c:	6018      	str	r0, [r3, #0]
 800086e:	3304      	adds	r3, #4
 8000870:	7019      	strb	r1, [r3, #0]
							HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 0);
 8000872:	2200      	movs	r2, #0
 8000874:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000878:	486d      	ldr	r0, [pc, #436]	; (8000a30 <rxATcommand+0x5a8>)
 800087a:	f002 f8cf 	bl	8002a1c <HAL_GPIO_WritePin>
 800087e:	e016      	b.n	80008ae <rxATcommand+0x426>
						}
						else if (oldModem2[28]=='t') {
 8000880:	4b65      	ldr	r3, [pc, #404]	; (8000a18 <rxATcommand+0x590>)
 8000882:	7f1b      	ldrb	r3, [r3, #28]
 8000884:	2b74      	cmp	r3, #116	; 0x74
 8000886:	d112      	bne.n	80008ae <rxATcommand+0x426>
							comClose=true;
 8000888:	4b66      	ldr	r3, [pc, #408]	; (8000a24 <rxATcommand+0x59c>)
 800088a:	2201      	movs	r2, #1
 800088c:	701a      	strb	r2, [r3, #0]
							strcpy(smsText, (uint8_t*)"Closed");
 800088e:	4b66      	ldr	r3, [pc, #408]	; (8000a28 <rxATcommand+0x5a0>)
 8000890:	4a69      	ldr	r2, [pc, #420]	; (8000a38 <rxATcommand+0x5b0>)
 8000892:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000896:	6018      	str	r0, [r3, #0]
 8000898:	3304      	adds	r3, #4
 800089a:	8019      	strh	r1, [r3, #0]
 800089c:	3302      	adds	r3, #2
 800089e:	0c0a      	lsrs	r2, r1, #16
 80008a0:	701a      	strb	r2, [r3, #0]
							HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 1);
 80008a2:	2201      	movs	r2, #1
 80008a4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80008a8:	4861      	ldr	r0, [pc, #388]	; (8000a30 <rxATcommand+0x5a8>)
 80008aa:	f002 f8b7 	bl	8002a1c <HAL_GPIO_WritePin>
						}
					}
					step=7;
 80008ae:	4b63      	ldr	r3, [pc, #396]	; (8000a3c <rxATcommand+0x5b4>)
 80008b0:	2207      	movs	r2, #7
 80008b2:	601a      	str	r2, [r3, #0]
					answ = true;
 80008b4:	4b55      	ldr	r3, [pc, #340]	; (8000a0c <rxATcommand+0x584>)
 80008b6:	2201      	movs	r2, #1
 80008b8:	701a      	strb	r2, [r3, #0]
					ready=true;
 80008ba:	4b61      	ldr	r3, [pc, #388]	; (8000a40 <rxATcommand+0x5b8>)
 80008bc:	2201      	movs	r2, #1
 80008be:	701a      	strb	r2, [r3, #0]
					step=10;
					answ = false;
					ready=true;
				}
			}
			break;
 80008c0:	e113      	b.n	8000aea <rxATcommand+0x662>
					step=10;
 80008c2:	4b5e      	ldr	r3, [pc, #376]	; (8000a3c <rxATcommand+0x5b4>)
 80008c4:	220a      	movs	r2, #10
 80008c6:	601a      	str	r2, [r3, #0]
					answ = false;
 80008c8:	4b50      	ldr	r3, [pc, #320]	; (8000a0c <rxATcommand+0x584>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	701a      	strb	r2, [r3, #0]
					ready=true;
 80008ce:	4b5c      	ldr	r3, [pc, #368]	; (8000a40 <rxATcommand+0x5b8>)
 80008d0:	2201      	movs	r2, #1
 80008d2:	701a      	strb	r2, [r3, #0]
			break;
 80008d4:	e109      	b.n	8000aea <rxATcommand+0x662>
				if (strstr((char*)text, (char*)"OK")) {
 80008d6:	494e      	ldr	r1, [pc, #312]	; (8000a10 <rxATcommand+0x588>)
 80008d8:	6878      	ldr	r0, [r7, #4]
 80008da:	f003 ff50 	bl	800477e <strstr>
 80008de:	4603      	mov	r3, r0
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d00b      	beq.n	80008fc <rxATcommand+0x474>
					step++;
 80008e4:	4b55      	ldr	r3, [pc, #340]	; (8000a3c <rxATcommand+0x5b4>)
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	3301      	adds	r3, #1
 80008ea:	4a54      	ldr	r2, [pc, #336]	; (8000a3c <rxATcommand+0x5b4>)
 80008ec:	6013      	str	r3, [r2, #0]
					answ = false;
 80008ee:	4b47      	ldr	r3, [pc, #284]	; (8000a0c <rxATcommand+0x584>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	701a      	strb	r2, [r3, #0]
					ready=true;
 80008f4:	4b52      	ldr	r3, [pc, #328]	; (8000a40 <rxATcommand+0x5b8>)
 80008f6:	2201      	movs	r2, #1
 80008f8:	701a      	strb	r2, [r3, #0]
			break;
 80008fa:	e0f6      	b.n	8000aea <rxATcommand+0x662>
					step=10;
 80008fc:	4b4f      	ldr	r3, [pc, #316]	; (8000a3c <rxATcommand+0x5b4>)
 80008fe:	220a      	movs	r2, #10
 8000900:	601a      	str	r2, [r3, #0]
					answ = false;
 8000902:	4b42      	ldr	r3, [pc, #264]	; (8000a0c <rxATcommand+0x584>)
 8000904:	2200      	movs	r2, #0
 8000906:	701a      	strb	r2, [r3, #0]
					ready=true;
 8000908:	4b4d      	ldr	r3, [pc, #308]	; (8000a40 <rxATcommand+0x5b8>)
 800090a:	2201      	movs	r2, #1
 800090c:	701a      	strb	r2, [r3, #0]
			break;
 800090e:	e0ec      	b.n	8000aea <rxATcommand+0x662>
		}
		case 10: {
			step=11;
 8000910:	4b4a      	ldr	r3, [pc, #296]	; (8000a3c <rxATcommand+0x5b4>)
 8000912:	220b      	movs	r2, #11
 8000914:	601a      	str	r2, [r3, #0]
			ready=true;
 8000916:	4b4a      	ldr	r3, [pc, #296]	; (8000a40 <rxATcommand+0x5b8>)
 8000918:	2201      	movs	r2, #1
 800091a:	701a      	strb	r2, [r3, #0]
			break;
 800091c:	e0e5      	b.n	8000aea <rxATcommand+0x662>
		}
		case 11: {
			if (strstr((char*)text, (char*)"OK")) {
 800091e:	493c      	ldr	r1, [pc, #240]	; (8000a10 <rxATcommand+0x588>)
 8000920:	6878      	ldr	r0, [r7, #4]
 8000922:	f003 ff2c 	bl	800477e <strstr>
 8000926:	4603      	mov	r3, r0
 8000928:	2b00      	cmp	r3, #0
 800092a:	d006      	beq.n	800093a <rxATcommand+0x4b2>
				step=12;
 800092c:	4b43      	ldr	r3, [pc, #268]	; (8000a3c <rxATcommand+0x5b4>)
 800092e:	220c      	movs	r2, #12
 8000930:	601a      	str	r2, [r3, #0]
				ready=true;
 8000932:	4b43      	ldr	r3, [pc, #268]	; (8000a40 <rxATcommand+0x5b8>)
 8000934:	2201      	movs	r2, #1
 8000936:	701a      	strb	r2, [r3, #0]
			}
			else {
				step=0;
				ready=true;
			}
			break;
 8000938:	e0d7      	b.n	8000aea <rxATcommand+0x662>
				step=0;
 800093a:	4b40      	ldr	r3, [pc, #256]	; (8000a3c <rxATcommand+0x5b4>)
 800093c:	2200      	movs	r2, #0
 800093e:	601a      	str	r2, [r3, #0]
				ready=true;
 8000940:	4b3f      	ldr	r3, [pc, #252]	; (8000a40 <rxATcommand+0x5b8>)
 8000942:	2201      	movs	r2, #1
 8000944:	701a      	strb	r2, [r3, #0]
			break;
 8000946:	e0d0      	b.n	8000aea <rxATcommand+0x662>
		}
		case 12: {
			if (strstr((char*)text, (char*)"CMTI")) {
 8000948:	493e      	ldr	r1, [pc, #248]	; (8000a44 <rxATcommand+0x5bc>)
 800094a:	6878      	ldr	r0, [r7, #4]
 800094c:	f003 ff17 	bl	800477e <strstr>
 8000950:	4603      	mov	r3, r0
 8000952:	2b00      	cmp	r3, #0
 8000954:	d043      	beq.n	80009de <rxATcommand+0x556>
				bool start = false;
 8000956:	2300      	movs	r3, #0
 8000958:	75fb      	strb	r3, [r7, #23]
				int j = 0;
 800095a:	2300      	movs	r3, #0
 800095c:	613b      	str	r3, [r7, #16]
				for (int i = 0; i<250; i++) {
 800095e:	2300      	movs	r3, #0
 8000960:	60fb      	str	r3, [r7, #12]
 8000962:	e032      	b.n	80009ca <rxATcommand+0x542>
					if (start) {
 8000964:	7dfb      	ldrb	r3, [r7, #23]
 8000966:	2b00      	cmp	r3, #0
 8000968:	d024      	beq.n	80009b4 <rxATcommand+0x52c>
						if ((text[i]=='\r')||(text[i]=='\n')||(text[i]=='\0')) {
 800096a:	68fb      	ldr	r3, [r7, #12]
 800096c:	687a      	ldr	r2, [r7, #4]
 800096e:	4413      	add	r3, r2
 8000970:	781b      	ldrb	r3, [r3, #0]
 8000972:	2b0d      	cmp	r3, #13
 8000974:	d00b      	beq.n	800098e <rxATcommand+0x506>
 8000976:	68fb      	ldr	r3, [r7, #12]
 8000978:	687a      	ldr	r2, [r7, #4]
 800097a:	4413      	add	r3, r2
 800097c:	781b      	ldrb	r3, [r3, #0]
 800097e:	2b0a      	cmp	r3, #10
 8000980:	d005      	beq.n	800098e <rxATcommand+0x506>
 8000982:	68fb      	ldr	r3, [r7, #12]
 8000984:	687a      	ldr	r2, [r7, #4]
 8000986:	4413      	add	r3, r2
 8000988:	781b      	ldrb	r3, [r3, #0]
 800098a:	2b00      	cmp	r3, #0
 800098c:	d105      	bne.n	800099a <rxATcommand+0x512>
							smsNum[j]='!';  //стоп-символ
 800098e:	4a2e      	ldr	r2, [pc, #184]	; (8000a48 <rxATcommand+0x5c0>)
 8000990:	693b      	ldr	r3, [r7, #16]
 8000992:	4413      	add	r3, r2
 8000994:	2221      	movs	r2, #33	; 0x21
 8000996:	701a      	strb	r2, [r3, #0]
							break;
 8000998:	e01a      	b.n	80009d0 <rxATcommand+0x548>
						}
						else {
							smsNum[j]=text[i];
 800099a:	68fb      	ldr	r3, [r7, #12]
 800099c:	687a      	ldr	r2, [r7, #4]
 800099e:	4413      	add	r3, r2
 80009a0:	7819      	ldrb	r1, [r3, #0]
 80009a2:	4a29      	ldr	r2, [pc, #164]	; (8000a48 <rxATcommand+0x5c0>)
 80009a4:	693b      	ldr	r3, [r7, #16]
 80009a6:	4413      	add	r3, r2
 80009a8:	460a      	mov	r2, r1
 80009aa:	701a      	strb	r2, [r3, #0]
							j++;
 80009ac:	693b      	ldr	r3, [r7, #16]
 80009ae:	3301      	adds	r3, #1
 80009b0:	613b      	str	r3, [r7, #16]
 80009b2:	e007      	b.n	80009c4 <rxATcommand+0x53c>
						}
					}
					else {
						if (text[i]==',') start = true;
 80009b4:	68fb      	ldr	r3, [r7, #12]
 80009b6:	687a      	ldr	r2, [r7, #4]
 80009b8:	4413      	add	r3, r2
 80009ba:	781b      	ldrb	r3, [r3, #0]
 80009bc:	2b2c      	cmp	r3, #44	; 0x2c
 80009be:	d101      	bne.n	80009c4 <rxATcommand+0x53c>
 80009c0:	2301      	movs	r3, #1
 80009c2:	75fb      	strb	r3, [r7, #23]
				for (int i = 0; i<250; i++) {
 80009c4:	68fb      	ldr	r3, [r7, #12]
 80009c6:	3301      	adds	r3, #1
 80009c8:	60fb      	str	r3, [r7, #12]
 80009ca:	68fb      	ldr	r3, [r7, #12]
 80009cc:	2bf9      	cmp	r3, #249	; 0xf9
 80009ce:	ddc9      	ble.n	8000964 <rxATcommand+0x4dc>
					}
				}
				step=20;
 80009d0:	4b1a      	ldr	r3, [pc, #104]	; (8000a3c <rxATcommand+0x5b4>)
 80009d2:	2214      	movs	r2, #20
 80009d4:	601a      	str	r2, [r3, #0]
				ready=true;
 80009d6:	4b1a      	ldr	r3, [pc, #104]	; (8000a40 <rxATcommand+0x5b8>)
 80009d8:	2201      	movs	r2, #1
 80009da:	701a      	strb	r2, [r3, #0]
			}
			else {
				step=12;
				ready=true;
			}
			break;
 80009dc:	e085      	b.n	8000aea <rxATcommand+0x662>
				step=12;
 80009de:	4b17      	ldr	r3, [pc, #92]	; (8000a3c <rxATcommand+0x5b4>)
 80009e0:	220c      	movs	r2, #12
 80009e2:	601a      	str	r2, [r3, #0]
				ready=true;
 80009e4:	4b16      	ldr	r3, [pc, #88]	; (8000a40 <rxATcommand+0x5b8>)
 80009e6:	2201      	movs	r2, #1
 80009e8:	701a      	strb	r2, [r3, #0]
			break;
 80009ea:	e07e      	b.n	8000aea <rxATcommand+0x662>
		}
		case 20: {
			if (strstr((char*)text, (char*)"OK")) {
 80009ec:	4908      	ldr	r1, [pc, #32]	; (8000a10 <rxATcommand+0x588>)
 80009ee:	6878      	ldr	r0, [r7, #4]
 80009f0:	f003 fec5 	bl	800477e <strstr>
 80009f4:	4603      	mov	r3, r0
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d028      	beq.n	8000a4c <rxATcommand+0x5c4>
				step++;
 80009fa:	4b10      	ldr	r3, [pc, #64]	; (8000a3c <rxATcommand+0x5b4>)
 80009fc:	681b      	ldr	r3, [r3, #0]
 80009fe:	3301      	adds	r3, #1
 8000a00:	4a0e      	ldr	r2, [pc, #56]	; (8000a3c <rxATcommand+0x5b4>)
 8000a02:	6013      	str	r3, [r2, #0]
				ready=true;
 8000a04:	4b0e      	ldr	r3, [pc, #56]	; (8000a40 <rxATcommand+0x5b8>)
 8000a06:	2201      	movs	r2, #1
 8000a08:	701a      	strb	r2, [r3, #0]
			}
			else {
				step=12;
				ready=true;
			}
			break;
 8000a0a:	e06e      	b.n	8000aea <rxATcommand+0x662>
 8000a0c:	200007b8 	.word	0x200007b8
 8000a10:	0800500c 	.word	0x0800500c
 8000a14:	08005040 	.word	0x08005040
 8000a18:	2000059c 	.word	0x2000059c
 8000a1c:	200007b7 	.word	0x200007b7
 8000a20:	200007b5 	.word	0x200007b5
 8000a24:	200007b6 	.word	0x200007b6
 8000a28:	20000010 	.word	0x20000010
 8000a2c:	08005044 	.word	0x08005044
 8000a30:	40011000 	.word	0x40011000
 8000a34:	0800504c 	.word	0x0800504c
 8000a38:	08005054 	.word	0x08005054
 8000a3c:	200007ac 	.word	0x200007ac
 8000a40:	200007b4 	.word	0x200007b4
 8000a44:	08005010 	.word	0x08005010
 8000a48:	20000794 	.word	0x20000794
				step=12;
 8000a4c:	4b29      	ldr	r3, [pc, #164]	; (8000af4 <rxATcommand+0x66c>)
 8000a4e:	220c      	movs	r2, #12
 8000a50:	601a      	str	r2, [r3, #0]
				ready=true;
 8000a52:	4b29      	ldr	r3, [pc, #164]	; (8000af8 <rxATcommand+0x670>)
 8000a54:	2201      	movs	r2, #1
 8000a56:	701a      	strb	r2, [r3, #0]
			break;
 8000a58:	e047      	b.n	8000aea <rxATcommand+0x662>
		}
		case 21: {
			memset(smsText, 0, sizeof(smsText));
 8000a5a:	2206      	movs	r2, #6
 8000a5c:	2100      	movs	r1, #0
 8000a5e:	4827      	ldr	r0, [pc, #156]	; (8000afc <rxATcommand+0x674>)
 8000a60:	f003 fd30 	bl	80044c4 <memset>
			strcpy(smsText, oldModem3);
 8000a64:	4926      	ldr	r1, [pc, #152]	; (8000b00 <rxATcommand+0x678>)
 8000a66:	4825      	ldr	r0, [pc, #148]	; (8000afc <rxATcommand+0x674>)
 8000a68:	f003 fe81 	bl	800476e <strcpy>
			step++;
 8000a6c:	4b21      	ldr	r3, [pc, #132]	; (8000af4 <rxATcommand+0x66c>)
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	3301      	adds	r3, #1
 8000a72:	4a20      	ldr	r2, [pc, #128]	; (8000af4 <rxATcommand+0x66c>)
 8000a74:	6013      	str	r3, [r2, #0]
			ready=true;
 8000a76:	4b20      	ldr	r3, [pc, #128]	; (8000af8 <rxATcommand+0x670>)
 8000a78:	2201      	movs	r2, #1
 8000a7a:	701a      	strb	r2, [r3, #0]
			break;
 8000a7c:	e035      	b.n	8000aea <rxATcommand+0x662>
		}
		case 22: {
			step++;
 8000a7e:	4b1d      	ldr	r3, [pc, #116]	; (8000af4 <rxATcommand+0x66c>)
 8000a80:	681b      	ldr	r3, [r3, #0]
 8000a82:	3301      	adds	r3, #1
 8000a84:	4a1b      	ldr	r2, [pc, #108]	; (8000af4 <rxATcommand+0x66c>)
 8000a86:	6013      	str	r3, [r2, #0]
			ready=true;
 8000a88:	4b1b      	ldr	r3, [pc, #108]	; (8000af8 <rxATcommand+0x670>)
 8000a8a:	2201      	movs	r2, #1
 8000a8c:	701a      	strb	r2, [r3, #0]
			break;
 8000a8e:	e02c      	b.n	8000aea <rxATcommand+0x662>
		}
		case 23: {
			step++;
 8000a90:	4b18      	ldr	r3, [pc, #96]	; (8000af4 <rxATcommand+0x66c>)
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	3301      	adds	r3, #1
 8000a96:	4a17      	ldr	r2, [pc, #92]	; (8000af4 <rxATcommand+0x66c>)
 8000a98:	6013      	str	r3, [r2, #0]
			ready=true;
 8000a9a:	4b17      	ldr	r3, [pc, #92]	; (8000af8 <rxATcommand+0x670>)
 8000a9c:	2201      	movs	r2, #1
 8000a9e:	701a      	strb	r2, [r3, #0]
			break;
 8000aa0:	e023      	b.n	8000aea <rxATcommand+0x662>
		}
		case 24: {
			if (strstr((char*)text, (char*)"OK")) {
 8000aa2:	4918      	ldr	r1, [pc, #96]	; (8000b04 <rxATcommand+0x67c>)
 8000aa4:	6878      	ldr	r0, [r7, #4]
 8000aa6:	f003 fe6a 	bl	800477e <strstr>
 8000aaa:	4603      	mov	r3, r0
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d006      	beq.n	8000abe <rxATcommand+0x636>
				step=0;
 8000ab0:	4b10      	ldr	r3, [pc, #64]	; (8000af4 <rxATcommand+0x66c>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	601a      	str	r2, [r3, #0]
				ready=true;
 8000ab6:	4b10      	ldr	r3, [pc, #64]	; (8000af8 <rxATcommand+0x670>)
 8000ab8:	2201      	movs	r2, #1
 8000aba:	701a      	strb	r2, [r3, #0]
			}
			else {
				step=12;
				ready=true;
			}
			break;
 8000abc:	e015      	b.n	8000aea <rxATcommand+0x662>
			else if (strstr((char*)text, (char*)">")) {
 8000abe:	213e      	movs	r1, #62	; 0x3e
 8000ac0:	6878      	ldr	r0, [r7, #4]
 8000ac2:	f003 fe47 	bl	8004754 <strchr>
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d006      	beq.n	8000ada <rxATcommand+0x652>
				step=0;
 8000acc:	4b09      	ldr	r3, [pc, #36]	; (8000af4 <rxATcommand+0x66c>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	601a      	str	r2, [r3, #0]
				ready=true;
 8000ad2:	4b09      	ldr	r3, [pc, #36]	; (8000af8 <rxATcommand+0x670>)
 8000ad4:	2201      	movs	r2, #1
 8000ad6:	701a      	strb	r2, [r3, #0]
			break;
 8000ad8:	e007      	b.n	8000aea <rxATcommand+0x662>
				step=12;
 8000ada:	4b06      	ldr	r3, [pc, #24]	; (8000af4 <rxATcommand+0x66c>)
 8000adc:	220c      	movs	r2, #12
 8000ade:	601a      	str	r2, [r3, #0]
				ready=true;
 8000ae0:	4b05      	ldr	r3, [pc, #20]	; (8000af8 <rxATcommand+0x670>)
 8000ae2:	2201      	movs	r2, #1
 8000ae4:	701a      	strb	r2, [r3, #0]
			break;
 8000ae6:	e000      	b.n	8000aea <rxATcommand+0x662>
			break;
 8000ae8:	bf00      	nop
		}
	}
}
 8000aea:	bf00      	nop
 8000aec:	3718      	adds	r7, #24
 8000aee:	46bd      	mov	sp, r7
 8000af0:	bd80      	pop	{r7, pc}
 8000af2:	bf00      	nop
 8000af4:	200007ac 	.word	0x200007ac
 8000af8:	200007b4 	.word	0x200007b4
 8000afc:	20000010 	.word	0x20000010
 8000b00:	20000698 	.word	0x20000698
 8000b04:	0800500c 	.word	0x0800500c

08000b08 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b086      	sub	sp, #24
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	6078      	str	r0, [r7, #4]
	if (huart == &huart2) {
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	4a5b      	ldr	r2, [pc, #364]	; (8000c80 <HAL_UART_RxCpltCallback+0x178>)
 8000b14:	4293      	cmp	r3, r2
 8000b16:	f040 8084 	bne.w	8000c22 <HAL_UART_RxCpltCallback+0x11a>
		if (str[0]!='\n') {
 8000b1a:	4b5a      	ldr	r3, [pc, #360]	; (8000c84 <HAL_UART_RxCpltCallback+0x17c>)
 8000b1c:	781b      	ldrb	r3, [r3, #0]
 8000b1e:	2b0a      	cmp	r3, #10
 8000b20:	d00b      	beq.n	8000b3a <HAL_UART_RxCpltCallback+0x32>
			modemString2[modemStringLength2] = str[0];
 8000b22:	4b59      	ldr	r3, [pc, #356]	; (8000c88 <HAL_UART_RxCpltCallback+0x180>)
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	4a57      	ldr	r2, [pc, #348]	; (8000c84 <HAL_UART_RxCpltCallback+0x17c>)
 8000b28:	7811      	ldrb	r1, [r2, #0]
 8000b2a:	4a58      	ldr	r2, [pc, #352]	; (8000c8c <HAL_UART_RxCpltCallback+0x184>)
 8000b2c:	54d1      	strb	r1, [r2, r3]
			modemStringLength2++;
 8000b2e:	4b56      	ldr	r3, [pc, #344]	; (8000c88 <HAL_UART_RxCpltCallback+0x180>)
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	3301      	adds	r3, #1
 8000b34:	4a54      	ldr	r2, [pc, #336]	; (8000c88 <HAL_UART_RxCpltCallback+0x180>)
 8000b36:	6013      	str	r3, [r2, #0]
 8000b38:	e06d      	b.n	8000c16 <HAL_UART_RxCpltCallback+0x10e>
		}
		else {
			modemString2[modemStringLength2] = str[0];
 8000b3a:	4b53      	ldr	r3, [pc, #332]	; (8000c88 <HAL_UART_RxCpltCallback+0x180>)
 8000b3c:	681b      	ldr	r3, [r3, #0]
 8000b3e:	4a51      	ldr	r2, [pc, #324]	; (8000c84 <HAL_UART_RxCpltCallback+0x17c>)
 8000b40:	7811      	ldrb	r1, [r2, #0]
 8000b42:	4a52      	ldr	r2, [pc, #328]	; (8000c8c <HAL_UART_RxCpltCallback+0x184>)
 8000b44:	54d1      	strb	r1, [r2, r3]
			modemStringLength2++;
 8000b46:	4b50      	ldr	r3, [pc, #320]	; (8000c88 <HAL_UART_RxCpltCallback+0x180>)
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	3301      	adds	r3, #1
 8000b4c:	4a4e      	ldr	r2, [pc, #312]	; (8000c88 <HAL_UART_RxCpltCallback+0x180>)
 8000b4e:	6013      	str	r3, [r2, #0]
			HAL_UART_Transmit_DMA(&huart1, modemString2, modemStringLength2);
 8000b50:	4b4d      	ldr	r3, [pc, #308]	; (8000c88 <HAL_UART_RxCpltCallback+0x180>)
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	b29b      	uxth	r3, r3
 8000b56:	461a      	mov	r2, r3
 8000b58:	494c      	ldr	r1, [pc, #304]	; (8000c8c <HAL_UART_RxCpltCallback+0x184>)
 8000b5a:	484d      	ldr	r0, [pc, #308]	; (8000c90 <HAL_UART_RxCpltCallback+0x188>)
 8000b5c:	f002 fdca 	bl	80036f4 <HAL_UART_Transmit_DMA>
			for (int i = modemStringLength2; i<250; i++)modemString2[i]=(uint8_t)0x00;
 8000b60:	4b49      	ldr	r3, [pc, #292]	; (8000c88 <HAL_UART_RxCpltCallback+0x180>)
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	617b      	str	r3, [r7, #20]
 8000b66:	e007      	b.n	8000b78 <HAL_UART_RxCpltCallback+0x70>
 8000b68:	4a48      	ldr	r2, [pc, #288]	; (8000c8c <HAL_UART_RxCpltCallback+0x184>)
 8000b6a:	697b      	ldr	r3, [r7, #20]
 8000b6c:	4413      	add	r3, r2
 8000b6e:	2200      	movs	r2, #0
 8000b70:	701a      	strb	r2, [r3, #0]
 8000b72:	697b      	ldr	r3, [r7, #20]
 8000b74:	3301      	adds	r3, #1
 8000b76:	617b      	str	r3, [r7, #20]
 8000b78:	697b      	ldr	r3, [r7, #20]
 8000b7a:	2bf9      	cmp	r3, #249	; 0xf9
 8000b7c:	ddf4      	ble.n	8000b68 <HAL_UART_RxCpltCallback+0x60>
			for (int i = 0; i<250; i++) oldModem3[i] = oldModem2[i];
 8000b7e:	2300      	movs	r3, #0
 8000b80:	613b      	str	r3, [r7, #16]
 8000b82:	e00b      	b.n	8000b9c <HAL_UART_RxCpltCallback+0x94>
 8000b84:	4a43      	ldr	r2, [pc, #268]	; (8000c94 <HAL_UART_RxCpltCallback+0x18c>)
 8000b86:	693b      	ldr	r3, [r7, #16]
 8000b88:	4413      	add	r3, r2
 8000b8a:	7819      	ldrb	r1, [r3, #0]
 8000b8c:	4a42      	ldr	r2, [pc, #264]	; (8000c98 <HAL_UART_RxCpltCallback+0x190>)
 8000b8e:	693b      	ldr	r3, [r7, #16]
 8000b90:	4413      	add	r3, r2
 8000b92:	460a      	mov	r2, r1
 8000b94:	701a      	strb	r2, [r3, #0]
 8000b96:	693b      	ldr	r3, [r7, #16]
 8000b98:	3301      	adds	r3, #1
 8000b9a:	613b      	str	r3, [r7, #16]
 8000b9c:	693b      	ldr	r3, [r7, #16]
 8000b9e:	2bf9      	cmp	r3, #249	; 0xf9
 8000ba0:	ddf0      	ble.n	8000b84 <HAL_UART_RxCpltCallback+0x7c>
			for (int i = 0; i<250; i++) oldModem2[i] = oldModem[i];
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	60fb      	str	r3, [r7, #12]
 8000ba6:	e00b      	b.n	8000bc0 <HAL_UART_RxCpltCallback+0xb8>
 8000ba8:	4a3c      	ldr	r2, [pc, #240]	; (8000c9c <HAL_UART_RxCpltCallback+0x194>)
 8000baa:	68fb      	ldr	r3, [r7, #12]
 8000bac:	4413      	add	r3, r2
 8000bae:	7819      	ldrb	r1, [r3, #0]
 8000bb0:	4a38      	ldr	r2, [pc, #224]	; (8000c94 <HAL_UART_RxCpltCallback+0x18c>)
 8000bb2:	68fb      	ldr	r3, [r7, #12]
 8000bb4:	4413      	add	r3, r2
 8000bb6:	460a      	mov	r2, r1
 8000bb8:	701a      	strb	r2, [r3, #0]
 8000bba:	68fb      	ldr	r3, [r7, #12]
 8000bbc:	3301      	adds	r3, #1
 8000bbe:	60fb      	str	r3, [r7, #12]
 8000bc0:	68fb      	ldr	r3, [r7, #12]
 8000bc2:	2bf9      	cmp	r3, #249	; 0xf9
 8000bc4:	ddf0      	ble.n	8000ba8 <HAL_UART_RxCpltCallback+0xa0>
			for (int i = 0; i<250; i++) oldModem[i] = modemString2[i];
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	60bb      	str	r3, [r7, #8]
 8000bca:	e00b      	b.n	8000be4 <HAL_UART_RxCpltCallback+0xdc>
 8000bcc:	4a2f      	ldr	r2, [pc, #188]	; (8000c8c <HAL_UART_RxCpltCallback+0x184>)
 8000bce:	68bb      	ldr	r3, [r7, #8]
 8000bd0:	4413      	add	r3, r2
 8000bd2:	7819      	ldrb	r1, [r3, #0]
 8000bd4:	4a31      	ldr	r2, [pc, #196]	; (8000c9c <HAL_UART_RxCpltCallback+0x194>)
 8000bd6:	68bb      	ldr	r3, [r7, #8]
 8000bd8:	4413      	add	r3, r2
 8000bda:	460a      	mov	r2, r1
 8000bdc:	701a      	strb	r2, [r3, #0]
 8000bde:	68bb      	ldr	r3, [r7, #8]
 8000be0:	3301      	adds	r3, #1
 8000be2:	60bb      	str	r3, [r7, #8]
 8000be4:	68bb      	ldr	r3, [r7, #8]
 8000be6:	2bf9      	cmp	r3, #249	; 0xf9
 8000be8:	ddf0      	ble.n	8000bcc <HAL_UART_RxCpltCallback+0xc4>
			modemStringLength2 = 0;
 8000bea:	4b27      	ldr	r3, [pc, #156]	; (8000c88 <HAL_UART_RxCpltCallback+0x180>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	601a      	str	r2, [r3, #0]
			oldModem[strlen(oldModem)-1]=0;
 8000bf0:	482a      	ldr	r0, [pc, #168]	; (8000c9c <HAL_UART_RxCpltCallback+0x194>)
 8000bf2:	f7ff faab 	bl	800014c <strlen>
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	3b01      	subs	r3, #1
 8000bfa:	4a28      	ldr	r2, [pc, #160]	; (8000c9c <HAL_UART_RxCpltCallback+0x194>)
 8000bfc:	2100      	movs	r1, #0
 8000bfe:	54d1      	strb	r1, [r2, r3]
			oldModem[strlen(oldModem)-1]=0;
 8000c00:	4826      	ldr	r0, [pc, #152]	; (8000c9c <HAL_UART_RxCpltCallback+0x194>)
 8000c02:	f7ff faa3 	bl	800014c <strlen>
 8000c06:	4603      	mov	r3, r0
 8000c08:	3b01      	subs	r3, #1
 8000c0a:	4a24      	ldr	r2, [pc, #144]	; (8000c9c <HAL_UART_RxCpltCallback+0x194>)
 8000c0c:	2100      	movs	r1, #0
 8000c0e:	54d1      	strb	r1, [r2, r3]
			rxNew=true;
 8000c10:	4b23      	ldr	r3, [pc, #140]	; (8000ca0 <HAL_UART_RxCpltCallback+0x198>)
 8000c12:	2201      	movs	r2, #1
 8000c14:	601a      	str	r2, [r3, #0]
		}
		HAL_UART_Receive_IT(&huart2,str,1);
 8000c16:	2201      	movs	r2, #1
 8000c18:	491a      	ldr	r1, [pc, #104]	; (8000c84 <HAL_UART_RxCpltCallback+0x17c>)
 8000c1a:	4819      	ldr	r0, [pc, #100]	; (8000c80 <HAL_UART_RxCpltCallback+0x178>)
 8000c1c:	f002 fd45 	bl	80036aa <HAL_UART_Receive_IT>
			modemStringLength1 = 0;

		}
		HAL_UART_Receive_IT(&huart1,str2,1);
	}
}
 8000c20:	e02a      	b.n	8000c78 <HAL_UART_RxCpltCallback+0x170>
		if (str2[0]!='\n') {
 8000c22:	4b20      	ldr	r3, [pc, #128]	; (8000ca4 <HAL_UART_RxCpltCallback+0x19c>)
 8000c24:	781b      	ldrb	r3, [r3, #0]
 8000c26:	2b0a      	cmp	r3, #10
 8000c28:	d00b      	beq.n	8000c42 <HAL_UART_RxCpltCallback+0x13a>
			modemString1[modemStringLength1] = str2[0];
 8000c2a:	4b1f      	ldr	r3, [pc, #124]	; (8000ca8 <HAL_UART_RxCpltCallback+0x1a0>)
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	4a1d      	ldr	r2, [pc, #116]	; (8000ca4 <HAL_UART_RxCpltCallback+0x19c>)
 8000c30:	7811      	ldrb	r1, [r2, #0]
 8000c32:	4a1e      	ldr	r2, [pc, #120]	; (8000cac <HAL_UART_RxCpltCallback+0x1a4>)
 8000c34:	54d1      	strb	r1, [r2, r3]
			modemStringLength1++;
 8000c36:	4b1c      	ldr	r3, [pc, #112]	; (8000ca8 <HAL_UART_RxCpltCallback+0x1a0>)
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	3301      	adds	r3, #1
 8000c3c:	4a1a      	ldr	r2, [pc, #104]	; (8000ca8 <HAL_UART_RxCpltCallback+0x1a0>)
 8000c3e:	6013      	str	r3, [r2, #0]
 8000c40:	e015      	b.n	8000c6e <HAL_UART_RxCpltCallback+0x166>
			modemString1[modemStringLength1] = str2[0];
 8000c42:	4b19      	ldr	r3, [pc, #100]	; (8000ca8 <HAL_UART_RxCpltCallback+0x1a0>)
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	4a17      	ldr	r2, [pc, #92]	; (8000ca4 <HAL_UART_RxCpltCallback+0x19c>)
 8000c48:	7811      	ldrb	r1, [r2, #0]
 8000c4a:	4a18      	ldr	r2, [pc, #96]	; (8000cac <HAL_UART_RxCpltCallback+0x1a4>)
 8000c4c:	54d1      	strb	r1, [r2, r3]
			modemStringLength1++;
 8000c4e:	4b16      	ldr	r3, [pc, #88]	; (8000ca8 <HAL_UART_RxCpltCallback+0x1a0>)
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	3301      	adds	r3, #1
 8000c54:	4a14      	ldr	r2, [pc, #80]	; (8000ca8 <HAL_UART_RxCpltCallback+0x1a0>)
 8000c56:	6013      	str	r3, [r2, #0]
			HAL_UART_Transmit_DMA(&huart2, modemString1, modemStringLength1);
 8000c58:	4b13      	ldr	r3, [pc, #76]	; (8000ca8 <HAL_UART_RxCpltCallback+0x1a0>)
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	b29b      	uxth	r3, r3
 8000c5e:	461a      	mov	r2, r3
 8000c60:	4912      	ldr	r1, [pc, #72]	; (8000cac <HAL_UART_RxCpltCallback+0x1a4>)
 8000c62:	4807      	ldr	r0, [pc, #28]	; (8000c80 <HAL_UART_RxCpltCallback+0x178>)
 8000c64:	f002 fd46 	bl	80036f4 <HAL_UART_Transmit_DMA>
			modemStringLength1 = 0;
 8000c68:	4b0f      	ldr	r3, [pc, #60]	; (8000ca8 <HAL_UART_RxCpltCallback+0x1a0>)
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	601a      	str	r2, [r3, #0]
		HAL_UART_Receive_IT(&huart1,str2,1);
 8000c6e:	2201      	movs	r2, #1
 8000c70:	490c      	ldr	r1, [pc, #48]	; (8000ca4 <HAL_UART_RxCpltCallback+0x19c>)
 8000c72:	4807      	ldr	r0, [pc, #28]	; (8000c90 <HAL_UART_RxCpltCallback+0x188>)
 8000c74:	f002 fd19 	bl	80036aa <HAL_UART_Receive_IT>
}
 8000c78:	bf00      	nop
 8000c7a:	3718      	adds	r7, #24
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	bd80      	pop	{r7, pc}
 8000c80:	20000148 	.word	0x20000148
 8000c84:	20000008 	.word	0x20000008
 8000c88:	2000039c 	.word	0x2000039c
 8000c8c:	200002a0 	.word	0x200002a0
 8000c90:	20000100 	.word	0x20000100
 8000c94:	2000059c 	.word	0x2000059c
 8000c98:	20000698 	.word	0x20000698
 8000c9c:	200004a0 	.word	0x200004a0
 8000ca0:	200007b0 	.word	0x200007b0
 8000ca4:	2000000c 	.word	0x2000000c
 8000ca8:	2000049c 	.word	0x2000049c
 8000cac:	200003a0 	.word	0x200003a0

08000cb0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b082      	sub	sp, #8
 8000cb4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000cb6:	f001 f8ff 	bl	8001eb8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000cba:	f000 f901 	bl	8000ec0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000cbe:	f000 f9fd 	bl	80010bc <MX_GPIO_Init>
  MX_DMA_Init();
 8000cc2:	f000 f9c5 	bl	8001050 <MX_DMA_Init>
  MX_I2C1_Init();
 8000cc6:	f000 f941 	bl	8000f4c <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8000cca:	f000 f96d 	bl	8000fa8 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000cce:	f000 f995 	bl	8000ffc <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  SSD1306_Init();
 8000cd2:	f000 fa51 	bl	8001178 <SSD1306_Init>
  SSD1306_GotoXY(0, 44); //Устанавливаем курсор в позицию 0;44. Сначала по горизонтали, потом вертикали.
 8000cd6:	212c      	movs	r1, #44	; 0x2c
 8000cd8:	2000      	movs	r0, #0
 8000cda:	f000 fbcd 	bl	8001478 <SSD1306_GotoXY>
  SSD1306_Puts("Hello, habrahabr!!", &Font_7x10, SSD1306_COLOR_WHITE); //пишем надпись в выставленной позиции шрифтом "Font_7x10" белым цветом.
 8000cde:	2201      	movs	r2, #1
 8000ce0:	4960      	ldr	r1, [pc, #384]	; (8000e64 <main+0x1b4>)
 8000ce2:	4861      	ldr	r0, [pc, #388]	; (8000e68 <main+0x1b8>)
 8000ce4:	f000 fc5e 	bl	80015a4 <SSD1306_Puts>
  SSD1306_DrawCircle(10, 33, 7, SSD1306_COLOR_WHITE);
 8000ce8:	2301      	movs	r3, #1
 8000cea:	2207      	movs	r2, #7
 8000cec:	2121      	movs	r1, #33	; 0x21
 8000cee:	200a      	movs	r0, #10
 8000cf0:	f000 fc7d 	bl	80015ee <SSD1306_DrawCircle>
  SSD1306_UpdateScreen();
 8000cf4:	f000 fb16 	bl	8001324 <SSD1306_UpdateScreen>

  HAL_UART_Transmit(&huart1,(uint8_t*)"start\r\n",7,0xFFFF);
 8000cf8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000cfc:	2207      	movs	r2, #7
 8000cfe:	495b      	ldr	r1, [pc, #364]	; (8000e6c <main+0x1bc>)
 8000d00:	485b      	ldr	r0, [pc, #364]	; (8000e70 <main+0x1c0>)
 8000d02:	f002 fc47 	bl	8003594 <HAL_UART_Transmit>
  HAL_UART_Transmit(&huart2,(uint8_t*)"AT+CSQ\r\n",8,0xFFFF);
 8000d06:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000d0a:	2208      	movs	r2, #8
 8000d0c:	4959      	ldr	r1, [pc, #356]	; (8000e74 <main+0x1c4>)
 8000d0e:	485a      	ldr	r0, [pc, #360]	; (8000e78 <main+0x1c8>)
 8000d10:	f002 fc40 	bl	8003594 <HAL_UART_Transmit>

  HAL_UART_Receive_IT(&huart2,str,1);
 8000d14:	2201      	movs	r2, #1
 8000d16:	4959      	ldr	r1, [pc, #356]	; (8000e7c <main+0x1cc>)
 8000d18:	4857      	ldr	r0, [pc, #348]	; (8000e78 <main+0x1c8>)
 8000d1a:	f002 fcc6 	bl	80036aa <HAL_UART_Receive_IT>

  HAL_Delay(2000);
 8000d1e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000d22:	f001 f92b 	bl	8001f7c <HAL_Delay>
  ready=true;
 8000d26:	4b56      	ldr	r3, [pc, #344]	; (8000e80 <main+0x1d0>)
 8000d28:	2201      	movs	r2, #1
 8000d2a:	701a      	strb	r2, [r3, #0]

  timeRepeat = HAL_GetTick();
 8000d2c:	f001 f91c 	bl	8001f68 <HAL_GetTick>
 8000d30:	4603      	mov	r3, r0
 8000d32:	461a      	mov	r2, r3
 8000d34:	4b53      	ldr	r3, [pc, #332]	; (8000e84 <main+0x1d4>)
 8000d36:	601a      	str	r2, [r3, #0]
  int repeetTime = 0;
 8000d38:	2300      	movs	r3, #0
 8000d3a:	607b      	str	r3, [r7, #4]
  HAL_UART_Receive_IT(&huart1,str2,1);
 8000d3c:	2201      	movs	r2, #1
 8000d3e:	4952      	ldr	r1, [pc, #328]	; (8000e88 <main+0x1d8>)
 8000d40:	484b      	ldr	r0, [pc, #300]	; (8000e70 <main+0x1c0>)
 8000d42:	f002 fcb2 	bl	80036aa <HAL_UART_Receive_IT>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 1);
 8000d46:	2201      	movs	r2, #1
 8000d48:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d4c:	484f      	ldr	r0, [pc, #316]	; (8000e8c <main+0x1dc>)
 8000d4e:	f001 fe65 	bl	8002a1c <HAL_GPIO_WritePin>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if (ready) {
 8000d52:	4b4b      	ldr	r3, [pc, #300]	; (8000e80 <main+0x1d0>)
 8000d54:	781b      	ldrb	r3, [r3, #0]
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d019      	beq.n	8000d8e <main+0xde>
		  txATcommand();
 8000d5a:	f7ff fa47 	bl	80001ec <txATcommand>
		  if ((HAL_GetTick()-timeRepeat)>(2*60*1000)) {
 8000d5e:	f001 f903 	bl	8001f68 <HAL_GetTick>
 8000d62:	4603      	mov	r3, r0
 8000d64:	4a47      	ldr	r2, [pc, #284]	; (8000e84 <main+0x1d4>)
 8000d66:	6812      	ldr	r2, [r2, #0]
 8000d68:	1a9b      	subs	r3, r3, r2
 8000d6a:	4a49      	ldr	r2, [pc, #292]	; (8000e90 <main+0x1e0>)
 8000d6c:	4293      	cmp	r3, r2
 8000d6e:	d90b      	bls.n	8000d88 <main+0xd8>
			  step = 0;
 8000d70:	4b48      	ldr	r3, [pc, #288]	; (8000e94 <main+0x1e4>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	601a      	str	r2, [r3, #0]
			  timeRepeat = HAL_GetTick();
 8000d76:	f001 f8f7 	bl	8001f68 <HAL_GetTick>
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	461a      	mov	r2, r3
 8000d7e:	4b41      	ldr	r3, [pc, #260]	; (8000e84 <main+0x1d4>)
 8000d80:	601a      	str	r2, [r3, #0]
			  txATcommand();
 8000d82:	f7ff fa33 	bl	80001ec <txATcommand>
 8000d86:	e002      	b.n	8000d8e <main+0xde>
		  }
		  else repeetTime++;
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	3301      	adds	r3, #1
 8000d8c:	607b      	str	r3, [r7, #4]
	  }
	  if (strstr(modemString2, "\r\n")) {
 8000d8e:	4942      	ldr	r1, [pc, #264]	; (8000e98 <main+0x1e8>)
 8000d90:	4842      	ldr	r0, [pc, #264]	; (8000e9c <main+0x1ec>)
 8000d92:	f003 fcf4 	bl	800477e <strstr>
 8000d96:	4603      	mov	r3, r0
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d045      	beq.n	8000e28 <main+0x178>
		if (!strstr(modemString2, "OK")) {
 8000d9c:	4940      	ldr	r1, [pc, #256]	; (8000ea0 <main+0x1f0>)
 8000d9e:	483f      	ldr	r0, [pc, #252]	; (8000e9c <main+0x1ec>)
 8000da0:	f003 fced 	bl	800477e <strstr>
 8000da4:	4603      	mov	r3, r0
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d11f      	bne.n	8000dea <main+0x13a>
			SSD1306_Fill(SSD1306_COLOR_BLACK);
 8000daa:	2000      	movs	r0, #0
 8000dac:	f000 faee 	bl	800138c <SSD1306_Fill>
			SSD1306_GotoXY(0, 10);
 8000db0:	210a      	movs	r1, #10
 8000db2:	2000      	movs	r0, #0
 8000db4:	f000 fb60 	bl	8001478 <SSD1306_GotoXY>
			SSD1306_Puts(oldModem3, &Font_7x10, SSD1306_COLOR_WHITE);
 8000db8:	2201      	movs	r2, #1
 8000dba:	492a      	ldr	r1, [pc, #168]	; (8000e64 <main+0x1b4>)
 8000dbc:	4839      	ldr	r0, [pc, #228]	; (8000ea4 <main+0x1f4>)
 8000dbe:	f000 fbf1 	bl	80015a4 <SSD1306_Puts>
			SSD1306_GotoXY(0, 25);
 8000dc2:	2119      	movs	r1, #25
 8000dc4:	2000      	movs	r0, #0
 8000dc6:	f000 fb57 	bl	8001478 <SSD1306_GotoXY>
			SSD1306_Puts(oldModem2, &Font_7x10, SSD1306_COLOR_WHITE);
 8000dca:	2201      	movs	r2, #1
 8000dcc:	4925      	ldr	r1, [pc, #148]	; (8000e64 <main+0x1b4>)
 8000dce:	4836      	ldr	r0, [pc, #216]	; (8000ea8 <main+0x1f8>)
 8000dd0:	f000 fbe8 	bl	80015a4 <SSD1306_Puts>
			SSD1306_GotoXY(0, 40);
 8000dd4:	2128      	movs	r1, #40	; 0x28
 8000dd6:	2000      	movs	r0, #0
 8000dd8:	f000 fb4e 	bl	8001478 <SSD1306_GotoXY>
			SSD1306_Puts(oldModem, &Font_7x10, SSD1306_COLOR_WHITE);
 8000ddc:	2201      	movs	r2, #1
 8000dde:	4921      	ldr	r1, [pc, #132]	; (8000e64 <main+0x1b4>)
 8000de0:	4832      	ldr	r0, [pc, #200]	; (8000eac <main+0x1fc>)
 8000de2:	f000 fbdf 	bl	80015a4 <SSD1306_Puts>
			SSD1306_UpdateScreen();
 8000de6:	f000 fa9d 	bl	8001324 <SSD1306_UpdateScreen>
		}
		if (rxNew) {
 8000dea:	4b31      	ldr	r3, [pc, #196]	; (8000eb0 <main+0x200>)
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d01a      	beq.n	8000e28 <main+0x178>
			if (strstr(oldModem, "+CMTI")) {
 8000df2:	4930      	ldr	r1, [pc, #192]	; (8000eb4 <main+0x204>)
 8000df4:	482d      	ldr	r0, [pc, #180]	; (8000eac <main+0x1fc>)
 8000df6:	f003 fcc2 	bl	800477e <strstr>
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d005      	beq.n	8000e0c <main+0x15c>
				sprintf(unreedSms, "%s", oldModem);
 8000e00:	4a2a      	ldr	r2, [pc, #168]	; (8000eac <main+0x1fc>)
 8000e02:	492d      	ldr	r1, [pc, #180]	; (8000eb8 <main+0x208>)
 8000e04:	482d      	ldr	r0, [pc, #180]	; (8000ebc <main+0x20c>)
 8000e06:	f003 fc85 	bl	8004714 <siprintf>
 8000e0a:	e00a      	b.n	8000e22 <main+0x172>
			}
			else if ((step==1))
 8000e0c:	4b21      	ldr	r3, [pc, #132]	; (8000e94 <main+0x1e4>)
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	2b01      	cmp	r3, #1
 8000e12:	d103      	bne.n	8000e1c <main+0x16c>
				rxATcommand(oldModem3);
 8000e14:	4823      	ldr	r0, [pc, #140]	; (8000ea4 <main+0x1f4>)
 8000e16:	f7ff fb37 	bl	8000488 <rxATcommand>
 8000e1a:	e002      	b.n	8000e22 <main+0x172>
			else rxATcommand(oldModem);
 8000e1c:	4823      	ldr	r0, [pc, #140]	; (8000eac <main+0x1fc>)
 8000e1e:	f7ff fb33 	bl	8000488 <rxATcommand>
			rxNew = false;
 8000e22:	4b23      	ldr	r3, [pc, #140]	; (8000eb0 <main+0x200>)
 8000e24:	2200      	movs	r2, #0
 8000e26:	601a      	str	r2, [r3, #0]
		}
	  }
	 if (step>=12) HAL_Delay(1000);
 8000e28:	4b1a      	ldr	r3, [pc, #104]	; (8000e94 <main+0x1e4>)
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	2b0b      	cmp	r3, #11
 8000e2e:	dd03      	ble.n	8000e38 <main+0x188>
 8000e30:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000e34:	f001 f8a2 	bl	8001f7c <HAL_Delay>
	 if ((unreedSms[0]!=0)&&(step==12)){
 8000e38:	4b20      	ldr	r3, [pc, #128]	; (8000ebc <main+0x20c>)
 8000e3a:	781b      	ldrb	r3, [r3, #0]
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d00c      	beq.n	8000e5a <main+0x1aa>
 8000e40:	4b14      	ldr	r3, [pc, #80]	; (8000e94 <main+0x1e4>)
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	2b0c      	cmp	r3, #12
 8000e46:	d108      	bne.n	8000e5a <main+0x1aa>
		 rxATcommand(unreedSms);
 8000e48:	481c      	ldr	r0, [pc, #112]	; (8000ebc <main+0x20c>)
 8000e4a:	f7ff fb1d 	bl	8000488 <rxATcommand>
		 memset(unreedSms, 0, 15);
 8000e4e:	220f      	movs	r2, #15
 8000e50:	2100      	movs	r1, #0
 8000e52:	481a      	ldr	r0, [pc, #104]	; (8000ebc <main+0x20c>)
 8000e54:	f003 fb36 	bl	80044c4 <memset>
 8000e58:	e002      	b.n	8000e60 <main+0x1b0>
	 }
	 else HAL_Delay(250);
 8000e5a:	20fa      	movs	r0, #250	; 0xfa
 8000e5c:	f001 f88e 	bl	8001f7c <HAL_Delay>
	  if (ready) {
 8000e60:	e777      	b.n	8000d52 <main+0xa2>
 8000e62:	bf00      	nop
 8000e64:	20000000 	.word	0x20000000
 8000e68:	0800505c 	.word	0x0800505c
 8000e6c:	08005070 	.word	0x08005070
 8000e70:	20000100 	.word	0x20000100
 8000e74:	08005078 	.word	0x08005078
 8000e78:	20000148 	.word	0x20000148
 8000e7c:	20000008 	.word	0x20000008
 8000e80:	200007b4 	.word	0x200007b4
 8000e84:	200000a8 	.word	0x200000a8
 8000e88:	2000000c 	.word	0x2000000c
 8000e8c:	40011000 	.word	0x40011000
 8000e90:	0001d4c0 	.word	0x0001d4c0
 8000e94:	200007ac 	.word	0x200007ac
 8000e98:	08004e80 	.word	0x08004e80
 8000e9c:	200002a0 	.word	0x200002a0
 8000ea0:	0800500c 	.word	0x0800500c
 8000ea4:	20000698 	.word	0x20000698
 8000ea8:	2000059c 	.word	0x2000059c
 8000eac:	200004a0 	.word	0x200004a0
 8000eb0:	200007b0 	.word	0x200007b0
 8000eb4:	08005084 	.word	0x08005084
 8000eb8:	0800508c 	.word	0x0800508c
 8000ebc:	2000079c 	.word	0x2000079c

08000ec0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b090      	sub	sp, #64	; 0x40
 8000ec4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ec6:	f107 0318 	add.w	r3, r7, #24
 8000eca:	2228      	movs	r2, #40	; 0x28
 8000ecc:	2100      	movs	r1, #0
 8000ece:	4618      	mov	r0, r3
 8000ed0:	f003 faf8 	bl	80044c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ed4:	1d3b      	adds	r3, r7, #4
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	601a      	str	r2, [r3, #0]
 8000eda:	605a      	str	r2, [r3, #4]
 8000edc:	609a      	str	r2, [r3, #8]
 8000ede:	60da      	str	r2, [r3, #12]
 8000ee0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000ee2:	2301      	movs	r3, #1
 8000ee4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000ee6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000eea:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000eec:	2300      	movs	r3, #0
 8000eee:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ef0:	2301      	movs	r3, #1
 8000ef2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ef4:	2302      	movs	r3, #2
 8000ef6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000ef8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000efc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000efe:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000f02:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f04:	f107 0318 	add.w	r3, r7, #24
 8000f08:	4618      	mov	r0, r3
 8000f0a:	f001 fee3 	bl	8002cd4 <HAL_RCC_OscConfig>
 8000f0e:	4603      	mov	r3, r0
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d001      	beq.n	8000f18 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000f14:	f000 f92a 	bl	800116c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f18:	230f      	movs	r3, #15
 8000f1a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f1c:	2302      	movs	r3, #2
 8000f1e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f20:	2300      	movs	r3, #0
 8000f22:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000f24:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f28:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000f2e:	1d3b      	adds	r3, r7, #4
 8000f30:	2102      	movs	r1, #2
 8000f32:	4618      	mov	r0, r3
 8000f34:	f002 f950 	bl	80031d8 <HAL_RCC_ClockConfig>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d001      	beq.n	8000f42 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000f3e:	f000 f915 	bl	800116c <Error_Handler>
  }
}
 8000f42:	bf00      	nop
 8000f44:	3740      	adds	r7, #64	; 0x40
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bd80      	pop	{r7, pc}
	...

08000f4c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000f50:	4b12      	ldr	r3, [pc, #72]	; (8000f9c <MX_I2C1_Init+0x50>)
 8000f52:	4a13      	ldr	r2, [pc, #76]	; (8000fa0 <MX_I2C1_Init+0x54>)
 8000f54:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000f56:	4b11      	ldr	r3, [pc, #68]	; (8000f9c <MX_I2C1_Init+0x50>)
 8000f58:	4a12      	ldr	r2, [pc, #72]	; (8000fa4 <MX_I2C1_Init+0x58>)
 8000f5a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000f5c:	4b0f      	ldr	r3, [pc, #60]	; (8000f9c <MX_I2C1_Init+0x50>)
 8000f5e:	2200      	movs	r2, #0
 8000f60:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000f62:	4b0e      	ldr	r3, [pc, #56]	; (8000f9c <MX_I2C1_Init+0x50>)
 8000f64:	2200      	movs	r2, #0
 8000f66:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000f68:	4b0c      	ldr	r3, [pc, #48]	; (8000f9c <MX_I2C1_Init+0x50>)
 8000f6a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000f6e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000f70:	4b0a      	ldr	r3, [pc, #40]	; (8000f9c <MX_I2C1_Init+0x50>)
 8000f72:	2200      	movs	r2, #0
 8000f74:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000f76:	4b09      	ldr	r3, [pc, #36]	; (8000f9c <MX_I2C1_Init+0x50>)
 8000f78:	2200      	movs	r2, #0
 8000f7a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000f7c:	4b07      	ldr	r3, [pc, #28]	; (8000f9c <MX_I2C1_Init+0x50>)
 8000f7e:	2200      	movs	r2, #0
 8000f80:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000f82:	4b06      	ldr	r3, [pc, #24]	; (8000f9c <MX_I2C1_Init+0x50>)
 8000f84:	2200      	movs	r2, #0
 8000f86:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000f88:	4804      	ldr	r0, [pc, #16]	; (8000f9c <MX_I2C1_Init+0x50>)
 8000f8a:	f001 fd5f 	bl	8002a4c <HAL_I2C_Init>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d001      	beq.n	8000f98 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000f94:	f000 f8ea 	bl	800116c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000f98:	bf00      	nop
 8000f9a:	bd80      	pop	{r7, pc}
 8000f9c:	200000ac 	.word	0x200000ac
 8000fa0:	40005400 	.word	0x40005400
 8000fa4:	000186a0 	.word	0x000186a0

08000fa8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000fac:	4b11      	ldr	r3, [pc, #68]	; (8000ff4 <MX_USART1_UART_Init+0x4c>)
 8000fae:	4a12      	ldr	r2, [pc, #72]	; (8000ff8 <MX_USART1_UART_Init+0x50>)
 8000fb0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000fb2:	4b10      	ldr	r3, [pc, #64]	; (8000ff4 <MX_USART1_UART_Init+0x4c>)
 8000fb4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000fb8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000fba:	4b0e      	ldr	r3, [pc, #56]	; (8000ff4 <MX_USART1_UART_Init+0x4c>)
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000fc0:	4b0c      	ldr	r3, [pc, #48]	; (8000ff4 <MX_USART1_UART_Init+0x4c>)
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000fc6:	4b0b      	ldr	r3, [pc, #44]	; (8000ff4 <MX_USART1_UART_Init+0x4c>)
 8000fc8:	2200      	movs	r2, #0
 8000fca:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000fcc:	4b09      	ldr	r3, [pc, #36]	; (8000ff4 <MX_USART1_UART_Init+0x4c>)
 8000fce:	220c      	movs	r2, #12
 8000fd0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000fd2:	4b08      	ldr	r3, [pc, #32]	; (8000ff4 <MX_USART1_UART_Init+0x4c>)
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000fd8:	4b06      	ldr	r3, [pc, #24]	; (8000ff4 <MX_USART1_UART_Init+0x4c>)
 8000fda:	2200      	movs	r2, #0
 8000fdc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000fde:	4805      	ldr	r0, [pc, #20]	; (8000ff4 <MX_USART1_UART_Init+0x4c>)
 8000fe0:	f002 fa88 	bl	80034f4 <HAL_UART_Init>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d001      	beq.n	8000fee <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000fea:	f000 f8bf 	bl	800116c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000fee:	bf00      	nop
 8000ff0:	bd80      	pop	{r7, pc}
 8000ff2:	bf00      	nop
 8000ff4:	20000100 	.word	0x20000100
 8000ff8:	40013800 	.word	0x40013800

08000ffc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001000:	4b11      	ldr	r3, [pc, #68]	; (8001048 <MX_USART2_UART_Init+0x4c>)
 8001002:	4a12      	ldr	r2, [pc, #72]	; (800104c <MX_USART2_UART_Init+0x50>)
 8001004:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8001006:	4b10      	ldr	r3, [pc, #64]	; (8001048 <MX_USART2_UART_Init+0x4c>)
 8001008:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800100c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800100e:	4b0e      	ldr	r3, [pc, #56]	; (8001048 <MX_USART2_UART_Init+0x4c>)
 8001010:	2200      	movs	r2, #0
 8001012:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001014:	4b0c      	ldr	r3, [pc, #48]	; (8001048 <MX_USART2_UART_Init+0x4c>)
 8001016:	2200      	movs	r2, #0
 8001018:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800101a:	4b0b      	ldr	r3, [pc, #44]	; (8001048 <MX_USART2_UART_Init+0x4c>)
 800101c:	2200      	movs	r2, #0
 800101e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001020:	4b09      	ldr	r3, [pc, #36]	; (8001048 <MX_USART2_UART_Init+0x4c>)
 8001022:	220c      	movs	r2, #12
 8001024:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001026:	4b08      	ldr	r3, [pc, #32]	; (8001048 <MX_USART2_UART_Init+0x4c>)
 8001028:	2200      	movs	r2, #0
 800102a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800102c:	4b06      	ldr	r3, [pc, #24]	; (8001048 <MX_USART2_UART_Init+0x4c>)
 800102e:	2200      	movs	r2, #0
 8001030:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001032:	4805      	ldr	r0, [pc, #20]	; (8001048 <MX_USART2_UART_Init+0x4c>)
 8001034:	f002 fa5e 	bl	80034f4 <HAL_UART_Init>
 8001038:	4603      	mov	r3, r0
 800103a:	2b00      	cmp	r3, #0
 800103c:	d001      	beq.n	8001042 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800103e:	f000 f895 	bl	800116c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001042:	bf00      	nop
 8001044:	bd80      	pop	{r7, pc}
 8001046:	bf00      	nop
 8001048:	20000148 	.word	0x20000148
 800104c:	40004400 	.word	0x40004400

08001050 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b082      	sub	sp, #8
 8001054:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001056:	4b18      	ldr	r3, [pc, #96]	; (80010b8 <MX_DMA_Init+0x68>)
 8001058:	695b      	ldr	r3, [r3, #20]
 800105a:	4a17      	ldr	r2, [pc, #92]	; (80010b8 <MX_DMA_Init+0x68>)
 800105c:	f043 0301 	orr.w	r3, r3, #1
 8001060:	6153      	str	r3, [r2, #20]
 8001062:	4b15      	ldr	r3, [pc, #84]	; (80010b8 <MX_DMA_Init+0x68>)
 8001064:	695b      	ldr	r3, [r3, #20]
 8001066:	f003 0301 	and.w	r3, r3, #1
 800106a:	607b      	str	r3, [r7, #4]
 800106c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 800106e:	2200      	movs	r2, #0
 8001070:	2100      	movs	r1, #0
 8001072:	200e      	movs	r0, #14
 8001074:	f001 f87d 	bl	8002172 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8001078:	200e      	movs	r0, #14
 800107a:	f001 f896 	bl	80021aa <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 800107e:	2200      	movs	r2, #0
 8001080:	2100      	movs	r1, #0
 8001082:	200f      	movs	r0, #15
 8001084:	f001 f875 	bl	8002172 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8001088:	200f      	movs	r0, #15
 800108a:	f001 f88e 	bl	80021aa <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 800108e:	2200      	movs	r2, #0
 8001090:	2100      	movs	r1, #0
 8001092:	2010      	movs	r0, #16
 8001094:	f001 f86d 	bl	8002172 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8001098:	2010      	movs	r0, #16
 800109a:	f001 f886 	bl	80021aa <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 800109e:	2200      	movs	r2, #0
 80010a0:	2100      	movs	r1, #0
 80010a2:	2011      	movs	r0, #17
 80010a4:	f001 f865 	bl	8002172 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 80010a8:	2011      	movs	r0, #17
 80010aa:	f001 f87e 	bl	80021aa <HAL_NVIC_EnableIRQ>

}
 80010ae:	bf00      	nop
 80010b0:	3708      	adds	r7, #8
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bd80      	pop	{r7, pc}
 80010b6:	bf00      	nop
 80010b8:	40021000 	.word	0x40021000

080010bc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b088      	sub	sp, #32
 80010c0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010c2:	f107 0310 	add.w	r3, r7, #16
 80010c6:	2200      	movs	r2, #0
 80010c8:	601a      	str	r2, [r3, #0]
 80010ca:	605a      	str	r2, [r3, #4]
 80010cc:	609a      	str	r2, [r3, #8]
 80010ce:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010d0:	4b24      	ldr	r3, [pc, #144]	; (8001164 <MX_GPIO_Init+0xa8>)
 80010d2:	699b      	ldr	r3, [r3, #24]
 80010d4:	4a23      	ldr	r2, [pc, #140]	; (8001164 <MX_GPIO_Init+0xa8>)
 80010d6:	f043 0310 	orr.w	r3, r3, #16
 80010da:	6193      	str	r3, [r2, #24]
 80010dc:	4b21      	ldr	r3, [pc, #132]	; (8001164 <MX_GPIO_Init+0xa8>)
 80010de:	699b      	ldr	r3, [r3, #24]
 80010e0:	f003 0310 	and.w	r3, r3, #16
 80010e4:	60fb      	str	r3, [r7, #12]
 80010e6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80010e8:	4b1e      	ldr	r3, [pc, #120]	; (8001164 <MX_GPIO_Init+0xa8>)
 80010ea:	699b      	ldr	r3, [r3, #24]
 80010ec:	4a1d      	ldr	r2, [pc, #116]	; (8001164 <MX_GPIO_Init+0xa8>)
 80010ee:	f043 0320 	orr.w	r3, r3, #32
 80010f2:	6193      	str	r3, [r2, #24]
 80010f4:	4b1b      	ldr	r3, [pc, #108]	; (8001164 <MX_GPIO_Init+0xa8>)
 80010f6:	699b      	ldr	r3, [r3, #24]
 80010f8:	f003 0320 	and.w	r3, r3, #32
 80010fc:	60bb      	str	r3, [r7, #8]
 80010fe:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001100:	4b18      	ldr	r3, [pc, #96]	; (8001164 <MX_GPIO_Init+0xa8>)
 8001102:	699b      	ldr	r3, [r3, #24]
 8001104:	4a17      	ldr	r2, [pc, #92]	; (8001164 <MX_GPIO_Init+0xa8>)
 8001106:	f043 0304 	orr.w	r3, r3, #4
 800110a:	6193      	str	r3, [r2, #24]
 800110c:	4b15      	ldr	r3, [pc, #84]	; (8001164 <MX_GPIO_Init+0xa8>)
 800110e:	699b      	ldr	r3, [r3, #24]
 8001110:	f003 0304 	and.w	r3, r3, #4
 8001114:	607b      	str	r3, [r7, #4]
 8001116:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001118:	4b12      	ldr	r3, [pc, #72]	; (8001164 <MX_GPIO_Init+0xa8>)
 800111a:	699b      	ldr	r3, [r3, #24]
 800111c:	4a11      	ldr	r2, [pc, #68]	; (8001164 <MX_GPIO_Init+0xa8>)
 800111e:	f043 0308 	orr.w	r3, r3, #8
 8001122:	6193      	str	r3, [r2, #24]
 8001124:	4b0f      	ldr	r3, [pc, #60]	; (8001164 <MX_GPIO_Init+0xa8>)
 8001126:	699b      	ldr	r3, [r3, #24]
 8001128:	f003 0308 	and.w	r3, r3, #8
 800112c:	603b      	str	r3, [r7, #0]
 800112e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001130:	2200      	movs	r2, #0
 8001132:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001136:	480c      	ldr	r0, [pc, #48]	; (8001168 <MX_GPIO_Init+0xac>)
 8001138:	f001 fc70 	bl	8002a1c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800113c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001140:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001142:	2301      	movs	r3, #1
 8001144:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001146:	2302      	movs	r3, #2
 8001148:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800114a:	2303      	movs	r3, #3
 800114c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800114e:	f107 0310 	add.w	r3, r7, #16
 8001152:	4619      	mov	r1, r3
 8001154:	4804      	ldr	r0, [pc, #16]	; (8001168 <MX_GPIO_Init+0xac>)
 8001156:	f001 fae5 	bl	8002724 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800115a:	bf00      	nop
 800115c:	3720      	adds	r7, #32
 800115e:	46bd      	mov	sp, r7
 8001160:	bd80      	pop	{r7, pc}
 8001162:	bf00      	nop
 8001164:	40021000 	.word	0x40021000
 8001168:	40011000 	.word	0x40011000

0800116c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800116c:	b480      	push	{r7}
 800116e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001170:	b672      	cpsid	i
}
 8001172:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001174:	e7fe      	b.n	8001174 <Error_Handler+0x8>
	...

08001178 <SSD1306_Init>:
} SSD1306_t;

/* Private variable */
static SSD1306_t SSD1306;

uint8_t SSD1306_Init(void) {
 8001178:	b580      	push	{r7, lr}
 800117a:	b082      	sub	sp, #8
 800117c:	af00      	add	r7, sp, #0

	/* Init I2C */
	//ssd1306_I2C_Init();
	
	/* Check if LCD connected to I2C */
	if (!ssd1306_I2C_IsDeviceConnected(SSD1306_I2C, SSD1306_I2C_ADDR)) {
 800117e:	2178      	movs	r1, #120	; 0x78
 8001180:	4866      	ldr	r0, [pc, #408]	; (800131c <SSD1306_Init+0x1a4>)
 8001182:	f000 fc17 	bl	80019b4 <ssd1306_I2C_IsDeviceConnected>
 8001186:	4603      	mov	r3, r0
 8001188:	2b00      	cmp	r3, #0
 800118a:	d101      	bne.n	8001190 <SSD1306_Init+0x18>
		/* Return false */
		return 0;
 800118c:	2300      	movs	r3, #0
 800118e:	e0c0      	b.n	8001312 <SSD1306_Init+0x19a>
	}
	
	/* A little delay */
	uint32_t p = 2500;
 8001190:	f640 13c4 	movw	r3, #2500	; 0x9c4
 8001194:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001196:	e002      	b.n	800119e <SSD1306_Init+0x26>
		p--;
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	3b01      	subs	r3, #1
 800119c:	607b      	str	r3, [r7, #4]
	while(p>0)
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d1f9      	bne.n	8001198 <SSD1306_Init+0x20>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 80011a4:	23ae      	movs	r3, #174	; 0xae
 80011a6:	2200      	movs	r2, #0
 80011a8:	2178      	movs	r1, #120	; 0x78
 80011aa:	485c      	ldr	r0, [pc, #368]	; (800131c <SSD1306_Init+0x1a4>)
 80011ac:	f000 fbb0 	bl	8001910 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 80011b0:	2320      	movs	r3, #32
 80011b2:	2200      	movs	r2, #0
 80011b4:	2178      	movs	r1, #120	; 0x78
 80011b6:	4859      	ldr	r0, [pc, #356]	; (800131c <SSD1306_Init+0x1a4>)
 80011b8:	f000 fbaa 	bl	8001910 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 80011bc:	2310      	movs	r3, #16
 80011be:	2200      	movs	r2, #0
 80011c0:	2178      	movs	r1, #120	; 0x78
 80011c2:	4856      	ldr	r0, [pc, #344]	; (800131c <SSD1306_Init+0x1a4>)
 80011c4:	f000 fba4 	bl	8001910 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 80011c8:	23b0      	movs	r3, #176	; 0xb0
 80011ca:	2200      	movs	r2, #0
 80011cc:	2178      	movs	r1, #120	; 0x78
 80011ce:	4853      	ldr	r0, [pc, #332]	; (800131c <SSD1306_Init+0x1a4>)
 80011d0:	f000 fb9e 	bl	8001910 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 80011d4:	23c8      	movs	r3, #200	; 0xc8
 80011d6:	2200      	movs	r2, #0
 80011d8:	2178      	movs	r1, #120	; 0x78
 80011da:	4850      	ldr	r0, [pc, #320]	; (800131c <SSD1306_Init+0x1a4>)
 80011dc:	f000 fb98 	bl	8001910 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 80011e0:	2300      	movs	r3, #0
 80011e2:	2200      	movs	r2, #0
 80011e4:	2178      	movs	r1, #120	; 0x78
 80011e6:	484d      	ldr	r0, [pc, #308]	; (800131c <SSD1306_Init+0x1a4>)
 80011e8:	f000 fb92 	bl	8001910 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 80011ec:	2310      	movs	r3, #16
 80011ee:	2200      	movs	r2, #0
 80011f0:	2178      	movs	r1, #120	; 0x78
 80011f2:	484a      	ldr	r0, [pc, #296]	; (800131c <SSD1306_Init+0x1a4>)
 80011f4:	f000 fb8c 	bl	8001910 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 80011f8:	2340      	movs	r3, #64	; 0x40
 80011fa:	2200      	movs	r2, #0
 80011fc:	2178      	movs	r1, #120	; 0x78
 80011fe:	4847      	ldr	r0, [pc, #284]	; (800131c <SSD1306_Init+0x1a4>)
 8001200:	f000 fb86 	bl	8001910 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8001204:	2381      	movs	r3, #129	; 0x81
 8001206:	2200      	movs	r2, #0
 8001208:	2178      	movs	r1, #120	; 0x78
 800120a:	4844      	ldr	r0, [pc, #272]	; (800131c <SSD1306_Init+0x1a4>)
 800120c:	f000 fb80 	bl	8001910 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8001210:	23ff      	movs	r3, #255	; 0xff
 8001212:	2200      	movs	r2, #0
 8001214:	2178      	movs	r1, #120	; 0x78
 8001216:	4841      	ldr	r0, [pc, #260]	; (800131c <SSD1306_Init+0x1a4>)
 8001218:	f000 fb7a 	bl	8001910 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 800121c:	23a1      	movs	r3, #161	; 0xa1
 800121e:	2200      	movs	r2, #0
 8001220:	2178      	movs	r1, #120	; 0x78
 8001222:	483e      	ldr	r0, [pc, #248]	; (800131c <SSD1306_Init+0x1a4>)
 8001224:	f000 fb74 	bl	8001910 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8001228:	23a6      	movs	r3, #166	; 0xa6
 800122a:	2200      	movs	r2, #0
 800122c:	2178      	movs	r1, #120	; 0x78
 800122e:	483b      	ldr	r0, [pc, #236]	; (800131c <SSD1306_Init+0x1a4>)
 8001230:	f000 fb6e 	bl	8001910 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 8001234:	23a8      	movs	r3, #168	; 0xa8
 8001236:	2200      	movs	r2, #0
 8001238:	2178      	movs	r1, #120	; 0x78
 800123a:	4838      	ldr	r0, [pc, #224]	; (800131c <SSD1306_Init+0x1a4>)
 800123c:	f000 fb68 	bl	8001910 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8001240:	233f      	movs	r3, #63	; 0x3f
 8001242:	2200      	movs	r2, #0
 8001244:	2178      	movs	r1, #120	; 0x78
 8001246:	4835      	ldr	r0, [pc, #212]	; (800131c <SSD1306_Init+0x1a4>)
 8001248:	f000 fb62 	bl	8001910 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 800124c:	23a4      	movs	r3, #164	; 0xa4
 800124e:	2200      	movs	r2, #0
 8001250:	2178      	movs	r1, #120	; 0x78
 8001252:	4832      	ldr	r0, [pc, #200]	; (800131c <SSD1306_Init+0x1a4>)
 8001254:	f000 fb5c 	bl	8001910 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8001258:	23d3      	movs	r3, #211	; 0xd3
 800125a:	2200      	movs	r2, #0
 800125c:	2178      	movs	r1, #120	; 0x78
 800125e:	482f      	ldr	r0, [pc, #188]	; (800131c <SSD1306_Init+0x1a4>)
 8001260:	f000 fb56 	bl	8001910 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 8001264:	2300      	movs	r3, #0
 8001266:	2200      	movs	r2, #0
 8001268:	2178      	movs	r1, #120	; 0x78
 800126a:	482c      	ldr	r0, [pc, #176]	; (800131c <SSD1306_Init+0x1a4>)
 800126c:	f000 fb50 	bl	8001910 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8001270:	23d5      	movs	r3, #213	; 0xd5
 8001272:	2200      	movs	r2, #0
 8001274:	2178      	movs	r1, #120	; 0x78
 8001276:	4829      	ldr	r0, [pc, #164]	; (800131c <SSD1306_Init+0x1a4>)
 8001278:	f000 fb4a 	bl	8001910 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 800127c:	23f0      	movs	r3, #240	; 0xf0
 800127e:	2200      	movs	r2, #0
 8001280:	2178      	movs	r1, #120	; 0x78
 8001282:	4826      	ldr	r0, [pc, #152]	; (800131c <SSD1306_Init+0x1a4>)
 8001284:	f000 fb44 	bl	8001910 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8001288:	23d9      	movs	r3, #217	; 0xd9
 800128a:	2200      	movs	r2, #0
 800128c:	2178      	movs	r1, #120	; 0x78
 800128e:	4823      	ldr	r0, [pc, #140]	; (800131c <SSD1306_Init+0x1a4>)
 8001290:	f000 fb3e 	bl	8001910 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 8001294:	2322      	movs	r3, #34	; 0x22
 8001296:	2200      	movs	r2, #0
 8001298:	2178      	movs	r1, #120	; 0x78
 800129a:	4820      	ldr	r0, [pc, #128]	; (800131c <SSD1306_Init+0x1a4>)
 800129c:	f000 fb38 	bl	8001910 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 80012a0:	23da      	movs	r3, #218	; 0xda
 80012a2:	2200      	movs	r2, #0
 80012a4:	2178      	movs	r1, #120	; 0x78
 80012a6:	481d      	ldr	r0, [pc, #116]	; (800131c <SSD1306_Init+0x1a4>)
 80012a8:	f000 fb32 	bl	8001910 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 80012ac:	2312      	movs	r3, #18
 80012ae:	2200      	movs	r2, #0
 80012b0:	2178      	movs	r1, #120	; 0x78
 80012b2:	481a      	ldr	r0, [pc, #104]	; (800131c <SSD1306_Init+0x1a4>)
 80012b4:	f000 fb2c 	bl	8001910 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 80012b8:	23db      	movs	r3, #219	; 0xdb
 80012ba:	2200      	movs	r2, #0
 80012bc:	2178      	movs	r1, #120	; 0x78
 80012be:	4817      	ldr	r0, [pc, #92]	; (800131c <SSD1306_Init+0x1a4>)
 80012c0:	f000 fb26 	bl	8001910 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 80012c4:	2320      	movs	r3, #32
 80012c6:	2200      	movs	r2, #0
 80012c8:	2178      	movs	r1, #120	; 0x78
 80012ca:	4814      	ldr	r0, [pc, #80]	; (800131c <SSD1306_Init+0x1a4>)
 80012cc:	f000 fb20 	bl	8001910 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 80012d0:	238d      	movs	r3, #141	; 0x8d
 80012d2:	2200      	movs	r2, #0
 80012d4:	2178      	movs	r1, #120	; 0x78
 80012d6:	4811      	ldr	r0, [pc, #68]	; (800131c <SSD1306_Init+0x1a4>)
 80012d8:	f000 fb1a 	bl	8001910 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 80012dc:	2314      	movs	r3, #20
 80012de:	2200      	movs	r2, #0
 80012e0:	2178      	movs	r1, #120	; 0x78
 80012e2:	480e      	ldr	r0, [pc, #56]	; (800131c <SSD1306_Init+0x1a4>)
 80012e4:	f000 fb14 	bl	8001910 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 80012e8:	23af      	movs	r3, #175	; 0xaf
 80012ea:	2200      	movs	r2, #0
 80012ec:	2178      	movs	r1, #120	; 0x78
 80012ee:	480b      	ldr	r0, [pc, #44]	; (800131c <SSD1306_Init+0x1a4>)
 80012f0:	f000 fb0e 	bl	8001910 <ssd1306_I2C_Write>
	
	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 80012f4:	2000      	movs	r0, #0
 80012f6:	f000 f849 	bl	800138c <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen();
 80012fa:	f000 f813 	bl	8001324 <SSD1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 80012fe:	4b08      	ldr	r3, [pc, #32]	; (8001320 <SSD1306_Init+0x1a8>)
 8001300:	2200      	movs	r2, #0
 8001302:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8001304:	4b06      	ldr	r3, [pc, #24]	; (8001320 <SSD1306_Init+0x1a8>)
 8001306:	2200      	movs	r2, #0
 8001308:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 800130a:	4b05      	ldr	r3, [pc, #20]	; (8001320 <SSD1306_Init+0x1a8>)
 800130c:	2201      	movs	r2, #1
 800130e:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 8001310:	2301      	movs	r3, #1
}
 8001312:	4618      	mov	r0, r3
 8001314:	3708      	adds	r7, #8
 8001316:	46bd      	mov	sp, r7
 8001318:	bd80      	pop	{r7, pc}
 800131a:	bf00      	nop
 800131c:	40005400 	.word	0x40005400
 8001320:	20000bc4 	.word	0x20000bc4

08001324 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8001324:	b580      	push	{r7, lr}
 8001326:	b084      	sub	sp, #16
 8001328:	af02      	add	r7, sp, #8
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 800132a:	2300      	movs	r3, #0
 800132c:	71fb      	strb	r3, [r7, #7]
 800132e:	e021      	b.n	8001374 <SSD1306_UpdateScreen+0x50>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8001330:	79fb      	ldrb	r3, [r7, #7]
 8001332:	3b50      	subs	r3, #80	; 0x50
 8001334:	b2db      	uxtb	r3, r3
 8001336:	2200      	movs	r2, #0
 8001338:	2178      	movs	r1, #120	; 0x78
 800133a:	4812      	ldr	r0, [pc, #72]	; (8001384 <SSD1306_UpdateScreen+0x60>)
 800133c:	f000 fae8 	bl	8001910 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8001340:	2300      	movs	r3, #0
 8001342:	2200      	movs	r2, #0
 8001344:	2178      	movs	r1, #120	; 0x78
 8001346:	480f      	ldr	r0, [pc, #60]	; (8001384 <SSD1306_UpdateScreen+0x60>)
 8001348:	f000 fae2 	bl	8001910 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 800134c:	2310      	movs	r3, #16
 800134e:	2200      	movs	r2, #0
 8001350:	2178      	movs	r1, #120	; 0x78
 8001352:	480c      	ldr	r0, [pc, #48]	; (8001384 <SSD1306_UpdateScreen+0x60>)
 8001354:	f000 fadc 	bl	8001910 <ssd1306_I2C_Write>
		//HAL_UART_Transmit(&huart1, (uint8_t*) "I2C_Writ12\r\n", 12, 0xFFFF);
		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C, SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8001358:	79fb      	ldrb	r3, [r7, #7]
 800135a:	01db      	lsls	r3, r3, #7
 800135c:	4a0a      	ldr	r2, [pc, #40]	; (8001388 <SSD1306_UpdateScreen+0x64>)
 800135e:	4413      	add	r3, r2
 8001360:	2280      	movs	r2, #128	; 0x80
 8001362:	9200      	str	r2, [sp, #0]
 8001364:	2240      	movs	r2, #64	; 0x40
 8001366:	2178      	movs	r1, #120	; 0x78
 8001368:	4806      	ldr	r0, [pc, #24]	; (8001384 <SSD1306_UpdateScreen+0x60>)
 800136a:	f000 fa14 	bl	8001796 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 800136e:	79fb      	ldrb	r3, [r7, #7]
 8001370:	3301      	adds	r3, #1
 8001372:	71fb      	strb	r3, [r7, #7]
 8001374:	79fb      	ldrb	r3, [r7, #7]
 8001376:	2b07      	cmp	r3, #7
 8001378:	d9da      	bls.n	8001330 <SSD1306_UpdateScreen+0xc>
		//HAL_UART_Transmit(&huart1, (uint8_t*) "I2C_Writ13\r\n", 12, 0xFFFF);
	}
}
 800137a:	bf00      	nop
 800137c:	bf00      	nop
 800137e:	3708      	adds	r7, #8
 8001380:	46bd      	mov	sp, r7
 8001382:	bd80      	pop	{r7, pc}
 8001384:	40005400 	.word	0x40005400
 8001388:	200007c4 	.word	0x200007c4

0800138c <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 800138c:	b580      	push	{r7, lr}
 800138e:	b082      	sub	sp, #8
 8001390:	af00      	add	r7, sp, #0
 8001392:	4603      	mov	r3, r0
 8001394:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8001396:	79fb      	ldrb	r3, [r7, #7]
 8001398:	2b00      	cmp	r3, #0
 800139a:	d101      	bne.n	80013a0 <SSD1306_Fill+0x14>
 800139c:	2300      	movs	r3, #0
 800139e:	e000      	b.n	80013a2 <SSD1306_Fill+0x16>
 80013a0:	23ff      	movs	r3, #255	; 0xff
 80013a2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80013a6:	4619      	mov	r1, r3
 80013a8:	4803      	ldr	r0, [pc, #12]	; (80013b8 <SSD1306_Fill+0x2c>)
 80013aa:	f003 f88b 	bl	80044c4 <memset>
}
 80013ae:	bf00      	nop
 80013b0:	3708      	adds	r7, #8
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bd80      	pop	{r7, pc}
 80013b6:	bf00      	nop
 80013b8:	200007c4 	.word	0x200007c4

080013bc <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 80013bc:	b480      	push	{r7}
 80013be:	b083      	sub	sp, #12
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	4603      	mov	r3, r0
 80013c4:	80fb      	strh	r3, [r7, #6]
 80013c6:	460b      	mov	r3, r1
 80013c8:	80bb      	strh	r3, [r7, #4]
 80013ca:	4613      	mov	r3, r2
 80013cc:	70fb      	strb	r3, [r7, #3]
	if (
 80013ce:	88fb      	ldrh	r3, [r7, #6]
 80013d0:	2b7f      	cmp	r3, #127	; 0x7f
 80013d2:	d848      	bhi.n	8001466 <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 80013d4:	88bb      	ldrh	r3, [r7, #4]
 80013d6:	2b3f      	cmp	r3, #63	; 0x3f
 80013d8:	d845      	bhi.n	8001466 <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 80013da:	4b25      	ldr	r3, [pc, #148]	; (8001470 <SSD1306_DrawPixel+0xb4>)
 80013dc:	791b      	ldrb	r3, [r3, #4]
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d006      	beq.n	80013f0 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 80013e2:	78fb      	ldrb	r3, [r7, #3]
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	bf0c      	ite	eq
 80013e8:	2301      	moveq	r3, #1
 80013ea:	2300      	movne	r3, #0
 80013ec:	b2db      	uxtb	r3, r3
 80013ee:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 80013f0:	78fb      	ldrb	r3, [r7, #3]
 80013f2:	2b01      	cmp	r3, #1
 80013f4:	d11a      	bne.n	800142c <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80013f6:	88fa      	ldrh	r2, [r7, #6]
 80013f8:	88bb      	ldrh	r3, [r7, #4]
 80013fa:	08db      	lsrs	r3, r3, #3
 80013fc:	b298      	uxth	r0, r3
 80013fe:	4603      	mov	r3, r0
 8001400:	01db      	lsls	r3, r3, #7
 8001402:	4413      	add	r3, r2
 8001404:	4a1b      	ldr	r2, [pc, #108]	; (8001474 <SSD1306_DrawPixel+0xb8>)
 8001406:	5cd3      	ldrb	r3, [r2, r3]
 8001408:	b25a      	sxtb	r2, r3
 800140a:	88bb      	ldrh	r3, [r7, #4]
 800140c:	f003 0307 	and.w	r3, r3, #7
 8001410:	2101      	movs	r1, #1
 8001412:	fa01 f303 	lsl.w	r3, r1, r3
 8001416:	b25b      	sxtb	r3, r3
 8001418:	4313      	orrs	r3, r2
 800141a:	b259      	sxtb	r1, r3
 800141c:	88fa      	ldrh	r2, [r7, #6]
 800141e:	4603      	mov	r3, r0
 8001420:	01db      	lsls	r3, r3, #7
 8001422:	4413      	add	r3, r2
 8001424:	b2c9      	uxtb	r1, r1
 8001426:	4a13      	ldr	r2, [pc, #76]	; (8001474 <SSD1306_DrawPixel+0xb8>)
 8001428:	54d1      	strb	r1, [r2, r3]
 800142a:	e01d      	b.n	8001468 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 800142c:	88fa      	ldrh	r2, [r7, #6]
 800142e:	88bb      	ldrh	r3, [r7, #4]
 8001430:	08db      	lsrs	r3, r3, #3
 8001432:	b298      	uxth	r0, r3
 8001434:	4603      	mov	r3, r0
 8001436:	01db      	lsls	r3, r3, #7
 8001438:	4413      	add	r3, r2
 800143a:	4a0e      	ldr	r2, [pc, #56]	; (8001474 <SSD1306_DrawPixel+0xb8>)
 800143c:	5cd3      	ldrb	r3, [r2, r3]
 800143e:	b25a      	sxtb	r2, r3
 8001440:	88bb      	ldrh	r3, [r7, #4]
 8001442:	f003 0307 	and.w	r3, r3, #7
 8001446:	2101      	movs	r1, #1
 8001448:	fa01 f303 	lsl.w	r3, r1, r3
 800144c:	b25b      	sxtb	r3, r3
 800144e:	43db      	mvns	r3, r3
 8001450:	b25b      	sxtb	r3, r3
 8001452:	4013      	ands	r3, r2
 8001454:	b259      	sxtb	r1, r3
 8001456:	88fa      	ldrh	r2, [r7, #6]
 8001458:	4603      	mov	r3, r0
 800145a:	01db      	lsls	r3, r3, #7
 800145c:	4413      	add	r3, r2
 800145e:	b2c9      	uxtb	r1, r1
 8001460:	4a04      	ldr	r2, [pc, #16]	; (8001474 <SSD1306_DrawPixel+0xb8>)
 8001462:	54d1      	strb	r1, [r2, r3]
 8001464:	e000      	b.n	8001468 <SSD1306_DrawPixel+0xac>
		return;
 8001466:	bf00      	nop
	}
}
 8001468:	370c      	adds	r7, #12
 800146a:	46bd      	mov	sp, r7
 800146c:	bc80      	pop	{r7}
 800146e:	4770      	bx	lr
 8001470:	20000bc4 	.word	0x20000bc4
 8001474:	200007c4 	.word	0x200007c4

08001478 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8001478:	b480      	push	{r7}
 800147a:	b083      	sub	sp, #12
 800147c:	af00      	add	r7, sp, #0
 800147e:	4603      	mov	r3, r0
 8001480:	460a      	mov	r2, r1
 8001482:	80fb      	strh	r3, [r7, #6]
 8001484:	4613      	mov	r3, r2
 8001486:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8001488:	4a05      	ldr	r2, [pc, #20]	; (80014a0 <SSD1306_GotoXY+0x28>)
 800148a:	88fb      	ldrh	r3, [r7, #6]
 800148c:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 800148e:	4a04      	ldr	r2, [pc, #16]	; (80014a0 <SSD1306_GotoXY+0x28>)
 8001490:	88bb      	ldrh	r3, [r7, #4]
 8001492:	8053      	strh	r3, [r2, #2]
}
 8001494:	bf00      	nop
 8001496:	370c      	adds	r7, #12
 8001498:	46bd      	mov	sp, r7
 800149a:	bc80      	pop	{r7}
 800149c:	4770      	bx	lr
 800149e:	bf00      	nop
 80014a0:	20000bc4 	.word	0x20000bc4

080014a4 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b086      	sub	sp, #24
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	4603      	mov	r3, r0
 80014ac:	6039      	str	r1, [r7, #0]
 80014ae:	71fb      	strb	r3, [r7, #7]
 80014b0:	4613      	mov	r3, r2
 80014b2:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 80014b4:	4b3a      	ldr	r3, [pc, #232]	; (80015a0 <SSD1306_Putc+0xfc>)
 80014b6:	881b      	ldrh	r3, [r3, #0]
 80014b8:	461a      	mov	r2, r3
 80014ba:	683b      	ldr	r3, [r7, #0]
 80014bc:	781b      	ldrb	r3, [r3, #0]
 80014be:	4413      	add	r3, r2
	if (
 80014c0:	2b7f      	cmp	r3, #127	; 0x7f
 80014c2:	dc07      	bgt.n	80014d4 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 80014c4:	4b36      	ldr	r3, [pc, #216]	; (80015a0 <SSD1306_Putc+0xfc>)
 80014c6:	885b      	ldrh	r3, [r3, #2]
 80014c8:	461a      	mov	r2, r3
 80014ca:	683b      	ldr	r3, [r7, #0]
 80014cc:	785b      	ldrb	r3, [r3, #1]
 80014ce:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 80014d0:	2b3f      	cmp	r3, #63	; 0x3f
 80014d2:	dd01      	ble.n	80014d8 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 80014d4:	2300      	movs	r3, #0
 80014d6:	e05e      	b.n	8001596 <SSD1306_Putc+0xf2>
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 80014d8:	2300      	movs	r3, #0
 80014da:	617b      	str	r3, [r7, #20]
 80014dc:	e04b      	b.n	8001576 <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 80014de:	683b      	ldr	r3, [r7, #0]
 80014e0:	685a      	ldr	r2, [r3, #4]
 80014e2:	79fb      	ldrb	r3, [r7, #7]
 80014e4:	3b20      	subs	r3, #32
 80014e6:	6839      	ldr	r1, [r7, #0]
 80014e8:	7849      	ldrb	r1, [r1, #1]
 80014ea:	fb01 f303 	mul.w	r3, r1, r3
 80014ee:	4619      	mov	r1, r3
 80014f0:	697b      	ldr	r3, [r7, #20]
 80014f2:	440b      	add	r3, r1
 80014f4:	005b      	lsls	r3, r3, #1
 80014f6:	4413      	add	r3, r2
 80014f8:	881b      	ldrh	r3, [r3, #0]
 80014fa:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 80014fc:	2300      	movs	r3, #0
 80014fe:	613b      	str	r3, [r7, #16]
 8001500:	e030      	b.n	8001564 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 8001502:	68fa      	ldr	r2, [r7, #12]
 8001504:	693b      	ldr	r3, [r7, #16]
 8001506:	fa02 f303 	lsl.w	r3, r2, r3
 800150a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800150e:	2b00      	cmp	r3, #0
 8001510:	d010      	beq.n	8001534 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8001512:	4b23      	ldr	r3, [pc, #140]	; (80015a0 <SSD1306_Putc+0xfc>)
 8001514:	881a      	ldrh	r2, [r3, #0]
 8001516:	693b      	ldr	r3, [r7, #16]
 8001518:	b29b      	uxth	r3, r3
 800151a:	4413      	add	r3, r2
 800151c:	b298      	uxth	r0, r3
 800151e:	4b20      	ldr	r3, [pc, #128]	; (80015a0 <SSD1306_Putc+0xfc>)
 8001520:	885a      	ldrh	r2, [r3, #2]
 8001522:	697b      	ldr	r3, [r7, #20]
 8001524:	b29b      	uxth	r3, r3
 8001526:	4413      	add	r3, r2
 8001528:	b29b      	uxth	r3, r3
 800152a:	79ba      	ldrb	r2, [r7, #6]
 800152c:	4619      	mov	r1, r3
 800152e:	f7ff ff45 	bl	80013bc <SSD1306_DrawPixel>
 8001532:	e014      	b.n	800155e <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8001534:	4b1a      	ldr	r3, [pc, #104]	; (80015a0 <SSD1306_Putc+0xfc>)
 8001536:	881a      	ldrh	r2, [r3, #0]
 8001538:	693b      	ldr	r3, [r7, #16]
 800153a:	b29b      	uxth	r3, r3
 800153c:	4413      	add	r3, r2
 800153e:	b298      	uxth	r0, r3
 8001540:	4b17      	ldr	r3, [pc, #92]	; (80015a0 <SSD1306_Putc+0xfc>)
 8001542:	885a      	ldrh	r2, [r3, #2]
 8001544:	697b      	ldr	r3, [r7, #20]
 8001546:	b29b      	uxth	r3, r3
 8001548:	4413      	add	r3, r2
 800154a:	b299      	uxth	r1, r3
 800154c:	79bb      	ldrb	r3, [r7, #6]
 800154e:	2b00      	cmp	r3, #0
 8001550:	bf0c      	ite	eq
 8001552:	2301      	moveq	r3, #1
 8001554:	2300      	movne	r3, #0
 8001556:	b2db      	uxtb	r3, r3
 8001558:	461a      	mov	r2, r3
 800155a:	f7ff ff2f 	bl	80013bc <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 800155e:	693b      	ldr	r3, [r7, #16]
 8001560:	3301      	adds	r3, #1
 8001562:	613b      	str	r3, [r7, #16]
 8001564:	683b      	ldr	r3, [r7, #0]
 8001566:	781b      	ldrb	r3, [r3, #0]
 8001568:	461a      	mov	r2, r3
 800156a:	693b      	ldr	r3, [r7, #16]
 800156c:	4293      	cmp	r3, r2
 800156e:	d3c8      	bcc.n	8001502 <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8001570:	697b      	ldr	r3, [r7, #20]
 8001572:	3301      	adds	r3, #1
 8001574:	617b      	str	r3, [r7, #20]
 8001576:	683b      	ldr	r3, [r7, #0]
 8001578:	785b      	ldrb	r3, [r3, #1]
 800157a:	461a      	mov	r2, r3
 800157c:	697b      	ldr	r3, [r7, #20]
 800157e:	4293      	cmp	r3, r2
 8001580:	d3ad      	bcc.n	80014de <SSD1306_Putc+0x3a>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 8001582:	4b07      	ldr	r3, [pc, #28]	; (80015a0 <SSD1306_Putc+0xfc>)
 8001584:	881a      	ldrh	r2, [r3, #0]
 8001586:	683b      	ldr	r3, [r7, #0]
 8001588:	781b      	ldrb	r3, [r3, #0]
 800158a:	b29b      	uxth	r3, r3
 800158c:	4413      	add	r3, r2
 800158e:	b29a      	uxth	r2, r3
 8001590:	4b03      	ldr	r3, [pc, #12]	; (80015a0 <SSD1306_Putc+0xfc>)
 8001592:	801a      	strh	r2, [r3, #0]
	
	/* Return character written */
	return ch;
 8001594:	79fb      	ldrb	r3, [r7, #7]
}
 8001596:	4618      	mov	r0, r3
 8001598:	3718      	adds	r7, #24
 800159a:	46bd      	mov	sp, r7
 800159c:	bd80      	pop	{r7, pc}
 800159e:	bf00      	nop
 80015a0:	20000bc4 	.word	0x20000bc4

080015a4 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b084      	sub	sp, #16
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	60f8      	str	r0, [r7, #12]
 80015ac:	60b9      	str	r1, [r7, #8]
 80015ae:	4613      	mov	r3, r2
 80015b0:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 80015b2:	e012      	b.n	80015da <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	781b      	ldrb	r3, [r3, #0]
 80015b8:	79fa      	ldrb	r2, [r7, #7]
 80015ba:	68b9      	ldr	r1, [r7, #8]
 80015bc:	4618      	mov	r0, r3
 80015be:	f7ff ff71 	bl	80014a4 <SSD1306_Putc>
 80015c2:	4603      	mov	r3, r0
 80015c4:	461a      	mov	r2, r3
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	781b      	ldrb	r3, [r3, #0]
 80015ca:	429a      	cmp	r2, r3
 80015cc:	d002      	beq.n	80015d4 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	781b      	ldrb	r3, [r3, #0]
 80015d2:	e008      	b.n	80015e6 <SSD1306_Puts+0x42>
		}
		
		/* Increase string pointer */
		str++;
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	3301      	adds	r3, #1
 80015d8:	60fb      	str	r3, [r7, #12]
	while (*str) {
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	781b      	ldrb	r3, [r3, #0]
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d1e8      	bne.n	80015b4 <SSD1306_Puts+0x10>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	781b      	ldrb	r3, [r3, #0]
}
 80015e6:	4618      	mov	r0, r3
 80015e8:	3710      	adds	r7, #16
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bd80      	pop	{r7, pc}

080015ee <SSD1306_DrawCircle>:
		x += xinc2;
		y += yinc2;
	}
}

void SSD1306_DrawCircle(int16_t x0, int16_t y0, int16_t r, SSD1306_COLOR_t c) {
 80015ee:	b590      	push	{r4, r7, lr}
 80015f0:	b087      	sub	sp, #28
 80015f2:	af00      	add	r7, sp, #0
 80015f4:	4604      	mov	r4, r0
 80015f6:	4608      	mov	r0, r1
 80015f8:	4611      	mov	r1, r2
 80015fa:	461a      	mov	r2, r3
 80015fc:	4623      	mov	r3, r4
 80015fe:	80fb      	strh	r3, [r7, #6]
 8001600:	4603      	mov	r3, r0
 8001602:	80bb      	strh	r3, [r7, #4]
 8001604:	460b      	mov	r3, r1
 8001606:	807b      	strh	r3, [r7, #2]
 8001608:	4613      	mov	r3, r2
 800160a:	707b      	strb	r3, [r7, #1]
	int16_t f = 1 - r;
 800160c:	887b      	ldrh	r3, [r7, #2]
 800160e:	f1c3 0301 	rsb	r3, r3, #1
 8001612:	b29b      	uxth	r3, r3
 8001614:	82fb      	strh	r3, [r7, #22]
	int16_t ddF_x = 1;
 8001616:	2301      	movs	r3, #1
 8001618:	82bb      	strh	r3, [r7, #20]
	int16_t ddF_y = -2 * r;
 800161a:	887b      	ldrh	r3, [r7, #2]
 800161c:	461a      	mov	r2, r3
 800161e:	03d2      	lsls	r2, r2, #15
 8001620:	1ad3      	subs	r3, r2, r3
 8001622:	005b      	lsls	r3, r3, #1
 8001624:	b29b      	uxth	r3, r3
 8001626:	827b      	strh	r3, [r7, #18]
	int16_t x = 0;
 8001628:	2300      	movs	r3, #0
 800162a:	823b      	strh	r3, [r7, #16]
	int16_t y = r;
 800162c:	887b      	ldrh	r3, [r7, #2]
 800162e:	81fb      	strh	r3, [r7, #14]

    SSD1306_DrawPixel(x0, y0 + r, c);
 8001630:	88f8      	ldrh	r0, [r7, #6]
 8001632:	88ba      	ldrh	r2, [r7, #4]
 8001634:	887b      	ldrh	r3, [r7, #2]
 8001636:	4413      	add	r3, r2
 8001638:	b29b      	uxth	r3, r3
 800163a:	787a      	ldrb	r2, [r7, #1]
 800163c:	4619      	mov	r1, r3
 800163e:	f7ff febd 	bl	80013bc <SSD1306_DrawPixel>
    SSD1306_DrawPixel(x0, y0 - r, c);
 8001642:	88f8      	ldrh	r0, [r7, #6]
 8001644:	88ba      	ldrh	r2, [r7, #4]
 8001646:	887b      	ldrh	r3, [r7, #2]
 8001648:	1ad3      	subs	r3, r2, r3
 800164a:	b29b      	uxth	r3, r3
 800164c:	787a      	ldrb	r2, [r7, #1]
 800164e:	4619      	mov	r1, r3
 8001650:	f7ff feb4 	bl	80013bc <SSD1306_DrawPixel>
    SSD1306_DrawPixel(x0 + r, y0, c);
 8001654:	88fa      	ldrh	r2, [r7, #6]
 8001656:	887b      	ldrh	r3, [r7, #2]
 8001658:	4413      	add	r3, r2
 800165a:	b29b      	uxth	r3, r3
 800165c:	88b9      	ldrh	r1, [r7, #4]
 800165e:	787a      	ldrb	r2, [r7, #1]
 8001660:	4618      	mov	r0, r3
 8001662:	f7ff feab 	bl	80013bc <SSD1306_DrawPixel>
    SSD1306_DrawPixel(x0 - r, y0, c);
 8001666:	88fa      	ldrh	r2, [r7, #6]
 8001668:	887b      	ldrh	r3, [r7, #2]
 800166a:	1ad3      	subs	r3, r2, r3
 800166c:	b29b      	uxth	r3, r3
 800166e:	88b9      	ldrh	r1, [r7, #4]
 8001670:	787a      	ldrb	r2, [r7, #1]
 8001672:	4618      	mov	r0, r3
 8001674:	f7ff fea2 	bl	80013bc <SSD1306_DrawPixel>

    while (x < y) {
 8001678:	e081      	b.n	800177e <SSD1306_DrawCircle+0x190>
        if (f >= 0) {
 800167a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800167e:	2b00      	cmp	r3, #0
 8001680:	db0e      	blt.n	80016a0 <SSD1306_DrawCircle+0xb2>
            y--;
 8001682:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001686:	b29b      	uxth	r3, r3
 8001688:	3b01      	subs	r3, #1
 800168a:	b29b      	uxth	r3, r3
 800168c:	81fb      	strh	r3, [r7, #14]
            ddF_y += 2;
 800168e:	8a7b      	ldrh	r3, [r7, #18]
 8001690:	3302      	adds	r3, #2
 8001692:	b29b      	uxth	r3, r3
 8001694:	827b      	strh	r3, [r7, #18]
            f += ddF_y;
 8001696:	8afa      	ldrh	r2, [r7, #22]
 8001698:	8a7b      	ldrh	r3, [r7, #18]
 800169a:	4413      	add	r3, r2
 800169c:	b29b      	uxth	r3, r3
 800169e:	82fb      	strh	r3, [r7, #22]
        }
        x++;
 80016a0:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80016a4:	b29b      	uxth	r3, r3
 80016a6:	3301      	adds	r3, #1
 80016a8:	b29b      	uxth	r3, r3
 80016aa:	823b      	strh	r3, [r7, #16]
        ddF_x += 2;
 80016ac:	8abb      	ldrh	r3, [r7, #20]
 80016ae:	3302      	adds	r3, #2
 80016b0:	b29b      	uxth	r3, r3
 80016b2:	82bb      	strh	r3, [r7, #20]
        f += ddF_x;
 80016b4:	8afa      	ldrh	r2, [r7, #22]
 80016b6:	8abb      	ldrh	r3, [r7, #20]
 80016b8:	4413      	add	r3, r2
 80016ba:	b29b      	uxth	r3, r3
 80016bc:	82fb      	strh	r3, [r7, #22]

        SSD1306_DrawPixel(x0 + x, y0 + y, c);
 80016be:	88fa      	ldrh	r2, [r7, #6]
 80016c0:	8a3b      	ldrh	r3, [r7, #16]
 80016c2:	4413      	add	r3, r2
 80016c4:	b298      	uxth	r0, r3
 80016c6:	88ba      	ldrh	r2, [r7, #4]
 80016c8:	89fb      	ldrh	r3, [r7, #14]
 80016ca:	4413      	add	r3, r2
 80016cc:	b29b      	uxth	r3, r3
 80016ce:	787a      	ldrb	r2, [r7, #1]
 80016d0:	4619      	mov	r1, r3
 80016d2:	f7ff fe73 	bl	80013bc <SSD1306_DrawPixel>
        SSD1306_DrawPixel(x0 - x, y0 + y, c);
 80016d6:	88fa      	ldrh	r2, [r7, #6]
 80016d8:	8a3b      	ldrh	r3, [r7, #16]
 80016da:	1ad3      	subs	r3, r2, r3
 80016dc:	b298      	uxth	r0, r3
 80016de:	88ba      	ldrh	r2, [r7, #4]
 80016e0:	89fb      	ldrh	r3, [r7, #14]
 80016e2:	4413      	add	r3, r2
 80016e4:	b29b      	uxth	r3, r3
 80016e6:	787a      	ldrb	r2, [r7, #1]
 80016e8:	4619      	mov	r1, r3
 80016ea:	f7ff fe67 	bl	80013bc <SSD1306_DrawPixel>
        SSD1306_DrawPixel(x0 + x, y0 - y, c);
 80016ee:	88fa      	ldrh	r2, [r7, #6]
 80016f0:	8a3b      	ldrh	r3, [r7, #16]
 80016f2:	4413      	add	r3, r2
 80016f4:	b298      	uxth	r0, r3
 80016f6:	88ba      	ldrh	r2, [r7, #4]
 80016f8:	89fb      	ldrh	r3, [r7, #14]
 80016fa:	1ad3      	subs	r3, r2, r3
 80016fc:	b29b      	uxth	r3, r3
 80016fe:	787a      	ldrb	r2, [r7, #1]
 8001700:	4619      	mov	r1, r3
 8001702:	f7ff fe5b 	bl	80013bc <SSD1306_DrawPixel>
        SSD1306_DrawPixel(x0 - x, y0 - y, c);
 8001706:	88fa      	ldrh	r2, [r7, #6]
 8001708:	8a3b      	ldrh	r3, [r7, #16]
 800170a:	1ad3      	subs	r3, r2, r3
 800170c:	b298      	uxth	r0, r3
 800170e:	88ba      	ldrh	r2, [r7, #4]
 8001710:	89fb      	ldrh	r3, [r7, #14]
 8001712:	1ad3      	subs	r3, r2, r3
 8001714:	b29b      	uxth	r3, r3
 8001716:	787a      	ldrb	r2, [r7, #1]
 8001718:	4619      	mov	r1, r3
 800171a:	f7ff fe4f 	bl	80013bc <SSD1306_DrawPixel>

        SSD1306_DrawPixel(x0 + y, y0 + x, c);
 800171e:	88fa      	ldrh	r2, [r7, #6]
 8001720:	89fb      	ldrh	r3, [r7, #14]
 8001722:	4413      	add	r3, r2
 8001724:	b298      	uxth	r0, r3
 8001726:	88ba      	ldrh	r2, [r7, #4]
 8001728:	8a3b      	ldrh	r3, [r7, #16]
 800172a:	4413      	add	r3, r2
 800172c:	b29b      	uxth	r3, r3
 800172e:	787a      	ldrb	r2, [r7, #1]
 8001730:	4619      	mov	r1, r3
 8001732:	f7ff fe43 	bl	80013bc <SSD1306_DrawPixel>
        SSD1306_DrawPixel(x0 - y, y0 + x, c);
 8001736:	88fa      	ldrh	r2, [r7, #6]
 8001738:	89fb      	ldrh	r3, [r7, #14]
 800173a:	1ad3      	subs	r3, r2, r3
 800173c:	b298      	uxth	r0, r3
 800173e:	88ba      	ldrh	r2, [r7, #4]
 8001740:	8a3b      	ldrh	r3, [r7, #16]
 8001742:	4413      	add	r3, r2
 8001744:	b29b      	uxth	r3, r3
 8001746:	787a      	ldrb	r2, [r7, #1]
 8001748:	4619      	mov	r1, r3
 800174a:	f7ff fe37 	bl	80013bc <SSD1306_DrawPixel>
        SSD1306_DrawPixel(x0 + y, y0 - x, c);
 800174e:	88fa      	ldrh	r2, [r7, #6]
 8001750:	89fb      	ldrh	r3, [r7, #14]
 8001752:	4413      	add	r3, r2
 8001754:	b298      	uxth	r0, r3
 8001756:	88ba      	ldrh	r2, [r7, #4]
 8001758:	8a3b      	ldrh	r3, [r7, #16]
 800175a:	1ad3      	subs	r3, r2, r3
 800175c:	b29b      	uxth	r3, r3
 800175e:	787a      	ldrb	r2, [r7, #1]
 8001760:	4619      	mov	r1, r3
 8001762:	f7ff fe2b 	bl	80013bc <SSD1306_DrawPixel>
        SSD1306_DrawPixel(x0 - y, y0 - x, c);
 8001766:	88fa      	ldrh	r2, [r7, #6]
 8001768:	89fb      	ldrh	r3, [r7, #14]
 800176a:	1ad3      	subs	r3, r2, r3
 800176c:	b298      	uxth	r0, r3
 800176e:	88ba      	ldrh	r2, [r7, #4]
 8001770:	8a3b      	ldrh	r3, [r7, #16]
 8001772:	1ad3      	subs	r3, r2, r3
 8001774:	b29b      	uxth	r3, r3
 8001776:	787a      	ldrb	r2, [r7, #1]
 8001778:	4619      	mov	r1, r3
 800177a:	f7ff fe1f 	bl	80013bc <SSD1306_DrawPixel>
    while (x < y) {
 800177e:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8001782:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001786:	429a      	cmp	r2, r3
 8001788:	f6ff af77 	blt.w	800167a <SSD1306_DrawCircle+0x8c>
    }
}
 800178c:	bf00      	nop
 800178e:	bf00      	nop
 8001790:	371c      	adds	r7, #28
 8001792:	46bd      	mov	sp, r7
 8001794:	bd90      	pop	{r4, r7, pc}

08001796 <ssd1306_I2C_WriteMulti>:





void ssd1306_I2C_WriteMulti(I2C_TypeDef* I2Cx, uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8001796:	b580      	push	{r7, lr}
 8001798:	b086      	sub	sp, #24
 800179a:	af00      	add	r7, sp, #0
 800179c:	60f8      	str	r0, [r7, #12]
 800179e:	607b      	str	r3, [r7, #4]
 80017a0:	460b      	mov	r3, r1
 80017a2:	72fb      	strb	r3, [r7, #11]
 80017a4:	4613      	mov	r3, r2
 80017a6:	72bb      	strb	r3, [r7, #10]
	uint8_t i;
	ssd1306_I2C_Start(I2Cx, address, I2C_TRANSMITTER_MODE, I2C_ACK_DISABLE);
 80017a8:	7af9      	ldrb	r1, [r7, #11]
 80017aa:	2300      	movs	r3, #0
 80017ac:	2200      	movs	r2, #0
 80017ae:	68f8      	ldr	r0, [r7, #12]
 80017b0:	f000 f820 	bl	80017f4 <ssd1306_I2C_Start>
	ssd1306_I2C_WriteData(I2Cx, reg);
 80017b4:	7abb      	ldrb	r3, [r7, #10]
 80017b6:	4619      	mov	r1, r3
 80017b8:	68f8      	ldr	r0, [r7, #12]
 80017ba:	f000 f885 	bl	80018c8 <ssd1306_I2C_WriteData>
	for (i = 0; i < count; i++) {
 80017be:	2300      	movs	r3, #0
 80017c0:	75fb      	strb	r3, [r7, #23]
 80017c2:	e00a      	b.n	80017da <ssd1306_I2C_WriteMulti+0x44>
		ssd1306_I2C_WriteData(I2Cx, data[i]);
 80017c4:	7dfb      	ldrb	r3, [r7, #23]
 80017c6:	687a      	ldr	r2, [r7, #4]
 80017c8:	4413      	add	r3, r2
 80017ca:	781b      	ldrb	r3, [r3, #0]
 80017cc:	4619      	mov	r1, r3
 80017ce:	68f8      	ldr	r0, [r7, #12]
 80017d0:	f000 f87a 	bl	80018c8 <ssd1306_I2C_WriteData>
	for (i = 0; i < count; i++) {
 80017d4:	7dfb      	ldrb	r3, [r7, #23]
 80017d6:	3301      	adds	r3, #1
 80017d8:	75fb      	strb	r3, [r7, #23]
 80017da:	7dfb      	ldrb	r3, [r7, #23]
 80017dc:	b29b      	uxth	r3, r3
 80017de:	8c3a      	ldrh	r2, [r7, #32]
 80017e0:	429a      	cmp	r2, r3
 80017e2:	d8ef      	bhi.n	80017c4 <ssd1306_I2C_WriteMulti+0x2e>
	}
	ssd1306_I2C_Stop(I2Cx);
 80017e4:	68f8      	ldr	r0, [r7, #12]
 80017e6:	f000 f8b7 	bl	8001958 <ssd1306_I2C_Stop>
}
 80017ea:	bf00      	nop
 80017ec:	3718      	adds	r7, #24
 80017ee:	46bd      	mov	sp, r7
 80017f0:	bd80      	pop	{r7, pc}
	...

080017f4 <ssd1306_I2C_Start>:




/* Private functions */
int16_t ssd1306_I2C_Start(I2C_TypeDef* I2Cx, uint8_t address, uint8_t direction, uint8_t ack) {
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b082      	sub	sp, #8
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
 80017fc:	4608      	mov	r0, r1
 80017fe:	4611      	mov	r1, r2
 8001800:	461a      	mov	r2, r3
 8001802:	4603      	mov	r3, r0
 8001804:	70fb      	strb	r3, [r7, #3]
 8001806:	460b      	mov	r3, r1
 8001808:	70bb      	strb	r3, [r7, #2]
 800180a:	4613      	mov	r3, r2
 800180c:	707b      	strb	r3, [r7, #1]
	/* Generate I2C start pulse */
	I2Cx->CR1 |= I2C_CR1_START;
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	601a      	str	r2, [r3, #0]
	
	/* Wait till I2C is busy */
	ssd1306_I2C_Timeout = ssd1306_I2C_TIMEOUT;
 800181a:	4b2a      	ldr	r3, [pc, #168]	; (80018c4 <ssd1306_I2C_Start+0xd0>)
 800181c:	f644 6220 	movw	r2, #20000	; 0x4e20
 8001820:	601a      	str	r2, [r3, #0]
	while (!(I2Cx->SR1 & I2C_SR1_SB)) {
 8001822:	e00a      	b.n	800183a <ssd1306_I2C_Start+0x46>
		if (--ssd1306_I2C_Timeout == 0x00) {
 8001824:	4b27      	ldr	r3, [pc, #156]	; (80018c4 <ssd1306_I2C_Start+0xd0>)
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	3b01      	subs	r3, #1
 800182a:	4a26      	ldr	r2, [pc, #152]	; (80018c4 <ssd1306_I2C_Start+0xd0>)
 800182c:	6013      	str	r3, [r2, #0]
 800182e:	4b25      	ldr	r3, [pc, #148]	; (80018c4 <ssd1306_I2C_Start+0xd0>)
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	2b00      	cmp	r3, #0
 8001834:	d101      	bne.n	800183a <ssd1306_I2C_Start+0x46>
			return 1;
 8001836:	2301      	movs	r3, #1
 8001838:	e040      	b.n	80018bc <ssd1306_I2C_Start+0xc8>
	while (!(I2Cx->SR1 & I2C_SR1_SB)) {
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	695b      	ldr	r3, [r3, #20]
 800183e:	f003 0301 	and.w	r3, r3, #1
 8001842:	2b00      	cmp	r3, #0
 8001844:	d0ee      	beq.n	8001824 <ssd1306_I2C_Start+0x30>
		}
	}

	/* Enable ack if we select it */
	if (ack) {
 8001846:	787b      	ldrb	r3, [r7, #1]
 8001848:	2b00      	cmp	r3, #0
 800184a:	d005      	beq.n	8001858 <ssd1306_I2C_Start+0x64>
		I2Cx->CR1 |= I2C_CR1_ACK;
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	601a      	str	r2, [r3, #0]
	}

	/* Send write/read bit */
	if (direction == I2C_TRANSMITTER_MODE) {
 8001858:	78bb      	ldrb	r3, [r7, #2]
 800185a:	2b00      	cmp	r3, #0
 800185c:	d11a      	bne.n	8001894 <ssd1306_I2C_Start+0xa0>
		/* Send address with zero last bit */
		I2Cx->DR = address & ~I2C_OAR1_ADD0;
 800185e:	78fb      	ldrb	r3, [r7, #3]
 8001860:	f023 0201 	bic.w	r2, r3, #1
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	611a      	str	r2, [r3, #16]
		
		/* Wait till finished */
		ssd1306_I2C_Timeout = ssd1306_I2C_TIMEOUT;
 8001868:	4b16      	ldr	r3, [pc, #88]	; (80018c4 <ssd1306_I2C_Start+0xd0>)
 800186a:	f644 6220 	movw	r2, #20000	; 0x4e20
 800186e:	601a      	str	r2, [r3, #0]
		while (!(I2Cx->SR1 & I2C_SR1_ADDR)) {
 8001870:	e00a      	b.n	8001888 <ssd1306_I2C_Start+0x94>
			if (--ssd1306_I2C_Timeout == 0x00) {
 8001872:	4b14      	ldr	r3, [pc, #80]	; (80018c4 <ssd1306_I2C_Start+0xd0>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	3b01      	subs	r3, #1
 8001878:	4a12      	ldr	r2, [pc, #72]	; (80018c4 <ssd1306_I2C_Start+0xd0>)
 800187a:	6013      	str	r3, [r2, #0]
 800187c:	4b11      	ldr	r3, [pc, #68]	; (80018c4 <ssd1306_I2C_Start+0xd0>)
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	2b00      	cmp	r3, #0
 8001882:	d101      	bne.n	8001888 <ssd1306_I2C_Start+0x94>
				return 1;
 8001884:	2301      	movs	r3, #1
 8001886:	e019      	b.n	80018bc <ssd1306_I2C_Start+0xc8>
		while (!(I2Cx->SR1 & I2C_SR1_ADDR)) {
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	695b      	ldr	r3, [r3, #20]
 800188c:	f003 0302 	and.w	r3, r3, #2
 8001890:	2b00      	cmp	r3, #0
 8001892:	d0ee      	beq.n	8001872 <ssd1306_I2C_Start+0x7e>
			}
		}
	}
	if (direction == I2C_RECEIVER_MODE) {
 8001894:	78bb      	ldrb	r3, [r7, #2]
 8001896:	2b01      	cmp	r3, #1
 8001898:	d10d      	bne.n	80018b6 <ssd1306_I2C_Start+0xc2>
		/* Send address with 1 last bit */
		I2Cx->DR = address | I2C_OAR1_ADD0;
 800189a:	78fb      	ldrb	r3, [r7, #3]
 800189c:	f043 0301 	orr.w	r3, r3, #1
 80018a0:	b2db      	uxtb	r3, r3
 80018a2:	461a      	mov	r2, r3
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	611a      	str	r2, [r3, #16]
		
		/* Wait till finished */
		ssd1306_I2C_Timeout = ssd1306_I2C_TIMEOUT;
 80018a8:	4b06      	ldr	r3, [pc, #24]	; (80018c4 <ssd1306_I2C_Start+0xd0>)
 80018aa:	f644 6220 	movw	r2, #20000	; 0x4e20
 80018ae:	601a      	str	r2, [r3, #0]

		HAL_Delay(1);
 80018b0:	2001      	movs	r0, #1
 80018b2:	f000 fb63 	bl	8001f7c <HAL_Delay>
			}
		}*/
	}
	
	/* Read status register to clear ADDR flag */
	I2Cx->SR2;
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	699b      	ldr	r3, [r3, #24]
	
	/* Return 0, everything ok */
	return 0;
 80018ba:	2300      	movs	r3, #0
}
 80018bc:	4618      	mov	r0, r3
 80018be:	3708      	adds	r7, #8
 80018c0:	46bd      	mov	sp, r7
 80018c2:	bd80      	pop	{r7, pc}
 80018c4:	20000bcc 	.word	0x20000bcc

080018c8 <ssd1306_I2C_WriteData>:

void ssd1306_I2C_WriteData(I2C_TypeDef* I2Cx, uint8_t data) {
 80018c8:	b480      	push	{r7}
 80018ca:	b083      	sub	sp, #12
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
 80018d0:	460b      	mov	r3, r1
 80018d2:	70fb      	strb	r3, [r7, #3]
	/* Wait till I2C is not busy anymore */
	ssd1306_I2C_Timeout = ssd1306_I2C_TIMEOUT;
 80018d4:	4b0d      	ldr	r3, [pc, #52]	; (800190c <ssd1306_I2C_WriteData+0x44>)
 80018d6:	f644 6220 	movw	r2, #20000	; 0x4e20
 80018da:	601a      	str	r2, [r3, #0]
	while (!(I2Cx->SR1 & I2C_SR1_TXE) && ssd1306_I2C_Timeout) {
 80018dc:	e004      	b.n	80018e8 <ssd1306_I2C_WriteData+0x20>
		ssd1306_I2C_Timeout--;
 80018de:	4b0b      	ldr	r3, [pc, #44]	; (800190c <ssd1306_I2C_WriteData+0x44>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	3b01      	subs	r3, #1
 80018e4:	4a09      	ldr	r2, [pc, #36]	; (800190c <ssd1306_I2C_WriteData+0x44>)
 80018e6:	6013      	str	r3, [r2, #0]
	while (!(I2Cx->SR1 & I2C_SR1_TXE) && ssd1306_I2C_Timeout) {
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	695b      	ldr	r3, [r3, #20]
 80018ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d103      	bne.n	80018fc <ssd1306_I2C_WriteData+0x34>
 80018f4:	4b05      	ldr	r3, [pc, #20]	; (800190c <ssd1306_I2C_WriteData+0x44>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d1f0      	bne.n	80018de <ssd1306_I2C_WriteData+0x16>
	}

	/* Send I2C data */
	I2Cx->DR = data;
 80018fc:	78fa      	ldrb	r2, [r7, #3]
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	611a      	str	r2, [r3, #16]
}
 8001902:	bf00      	nop
 8001904:	370c      	adds	r7, #12
 8001906:	46bd      	mov	sp, r7
 8001908:	bc80      	pop	{r7}
 800190a:	4770      	bx	lr
 800190c:	20000bcc 	.word	0x20000bcc

08001910 <ssd1306_I2C_Write>:

void ssd1306_I2C_Write(I2C_TypeDef* I2Cx, uint8_t address, uint8_t reg, uint8_t data) {
 8001910:	b580      	push	{r7, lr}
 8001912:	b082      	sub	sp, #8
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
 8001918:	4608      	mov	r0, r1
 800191a:	4611      	mov	r1, r2
 800191c:	461a      	mov	r2, r3
 800191e:	4603      	mov	r3, r0
 8001920:	70fb      	strb	r3, [r7, #3]
 8001922:	460b      	mov	r3, r1
 8001924:	70bb      	strb	r3, [r7, #2]
 8001926:	4613      	mov	r3, r2
 8001928:	707b      	strb	r3, [r7, #1]
	//HAL_UART_Transmit(&huart1, (uint8_t*) "I2C_Write\r\n", 11, 0xFFFF);
	ssd1306_I2C_Start(I2Cx, address, I2C_TRANSMITTER_MODE, I2C_ACK_DISABLE);
 800192a:	78f9      	ldrb	r1, [r7, #3]
 800192c:	2300      	movs	r3, #0
 800192e:	2200      	movs	r2, #0
 8001930:	6878      	ldr	r0, [r7, #4]
 8001932:	f7ff ff5f 	bl	80017f4 <ssd1306_I2C_Start>
	//HAL_UART_Transmit(&huart1, (uint8_t*) "I2C_Write2\r\n", 12, 0xFFFF);
	ssd1306_I2C_WriteData(I2Cx, reg);
 8001936:	78bb      	ldrb	r3, [r7, #2]
 8001938:	4619      	mov	r1, r3
 800193a:	6878      	ldr	r0, [r7, #4]
 800193c:	f7ff ffc4 	bl	80018c8 <ssd1306_I2C_WriteData>
	//HAL_UART_Transmit(&huart1, (uint8_t*) "I2C_Write3\r\n", 12, 0xFFFF);
	ssd1306_I2C_WriteData(I2Cx, data);
 8001940:	787b      	ldrb	r3, [r7, #1]
 8001942:	4619      	mov	r1, r3
 8001944:	6878      	ldr	r0, [r7, #4]
 8001946:	f7ff ffbf 	bl	80018c8 <ssd1306_I2C_WriteData>
	//HAL_UART_Transmit(&huart1, (uint8_t*) "I2C_Write4\r\n", 12, 0xFFFF);
	ssd1306_I2C_Stop(I2Cx);
 800194a:	6878      	ldr	r0, [r7, #4]
 800194c:	f000 f804 	bl	8001958 <ssd1306_I2C_Stop>
	//HAL_UART_Transmit(&huart1, (uint8_t*) "I2C_Write5\r\n", 12, 0xFFFF);
}
 8001950:	bf00      	nop
 8001952:	3708      	adds	r7, #8
 8001954:	46bd      	mov	sp, r7
 8001956:	bd80      	pop	{r7, pc}

08001958 <ssd1306_I2C_Stop>:


uint8_t ssd1306_I2C_Stop(I2C_TypeDef* I2Cx) {
 8001958:	b480      	push	{r7}
 800195a:	b083      	sub	sp, #12
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
	/* Wait till transmitter not empty */
	ssd1306_I2C_Timeout = ssd1306_I2C_TIMEOUT;
 8001960:	4b13      	ldr	r3, [pc, #76]	; (80019b0 <ssd1306_I2C_Stop+0x58>)
 8001962:	f644 6220 	movw	r2, #20000	; 0x4e20
 8001966:	601a      	str	r2, [r3, #0]
	while (((!(I2Cx->SR1 & I2C_SR1_TXE)) || (!(I2Cx->SR1 & I2C_SR1_BTF)))) {
 8001968:	e00a      	b.n	8001980 <ssd1306_I2C_Stop+0x28>
		if (--ssd1306_I2C_Timeout == 0x00) {
 800196a:	4b11      	ldr	r3, [pc, #68]	; (80019b0 <ssd1306_I2C_Stop+0x58>)
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	3b01      	subs	r3, #1
 8001970:	4a0f      	ldr	r2, [pc, #60]	; (80019b0 <ssd1306_I2C_Stop+0x58>)
 8001972:	6013      	str	r3, [r2, #0]
 8001974:	4b0e      	ldr	r3, [pc, #56]	; (80019b0 <ssd1306_I2C_Stop+0x58>)
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	2b00      	cmp	r3, #0
 800197a:	d101      	bne.n	8001980 <ssd1306_I2C_Stop+0x28>
			return 1;
 800197c:	2301      	movs	r3, #1
 800197e:	e012      	b.n	80019a6 <ssd1306_I2C_Stop+0x4e>
	while (((!(I2Cx->SR1 & I2C_SR1_TXE)) || (!(I2Cx->SR1 & I2C_SR1_BTF)))) {
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	695b      	ldr	r3, [r3, #20]
 8001984:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001988:	2b00      	cmp	r3, #0
 800198a:	d0ee      	beq.n	800196a <ssd1306_I2C_Stop+0x12>
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	695b      	ldr	r3, [r3, #20]
 8001990:	f003 0304 	and.w	r3, r3, #4
 8001994:	2b00      	cmp	r3, #0
 8001996:	d0e8      	beq.n	800196a <ssd1306_I2C_Stop+0x12>
		}
	}
	
	/* Generate stop */
	I2Cx->CR1 |= I2C_CR1_STOP;
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	601a      	str	r2, [r3, #0]
	
	/* Return 0, everything ok */
	return 0;
 80019a4:	2300      	movs	r3, #0
}
 80019a6:	4618      	mov	r0, r3
 80019a8:	370c      	adds	r7, #12
 80019aa:	46bd      	mov	sp, r7
 80019ac:	bc80      	pop	{r7}
 80019ae:	4770      	bx	lr
 80019b0:	20000bcc 	.word	0x20000bcc

080019b4 <ssd1306_I2C_IsDeviceConnected>:

uint8_t ssd1306_I2C_IsDeviceConnected(I2C_TypeDef* I2Cx, uint8_t address) {
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b084      	sub	sp, #16
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
 80019bc:	460b      	mov	r3, r1
 80019be:	70fb      	strb	r3, [r7, #3]
	uint8_t connected = 0;
 80019c0:	2300      	movs	r3, #0
 80019c2:	73fb      	strb	r3, [r7, #15]
	/* Try to start, function will return 0 in case device will send ACK */
	if (!ssd1306_I2C_Start(I2Cx, address, I2C_TRANSMITTER_MODE, I2C_ACK_ENABLE)) {
 80019c4:	78f9      	ldrb	r1, [r7, #3]
 80019c6:	2301      	movs	r3, #1
 80019c8:	2200      	movs	r2, #0
 80019ca:	6878      	ldr	r0, [r7, #4]
 80019cc:	f7ff ff12 	bl	80017f4 <ssd1306_I2C_Start>
 80019d0:	4603      	mov	r3, r0
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d101      	bne.n	80019da <ssd1306_I2C_IsDeviceConnected+0x26>
		connected = 1;
 80019d6:	2301      	movs	r3, #1
 80019d8:	73fb      	strb	r3, [r7, #15]
	}

	/* STOP I2C */
	ssd1306_I2C_Stop(I2Cx);
 80019da:	6878      	ldr	r0, [r7, #4]
 80019dc:	f7ff ffbc 	bl	8001958 <ssd1306_I2C_Stop>

	/* Return status */
	return connected;
 80019e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80019e2:	4618      	mov	r0, r3
 80019e4:	3710      	adds	r7, #16
 80019e6:	46bd      	mov	sp, r7
 80019e8:	bd80      	pop	{r7, pc}
	...

080019ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80019ec:	b480      	push	{r7}
 80019ee:	b083      	sub	sp, #12
 80019f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80019f2:	4b0e      	ldr	r3, [pc, #56]	; (8001a2c <HAL_MspInit+0x40>)
 80019f4:	699b      	ldr	r3, [r3, #24]
 80019f6:	4a0d      	ldr	r2, [pc, #52]	; (8001a2c <HAL_MspInit+0x40>)
 80019f8:	f043 0301 	orr.w	r3, r3, #1
 80019fc:	6193      	str	r3, [r2, #24]
 80019fe:	4b0b      	ldr	r3, [pc, #44]	; (8001a2c <HAL_MspInit+0x40>)
 8001a00:	699b      	ldr	r3, [r3, #24]
 8001a02:	f003 0301 	and.w	r3, r3, #1
 8001a06:	607b      	str	r3, [r7, #4]
 8001a08:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a0a:	4b08      	ldr	r3, [pc, #32]	; (8001a2c <HAL_MspInit+0x40>)
 8001a0c:	69db      	ldr	r3, [r3, #28]
 8001a0e:	4a07      	ldr	r2, [pc, #28]	; (8001a2c <HAL_MspInit+0x40>)
 8001a10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a14:	61d3      	str	r3, [r2, #28]
 8001a16:	4b05      	ldr	r3, [pc, #20]	; (8001a2c <HAL_MspInit+0x40>)
 8001a18:	69db      	ldr	r3, [r3, #28]
 8001a1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a1e:	603b      	str	r3, [r7, #0]
 8001a20:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a22:	bf00      	nop
 8001a24:	370c      	adds	r7, #12
 8001a26:	46bd      	mov	sp, r7
 8001a28:	bc80      	pop	{r7}
 8001a2a:	4770      	bx	lr
 8001a2c:	40021000 	.word	0x40021000

08001a30 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b088      	sub	sp, #32
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a38:	f107 0310 	add.w	r3, r7, #16
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	601a      	str	r2, [r3, #0]
 8001a40:	605a      	str	r2, [r3, #4]
 8001a42:	609a      	str	r2, [r3, #8]
 8001a44:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	4a16      	ldr	r2, [pc, #88]	; (8001aa4 <HAL_I2C_MspInit+0x74>)
 8001a4c:	4293      	cmp	r3, r2
 8001a4e:	d125      	bne.n	8001a9c <HAL_I2C_MspInit+0x6c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a50:	4b15      	ldr	r3, [pc, #84]	; (8001aa8 <HAL_I2C_MspInit+0x78>)
 8001a52:	699b      	ldr	r3, [r3, #24]
 8001a54:	4a14      	ldr	r2, [pc, #80]	; (8001aa8 <HAL_I2C_MspInit+0x78>)
 8001a56:	f043 0308 	orr.w	r3, r3, #8
 8001a5a:	6193      	str	r3, [r2, #24]
 8001a5c:	4b12      	ldr	r3, [pc, #72]	; (8001aa8 <HAL_I2C_MspInit+0x78>)
 8001a5e:	699b      	ldr	r3, [r3, #24]
 8001a60:	f003 0308 	and.w	r3, r3, #8
 8001a64:	60fb      	str	r3, [r7, #12]
 8001a66:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001a68:	23c0      	movs	r3, #192	; 0xc0
 8001a6a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001a6c:	2312      	movs	r3, #18
 8001a6e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a70:	2300      	movs	r3, #0
 8001a72:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001a74:	2303      	movs	r3, #3
 8001a76:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a78:	f107 0310 	add.w	r3, r7, #16
 8001a7c:	4619      	mov	r1, r3
 8001a7e:	480b      	ldr	r0, [pc, #44]	; (8001aac <HAL_I2C_MspInit+0x7c>)
 8001a80:	f000 fe50 	bl	8002724 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001a84:	4b08      	ldr	r3, [pc, #32]	; (8001aa8 <HAL_I2C_MspInit+0x78>)
 8001a86:	69db      	ldr	r3, [r3, #28]
 8001a88:	4a07      	ldr	r2, [pc, #28]	; (8001aa8 <HAL_I2C_MspInit+0x78>)
 8001a8a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001a8e:	61d3      	str	r3, [r2, #28]
 8001a90:	4b05      	ldr	r3, [pc, #20]	; (8001aa8 <HAL_I2C_MspInit+0x78>)
 8001a92:	69db      	ldr	r3, [r3, #28]
 8001a94:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a98:	60bb      	str	r3, [r7, #8]
 8001a9a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001a9c:	bf00      	nop
 8001a9e:	3720      	adds	r7, #32
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	bd80      	pop	{r7, pc}
 8001aa4:	40005400 	.word	0x40005400
 8001aa8:	40021000 	.word	0x40021000
 8001aac:	40010c00 	.word	0x40010c00

08001ab0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b08a      	sub	sp, #40	; 0x28
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ab8:	f107 0318 	add.w	r3, r7, #24
 8001abc:	2200      	movs	r2, #0
 8001abe:	601a      	str	r2, [r3, #0]
 8001ac0:	605a      	str	r2, [r3, #4]
 8001ac2:	609a      	str	r2, [r3, #8]
 8001ac4:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	4a8c      	ldr	r2, [pc, #560]	; (8001cfc <HAL_UART_MspInit+0x24c>)
 8001acc:	4293      	cmp	r3, r2
 8001ace:	f040 8087 	bne.w	8001be0 <HAL_UART_MspInit+0x130>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001ad2:	4b8b      	ldr	r3, [pc, #556]	; (8001d00 <HAL_UART_MspInit+0x250>)
 8001ad4:	699b      	ldr	r3, [r3, #24]
 8001ad6:	4a8a      	ldr	r2, [pc, #552]	; (8001d00 <HAL_UART_MspInit+0x250>)
 8001ad8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001adc:	6193      	str	r3, [r2, #24]
 8001ade:	4b88      	ldr	r3, [pc, #544]	; (8001d00 <HAL_UART_MspInit+0x250>)
 8001ae0:	699b      	ldr	r3, [r3, #24]
 8001ae2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ae6:	617b      	str	r3, [r7, #20]
 8001ae8:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001aea:	4b85      	ldr	r3, [pc, #532]	; (8001d00 <HAL_UART_MspInit+0x250>)
 8001aec:	699b      	ldr	r3, [r3, #24]
 8001aee:	4a84      	ldr	r2, [pc, #528]	; (8001d00 <HAL_UART_MspInit+0x250>)
 8001af0:	f043 0304 	orr.w	r3, r3, #4
 8001af4:	6193      	str	r3, [r2, #24]
 8001af6:	4b82      	ldr	r3, [pc, #520]	; (8001d00 <HAL_UART_MspInit+0x250>)
 8001af8:	699b      	ldr	r3, [r3, #24]
 8001afa:	f003 0304 	and.w	r3, r3, #4
 8001afe:	613b      	str	r3, [r7, #16]
 8001b00:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001b02:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001b06:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b08:	2302      	movs	r3, #2
 8001b0a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001b0c:	2303      	movs	r3, #3
 8001b0e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b10:	f107 0318 	add.w	r3, r7, #24
 8001b14:	4619      	mov	r1, r3
 8001b16:	487b      	ldr	r0, [pc, #492]	; (8001d04 <HAL_UART_MspInit+0x254>)
 8001b18:	f000 fe04 	bl	8002724 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001b1c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001b20:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b22:	2300      	movs	r3, #0
 8001b24:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b26:	2300      	movs	r3, #0
 8001b28:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b2a:	f107 0318 	add.w	r3, r7, #24
 8001b2e:	4619      	mov	r1, r3
 8001b30:	4874      	ldr	r0, [pc, #464]	; (8001d04 <HAL_UART_MspInit+0x254>)
 8001b32:	f000 fdf7 	bl	8002724 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8001b36:	4b74      	ldr	r3, [pc, #464]	; (8001d08 <HAL_UART_MspInit+0x258>)
 8001b38:	4a74      	ldr	r2, [pc, #464]	; (8001d0c <HAL_UART_MspInit+0x25c>)
 8001b3a:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001b3c:	4b72      	ldr	r3, [pc, #456]	; (8001d08 <HAL_UART_MspInit+0x258>)
 8001b3e:	2200      	movs	r2, #0
 8001b40:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001b42:	4b71      	ldr	r3, [pc, #452]	; (8001d08 <HAL_UART_MspInit+0x258>)
 8001b44:	2200      	movs	r2, #0
 8001b46:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001b48:	4b6f      	ldr	r3, [pc, #444]	; (8001d08 <HAL_UART_MspInit+0x258>)
 8001b4a:	2280      	movs	r2, #128	; 0x80
 8001b4c:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001b4e:	4b6e      	ldr	r3, [pc, #440]	; (8001d08 <HAL_UART_MspInit+0x258>)
 8001b50:	2200      	movs	r2, #0
 8001b52:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001b54:	4b6c      	ldr	r3, [pc, #432]	; (8001d08 <HAL_UART_MspInit+0x258>)
 8001b56:	2200      	movs	r2, #0
 8001b58:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8001b5a:	4b6b      	ldr	r3, [pc, #428]	; (8001d08 <HAL_UART_MspInit+0x258>)
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001b60:	4b69      	ldr	r3, [pc, #420]	; (8001d08 <HAL_UART_MspInit+0x258>)
 8001b62:	2200      	movs	r2, #0
 8001b64:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001b66:	4868      	ldr	r0, [pc, #416]	; (8001d08 <HAL_UART_MspInit+0x258>)
 8001b68:	f000 fb3a 	bl	80021e0 <HAL_DMA_Init>
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d001      	beq.n	8001b76 <HAL_UART_MspInit+0xc6>
    {
      Error_Handler();
 8001b72:	f7ff fafb 	bl	800116c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	4a63      	ldr	r2, [pc, #396]	; (8001d08 <HAL_UART_MspInit+0x258>)
 8001b7a:	63da      	str	r2, [r3, #60]	; 0x3c
 8001b7c:	4a62      	ldr	r2, [pc, #392]	; (8001d08 <HAL_UART_MspInit+0x258>)
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8001b82:	4b63      	ldr	r3, [pc, #396]	; (8001d10 <HAL_UART_MspInit+0x260>)
 8001b84:	4a63      	ldr	r2, [pc, #396]	; (8001d14 <HAL_UART_MspInit+0x264>)
 8001b86:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001b88:	4b61      	ldr	r3, [pc, #388]	; (8001d10 <HAL_UART_MspInit+0x260>)
 8001b8a:	2210      	movs	r2, #16
 8001b8c:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001b8e:	4b60      	ldr	r3, [pc, #384]	; (8001d10 <HAL_UART_MspInit+0x260>)
 8001b90:	2200      	movs	r2, #0
 8001b92:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001b94:	4b5e      	ldr	r3, [pc, #376]	; (8001d10 <HAL_UART_MspInit+0x260>)
 8001b96:	2280      	movs	r2, #128	; 0x80
 8001b98:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001b9a:	4b5d      	ldr	r3, [pc, #372]	; (8001d10 <HAL_UART_MspInit+0x260>)
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001ba0:	4b5b      	ldr	r3, [pc, #364]	; (8001d10 <HAL_UART_MspInit+0x260>)
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8001ba6:	4b5a      	ldr	r3, [pc, #360]	; (8001d10 <HAL_UART_MspInit+0x260>)
 8001ba8:	2200      	movs	r2, #0
 8001baa:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001bac:	4b58      	ldr	r3, [pc, #352]	; (8001d10 <HAL_UART_MspInit+0x260>)
 8001bae:	2200      	movs	r2, #0
 8001bb0:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8001bb2:	4857      	ldr	r0, [pc, #348]	; (8001d10 <HAL_UART_MspInit+0x260>)
 8001bb4:	f000 fb14 	bl	80021e0 <HAL_DMA_Init>
 8001bb8:	4603      	mov	r3, r0
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d001      	beq.n	8001bc2 <HAL_UART_MspInit+0x112>
    {
      Error_Handler();
 8001bbe:	f7ff fad5 	bl	800116c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	4a52      	ldr	r2, [pc, #328]	; (8001d10 <HAL_UART_MspInit+0x260>)
 8001bc6:	639a      	str	r2, [r3, #56]	; 0x38
 8001bc8:	4a51      	ldr	r2, [pc, #324]	; (8001d10 <HAL_UART_MspInit+0x260>)
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001bce:	2200      	movs	r2, #0
 8001bd0:	2100      	movs	r1, #0
 8001bd2:	2025      	movs	r0, #37	; 0x25
 8001bd4:	f000 facd 	bl	8002172 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001bd8:	2025      	movs	r0, #37	; 0x25
 8001bda:	f000 fae6 	bl	80021aa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001bde:	e089      	b.n	8001cf4 <HAL_UART_MspInit+0x244>
  else if(huart->Instance==USART2)
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	4a4c      	ldr	r2, [pc, #304]	; (8001d18 <HAL_UART_MspInit+0x268>)
 8001be6:	4293      	cmp	r3, r2
 8001be8:	f040 8084 	bne.w	8001cf4 <HAL_UART_MspInit+0x244>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001bec:	4b44      	ldr	r3, [pc, #272]	; (8001d00 <HAL_UART_MspInit+0x250>)
 8001bee:	69db      	ldr	r3, [r3, #28]
 8001bf0:	4a43      	ldr	r2, [pc, #268]	; (8001d00 <HAL_UART_MspInit+0x250>)
 8001bf2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001bf6:	61d3      	str	r3, [r2, #28]
 8001bf8:	4b41      	ldr	r3, [pc, #260]	; (8001d00 <HAL_UART_MspInit+0x250>)
 8001bfa:	69db      	ldr	r3, [r3, #28]
 8001bfc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c00:	60fb      	str	r3, [r7, #12]
 8001c02:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c04:	4b3e      	ldr	r3, [pc, #248]	; (8001d00 <HAL_UART_MspInit+0x250>)
 8001c06:	699b      	ldr	r3, [r3, #24]
 8001c08:	4a3d      	ldr	r2, [pc, #244]	; (8001d00 <HAL_UART_MspInit+0x250>)
 8001c0a:	f043 0304 	orr.w	r3, r3, #4
 8001c0e:	6193      	str	r3, [r2, #24]
 8001c10:	4b3b      	ldr	r3, [pc, #236]	; (8001d00 <HAL_UART_MspInit+0x250>)
 8001c12:	699b      	ldr	r3, [r3, #24]
 8001c14:	f003 0304 	and.w	r3, r3, #4
 8001c18:	60bb      	str	r3, [r7, #8]
 8001c1a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001c1c:	2304      	movs	r3, #4
 8001c1e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c20:	2302      	movs	r3, #2
 8001c22:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001c24:	2303      	movs	r3, #3
 8001c26:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c28:	f107 0318 	add.w	r3, r7, #24
 8001c2c:	4619      	mov	r1, r3
 8001c2e:	4835      	ldr	r0, [pc, #212]	; (8001d04 <HAL_UART_MspInit+0x254>)
 8001c30:	f000 fd78 	bl	8002724 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001c34:	2308      	movs	r3, #8
 8001c36:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c38:	2300      	movs	r3, #0
 8001c3a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c40:	f107 0318 	add.w	r3, r7, #24
 8001c44:	4619      	mov	r1, r3
 8001c46:	482f      	ldr	r0, [pc, #188]	; (8001d04 <HAL_UART_MspInit+0x254>)
 8001c48:	f000 fd6c 	bl	8002724 <HAL_GPIO_Init>
    hdma_usart2_tx.Instance = DMA1_Channel7;
 8001c4c:	4b33      	ldr	r3, [pc, #204]	; (8001d1c <HAL_UART_MspInit+0x26c>)
 8001c4e:	4a34      	ldr	r2, [pc, #208]	; (8001d20 <HAL_UART_MspInit+0x270>)
 8001c50:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001c52:	4b32      	ldr	r3, [pc, #200]	; (8001d1c <HAL_UART_MspInit+0x26c>)
 8001c54:	2210      	movs	r2, #16
 8001c56:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001c58:	4b30      	ldr	r3, [pc, #192]	; (8001d1c <HAL_UART_MspInit+0x26c>)
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001c5e:	4b2f      	ldr	r3, [pc, #188]	; (8001d1c <HAL_UART_MspInit+0x26c>)
 8001c60:	2280      	movs	r2, #128	; 0x80
 8001c62:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001c64:	4b2d      	ldr	r3, [pc, #180]	; (8001d1c <HAL_UART_MspInit+0x26c>)
 8001c66:	2200      	movs	r2, #0
 8001c68:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001c6a:	4b2c      	ldr	r3, [pc, #176]	; (8001d1c <HAL_UART_MspInit+0x26c>)
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8001c70:	4b2a      	ldr	r3, [pc, #168]	; (8001d1c <HAL_UART_MspInit+0x26c>)
 8001c72:	2200      	movs	r2, #0
 8001c74:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001c76:	4b29      	ldr	r3, [pc, #164]	; (8001d1c <HAL_UART_MspInit+0x26c>)
 8001c78:	2200      	movs	r2, #0
 8001c7a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8001c7c:	4827      	ldr	r0, [pc, #156]	; (8001d1c <HAL_UART_MspInit+0x26c>)
 8001c7e:	f000 faaf 	bl	80021e0 <HAL_DMA_Init>
 8001c82:	4603      	mov	r3, r0
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d001      	beq.n	8001c8c <HAL_UART_MspInit+0x1dc>
      Error_Handler();
 8001c88:	f7ff fa70 	bl	800116c <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	4a23      	ldr	r2, [pc, #140]	; (8001d1c <HAL_UART_MspInit+0x26c>)
 8001c90:	639a      	str	r2, [r3, #56]	; 0x38
 8001c92:	4a22      	ldr	r2, [pc, #136]	; (8001d1c <HAL_UART_MspInit+0x26c>)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	6253      	str	r3, [r2, #36]	; 0x24
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8001c98:	4b22      	ldr	r3, [pc, #136]	; (8001d24 <HAL_UART_MspInit+0x274>)
 8001c9a:	4a23      	ldr	r2, [pc, #140]	; (8001d28 <HAL_UART_MspInit+0x278>)
 8001c9c:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001c9e:	4b21      	ldr	r3, [pc, #132]	; (8001d24 <HAL_UART_MspInit+0x274>)
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001ca4:	4b1f      	ldr	r3, [pc, #124]	; (8001d24 <HAL_UART_MspInit+0x274>)
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001caa:	4b1e      	ldr	r3, [pc, #120]	; (8001d24 <HAL_UART_MspInit+0x274>)
 8001cac:	2280      	movs	r2, #128	; 0x80
 8001cae:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001cb0:	4b1c      	ldr	r3, [pc, #112]	; (8001d24 <HAL_UART_MspInit+0x274>)
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001cb6:	4b1b      	ldr	r3, [pc, #108]	; (8001d24 <HAL_UART_MspInit+0x274>)
 8001cb8:	2200      	movs	r2, #0
 8001cba:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8001cbc:	4b19      	ldr	r3, [pc, #100]	; (8001d24 <HAL_UART_MspInit+0x274>)
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001cc2:	4b18      	ldr	r3, [pc, #96]	; (8001d24 <HAL_UART_MspInit+0x274>)
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8001cc8:	4816      	ldr	r0, [pc, #88]	; (8001d24 <HAL_UART_MspInit+0x274>)
 8001cca:	f000 fa89 	bl	80021e0 <HAL_DMA_Init>
 8001cce:	4603      	mov	r3, r0
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d001      	beq.n	8001cd8 <HAL_UART_MspInit+0x228>
      Error_Handler();
 8001cd4:	f7ff fa4a 	bl	800116c <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	4a12      	ldr	r2, [pc, #72]	; (8001d24 <HAL_UART_MspInit+0x274>)
 8001cdc:	63da      	str	r2, [r3, #60]	; 0x3c
 8001cde:	4a11      	ldr	r2, [pc, #68]	; (8001d24 <HAL_UART_MspInit+0x274>)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	6253      	str	r3, [r2, #36]	; 0x24
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	2100      	movs	r1, #0
 8001ce8:	2026      	movs	r0, #38	; 0x26
 8001cea:	f000 fa42 	bl	8002172 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001cee:	2026      	movs	r0, #38	; 0x26
 8001cf0:	f000 fa5b 	bl	80021aa <HAL_NVIC_EnableIRQ>
}
 8001cf4:	bf00      	nop
 8001cf6:	3728      	adds	r7, #40	; 0x28
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	bd80      	pop	{r7, pc}
 8001cfc:	40013800 	.word	0x40013800
 8001d00:	40021000 	.word	0x40021000
 8001d04:	40010800 	.word	0x40010800
 8001d08:	20000190 	.word	0x20000190
 8001d0c:	40020058 	.word	0x40020058
 8001d10:	200001d4 	.word	0x200001d4
 8001d14:	40020044 	.word	0x40020044
 8001d18:	40004400 	.word	0x40004400
 8001d1c:	20000218 	.word	0x20000218
 8001d20:	40020080 	.word	0x40020080
 8001d24:	2000025c 	.word	0x2000025c
 8001d28:	4002006c 	.word	0x4002006c

08001d2c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001d30:	e7fe      	b.n	8001d30 <NMI_Handler+0x4>

08001d32 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d32:	b480      	push	{r7}
 8001d34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d36:	e7fe      	b.n	8001d36 <HardFault_Handler+0x4>

08001d38 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d3c:	e7fe      	b.n	8001d3c <MemManage_Handler+0x4>

08001d3e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d3e:	b480      	push	{r7}
 8001d40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d42:	e7fe      	b.n	8001d42 <BusFault_Handler+0x4>

08001d44 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d44:	b480      	push	{r7}
 8001d46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d48:	e7fe      	b.n	8001d48 <UsageFault_Handler+0x4>

08001d4a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d4a:	b480      	push	{r7}
 8001d4c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d4e:	bf00      	nop
 8001d50:	46bd      	mov	sp, r7
 8001d52:	bc80      	pop	{r7}
 8001d54:	4770      	bx	lr

08001d56 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d56:	b480      	push	{r7}
 8001d58:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d5a:	bf00      	nop
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	bc80      	pop	{r7}
 8001d60:	4770      	bx	lr

08001d62 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d62:	b480      	push	{r7}
 8001d64:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d66:	bf00      	nop
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	bc80      	pop	{r7}
 8001d6c:	4770      	bx	lr

08001d6e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d6e:	b580      	push	{r7, lr}
 8001d70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d72:	f000 f8e7 	bl	8001f44 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d76:	bf00      	nop
 8001d78:	bd80      	pop	{r7, pc}
	...

08001d7c <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8001d80:	4802      	ldr	r0, [pc, #8]	; (8001d8c <DMA1_Channel4_IRQHandler+0x10>)
 8001d82:	f000 fb9b 	bl	80024bc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8001d86:	bf00      	nop
 8001d88:	bd80      	pop	{r7, pc}
 8001d8a:	bf00      	nop
 8001d8c:	200001d4 	.word	0x200001d4

08001d90 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001d94:	4802      	ldr	r0, [pc, #8]	; (8001da0 <DMA1_Channel5_IRQHandler+0x10>)
 8001d96:	f000 fb91 	bl	80024bc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8001d9a:	bf00      	nop
 8001d9c:	bd80      	pop	{r7, pc}
 8001d9e:	bf00      	nop
 8001da0:	20000190 	.word	0x20000190

08001da4 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001da8:	4802      	ldr	r0, [pc, #8]	; (8001db4 <DMA1_Channel6_IRQHandler+0x10>)
 8001daa:	f000 fb87 	bl	80024bc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8001dae:	bf00      	nop
 8001db0:	bd80      	pop	{r7, pc}
 8001db2:	bf00      	nop
 8001db4:	2000025c 	.word	0x2000025c

08001db8 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8001dbc:	4802      	ldr	r0, [pc, #8]	; (8001dc8 <DMA1_Channel7_IRQHandler+0x10>)
 8001dbe:	f000 fb7d 	bl	80024bc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8001dc2:	bf00      	nop
 8001dc4:	bd80      	pop	{r7, pc}
 8001dc6:	bf00      	nop
 8001dc8:	20000218 	.word	0x20000218

08001dcc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
	//HAL_UART_Transmit(&huart1,"USART Transmit\r\n",16,0xFFFF);
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001dd0:	4802      	ldr	r0, [pc, #8]	; (8001ddc <USART1_IRQHandler+0x10>)
 8001dd2:	f001 fcff 	bl	80037d4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001dd6:	bf00      	nop
 8001dd8:	bd80      	pop	{r7, pc}
 8001dda:	bf00      	nop
 8001ddc:	20000100 	.word	0x20000100

08001de0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001de4:	4802      	ldr	r0, [pc, #8]	; (8001df0 <USART2_IRQHandler+0x10>)
 8001de6:	f001 fcf5 	bl	80037d4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001dea:	bf00      	nop
 8001dec:	bd80      	pop	{r7, pc}
 8001dee:	bf00      	nop
 8001df0:	20000148 	.word	0x20000148

08001df4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b086      	sub	sp, #24
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001dfc:	4a14      	ldr	r2, [pc, #80]	; (8001e50 <_sbrk+0x5c>)
 8001dfe:	4b15      	ldr	r3, [pc, #84]	; (8001e54 <_sbrk+0x60>)
 8001e00:	1ad3      	subs	r3, r2, r3
 8001e02:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001e04:	697b      	ldr	r3, [r7, #20]
 8001e06:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001e08:	4b13      	ldr	r3, [pc, #76]	; (8001e58 <_sbrk+0x64>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d102      	bne.n	8001e16 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001e10:	4b11      	ldr	r3, [pc, #68]	; (8001e58 <_sbrk+0x64>)
 8001e12:	4a12      	ldr	r2, [pc, #72]	; (8001e5c <_sbrk+0x68>)
 8001e14:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001e16:	4b10      	ldr	r3, [pc, #64]	; (8001e58 <_sbrk+0x64>)
 8001e18:	681a      	ldr	r2, [r3, #0]
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	4413      	add	r3, r2
 8001e1e:	693a      	ldr	r2, [r7, #16]
 8001e20:	429a      	cmp	r2, r3
 8001e22:	d207      	bcs.n	8001e34 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001e24:	f002 fb16 	bl	8004454 <__errno>
 8001e28:	4603      	mov	r3, r0
 8001e2a:	220c      	movs	r2, #12
 8001e2c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001e2e:	f04f 33ff 	mov.w	r3, #4294967295
 8001e32:	e009      	b.n	8001e48 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001e34:	4b08      	ldr	r3, [pc, #32]	; (8001e58 <_sbrk+0x64>)
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001e3a:	4b07      	ldr	r3, [pc, #28]	; (8001e58 <_sbrk+0x64>)
 8001e3c:	681a      	ldr	r2, [r3, #0]
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	4413      	add	r3, r2
 8001e42:	4a05      	ldr	r2, [pc, #20]	; (8001e58 <_sbrk+0x64>)
 8001e44:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001e46:	68fb      	ldr	r3, [r7, #12]
}
 8001e48:	4618      	mov	r0, r3
 8001e4a:	3718      	adds	r7, #24
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	bd80      	pop	{r7, pc}
 8001e50:	20002800 	.word	0x20002800
 8001e54:	00000400 	.word	0x00000400
 8001e58:	20000bd0 	.word	0x20000bd0
 8001e5c:	20000be8 	.word	0x20000be8

08001e60 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001e60:	b480      	push	{r7}
 8001e62:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001e64:	bf00      	nop
 8001e66:	46bd      	mov	sp, r7
 8001e68:	bc80      	pop	{r7}
 8001e6a:	4770      	bx	lr

08001e6c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001e6c:	f7ff fff8 	bl	8001e60 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001e70:	480b      	ldr	r0, [pc, #44]	; (8001ea0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001e72:	490c      	ldr	r1, [pc, #48]	; (8001ea4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001e74:	4a0c      	ldr	r2, [pc, #48]	; (8001ea8 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001e76:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e78:	e002      	b.n	8001e80 <LoopCopyDataInit>

08001e7a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e7a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e7c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e7e:	3304      	adds	r3, #4

08001e80 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e80:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e82:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e84:	d3f9      	bcc.n	8001e7a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e86:	4a09      	ldr	r2, [pc, #36]	; (8001eac <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001e88:	4c09      	ldr	r4, [pc, #36]	; (8001eb0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001e8a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e8c:	e001      	b.n	8001e92 <LoopFillZerobss>

08001e8e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e8e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e90:	3204      	adds	r2, #4

08001e92 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e92:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e94:	d3fb      	bcc.n	8001e8e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001e96:	f002 fae3 	bl	8004460 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001e9a:	f7fe ff09 	bl	8000cb0 <main>
  bx lr
 8001e9e:	4770      	bx	lr
  ldr r0, =_sdata
 8001ea0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ea4:	2000008c 	.word	0x2000008c
  ldr r2, =_sidata
 8001ea8:	080058c4 	.word	0x080058c4
  ldr r2, =_sbss
 8001eac:	2000008c 	.word	0x2000008c
  ldr r4, =_ebss
 8001eb0:	20000be8 	.word	0x20000be8

08001eb4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001eb4:	e7fe      	b.n	8001eb4 <ADC1_2_IRQHandler>
	...

08001eb8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ebc:	4b08      	ldr	r3, [pc, #32]	; (8001ee0 <HAL_Init+0x28>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	4a07      	ldr	r2, [pc, #28]	; (8001ee0 <HAL_Init+0x28>)
 8001ec2:	f043 0310 	orr.w	r3, r3, #16
 8001ec6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ec8:	2003      	movs	r0, #3
 8001eca:	f000 f947 	bl	800215c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001ece:	200f      	movs	r0, #15
 8001ed0:	f000 f808 	bl	8001ee4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001ed4:	f7ff fd8a 	bl	80019ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ed8:	2300      	movs	r3, #0
}
 8001eda:	4618      	mov	r0, r3
 8001edc:	bd80      	pop	{r7, pc}
 8001ede:	bf00      	nop
 8001ee0:	40022000 	.word	0x40022000

08001ee4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b082      	sub	sp, #8
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001eec:	4b12      	ldr	r3, [pc, #72]	; (8001f38 <HAL_InitTick+0x54>)
 8001eee:	681a      	ldr	r2, [r3, #0]
 8001ef0:	4b12      	ldr	r3, [pc, #72]	; (8001f3c <HAL_InitTick+0x58>)
 8001ef2:	781b      	ldrb	r3, [r3, #0]
 8001ef4:	4619      	mov	r1, r3
 8001ef6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001efa:	fbb3 f3f1 	udiv	r3, r3, r1
 8001efe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f02:	4618      	mov	r0, r3
 8001f04:	f000 f95f 	bl	80021c6 <HAL_SYSTICK_Config>
 8001f08:	4603      	mov	r3, r0
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d001      	beq.n	8001f12 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001f0e:	2301      	movs	r3, #1
 8001f10:	e00e      	b.n	8001f30 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	2b0f      	cmp	r3, #15
 8001f16:	d80a      	bhi.n	8001f2e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f18:	2200      	movs	r2, #0
 8001f1a:	6879      	ldr	r1, [r7, #4]
 8001f1c:	f04f 30ff 	mov.w	r0, #4294967295
 8001f20:	f000 f927 	bl	8002172 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001f24:	4a06      	ldr	r2, [pc, #24]	; (8001f40 <HAL_InitTick+0x5c>)
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	e000      	b.n	8001f30 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001f2e:	2301      	movs	r3, #1
}
 8001f30:	4618      	mov	r0, r3
 8001f32:	3708      	adds	r7, #8
 8001f34:	46bd      	mov	sp, r7
 8001f36:	bd80      	pop	{r7, pc}
 8001f38:	2000001c 	.word	0x2000001c
 8001f3c:	20000024 	.word	0x20000024
 8001f40:	20000020 	.word	0x20000020

08001f44 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f44:	b480      	push	{r7}
 8001f46:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f48:	4b05      	ldr	r3, [pc, #20]	; (8001f60 <HAL_IncTick+0x1c>)
 8001f4a:	781b      	ldrb	r3, [r3, #0]
 8001f4c:	461a      	mov	r2, r3
 8001f4e:	4b05      	ldr	r3, [pc, #20]	; (8001f64 <HAL_IncTick+0x20>)
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	4413      	add	r3, r2
 8001f54:	4a03      	ldr	r2, [pc, #12]	; (8001f64 <HAL_IncTick+0x20>)
 8001f56:	6013      	str	r3, [r2, #0]
}
 8001f58:	bf00      	nop
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	bc80      	pop	{r7}
 8001f5e:	4770      	bx	lr
 8001f60:	20000024 	.word	0x20000024
 8001f64:	20000bd4 	.word	0x20000bd4

08001f68 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f68:	b480      	push	{r7}
 8001f6a:	af00      	add	r7, sp, #0
  return uwTick;
 8001f6c:	4b02      	ldr	r3, [pc, #8]	; (8001f78 <HAL_GetTick+0x10>)
 8001f6e:	681b      	ldr	r3, [r3, #0]
}
 8001f70:	4618      	mov	r0, r3
 8001f72:	46bd      	mov	sp, r7
 8001f74:	bc80      	pop	{r7}
 8001f76:	4770      	bx	lr
 8001f78:	20000bd4 	.word	0x20000bd4

08001f7c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b084      	sub	sp, #16
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001f84:	f7ff fff0 	bl	8001f68 <HAL_GetTick>
 8001f88:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f94:	d005      	beq.n	8001fa2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001f96:	4b0a      	ldr	r3, [pc, #40]	; (8001fc0 <HAL_Delay+0x44>)
 8001f98:	781b      	ldrb	r3, [r3, #0]
 8001f9a:	461a      	mov	r2, r3
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	4413      	add	r3, r2
 8001fa0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001fa2:	bf00      	nop
 8001fa4:	f7ff ffe0 	bl	8001f68 <HAL_GetTick>
 8001fa8:	4602      	mov	r2, r0
 8001faa:	68bb      	ldr	r3, [r7, #8]
 8001fac:	1ad3      	subs	r3, r2, r3
 8001fae:	68fa      	ldr	r2, [r7, #12]
 8001fb0:	429a      	cmp	r2, r3
 8001fb2:	d8f7      	bhi.n	8001fa4 <HAL_Delay+0x28>
  {
  }
}
 8001fb4:	bf00      	nop
 8001fb6:	bf00      	nop
 8001fb8:	3710      	adds	r7, #16
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	bd80      	pop	{r7, pc}
 8001fbe:	bf00      	nop
 8001fc0:	20000024 	.word	0x20000024

08001fc4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fc4:	b480      	push	{r7}
 8001fc6:	b085      	sub	sp, #20
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	f003 0307 	and.w	r3, r3, #7
 8001fd2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001fd4:	4b0c      	ldr	r3, [pc, #48]	; (8002008 <__NVIC_SetPriorityGrouping+0x44>)
 8001fd6:	68db      	ldr	r3, [r3, #12]
 8001fd8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001fda:	68ba      	ldr	r2, [r7, #8]
 8001fdc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001fe0:	4013      	ands	r3, r2
 8001fe2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001fe8:	68bb      	ldr	r3, [r7, #8]
 8001fea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001fec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001ff0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ff4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ff6:	4a04      	ldr	r2, [pc, #16]	; (8002008 <__NVIC_SetPriorityGrouping+0x44>)
 8001ff8:	68bb      	ldr	r3, [r7, #8]
 8001ffa:	60d3      	str	r3, [r2, #12]
}
 8001ffc:	bf00      	nop
 8001ffe:	3714      	adds	r7, #20
 8002000:	46bd      	mov	sp, r7
 8002002:	bc80      	pop	{r7}
 8002004:	4770      	bx	lr
 8002006:	bf00      	nop
 8002008:	e000ed00 	.word	0xe000ed00

0800200c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800200c:	b480      	push	{r7}
 800200e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002010:	4b04      	ldr	r3, [pc, #16]	; (8002024 <__NVIC_GetPriorityGrouping+0x18>)
 8002012:	68db      	ldr	r3, [r3, #12]
 8002014:	0a1b      	lsrs	r3, r3, #8
 8002016:	f003 0307 	and.w	r3, r3, #7
}
 800201a:	4618      	mov	r0, r3
 800201c:	46bd      	mov	sp, r7
 800201e:	bc80      	pop	{r7}
 8002020:	4770      	bx	lr
 8002022:	bf00      	nop
 8002024:	e000ed00 	.word	0xe000ed00

08002028 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002028:	b480      	push	{r7}
 800202a:	b083      	sub	sp, #12
 800202c:	af00      	add	r7, sp, #0
 800202e:	4603      	mov	r3, r0
 8002030:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002032:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002036:	2b00      	cmp	r3, #0
 8002038:	db0b      	blt.n	8002052 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800203a:	79fb      	ldrb	r3, [r7, #7]
 800203c:	f003 021f 	and.w	r2, r3, #31
 8002040:	4906      	ldr	r1, [pc, #24]	; (800205c <__NVIC_EnableIRQ+0x34>)
 8002042:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002046:	095b      	lsrs	r3, r3, #5
 8002048:	2001      	movs	r0, #1
 800204a:	fa00 f202 	lsl.w	r2, r0, r2
 800204e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002052:	bf00      	nop
 8002054:	370c      	adds	r7, #12
 8002056:	46bd      	mov	sp, r7
 8002058:	bc80      	pop	{r7}
 800205a:	4770      	bx	lr
 800205c:	e000e100 	.word	0xe000e100

08002060 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002060:	b480      	push	{r7}
 8002062:	b083      	sub	sp, #12
 8002064:	af00      	add	r7, sp, #0
 8002066:	4603      	mov	r3, r0
 8002068:	6039      	str	r1, [r7, #0]
 800206a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800206c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002070:	2b00      	cmp	r3, #0
 8002072:	db0a      	blt.n	800208a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	b2da      	uxtb	r2, r3
 8002078:	490c      	ldr	r1, [pc, #48]	; (80020ac <__NVIC_SetPriority+0x4c>)
 800207a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800207e:	0112      	lsls	r2, r2, #4
 8002080:	b2d2      	uxtb	r2, r2
 8002082:	440b      	add	r3, r1
 8002084:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002088:	e00a      	b.n	80020a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800208a:	683b      	ldr	r3, [r7, #0]
 800208c:	b2da      	uxtb	r2, r3
 800208e:	4908      	ldr	r1, [pc, #32]	; (80020b0 <__NVIC_SetPriority+0x50>)
 8002090:	79fb      	ldrb	r3, [r7, #7]
 8002092:	f003 030f 	and.w	r3, r3, #15
 8002096:	3b04      	subs	r3, #4
 8002098:	0112      	lsls	r2, r2, #4
 800209a:	b2d2      	uxtb	r2, r2
 800209c:	440b      	add	r3, r1
 800209e:	761a      	strb	r2, [r3, #24]
}
 80020a0:	bf00      	nop
 80020a2:	370c      	adds	r7, #12
 80020a4:	46bd      	mov	sp, r7
 80020a6:	bc80      	pop	{r7}
 80020a8:	4770      	bx	lr
 80020aa:	bf00      	nop
 80020ac:	e000e100 	.word	0xe000e100
 80020b0:	e000ed00 	.word	0xe000ed00

080020b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80020b4:	b480      	push	{r7}
 80020b6:	b089      	sub	sp, #36	; 0x24
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	60f8      	str	r0, [r7, #12]
 80020bc:	60b9      	str	r1, [r7, #8]
 80020be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	f003 0307 	and.w	r3, r3, #7
 80020c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80020c8:	69fb      	ldr	r3, [r7, #28]
 80020ca:	f1c3 0307 	rsb	r3, r3, #7
 80020ce:	2b04      	cmp	r3, #4
 80020d0:	bf28      	it	cs
 80020d2:	2304      	movcs	r3, #4
 80020d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80020d6:	69fb      	ldr	r3, [r7, #28]
 80020d8:	3304      	adds	r3, #4
 80020da:	2b06      	cmp	r3, #6
 80020dc:	d902      	bls.n	80020e4 <NVIC_EncodePriority+0x30>
 80020de:	69fb      	ldr	r3, [r7, #28]
 80020e0:	3b03      	subs	r3, #3
 80020e2:	e000      	b.n	80020e6 <NVIC_EncodePriority+0x32>
 80020e4:	2300      	movs	r3, #0
 80020e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020e8:	f04f 32ff 	mov.w	r2, #4294967295
 80020ec:	69bb      	ldr	r3, [r7, #24]
 80020ee:	fa02 f303 	lsl.w	r3, r2, r3
 80020f2:	43da      	mvns	r2, r3
 80020f4:	68bb      	ldr	r3, [r7, #8]
 80020f6:	401a      	ands	r2, r3
 80020f8:	697b      	ldr	r3, [r7, #20]
 80020fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80020fc:	f04f 31ff 	mov.w	r1, #4294967295
 8002100:	697b      	ldr	r3, [r7, #20]
 8002102:	fa01 f303 	lsl.w	r3, r1, r3
 8002106:	43d9      	mvns	r1, r3
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800210c:	4313      	orrs	r3, r2
         );
}
 800210e:	4618      	mov	r0, r3
 8002110:	3724      	adds	r7, #36	; 0x24
 8002112:	46bd      	mov	sp, r7
 8002114:	bc80      	pop	{r7}
 8002116:	4770      	bx	lr

08002118 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	b082      	sub	sp, #8
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	3b01      	subs	r3, #1
 8002124:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002128:	d301      	bcc.n	800212e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800212a:	2301      	movs	r3, #1
 800212c:	e00f      	b.n	800214e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800212e:	4a0a      	ldr	r2, [pc, #40]	; (8002158 <SysTick_Config+0x40>)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	3b01      	subs	r3, #1
 8002134:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002136:	210f      	movs	r1, #15
 8002138:	f04f 30ff 	mov.w	r0, #4294967295
 800213c:	f7ff ff90 	bl	8002060 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002140:	4b05      	ldr	r3, [pc, #20]	; (8002158 <SysTick_Config+0x40>)
 8002142:	2200      	movs	r2, #0
 8002144:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002146:	4b04      	ldr	r3, [pc, #16]	; (8002158 <SysTick_Config+0x40>)
 8002148:	2207      	movs	r2, #7
 800214a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800214c:	2300      	movs	r3, #0
}
 800214e:	4618      	mov	r0, r3
 8002150:	3708      	adds	r7, #8
 8002152:	46bd      	mov	sp, r7
 8002154:	bd80      	pop	{r7, pc}
 8002156:	bf00      	nop
 8002158:	e000e010 	.word	0xe000e010

0800215c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	b082      	sub	sp, #8
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002164:	6878      	ldr	r0, [r7, #4]
 8002166:	f7ff ff2d 	bl	8001fc4 <__NVIC_SetPriorityGrouping>
}
 800216a:	bf00      	nop
 800216c:	3708      	adds	r7, #8
 800216e:	46bd      	mov	sp, r7
 8002170:	bd80      	pop	{r7, pc}

08002172 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002172:	b580      	push	{r7, lr}
 8002174:	b086      	sub	sp, #24
 8002176:	af00      	add	r7, sp, #0
 8002178:	4603      	mov	r3, r0
 800217a:	60b9      	str	r1, [r7, #8]
 800217c:	607a      	str	r2, [r7, #4]
 800217e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002180:	2300      	movs	r3, #0
 8002182:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002184:	f7ff ff42 	bl	800200c <__NVIC_GetPriorityGrouping>
 8002188:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800218a:	687a      	ldr	r2, [r7, #4]
 800218c:	68b9      	ldr	r1, [r7, #8]
 800218e:	6978      	ldr	r0, [r7, #20]
 8002190:	f7ff ff90 	bl	80020b4 <NVIC_EncodePriority>
 8002194:	4602      	mov	r2, r0
 8002196:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800219a:	4611      	mov	r1, r2
 800219c:	4618      	mov	r0, r3
 800219e:	f7ff ff5f 	bl	8002060 <__NVIC_SetPriority>
}
 80021a2:	bf00      	nop
 80021a4:	3718      	adds	r7, #24
 80021a6:	46bd      	mov	sp, r7
 80021a8:	bd80      	pop	{r7, pc}

080021aa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021aa:	b580      	push	{r7, lr}
 80021ac:	b082      	sub	sp, #8
 80021ae:	af00      	add	r7, sp, #0
 80021b0:	4603      	mov	r3, r0
 80021b2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80021b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021b8:	4618      	mov	r0, r3
 80021ba:	f7ff ff35 	bl	8002028 <__NVIC_EnableIRQ>
}
 80021be:	bf00      	nop
 80021c0:	3708      	adds	r7, #8
 80021c2:	46bd      	mov	sp, r7
 80021c4:	bd80      	pop	{r7, pc}

080021c6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80021c6:	b580      	push	{r7, lr}
 80021c8:	b082      	sub	sp, #8
 80021ca:	af00      	add	r7, sp, #0
 80021cc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80021ce:	6878      	ldr	r0, [r7, #4]
 80021d0:	f7ff ffa2 	bl	8002118 <SysTick_Config>
 80021d4:	4603      	mov	r3, r0
}
 80021d6:	4618      	mov	r0, r3
 80021d8:	3708      	adds	r7, #8
 80021da:	46bd      	mov	sp, r7
 80021dc:	bd80      	pop	{r7, pc}
	...

080021e0 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80021e0:	b480      	push	{r7}
 80021e2:	b085      	sub	sp, #20
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80021e8:	2300      	movs	r3, #0
 80021ea:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d101      	bne.n	80021f6 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80021f2:	2301      	movs	r3, #1
 80021f4:	e043      	b.n	800227e <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	461a      	mov	r2, r3
 80021fc:	4b22      	ldr	r3, [pc, #136]	; (8002288 <HAL_DMA_Init+0xa8>)
 80021fe:	4413      	add	r3, r2
 8002200:	4a22      	ldr	r2, [pc, #136]	; (800228c <HAL_DMA_Init+0xac>)
 8002202:	fba2 2303 	umull	r2, r3, r2, r3
 8002206:	091b      	lsrs	r3, r3, #4
 8002208:	009a      	lsls	r2, r3, #2
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	4a1f      	ldr	r2, [pc, #124]	; (8002290 <HAL_DMA_Init+0xb0>)
 8002212:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	2202      	movs	r2, #2
 8002218:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800222a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800222e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002238:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	68db      	ldr	r3, [r3, #12]
 800223e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002244:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	695b      	ldr	r3, [r3, #20]
 800224a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002250:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	69db      	ldr	r3, [r3, #28]
 8002256:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002258:	68fa      	ldr	r2, [r7, #12]
 800225a:	4313      	orrs	r3, r2
 800225c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	68fa      	ldr	r2, [r7, #12]
 8002264:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	2200      	movs	r2, #0
 800226a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	2201      	movs	r2, #1
 8002270:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	2200      	movs	r2, #0
 8002278:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800227c:	2300      	movs	r3, #0
}
 800227e:	4618      	mov	r0, r3
 8002280:	3714      	adds	r7, #20
 8002282:	46bd      	mov	sp, r7
 8002284:	bc80      	pop	{r7}
 8002286:	4770      	bx	lr
 8002288:	bffdfff8 	.word	0xbffdfff8
 800228c:	cccccccd 	.word	0xcccccccd
 8002290:	40020000 	.word	0x40020000

08002294 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	b086      	sub	sp, #24
 8002298:	af00      	add	r7, sp, #0
 800229a:	60f8      	str	r0, [r7, #12]
 800229c:	60b9      	str	r1, [r7, #8]
 800229e:	607a      	str	r2, [r7, #4]
 80022a0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80022a2:	2300      	movs	r3, #0
 80022a4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80022ac:	2b01      	cmp	r3, #1
 80022ae:	d101      	bne.n	80022b4 <HAL_DMA_Start_IT+0x20>
 80022b0:	2302      	movs	r3, #2
 80022b2:	e04b      	b.n	800234c <HAL_DMA_Start_IT+0xb8>
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	2201      	movs	r2, #1
 80022b8:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80022c2:	b2db      	uxtb	r3, r3
 80022c4:	2b01      	cmp	r3, #1
 80022c6:	d13a      	bne.n	800233e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	2202      	movs	r2, #2
 80022cc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	2200      	movs	r2, #0
 80022d4:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	681a      	ldr	r2, [r3, #0]
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f022 0201 	bic.w	r2, r2, #1
 80022e4:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80022e6:	683b      	ldr	r3, [r7, #0]
 80022e8:	687a      	ldr	r2, [r7, #4]
 80022ea:	68b9      	ldr	r1, [r7, #8]
 80022ec:	68f8      	ldr	r0, [r7, #12]
 80022ee:	f000 f9eb 	bl	80026c8 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d008      	beq.n	800230c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	681a      	ldr	r2, [r3, #0]
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f042 020e 	orr.w	r2, r2, #14
 8002308:	601a      	str	r2, [r3, #0]
 800230a:	e00f      	b.n	800232c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	681a      	ldr	r2, [r3, #0]
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f022 0204 	bic.w	r2, r2, #4
 800231a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	681a      	ldr	r2, [r3, #0]
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f042 020a 	orr.w	r2, r2, #10
 800232a:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	681a      	ldr	r2, [r3, #0]
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f042 0201 	orr.w	r2, r2, #1
 800233a:	601a      	str	r2, [r3, #0]
 800233c:	e005      	b.n	800234a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	2200      	movs	r2, #0
 8002342:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8002346:	2302      	movs	r3, #2
 8002348:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 800234a:	7dfb      	ldrb	r3, [r7, #23]
}
 800234c:	4618      	mov	r0, r3
 800234e:	3718      	adds	r7, #24
 8002350:	46bd      	mov	sp, r7
 8002352:	bd80      	pop	{r7, pc}

08002354 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002354:	b480      	push	{r7}
 8002356:	b085      	sub	sp, #20
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800235c:	2300      	movs	r3, #0
 800235e:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002366:	b2db      	uxtb	r3, r3
 8002368:	2b02      	cmp	r3, #2
 800236a:	d008      	beq.n	800237e <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	2204      	movs	r2, #4
 8002370:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	2200      	movs	r2, #0
 8002376:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800237a:	2301      	movs	r3, #1
 800237c:	e020      	b.n	80023c0 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	681a      	ldr	r2, [r3, #0]
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f022 020e 	bic.w	r2, r2, #14
 800238c:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	681a      	ldr	r2, [r3, #0]
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f022 0201 	bic.w	r2, r2, #1
 800239c:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023a6:	2101      	movs	r1, #1
 80023a8:	fa01 f202 	lsl.w	r2, r1, r2
 80023ac:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	2201      	movs	r2, #1
 80023b2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	2200      	movs	r2, #0
 80023ba:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80023be:	7bfb      	ldrb	r3, [r7, #15]
}
 80023c0:	4618      	mov	r0, r3
 80023c2:	3714      	adds	r7, #20
 80023c4:	46bd      	mov	sp, r7
 80023c6:	bc80      	pop	{r7}
 80023c8:	4770      	bx	lr
	...

080023cc <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80023cc:	b580      	push	{r7, lr}
 80023ce:	b084      	sub	sp, #16
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80023d4:	2300      	movs	r3, #0
 80023d6:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80023de:	b2db      	uxtb	r3, r3
 80023e0:	2b02      	cmp	r3, #2
 80023e2:	d005      	beq.n	80023f0 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	2204      	movs	r2, #4
 80023e8:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80023ea:	2301      	movs	r3, #1
 80023ec:	73fb      	strb	r3, [r7, #15]
 80023ee:	e051      	b.n	8002494 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	681a      	ldr	r2, [r3, #0]
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f022 020e 	bic.w	r2, r2, #14
 80023fe:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	681a      	ldr	r2, [r3, #0]
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f022 0201 	bic.w	r2, r2, #1
 800240e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	4a22      	ldr	r2, [pc, #136]	; (80024a0 <HAL_DMA_Abort_IT+0xd4>)
 8002416:	4293      	cmp	r3, r2
 8002418:	d029      	beq.n	800246e <HAL_DMA_Abort_IT+0xa2>
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	4a21      	ldr	r2, [pc, #132]	; (80024a4 <HAL_DMA_Abort_IT+0xd8>)
 8002420:	4293      	cmp	r3, r2
 8002422:	d022      	beq.n	800246a <HAL_DMA_Abort_IT+0x9e>
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	4a1f      	ldr	r2, [pc, #124]	; (80024a8 <HAL_DMA_Abort_IT+0xdc>)
 800242a:	4293      	cmp	r3, r2
 800242c:	d01a      	beq.n	8002464 <HAL_DMA_Abort_IT+0x98>
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	4a1e      	ldr	r2, [pc, #120]	; (80024ac <HAL_DMA_Abort_IT+0xe0>)
 8002434:	4293      	cmp	r3, r2
 8002436:	d012      	beq.n	800245e <HAL_DMA_Abort_IT+0x92>
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	4a1c      	ldr	r2, [pc, #112]	; (80024b0 <HAL_DMA_Abort_IT+0xe4>)
 800243e:	4293      	cmp	r3, r2
 8002440:	d00a      	beq.n	8002458 <HAL_DMA_Abort_IT+0x8c>
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	4a1b      	ldr	r2, [pc, #108]	; (80024b4 <HAL_DMA_Abort_IT+0xe8>)
 8002448:	4293      	cmp	r3, r2
 800244a:	d102      	bne.n	8002452 <HAL_DMA_Abort_IT+0x86>
 800244c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002450:	e00e      	b.n	8002470 <HAL_DMA_Abort_IT+0xa4>
 8002452:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002456:	e00b      	b.n	8002470 <HAL_DMA_Abort_IT+0xa4>
 8002458:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800245c:	e008      	b.n	8002470 <HAL_DMA_Abort_IT+0xa4>
 800245e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002462:	e005      	b.n	8002470 <HAL_DMA_Abort_IT+0xa4>
 8002464:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002468:	e002      	b.n	8002470 <HAL_DMA_Abort_IT+0xa4>
 800246a:	2310      	movs	r3, #16
 800246c:	e000      	b.n	8002470 <HAL_DMA_Abort_IT+0xa4>
 800246e:	2301      	movs	r3, #1
 8002470:	4a11      	ldr	r2, [pc, #68]	; (80024b8 <HAL_DMA_Abort_IT+0xec>)
 8002472:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	2201      	movs	r2, #1
 8002478:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	2200      	movs	r2, #0
 8002480:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002488:	2b00      	cmp	r3, #0
 800248a:	d003      	beq.n	8002494 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002490:	6878      	ldr	r0, [r7, #4]
 8002492:	4798      	blx	r3
    } 
  }
  return status;
 8002494:	7bfb      	ldrb	r3, [r7, #15]
}
 8002496:	4618      	mov	r0, r3
 8002498:	3710      	adds	r7, #16
 800249a:	46bd      	mov	sp, r7
 800249c:	bd80      	pop	{r7, pc}
 800249e:	bf00      	nop
 80024a0:	40020008 	.word	0x40020008
 80024a4:	4002001c 	.word	0x4002001c
 80024a8:	40020030 	.word	0x40020030
 80024ac:	40020044 	.word	0x40020044
 80024b0:	40020058 	.word	0x40020058
 80024b4:	4002006c 	.word	0x4002006c
 80024b8:	40020000 	.word	0x40020000

080024bc <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	b084      	sub	sp, #16
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024d8:	2204      	movs	r2, #4
 80024da:	409a      	lsls	r2, r3
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	4013      	ands	r3, r2
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d04f      	beq.n	8002584 <HAL_DMA_IRQHandler+0xc8>
 80024e4:	68bb      	ldr	r3, [r7, #8]
 80024e6:	f003 0304 	and.w	r3, r3, #4
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d04a      	beq.n	8002584 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f003 0320 	and.w	r3, r3, #32
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d107      	bne.n	800250c <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	681a      	ldr	r2, [r3, #0]
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f022 0204 	bic.w	r2, r2, #4
 800250a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	4a66      	ldr	r2, [pc, #408]	; (80026ac <HAL_DMA_IRQHandler+0x1f0>)
 8002512:	4293      	cmp	r3, r2
 8002514:	d029      	beq.n	800256a <HAL_DMA_IRQHandler+0xae>
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	4a65      	ldr	r2, [pc, #404]	; (80026b0 <HAL_DMA_IRQHandler+0x1f4>)
 800251c:	4293      	cmp	r3, r2
 800251e:	d022      	beq.n	8002566 <HAL_DMA_IRQHandler+0xaa>
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	4a63      	ldr	r2, [pc, #396]	; (80026b4 <HAL_DMA_IRQHandler+0x1f8>)
 8002526:	4293      	cmp	r3, r2
 8002528:	d01a      	beq.n	8002560 <HAL_DMA_IRQHandler+0xa4>
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	4a62      	ldr	r2, [pc, #392]	; (80026b8 <HAL_DMA_IRQHandler+0x1fc>)
 8002530:	4293      	cmp	r3, r2
 8002532:	d012      	beq.n	800255a <HAL_DMA_IRQHandler+0x9e>
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	4a60      	ldr	r2, [pc, #384]	; (80026bc <HAL_DMA_IRQHandler+0x200>)
 800253a:	4293      	cmp	r3, r2
 800253c:	d00a      	beq.n	8002554 <HAL_DMA_IRQHandler+0x98>
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	4a5f      	ldr	r2, [pc, #380]	; (80026c0 <HAL_DMA_IRQHandler+0x204>)
 8002544:	4293      	cmp	r3, r2
 8002546:	d102      	bne.n	800254e <HAL_DMA_IRQHandler+0x92>
 8002548:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800254c:	e00e      	b.n	800256c <HAL_DMA_IRQHandler+0xb0>
 800254e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8002552:	e00b      	b.n	800256c <HAL_DMA_IRQHandler+0xb0>
 8002554:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002558:	e008      	b.n	800256c <HAL_DMA_IRQHandler+0xb0>
 800255a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800255e:	e005      	b.n	800256c <HAL_DMA_IRQHandler+0xb0>
 8002560:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002564:	e002      	b.n	800256c <HAL_DMA_IRQHandler+0xb0>
 8002566:	2340      	movs	r3, #64	; 0x40
 8002568:	e000      	b.n	800256c <HAL_DMA_IRQHandler+0xb0>
 800256a:	2304      	movs	r3, #4
 800256c:	4a55      	ldr	r2, [pc, #340]	; (80026c4 <HAL_DMA_IRQHandler+0x208>)
 800256e:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002574:	2b00      	cmp	r3, #0
 8002576:	f000 8094 	beq.w	80026a2 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800257e:	6878      	ldr	r0, [r7, #4]
 8002580:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8002582:	e08e      	b.n	80026a2 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002588:	2202      	movs	r2, #2
 800258a:	409a      	lsls	r2, r3
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	4013      	ands	r3, r2
 8002590:	2b00      	cmp	r3, #0
 8002592:	d056      	beq.n	8002642 <HAL_DMA_IRQHandler+0x186>
 8002594:	68bb      	ldr	r3, [r7, #8]
 8002596:	f003 0302 	and.w	r3, r3, #2
 800259a:	2b00      	cmp	r3, #0
 800259c:	d051      	beq.n	8002642 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f003 0320 	and.w	r3, r3, #32
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d10b      	bne.n	80025c4 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	681a      	ldr	r2, [r3, #0]
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f022 020a 	bic.w	r2, r2, #10
 80025ba:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	2201      	movs	r2, #1
 80025c0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	4a38      	ldr	r2, [pc, #224]	; (80026ac <HAL_DMA_IRQHandler+0x1f0>)
 80025ca:	4293      	cmp	r3, r2
 80025cc:	d029      	beq.n	8002622 <HAL_DMA_IRQHandler+0x166>
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	4a37      	ldr	r2, [pc, #220]	; (80026b0 <HAL_DMA_IRQHandler+0x1f4>)
 80025d4:	4293      	cmp	r3, r2
 80025d6:	d022      	beq.n	800261e <HAL_DMA_IRQHandler+0x162>
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	4a35      	ldr	r2, [pc, #212]	; (80026b4 <HAL_DMA_IRQHandler+0x1f8>)
 80025de:	4293      	cmp	r3, r2
 80025e0:	d01a      	beq.n	8002618 <HAL_DMA_IRQHandler+0x15c>
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	4a34      	ldr	r2, [pc, #208]	; (80026b8 <HAL_DMA_IRQHandler+0x1fc>)
 80025e8:	4293      	cmp	r3, r2
 80025ea:	d012      	beq.n	8002612 <HAL_DMA_IRQHandler+0x156>
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	4a32      	ldr	r2, [pc, #200]	; (80026bc <HAL_DMA_IRQHandler+0x200>)
 80025f2:	4293      	cmp	r3, r2
 80025f4:	d00a      	beq.n	800260c <HAL_DMA_IRQHandler+0x150>
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	4a31      	ldr	r2, [pc, #196]	; (80026c0 <HAL_DMA_IRQHandler+0x204>)
 80025fc:	4293      	cmp	r3, r2
 80025fe:	d102      	bne.n	8002606 <HAL_DMA_IRQHandler+0x14a>
 8002600:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002604:	e00e      	b.n	8002624 <HAL_DMA_IRQHandler+0x168>
 8002606:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800260a:	e00b      	b.n	8002624 <HAL_DMA_IRQHandler+0x168>
 800260c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002610:	e008      	b.n	8002624 <HAL_DMA_IRQHandler+0x168>
 8002612:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002616:	e005      	b.n	8002624 <HAL_DMA_IRQHandler+0x168>
 8002618:	f44f 7300 	mov.w	r3, #512	; 0x200
 800261c:	e002      	b.n	8002624 <HAL_DMA_IRQHandler+0x168>
 800261e:	2320      	movs	r3, #32
 8002620:	e000      	b.n	8002624 <HAL_DMA_IRQHandler+0x168>
 8002622:	2302      	movs	r3, #2
 8002624:	4a27      	ldr	r2, [pc, #156]	; (80026c4 <HAL_DMA_IRQHandler+0x208>)
 8002626:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	2200      	movs	r2, #0
 800262c:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002634:	2b00      	cmp	r3, #0
 8002636:	d034      	beq.n	80026a2 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800263c:	6878      	ldr	r0, [r7, #4]
 800263e:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002640:	e02f      	b.n	80026a2 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002646:	2208      	movs	r2, #8
 8002648:	409a      	lsls	r2, r3
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	4013      	ands	r3, r2
 800264e:	2b00      	cmp	r3, #0
 8002650:	d028      	beq.n	80026a4 <HAL_DMA_IRQHandler+0x1e8>
 8002652:	68bb      	ldr	r3, [r7, #8]
 8002654:	f003 0308 	and.w	r3, r3, #8
 8002658:	2b00      	cmp	r3, #0
 800265a:	d023      	beq.n	80026a4 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	681a      	ldr	r2, [r3, #0]
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f022 020e 	bic.w	r2, r2, #14
 800266a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002674:	2101      	movs	r1, #1
 8002676:	fa01 f202 	lsl.w	r2, r1, r2
 800267a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	2201      	movs	r2, #1
 8002680:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	2201      	movs	r2, #1
 8002686:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	2200      	movs	r2, #0
 800268e:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002696:	2b00      	cmp	r3, #0
 8002698:	d004      	beq.n	80026a4 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800269e:	6878      	ldr	r0, [r7, #4]
 80026a0:	4798      	blx	r3
    }
  }
  return;
 80026a2:	bf00      	nop
 80026a4:	bf00      	nop
}
 80026a6:	3710      	adds	r7, #16
 80026a8:	46bd      	mov	sp, r7
 80026aa:	bd80      	pop	{r7, pc}
 80026ac:	40020008 	.word	0x40020008
 80026b0:	4002001c 	.word	0x4002001c
 80026b4:	40020030 	.word	0x40020030
 80026b8:	40020044 	.word	0x40020044
 80026bc:	40020058 	.word	0x40020058
 80026c0:	4002006c 	.word	0x4002006c
 80026c4:	40020000 	.word	0x40020000

080026c8 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80026c8:	b480      	push	{r7}
 80026ca:	b085      	sub	sp, #20
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	60f8      	str	r0, [r7, #12]
 80026d0:	60b9      	str	r1, [r7, #8]
 80026d2:	607a      	str	r2, [r7, #4]
 80026d4:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026de:	2101      	movs	r1, #1
 80026e0:	fa01 f202 	lsl.w	r2, r1, r2
 80026e4:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	683a      	ldr	r2, [r7, #0]
 80026ec:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	685b      	ldr	r3, [r3, #4]
 80026f2:	2b10      	cmp	r3, #16
 80026f4:	d108      	bne.n	8002708 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	687a      	ldr	r2, [r7, #4]
 80026fc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	68ba      	ldr	r2, [r7, #8]
 8002704:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002706:	e007      	b.n	8002718 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	68ba      	ldr	r2, [r7, #8]
 800270e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	687a      	ldr	r2, [r7, #4]
 8002716:	60da      	str	r2, [r3, #12]
}
 8002718:	bf00      	nop
 800271a:	3714      	adds	r7, #20
 800271c:	46bd      	mov	sp, r7
 800271e:	bc80      	pop	{r7}
 8002720:	4770      	bx	lr
	...

08002724 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002724:	b480      	push	{r7}
 8002726:	b08b      	sub	sp, #44	; 0x2c
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
 800272c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800272e:	2300      	movs	r3, #0
 8002730:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002732:	2300      	movs	r3, #0
 8002734:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002736:	e161      	b.n	80029fc <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002738:	2201      	movs	r2, #1
 800273a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800273c:	fa02 f303 	lsl.w	r3, r2, r3
 8002740:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002742:	683b      	ldr	r3, [r7, #0]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	69fa      	ldr	r2, [r7, #28]
 8002748:	4013      	ands	r3, r2
 800274a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800274c:	69ba      	ldr	r2, [r7, #24]
 800274e:	69fb      	ldr	r3, [r7, #28]
 8002750:	429a      	cmp	r2, r3
 8002752:	f040 8150 	bne.w	80029f6 <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	685b      	ldr	r3, [r3, #4]
 800275a:	4a97      	ldr	r2, [pc, #604]	; (80029b8 <HAL_GPIO_Init+0x294>)
 800275c:	4293      	cmp	r3, r2
 800275e:	d05e      	beq.n	800281e <HAL_GPIO_Init+0xfa>
 8002760:	4a95      	ldr	r2, [pc, #596]	; (80029b8 <HAL_GPIO_Init+0x294>)
 8002762:	4293      	cmp	r3, r2
 8002764:	d875      	bhi.n	8002852 <HAL_GPIO_Init+0x12e>
 8002766:	4a95      	ldr	r2, [pc, #596]	; (80029bc <HAL_GPIO_Init+0x298>)
 8002768:	4293      	cmp	r3, r2
 800276a:	d058      	beq.n	800281e <HAL_GPIO_Init+0xfa>
 800276c:	4a93      	ldr	r2, [pc, #588]	; (80029bc <HAL_GPIO_Init+0x298>)
 800276e:	4293      	cmp	r3, r2
 8002770:	d86f      	bhi.n	8002852 <HAL_GPIO_Init+0x12e>
 8002772:	4a93      	ldr	r2, [pc, #588]	; (80029c0 <HAL_GPIO_Init+0x29c>)
 8002774:	4293      	cmp	r3, r2
 8002776:	d052      	beq.n	800281e <HAL_GPIO_Init+0xfa>
 8002778:	4a91      	ldr	r2, [pc, #580]	; (80029c0 <HAL_GPIO_Init+0x29c>)
 800277a:	4293      	cmp	r3, r2
 800277c:	d869      	bhi.n	8002852 <HAL_GPIO_Init+0x12e>
 800277e:	4a91      	ldr	r2, [pc, #580]	; (80029c4 <HAL_GPIO_Init+0x2a0>)
 8002780:	4293      	cmp	r3, r2
 8002782:	d04c      	beq.n	800281e <HAL_GPIO_Init+0xfa>
 8002784:	4a8f      	ldr	r2, [pc, #572]	; (80029c4 <HAL_GPIO_Init+0x2a0>)
 8002786:	4293      	cmp	r3, r2
 8002788:	d863      	bhi.n	8002852 <HAL_GPIO_Init+0x12e>
 800278a:	4a8f      	ldr	r2, [pc, #572]	; (80029c8 <HAL_GPIO_Init+0x2a4>)
 800278c:	4293      	cmp	r3, r2
 800278e:	d046      	beq.n	800281e <HAL_GPIO_Init+0xfa>
 8002790:	4a8d      	ldr	r2, [pc, #564]	; (80029c8 <HAL_GPIO_Init+0x2a4>)
 8002792:	4293      	cmp	r3, r2
 8002794:	d85d      	bhi.n	8002852 <HAL_GPIO_Init+0x12e>
 8002796:	2b12      	cmp	r3, #18
 8002798:	d82a      	bhi.n	80027f0 <HAL_GPIO_Init+0xcc>
 800279a:	2b12      	cmp	r3, #18
 800279c:	d859      	bhi.n	8002852 <HAL_GPIO_Init+0x12e>
 800279e:	a201      	add	r2, pc, #4	; (adr r2, 80027a4 <HAL_GPIO_Init+0x80>)
 80027a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027a4:	0800281f 	.word	0x0800281f
 80027a8:	080027f9 	.word	0x080027f9
 80027ac:	0800280b 	.word	0x0800280b
 80027b0:	0800284d 	.word	0x0800284d
 80027b4:	08002853 	.word	0x08002853
 80027b8:	08002853 	.word	0x08002853
 80027bc:	08002853 	.word	0x08002853
 80027c0:	08002853 	.word	0x08002853
 80027c4:	08002853 	.word	0x08002853
 80027c8:	08002853 	.word	0x08002853
 80027cc:	08002853 	.word	0x08002853
 80027d0:	08002853 	.word	0x08002853
 80027d4:	08002853 	.word	0x08002853
 80027d8:	08002853 	.word	0x08002853
 80027dc:	08002853 	.word	0x08002853
 80027e0:	08002853 	.word	0x08002853
 80027e4:	08002853 	.word	0x08002853
 80027e8:	08002801 	.word	0x08002801
 80027ec:	08002815 	.word	0x08002815
 80027f0:	4a76      	ldr	r2, [pc, #472]	; (80029cc <HAL_GPIO_Init+0x2a8>)
 80027f2:	4293      	cmp	r3, r2
 80027f4:	d013      	beq.n	800281e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80027f6:	e02c      	b.n	8002852 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	68db      	ldr	r3, [r3, #12]
 80027fc:	623b      	str	r3, [r7, #32]
          break;
 80027fe:	e029      	b.n	8002854 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002800:	683b      	ldr	r3, [r7, #0]
 8002802:	68db      	ldr	r3, [r3, #12]
 8002804:	3304      	adds	r3, #4
 8002806:	623b      	str	r3, [r7, #32]
          break;
 8002808:	e024      	b.n	8002854 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800280a:	683b      	ldr	r3, [r7, #0]
 800280c:	68db      	ldr	r3, [r3, #12]
 800280e:	3308      	adds	r3, #8
 8002810:	623b      	str	r3, [r7, #32]
          break;
 8002812:	e01f      	b.n	8002854 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002814:	683b      	ldr	r3, [r7, #0]
 8002816:	68db      	ldr	r3, [r3, #12]
 8002818:	330c      	adds	r3, #12
 800281a:	623b      	str	r3, [r7, #32]
          break;
 800281c:	e01a      	b.n	8002854 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800281e:	683b      	ldr	r3, [r7, #0]
 8002820:	689b      	ldr	r3, [r3, #8]
 8002822:	2b00      	cmp	r3, #0
 8002824:	d102      	bne.n	800282c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002826:	2304      	movs	r3, #4
 8002828:	623b      	str	r3, [r7, #32]
          break;
 800282a:	e013      	b.n	8002854 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	689b      	ldr	r3, [r3, #8]
 8002830:	2b01      	cmp	r3, #1
 8002832:	d105      	bne.n	8002840 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002834:	2308      	movs	r3, #8
 8002836:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	69fa      	ldr	r2, [r7, #28]
 800283c:	611a      	str	r2, [r3, #16]
          break;
 800283e:	e009      	b.n	8002854 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002840:	2308      	movs	r3, #8
 8002842:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	69fa      	ldr	r2, [r7, #28]
 8002848:	615a      	str	r2, [r3, #20]
          break;
 800284a:	e003      	b.n	8002854 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800284c:	2300      	movs	r3, #0
 800284e:	623b      	str	r3, [r7, #32]
          break;
 8002850:	e000      	b.n	8002854 <HAL_GPIO_Init+0x130>
          break;
 8002852:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002854:	69bb      	ldr	r3, [r7, #24]
 8002856:	2bff      	cmp	r3, #255	; 0xff
 8002858:	d801      	bhi.n	800285e <HAL_GPIO_Init+0x13a>
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	e001      	b.n	8002862 <HAL_GPIO_Init+0x13e>
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	3304      	adds	r3, #4
 8002862:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002864:	69bb      	ldr	r3, [r7, #24]
 8002866:	2bff      	cmp	r3, #255	; 0xff
 8002868:	d802      	bhi.n	8002870 <HAL_GPIO_Init+0x14c>
 800286a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800286c:	009b      	lsls	r3, r3, #2
 800286e:	e002      	b.n	8002876 <HAL_GPIO_Init+0x152>
 8002870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002872:	3b08      	subs	r3, #8
 8002874:	009b      	lsls	r3, r3, #2
 8002876:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002878:	697b      	ldr	r3, [r7, #20]
 800287a:	681a      	ldr	r2, [r3, #0]
 800287c:	210f      	movs	r1, #15
 800287e:	693b      	ldr	r3, [r7, #16]
 8002880:	fa01 f303 	lsl.w	r3, r1, r3
 8002884:	43db      	mvns	r3, r3
 8002886:	401a      	ands	r2, r3
 8002888:	6a39      	ldr	r1, [r7, #32]
 800288a:	693b      	ldr	r3, [r7, #16]
 800288c:	fa01 f303 	lsl.w	r3, r1, r3
 8002890:	431a      	orrs	r2, r3
 8002892:	697b      	ldr	r3, [r7, #20]
 8002894:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002896:	683b      	ldr	r3, [r7, #0]
 8002898:	685b      	ldr	r3, [r3, #4]
 800289a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800289e:	2b00      	cmp	r3, #0
 80028a0:	f000 80a9 	beq.w	80029f6 <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80028a4:	4b4a      	ldr	r3, [pc, #296]	; (80029d0 <HAL_GPIO_Init+0x2ac>)
 80028a6:	699b      	ldr	r3, [r3, #24]
 80028a8:	4a49      	ldr	r2, [pc, #292]	; (80029d0 <HAL_GPIO_Init+0x2ac>)
 80028aa:	f043 0301 	orr.w	r3, r3, #1
 80028ae:	6193      	str	r3, [r2, #24]
 80028b0:	4b47      	ldr	r3, [pc, #284]	; (80029d0 <HAL_GPIO_Init+0x2ac>)
 80028b2:	699b      	ldr	r3, [r3, #24]
 80028b4:	f003 0301 	and.w	r3, r3, #1
 80028b8:	60bb      	str	r3, [r7, #8]
 80028ba:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80028bc:	4a45      	ldr	r2, [pc, #276]	; (80029d4 <HAL_GPIO_Init+0x2b0>)
 80028be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028c0:	089b      	lsrs	r3, r3, #2
 80028c2:	3302      	adds	r3, #2
 80028c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028c8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80028ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028cc:	f003 0303 	and.w	r3, r3, #3
 80028d0:	009b      	lsls	r3, r3, #2
 80028d2:	220f      	movs	r2, #15
 80028d4:	fa02 f303 	lsl.w	r3, r2, r3
 80028d8:	43db      	mvns	r3, r3
 80028da:	68fa      	ldr	r2, [r7, #12]
 80028dc:	4013      	ands	r3, r2
 80028de:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	4a3d      	ldr	r2, [pc, #244]	; (80029d8 <HAL_GPIO_Init+0x2b4>)
 80028e4:	4293      	cmp	r3, r2
 80028e6:	d00d      	beq.n	8002904 <HAL_GPIO_Init+0x1e0>
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	4a3c      	ldr	r2, [pc, #240]	; (80029dc <HAL_GPIO_Init+0x2b8>)
 80028ec:	4293      	cmp	r3, r2
 80028ee:	d007      	beq.n	8002900 <HAL_GPIO_Init+0x1dc>
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	4a3b      	ldr	r2, [pc, #236]	; (80029e0 <HAL_GPIO_Init+0x2bc>)
 80028f4:	4293      	cmp	r3, r2
 80028f6:	d101      	bne.n	80028fc <HAL_GPIO_Init+0x1d8>
 80028f8:	2302      	movs	r3, #2
 80028fa:	e004      	b.n	8002906 <HAL_GPIO_Init+0x1e2>
 80028fc:	2303      	movs	r3, #3
 80028fe:	e002      	b.n	8002906 <HAL_GPIO_Init+0x1e2>
 8002900:	2301      	movs	r3, #1
 8002902:	e000      	b.n	8002906 <HAL_GPIO_Init+0x1e2>
 8002904:	2300      	movs	r3, #0
 8002906:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002908:	f002 0203 	and.w	r2, r2, #3
 800290c:	0092      	lsls	r2, r2, #2
 800290e:	4093      	lsls	r3, r2
 8002910:	68fa      	ldr	r2, [r7, #12]
 8002912:	4313      	orrs	r3, r2
 8002914:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002916:	492f      	ldr	r1, [pc, #188]	; (80029d4 <HAL_GPIO_Init+0x2b0>)
 8002918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800291a:	089b      	lsrs	r3, r3, #2
 800291c:	3302      	adds	r3, #2
 800291e:	68fa      	ldr	r2, [r7, #12]
 8002920:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	685b      	ldr	r3, [r3, #4]
 8002928:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800292c:	2b00      	cmp	r3, #0
 800292e:	d006      	beq.n	800293e <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002930:	4b2c      	ldr	r3, [pc, #176]	; (80029e4 <HAL_GPIO_Init+0x2c0>)
 8002932:	689a      	ldr	r2, [r3, #8]
 8002934:	492b      	ldr	r1, [pc, #172]	; (80029e4 <HAL_GPIO_Init+0x2c0>)
 8002936:	69bb      	ldr	r3, [r7, #24]
 8002938:	4313      	orrs	r3, r2
 800293a:	608b      	str	r3, [r1, #8]
 800293c:	e006      	b.n	800294c <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800293e:	4b29      	ldr	r3, [pc, #164]	; (80029e4 <HAL_GPIO_Init+0x2c0>)
 8002940:	689a      	ldr	r2, [r3, #8]
 8002942:	69bb      	ldr	r3, [r7, #24]
 8002944:	43db      	mvns	r3, r3
 8002946:	4927      	ldr	r1, [pc, #156]	; (80029e4 <HAL_GPIO_Init+0x2c0>)
 8002948:	4013      	ands	r3, r2
 800294a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800294c:	683b      	ldr	r3, [r7, #0]
 800294e:	685b      	ldr	r3, [r3, #4]
 8002950:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002954:	2b00      	cmp	r3, #0
 8002956:	d006      	beq.n	8002966 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002958:	4b22      	ldr	r3, [pc, #136]	; (80029e4 <HAL_GPIO_Init+0x2c0>)
 800295a:	68da      	ldr	r2, [r3, #12]
 800295c:	4921      	ldr	r1, [pc, #132]	; (80029e4 <HAL_GPIO_Init+0x2c0>)
 800295e:	69bb      	ldr	r3, [r7, #24]
 8002960:	4313      	orrs	r3, r2
 8002962:	60cb      	str	r3, [r1, #12]
 8002964:	e006      	b.n	8002974 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002966:	4b1f      	ldr	r3, [pc, #124]	; (80029e4 <HAL_GPIO_Init+0x2c0>)
 8002968:	68da      	ldr	r2, [r3, #12]
 800296a:	69bb      	ldr	r3, [r7, #24]
 800296c:	43db      	mvns	r3, r3
 800296e:	491d      	ldr	r1, [pc, #116]	; (80029e4 <HAL_GPIO_Init+0x2c0>)
 8002970:	4013      	ands	r3, r2
 8002972:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002974:	683b      	ldr	r3, [r7, #0]
 8002976:	685b      	ldr	r3, [r3, #4]
 8002978:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800297c:	2b00      	cmp	r3, #0
 800297e:	d006      	beq.n	800298e <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002980:	4b18      	ldr	r3, [pc, #96]	; (80029e4 <HAL_GPIO_Init+0x2c0>)
 8002982:	685a      	ldr	r2, [r3, #4]
 8002984:	4917      	ldr	r1, [pc, #92]	; (80029e4 <HAL_GPIO_Init+0x2c0>)
 8002986:	69bb      	ldr	r3, [r7, #24]
 8002988:	4313      	orrs	r3, r2
 800298a:	604b      	str	r3, [r1, #4]
 800298c:	e006      	b.n	800299c <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800298e:	4b15      	ldr	r3, [pc, #84]	; (80029e4 <HAL_GPIO_Init+0x2c0>)
 8002990:	685a      	ldr	r2, [r3, #4]
 8002992:	69bb      	ldr	r3, [r7, #24]
 8002994:	43db      	mvns	r3, r3
 8002996:	4913      	ldr	r1, [pc, #76]	; (80029e4 <HAL_GPIO_Init+0x2c0>)
 8002998:	4013      	ands	r3, r2
 800299a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800299c:	683b      	ldr	r3, [r7, #0]
 800299e:	685b      	ldr	r3, [r3, #4]
 80029a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d01f      	beq.n	80029e8 <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80029a8:	4b0e      	ldr	r3, [pc, #56]	; (80029e4 <HAL_GPIO_Init+0x2c0>)
 80029aa:	681a      	ldr	r2, [r3, #0]
 80029ac:	490d      	ldr	r1, [pc, #52]	; (80029e4 <HAL_GPIO_Init+0x2c0>)
 80029ae:	69bb      	ldr	r3, [r7, #24]
 80029b0:	4313      	orrs	r3, r2
 80029b2:	600b      	str	r3, [r1, #0]
 80029b4:	e01f      	b.n	80029f6 <HAL_GPIO_Init+0x2d2>
 80029b6:	bf00      	nop
 80029b8:	10320000 	.word	0x10320000
 80029bc:	10310000 	.word	0x10310000
 80029c0:	10220000 	.word	0x10220000
 80029c4:	10210000 	.word	0x10210000
 80029c8:	10120000 	.word	0x10120000
 80029cc:	10110000 	.word	0x10110000
 80029d0:	40021000 	.word	0x40021000
 80029d4:	40010000 	.word	0x40010000
 80029d8:	40010800 	.word	0x40010800
 80029dc:	40010c00 	.word	0x40010c00
 80029e0:	40011000 	.word	0x40011000
 80029e4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80029e8:	4b0b      	ldr	r3, [pc, #44]	; (8002a18 <HAL_GPIO_Init+0x2f4>)
 80029ea:	681a      	ldr	r2, [r3, #0]
 80029ec:	69bb      	ldr	r3, [r7, #24]
 80029ee:	43db      	mvns	r3, r3
 80029f0:	4909      	ldr	r1, [pc, #36]	; (8002a18 <HAL_GPIO_Init+0x2f4>)
 80029f2:	4013      	ands	r3, r2
 80029f4:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80029f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029f8:	3301      	adds	r3, #1
 80029fa:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80029fc:	683b      	ldr	r3, [r7, #0]
 80029fe:	681a      	ldr	r2, [r3, #0]
 8002a00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a02:	fa22 f303 	lsr.w	r3, r2, r3
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	f47f ae96 	bne.w	8002738 <HAL_GPIO_Init+0x14>
  }
}
 8002a0c:	bf00      	nop
 8002a0e:	bf00      	nop
 8002a10:	372c      	adds	r7, #44	; 0x2c
 8002a12:	46bd      	mov	sp, r7
 8002a14:	bc80      	pop	{r7}
 8002a16:	4770      	bx	lr
 8002a18:	40010400 	.word	0x40010400

08002a1c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002a1c:	b480      	push	{r7}
 8002a1e:	b083      	sub	sp, #12
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
 8002a24:	460b      	mov	r3, r1
 8002a26:	807b      	strh	r3, [r7, #2]
 8002a28:	4613      	mov	r3, r2
 8002a2a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002a2c:	787b      	ldrb	r3, [r7, #1]
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d003      	beq.n	8002a3a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002a32:	887a      	ldrh	r2, [r7, #2]
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002a38:	e003      	b.n	8002a42 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002a3a:	887b      	ldrh	r3, [r7, #2]
 8002a3c:	041a      	lsls	r2, r3, #16
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	611a      	str	r2, [r3, #16]
}
 8002a42:	bf00      	nop
 8002a44:	370c      	adds	r7, #12
 8002a46:	46bd      	mov	sp, r7
 8002a48:	bc80      	pop	{r7}
 8002a4a:	4770      	bx	lr

08002a4c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b084      	sub	sp, #16
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d101      	bne.n	8002a5e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002a5a:	2301      	movs	r3, #1
 8002a5c:	e12b      	b.n	8002cb6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a64:	b2db      	uxtb	r3, r3
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d106      	bne.n	8002a78 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002a72:	6878      	ldr	r0, [r7, #4]
 8002a74:	f7fe ffdc 	bl	8001a30 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	2224      	movs	r2, #36	; 0x24
 8002a7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	681a      	ldr	r2, [r3, #0]
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f022 0201 	bic.w	r2, r2, #1
 8002a8e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	681a      	ldr	r2, [r3, #0]
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002a9e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	681a      	ldr	r2, [r3, #0]
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002aae:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002ab0:	f000 fcda 	bl	8003468 <HAL_RCC_GetPCLK1Freq>
 8002ab4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	685b      	ldr	r3, [r3, #4]
 8002aba:	4a81      	ldr	r2, [pc, #516]	; (8002cc0 <HAL_I2C_Init+0x274>)
 8002abc:	4293      	cmp	r3, r2
 8002abe:	d807      	bhi.n	8002ad0 <HAL_I2C_Init+0x84>
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	4a80      	ldr	r2, [pc, #512]	; (8002cc4 <HAL_I2C_Init+0x278>)
 8002ac4:	4293      	cmp	r3, r2
 8002ac6:	bf94      	ite	ls
 8002ac8:	2301      	movls	r3, #1
 8002aca:	2300      	movhi	r3, #0
 8002acc:	b2db      	uxtb	r3, r3
 8002ace:	e006      	b.n	8002ade <HAL_I2C_Init+0x92>
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	4a7d      	ldr	r2, [pc, #500]	; (8002cc8 <HAL_I2C_Init+0x27c>)
 8002ad4:	4293      	cmp	r3, r2
 8002ad6:	bf94      	ite	ls
 8002ad8:	2301      	movls	r3, #1
 8002ada:	2300      	movhi	r3, #0
 8002adc:	b2db      	uxtb	r3, r3
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d001      	beq.n	8002ae6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002ae2:	2301      	movs	r3, #1
 8002ae4:	e0e7      	b.n	8002cb6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	4a78      	ldr	r2, [pc, #480]	; (8002ccc <HAL_I2C_Init+0x280>)
 8002aea:	fba2 2303 	umull	r2, r3, r2, r3
 8002aee:	0c9b      	lsrs	r3, r3, #18
 8002af0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	685b      	ldr	r3, [r3, #4]
 8002af8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	68ba      	ldr	r2, [r7, #8]
 8002b02:	430a      	orrs	r2, r1
 8002b04:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	6a1b      	ldr	r3, [r3, #32]
 8002b0c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	685b      	ldr	r3, [r3, #4]
 8002b14:	4a6a      	ldr	r2, [pc, #424]	; (8002cc0 <HAL_I2C_Init+0x274>)
 8002b16:	4293      	cmp	r3, r2
 8002b18:	d802      	bhi.n	8002b20 <HAL_I2C_Init+0xd4>
 8002b1a:	68bb      	ldr	r3, [r7, #8]
 8002b1c:	3301      	adds	r3, #1
 8002b1e:	e009      	b.n	8002b34 <HAL_I2C_Init+0xe8>
 8002b20:	68bb      	ldr	r3, [r7, #8]
 8002b22:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002b26:	fb02 f303 	mul.w	r3, r2, r3
 8002b2a:	4a69      	ldr	r2, [pc, #420]	; (8002cd0 <HAL_I2C_Init+0x284>)
 8002b2c:	fba2 2303 	umull	r2, r3, r2, r3
 8002b30:	099b      	lsrs	r3, r3, #6
 8002b32:	3301      	adds	r3, #1
 8002b34:	687a      	ldr	r2, [r7, #4]
 8002b36:	6812      	ldr	r2, [r2, #0]
 8002b38:	430b      	orrs	r3, r1
 8002b3a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	69db      	ldr	r3, [r3, #28]
 8002b42:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002b46:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	685b      	ldr	r3, [r3, #4]
 8002b4e:	495c      	ldr	r1, [pc, #368]	; (8002cc0 <HAL_I2C_Init+0x274>)
 8002b50:	428b      	cmp	r3, r1
 8002b52:	d819      	bhi.n	8002b88 <HAL_I2C_Init+0x13c>
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	1e59      	subs	r1, r3, #1
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	685b      	ldr	r3, [r3, #4]
 8002b5c:	005b      	lsls	r3, r3, #1
 8002b5e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002b62:	1c59      	adds	r1, r3, #1
 8002b64:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002b68:	400b      	ands	r3, r1
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d00a      	beq.n	8002b84 <HAL_I2C_Init+0x138>
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	1e59      	subs	r1, r3, #1
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	685b      	ldr	r3, [r3, #4]
 8002b76:	005b      	lsls	r3, r3, #1
 8002b78:	fbb1 f3f3 	udiv	r3, r1, r3
 8002b7c:	3301      	adds	r3, #1
 8002b7e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b82:	e051      	b.n	8002c28 <HAL_I2C_Init+0x1dc>
 8002b84:	2304      	movs	r3, #4
 8002b86:	e04f      	b.n	8002c28 <HAL_I2C_Init+0x1dc>
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	689b      	ldr	r3, [r3, #8]
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d111      	bne.n	8002bb4 <HAL_I2C_Init+0x168>
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	1e58      	subs	r0, r3, #1
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	6859      	ldr	r1, [r3, #4]
 8002b98:	460b      	mov	r3, r1
 8002b9a:	005b      	lsls	r3, r3, #1
 8002b9c:	440b      	add	r3, r1
 8002b9e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ba2:	3301      	adds	r3, #1
 8002ba4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	bf0c      	ite	eq
 8002bac:	2301      	moveq	r3, #1
 8002bae:	2300      	movne	r3, #0
 8002bb0:	b2db      	uxtb	r3, r3
 8002bb2:	e012      	b.n	8002bda <HAL_I2C_Init+0x18e>
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	1e58      	subs	r0, r3, #1
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	6859      	ldr	r1, [r3, #4]
 8002bbc:	460b      	mov	r3, r1
 8002bbe:	009b      	lsls	r3, r3, #2
 8002bc0:	440b      	add	r3, r1
 8002bc2:	0099      	lsls	r1, r3, #2
 8002bc4:	440b      	add	r3, r1
 8002bc6:	fbb0 f3f3 	udiv	r3, r0, r3
 8002bca:	3301      	adds	r3, #1
 8002bcc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	bf0c      	ite	eq
 8002bd4:	2301      	moveq	r3, #1
 8002bd6:	2300      	movne	r3, #0
 8002bd8:	b2db      	uxtb	r3, r3
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d001      	beq.n	8002be2 <HAL_I2C_Init+0x196>
 8002bde:	2301      	movs	r3, #1
 8002be0:	e022      	b.n	8002c28 <HAL_I2C_Init+0x1dc>
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	689b      	ldr	r3, [r3, #8]
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d10e      	bne.n	8002c08 <HAL_I2C_Init+0x1bc>
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	1e58      	subs	r0, r3, #1
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	6859      	ldr	r1, [r3, #4]
 8002bf2:	460b      	mov	r3, r1
 8002bf4:	005b      	lsls	r3, r3, #1
 8002bf6:	440b      	add	r3, r1
 8002bf8:	fbb0 f3f3 	udiv	r3, r0, r3
 8002bfc:	3301      	adds	r3, #1
 8002bfe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c02:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002c06:	e00f      	b.n	8002c28 <HAL_I2C_Init+0x1dc>
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	1e58      	subs	r0, r3, #1
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	6859      	ldr	r1, [r3, #4]
 8002c10:	460b      	mov	r3, r1
 8002c12:	009b      	lsls	r3, r3, #2
 8002c14:	440b      	add	r3, r1
 8002c16:	0099      	lsls	r1, r3, #2
 8002c18:	440b      	add	r3, r1
 8002c1a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c1e:	3301      	adds	r3, #1
 8002c20:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c24:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002c28:	6879      	ldr	r1, [r7, #4]
 8002c2a:	6809      	ldr	r1, [r1, #0]
 8002c2c:	4313      	orrs	r3, r2
 8002c2e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	69da      	ldr	r2, [r3, #28]
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	6a1b      	ldr	r3, [r3, #32]
 8002c42:	431a      	orrs	r2, r3
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	430a      	orrs	r2, r1
 8002c4a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	689b      	ldr	r3, [r3, #8]
 8002c52:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002c56:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002c5a:	687a      	ldr	r2, [r7, #4]
 8002c5c:	6911      	ldr	r1, [r2, #16]
 8002c5e:	687a      	ldr	r2, [r7, #4]
 8002c60:	68d2      	ldr	r2, [r2, #12]
 8002c62:	4311      	orrs	r1, r2
 8002c64:	687a      	ldr	r2, [r7, #4]
 8002c66:	6812      	ldr	r2, [r2, #0]
 8002c68:	430b      	orrs	r3, r1
 8002c6a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	68db      	ldr	r3, [r3, #12]
 8002c72:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	695a      	ldr	r2, [r3, #20]
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	699b      	ldr	r3, [r3, #24]
 8002c7e:	431a      	orrs	r2, r3
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	430a      	orrs	r2, r1
 8002c86:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	681a      	ldr	r2, [r3, #0]
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f042 0201 	orr.w	r2, r2, #1
 8002c96:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	2220      	movs	r2, #32
 8002ca2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	2200      	movs	r2, #0
 8002caa:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	2200      	movs	r2, #0
 8002cb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002cb4:	2300      	movs	r3, #0
}
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	3710      	adds	r7, #16
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	bd80      	pop	{r7, pc}
 8002cbe:	bf00      	nop
 8002cc0:	000186a0 	.word	0x000186a0
 8002cc4:	001e847f 	.word	0x001e847f
 8002cc8:	003d08ff 	.word	0x003d08ff
 8002ccc:	431bde83 	.word	0x431bde83
 8002cd0:	10624dd3 	.word	0x10624dd3

08002cd4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	b086      	sub	sp, #24
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d101      	bne.n	8002ce6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002ce2:	2301      	movs	r3, #1
 8002ce4:	e272      	b.n	80031cc <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f003 0301 	and.w	r3, r3, #1
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	f000 8087 	beq.w	8002e02 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002cf4:	4b92      	ldr	r3, [pc, #584]	; (8002f40 <HAL_RCC_OscConfig+0x26c>)
 8002cf6:	685b      	ldr	r3, [r3, #4]
 8002cf8:	f003 030c 	and.w	r3, r3, #12
 8002cfc:	2b04      	cmp	r3, #4
 8002cfe:	d00c      	beq.n	8002d1a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002d00:	4b8f      	ldr	r3, [pc, #572]	; (8002f40 <HAL_RCC_OscConfig+0x26c>)
 8002d02:	685b      	ldr	r3, [r3, #4]
 8002d04:	f003 030c 	and.w	r3, r3, #12
 8002d08:	2b08      	cmp	r3, #8
 8002d0a:	d112      	bne.n	8002d32 <HAL_RCC_OscConfig+0x5e>
 8002d0c:	4b8c      	ldr	r3, [pc, #560]	; (8002f40 <HAL_RCC_OscConfig+0x26c>)
 8002d0e:	685b      	ldr	r3, [r3, #4]
 8002d10:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d14:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d18:	d10b      	bne.n	8002d32 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d1a:	4b89      	ldr	r3, [pc, #548]	; (8002f40 <HAL_RCC_OscConfig+0x26c>)
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d06c      	beq.n	8002e00 <HAL_RCC_OscConfig+0x12c>
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	685b      	ldr	r3, [r3, #4]
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d168      	bne.n	8002e00 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002d2e:	2301      	movs	r3, #1
 8002d30:	e24c      	b.n	80031cc <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	685b      	ldr	r3, [r3, #4]
 8002d36:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d3a:	d106      	bne.n	8002d4a <HAL_RCC_OscConfig+0x76>
 8002d3c:	4b80      	ldr	r3, [pc, #512]	; (8002f40 <HAL_RCC_OscConfig+0x26c>)
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	4a7f      	ldr	r2, [pc, #508]	; (8002f40 <HAL_RCC_OscConfig+0x26c>)
 8002d42:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d46:	6013      	str	r3, [r2, #0]
 8002d48:	e02e      	b.n	8002da8 <HAL_RCC_OscConfig+0xd4>
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	685b      	ldr	r3, [r3, #4]
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d10c      	bne.n	8002d6c <HAL_RCC_OscConfig+0x98>
 8002d52:	4b7b      	ldr	r3, [pc, #492]	; (8002f40 <HAL_RCC_OscConfig+0x26c>)
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	4a7a      	ldr	r2, [pc, #488]	; (8002f40 <HAL_RCC_OscConfig+0x26c>)
 8002d58:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d5c:	6013      	str	r3, [r2, #0]
 8002d5e:	4b78      	ldr	r3, [pc, #480]	; (8002f40 <HAL_RCC_OscConfig+0x26c>)
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	4a77      	ldr	r2, [pc, #476]	; (8002f40 <HAL_RCC_OscConfig+0x26c>)
 8002d64:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d68:	6013      	str	r3, [r2, #0]
 8002d6a:	e01d      	b.n	8002da8 <HAL_RCC_OscConfig+0xd4>
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	685b      	ldr	r3, [r3, #4]
 8002d70:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002d74:	d10c      	bne.n	8002d90 <HAL_RCC_OscConfig+0xbc>
 8002d76:	4b72      	ldr	r3, [pc, #456]	; (8002f40 <HAL_RCC_OscConfig+0x26c>)
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	4a71      	ldr	r2, [pc, #452]	; (8002f40 <HAL_RCC_OscConfig+0x26c>)
 8002d7c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002d80:	6013      	str	r3, [r2, #0]
 8002d82:	4b6f      	ldr	r3, [pc, #444]	; (8002f40 <HAL_RCC_OscConfig+0x26c>)
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	4a6e      	ldr	r2, [pc, #440]	; (8002f40 <HAL_RCC_OscConfig+0x26c>)
 8002d88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d8c:	6013      	str	r3, [r2, #0]
 8002d8e:	e00b      	b.n	8002da8 <HAL_RCC_OscConfig+0xd4>
 8002d90:	4b6b      	ldr	r3, [pc, #428]	; (8002f40 <HAL_RCC_OscConfig+0x26c>)
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	4a6a      	ldr	r2, [pc, #424]	; (8002f40 <HAL_RCC_OscConfig+0x26c>)
 8002d96:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d9a:	6013      	str	r3, [r2, #0]
 8002d9c:	4b68      	ldr	r3, [pc, #416]	; (8002f40 <HAL_RCC_OscConfig+0x26c>)
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	4a67      	ldr	r2, [pc, #412]	; (8002f40 <HAL_RCC_OscConfig+0x26c>)
 8002da2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002da6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	685b      	ldr	r3, [r3, #4]
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d013      	beq.n	8002dd8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002db0:	f7ff f8da 	bl	8001f68 <HAL_GetTick>
 8002db4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002db6:	e008      	b.n	8002dca <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002db8:	f7ff f8d6 	bl	8001f68 <HAL_GetTick>
 8002dbc:	4602      	mov	r2, r0
 8002dbe:	693b      	ldr	r3, [r7, #16]
 8002dc0:	1ad3      	subs	r3, r2, r3
 8002dc2:	2b64      	cmp	r3, #100	; 0x64
 8002dc4:	d901      	bls.n	8002dca <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002dc6:	2303      	movs	r3, #3
 8002dc8:	e200      	b.n	80031cc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002dca:	4b5d      	ldr	r3, [pc, #372]	; (8002f40 <HAL_RCC_OscConfig+0x26c>)
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d0f0      	beq.n	8002db8 <HAL_RCC_OscConfig+0xe4>
 8002dd6:	e014      	b.n	8002e02 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dd8:	f7ff f8c6 	bl	8001f68 <HAL_GetTick>
 8002ddc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002dde:	e008      	b.n	8002df2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002de0:	f7ff f8c2 	bl	8001f68 <HAL_GetTick>
 8002de4:	4602      	mov	r2, r0
 8002de6:	693b      	ldr	r3, [r7, #16]
 8002de8:	1ad3      	subs	r3, r2, r3
 8002dea:	2b64      	cmp	r3, #100	; 0x64
 8002dec:	d901      	bls.n	8002df2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002dee:	2303      	movs	r3, #3
 8002df0:	e1ec      	b.n	80031cc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002df2:	4b53      	ldr	r3, [pc, #332]	; (8002f40 <HAL_RCC_OscConfig+0x26c>)
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d1f0      	bne.n	8002de0 <HAL_RCC_OscConfig+0x10c>
 8002dfe:	e000      	b.n	8002e02 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e00:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f003 0302 	and.w	r3, r3, #2
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d063      	beq.n	8002ed6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002e0e:	4b4c      	ldr	r3, [pc, #304]	; (8002f40 <HAL_RCC_OscConfig+0x26c>)
 8002e10:	685b      	ldr	r3, [r3, #4]
 8002e12:	f003 030c 	and.w	r3, r3, #12
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d00b      	beq.n	8002e32 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002e1a:	4b49      	ldr	r3, [pc, #292]	; (8002f40 <HAL_RCC_OscConfig+0x26c>)
 8002e1c:	685b      	ldr	r3, [r3, #4]
 8002e1e:	f003 030c 	and.w	r3, r3, #12
 8002e22:	2b08      	cmp	r3, #8
 8002e24:	d11c      	bne.n	8002e60 <HAL_RCC_OscConfig+0x18c>
 8002e26:	4b46      	ldr	r3, [pc, #280]	; (8002f40 <HAL_RCC_OscConfig+0x26c>)
 8002e28:	685b      	ldr	r3, [r3, #4]
 8002e2a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d116      	bne.n	8002e60 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e32:	4b43      	ldr	r3, [pc, #268]	; (8002f40 <HAL_RCC_OscConfig+0x26c>)
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f003 0302 	and.w	r3, r3, #2
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d005      	beq.n	8002e4a <HAL_RCC_OscConfig+0x176>
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	691b      	ldr	r3, [r3, #16]
 8002e42:	2b01      	cmp	r3, #1
 8002e44:	d001      	beq.n	8002e4a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002e46:	2301      	movs	r3, #1
 8002e48:	e1c0      	b.n	80031cc <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e4a:	4b3d      	ldr	r3, [pc, #244]	; (8002f40 <HAL_RCC_OscConfig+0x26c>)
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	695b      	ldr	r3, [r3, #20]
 8002e56:	00db      	lsls	r3, r3, #3
 8002e58:	4939      	ldr	r1, [pc, #228]	; (8002f40 <HAL_RCC_OscConfig+0x26c>)
 8002e5a:	4313      	orrs	r3, r2
 8002e5c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e5e:	e03a      	b.n	8002ed6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	691b      	ldr	r3, [r3, #16]
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d020      	beq.n	8002eaa <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e68:	4b36      	ldr	r3, [pc, #216]	; (8002f44 <HAL_RCC_OscConfig+0x270>)
 8002e6a:	2201      	movs	r2, #1
 8002e6c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e6e:	f7ff f87b 	bl	8001f68 <HAL_GetTick>
 8002e72:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e74:	e008      	b.n	8002e88 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e76:	f7ff f877 	bl	8001f68 <HAL_GetTick>
 8002e7a:	4602      	mov	r2, r0
 8002e7c:	693b      	ldr	r3, [r7, #16]
 8002e7e:	1ad3      	subs	r3, r2, r3
 8002e80:	2b02      	cmp	r3, #2
 8002e82:	d901      	bls.n	8002e88 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002e84:	2303      	movs	r3, #3
 8002e86:	e1a1      	b.n	80031cc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e88:	4b2d      	ldr	r3, [pc, #180]	; (8002f40 <HAL_RCC_OscConfig+0x26c>)
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f003 0302 	and.w	r3, r3, #2
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d0f0      	beq.n	8002e76 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e94:	4b2a      	ldr	r3, [pc, #168]	; (8002f40 <HAL_RCC_OscConfig+0x26c>)
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	695b      	ldr	r3, [r3, #20]
 8002ea0:	00db      	lsls	r3, r3, #3
 8002ea2:	4927      	ldr	r1, [pc, #156]	; (8002f40 <HAL_RCC_OscConfig+0x26c>)
 8002ea4:	4313      	orrs	r3, r2
 8002ea6:	600b      	str	r3, [r1, #0]
 8002ea8:	e015      	b.n	8002ed6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002eaa:	4b26      	ldr	r3, [pc, #152]	; (8002f44 <HAL_RCC_OscConfig+0x270>)
 8002eac:	2200      	movs	r2, #0
 8002eae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002eb0:	f7ff f85a 	bl	8001f68 <HAL_GetTick>
 8002eb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002eb6:	e008      	b.n	8002eca <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002eb8:	f7ff f856 	bl	8001f68 <HAL_GetTick>
 8002ebc:	4602      	mov	r2, r0
 8002ebe:	693b      	ldr	r3, [r7, #16]
 8002ec0:	1ad3      	subs	r3, r2, r3
 8002ec2:	2b02      	cmp	r3, #2
 8002ec4:	d901      	bls.n	8002eca <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002ec6:	2303      	movs	r3, #3
 8002ec8:	e180      	b.n	80031cc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002eca:	4b1d      	ldr	r3, [pc, #116]	; (8002f40 <HAL_RCC_OscConfig+0x26c>)
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f003 0302 	and.w	r3, r3, #2
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d1f0      	bne.n	8002eb8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f003 0308 	and.w	r3, r3, #8
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d03a      	beq.n	8002f58 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	699b      	ldr	r3, [r3, #24]
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d019      	beq.n	8002f1e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002eea:	4b17      	ldr	r3, [pc, #92]	; (8002f48 <HAL_RCC_OscConfig+0x274>)
 8002eec:	2201      	movs	r2, #1
 8002eee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ef0:	f7ff f83a 	bl	8001f68 <HAL_GetTick>
 8002ef4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ef6:	e008      	b.n	8002f0a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ef8:	f7ff f836 	bl	8001f68 <HAL_GetTick>
 8002efc:	4602      	mov	r2, r0
 8002efe:	693b      	ldr	r3, [r7, #16]
 8002f00:	1ad3      	subs	r3, r2, r3
 8002f02:	2b02      	cmp	r3, #2
 8002f04:	d901      	bls.n	8002f0a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002f06:	2303      	movs	r3, #3
 8002f08:	e160      	b.n	80031cc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f0a:	4b0d      	ldr	r3, [pc, #52]	; (8002f40 <HAL_RCC_OscConfig+0x26c>)
 8002f0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f0e:	f003 0302 	and.w	r3, r3, #2
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d0f0      	beq.n	8002ef8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002f16:	2001      	movs	r0, #1
 8002f18:	f000 face 	bl	80034b8 <RCC_Delay>
 8002f1c:	e01c      	b.n	8002f58 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f1e:	4b0a      	ldr	r3, [pc, #40]	; (8002f48 <HAL_RCC_OscConfig+0x274>)
 8002f20:	2200      	movs	r2, #0
 8002f22:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f24:	f7ff f820 	bl	8001f68 <HAL_GetTick>
 8002f28:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f2a:	e00f      	b.n	8002f4c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f2c:	f7ff f81c 	bl	8001f68 <HAL_GetTick>
 8002f30:	4602      	mov	r2, r0
 8002f32:	693b      	ldr	r3, [r7, #16]
 8002f34:	1ad3      	subs	r3, r2, r3
 8002f36:	2b02      	cmp	r3, #2
 8002f38:	d908      	bls.n	8002f4c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002f3a:	2303      	movs	r3, #3
 8002f3c:	e146      	b.n	80031cc <HAL_RCC_OscConfig+0x4f8>
 8002f3e:	bf00      	nop
 8002f40:	40021000 	.word	0x40021000
 8002f44:	42420000 	.word	0x42420000
 8002f48:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f4c:	4b92      	ldr	r3, [pc, #584]	; (8003198 <HAL_RCC_OscConfig+0x4c4>)
 8002f4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f50:	f003 0302 	and.w	r3, r3, #2
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d1e9      	bne.n	8002f2c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f003 0304 	and.w	r3, r3, #4
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	f000 80a6 	beq.w	80030b2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f66:	2300      	movs	r3, #0
 8002f68:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f6a:	4b8b      	ldr	r3, [pc, #556]	; (8003198 <HAL_RCC_OscConfig+0x4c4>)
 8002f6c:	69db      	ldr	r3, [r3, #28]
 8002f6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d10d      	bne.n	8002f92 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f76:	4b88      	ldr	r3, [pc, #544]	; (8003198 <HAL_RCC_OscConfig+0x4c4>)
 8002f78:	69db      	ldr	r3, [r3, #28]
 8002f7a:	4a87      	ldr	r2, [pc, #540]	; (8003198 <HAL_RCC_OscConfig+0x4c4>)
 8002f7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f80:	61d3      	str	r3, [r2, #28]
 8002f82:	4b85      	ldr	r3, [pc, #532]	; (8003198 <HAL_RCC_OscConfig+0x4c4>)
 8002f84:	69db      	ldr	r3, [r3, #28]
 8002f86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f8a:	60bb      	str	r3, [r7, #8]
 8002f8c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f8e:	2301      	movs	r3, #1
 8002f90:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f92:	4b82      	ldr	r3, [pc, #520]	; (800319c <HAL_RCC_OscConfig+0x4c8>)
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d118      	bne.n	8002fd0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002f9e:	4b7f      	ldr	r3, [pc, #508]	; (800319c <HAL_RCC_OscConfig+0x4c8>)
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	4a7e      	ldr	r2, [pc, #504]	; (800319c <HAL_RCC_OscConfig+0x4c8>)
 8002fa4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002fa8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002faa:	f7fe ffdd 	bl	8001f68 <HAL_GetTick>
 8002fae:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fb0:	e008      	b.n	8002fc4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002fb2:	f7fe ffd9 	bl	8001f68 <HAL_GetTick>
 8002fb6:	4602      	mov	r2, r0
 8002fb8:	693b      	ldr	r3, [r7, #16]
 8002fba:	1ad3      	subs	r3, r2, r3
 8002fbc:	2b64      	cmp	r3, #100	; 0x64
 8002fbe:	d901      	bls.n	8002fc4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002fc0:	2303      	movs	r3, #3
 8002fc2:	e103      	b.n	80031cc <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fc4:	4b75      	ldr	r3, [pc, #468]	; (800319c <HAL_RCC_OscConfig+0x4c8>)
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d0f0      	beq.n	8002fb2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	68db      	ldr	r3, [r3, #12]
 8002fd4:	2b01      	cmp	r3, #1
 8002fd6:	d106      	bne.n	8002fe6 <HAL_RCC_OscConfig+0x312>
 8002fd8:	4b6f      	ldr	r3, [pc, #444]	; (8003198 <HAL_RCC_OscConfig+0x4c4>)
 8002fda:	6a1b      	ldr	r3, [r3, #32]
 8002fdc:	4a6e      	ldr	r2, [pc, #440]	; (8003198 <HAL_RCC_OscConfig+0x4c4>)
 8002fde:	f043 0301 	orr.w	r3, r3, #1
 8002fe2:	6213      	str	r3, [r2, #32]
 8002fe4:	e02d      	b.n	8003042 <HAL_RCC_OscConfig+0x36e>
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	68db      	ldr	r3, [r3, #12]
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d10c      	bne.n	8003008 <HAL_RCC_OscConfig+0x334>
 8002fee:	4b6a      	ldr	r3, [pc, #424]	; (8003198 <HAL_RCC_OscConfig+0x4c4>)
 8002ff0:	6a1b      	ldr	r3, [r3, #32]
 8002ff2:	4a69      	ldr	r2, [pc, #420]	; (8003198 <HAL_RCC_OscConfig+0x4c4>)
 8002ff4:	f023 0301 	bic.w	r3, r3, #1
 8002ff8:	6213      	str	r3, [r2, #32]
 8002ffa:	4b67      	ldr	r3, [pc, #412]	; (8003198 <HAL_RCC_OscConfig+0x4c4>)
 8002ffc:	6a1b      	ldr	r3, [r3, #32]
 8002ffe:	4a66      	ldr	r2, [pc, #408]	; (8003198 <HAL_RCC_OscConfig+0x4c4>)
 8003000:	f023 0304 	bic.w	r3, r3, #4
 8003004:	6213      	str	r3, [r2, #32]
 8003006:	e01c      	b.n	8003042 <HAL_RCC_OscConfig+0x36e>
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	68db      	ldr	r3, [r3, #12]
 800300c:	2b05      	cmp	r3, #5
 800300e:	d10c      	bne.n	800302a <HAL_RCC_OscConfig+0x356>
 8003010:	4b61      	ldr	r3, [pc, #388]	; (8003198 <HAL_RCC_OscConfig+0x4c4>)
 8003012:	6a1b      	ldr	r3, [r3, #32]
 8003014:	4a60      	ldr	r2, [pc, #384]	; (8003198 <HAL_RCC_OscConfig+0x4c4>)
 8003016:	f043 0304 	orr.w	r3, r3, #4
 800301a:	6213      	str	r3, [r2, #32]
 800301c:	4b5e      	ldr	r3, [pc, #376]	; (8003198 <HAL_RCC_OscConfig+0x4c4>)
 800301e:	6a1b      	ldr	r3, [r3, #32]
 8003020:	4a5d      	ldr	r2, [pc, #372]	; (8003198 <HAL_RCC_OscConfig+0x4c4>)
 8003022:	f043 0301 	orr.w	r3, r3, #1
 8003026:	6213      	str	r3, [r2, #32]
 8003028:	e00b      	b.n	8003042 <HAL_RCC_OscConfig+0x36e>
 800302a:	4b5b      	ldr	r3, [pc, #364]	; (8003198 <HAL_RCC_OscConfig+0x4c4>)
 800302c:	6a1b      	ldr	r3, [r3, #32]
 800302e:	4a5a      	ldr	r2, [pc, #360]	; (8003198 <HAL_RCC_OscConfig+0x4c4>)
 8003030:	f023 0301 	bic.w	r3, r3, #1
 8003034:	6213      	str	r3, [r2, #32]
 8003036:	4b58      	ldr	r3, [pc, #352]	; (8003198 <HAL_RCC_OscConfig+0x4c4>)
 8003038:	6a1b      	ldr	r3, [r3, #32]
 800303a:	4a57      	ldr	r2, [pc, #348]	; (8003198 <HAL_RCC_OscConfig+0x4c4>)
 800303c:	f023 0304 	bic.w	r3, r3, #4
 8003040:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	68db      	ldr	r3, [r3, #12]
 8003046:	2b00      	cmp	r3, #0
 8003048:	d015      	beq.n	8003076 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800304a:	f7fe ff8d 	bl	8001f68 <HAL_GetTick>
 800304e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003050:	e00a      	b.n	8003068 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003052:	f7fe ff89 	bl	8001f68 <HAL_GetTick>
 8003056:	4602      	mov	r2, r0
 8003058:	693b      	ldr	r3, [r7, #16]
 800305a:	1ad3      	subs	r3, r2, r3
 800305c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003060:	4293      	cmp	r3, r2
 8003062:	d901      	bls.n	8003068 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003064:	2303      	movs	r3, #3
 8003066:	e0b1      	b.n	80031cc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003068:	4b4b      	ldr	r3, [pc, #300]	; (8003198 <HAL_RCC_OscConfig+0x4c4>)
 800306a:	6a1b      	ldr	r3, [r3, #32]
 800306c:	f003 0302 	and.w	r3, r3, #2
 8003070:	2b00      	cmp	r3, #0
 8003072:	d0ee      	beq.n	8003052 <HAL_RCC_OscConfig+0x37e>
 8003074:	e014      	b.n	80030a0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003076:	f7fe ff77 	bl	8001f68 <HAL_GetTick>
 800307a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800307c:	e00a      	b.n	8003094 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800307e:	f7fe ff73 	bl	8001f68 <HAL_GetTick>
 8003082:	4602      	mov	r2, r0
 8003084:	693b      	ldr	r3, [r7, #16]
 8003086:	1ad3      	subs	r3, r2, r3
 8003088:	f241 3288 	movw	r2, #5000	; 0x1388
 800308c:	4293      	cmp	r3, r2
 800308e:	d901      	bls.n	8003094 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003090:	2303      	movs	r3, #3
 8003092:	e09b      	b.n	80031cc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003094:	4b40      	ldr	r3, [pc, #256]	; (8003198 <HAL_RCC_OscConfig+0x4c4>)
 8003096:	6a1b      	ldr	r3, [r3, #32]
 8003098:	f003 0302 	and.w	r3, r3, #2
 800309c:	2b00      	cmp	r3, #0
 800309e:	d1ee      	bne.n	800307e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80030a0:	7dfb      	ldrb	r3, [r7, #23]
 80030a2:	2b01      	cmp	r3, #1
 80030a4:	d105      	bne.n	80030b2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80030a6:	4b3c      	ldr	r3, [pc, #240]	; (8003198 <HAL_RCC_OscConfig+0x4c4>)
 80030a8:	69db      	ldr	r3, [r3, #28]
 80030aa:	4a3b      	ldr	r2, [pc, #236]	; (8003198 <HAL_RCC_OscConfig+0x4c4>)
 80030ac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80030b0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	69db      	ldr	r3, [r3, #28]
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	f000 8087 	beq.w	80031ca <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80030bc:	4b36      	ldr	r3, [pc, #216]	; (8003198 <HAL_RCC_OscConfig+0x4c4>)
 80030be:	685b      	ldr	r3, [r3, #4]
 80030c0:	f003 030c 	and.w	r3, r3, #12
 80030c4:	2b08      	cmp	r3, #8
 80030c6:	d061      	beq.n	800318c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	69db      	ldr	r3, [r3, #28]
 80030cc:	2b02      	cmp	r3, #2
 80030ce:	d146      	bne.n	800315e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030d0:	4b33      	ldr	r3, [pc, #204]	; (80031a0 <HAL_RCC_OscConfig+0x4cc>)
 80030d2:	2200      	movs	r2, #0
 80030d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030d6:	f7fe ff47 	bl	8001f68 <HAL_GetTick>
 80030da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80030dc:	e008      	b.n	80030f0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030de:	f7fe ff43 	bl	8001f68 <HAL_GetTick>
 80030e2:	4602      	mov	r2, r0
 80030e4:	693b      	ldr	r3, [r7, #16]
 80030e6:	1ad3      	subs	r3, r2, r3
 80030e8:	2b02      	cmp	r3, #2
 80030ea:	d901      	bls.n	80030f0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80030ec:	2303      	movs	r3, #3
 80030ee:	e06d      	b.n	80031cc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80030f0:	4b29      	ldr	r3, [pc, #164]	; (8003198 <HAL_RCC_OscConfig+0x4c4>)
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d1f0      	bne.n	80030de <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	6a1b      	ldr	r3, [r3, #32]
 8003100:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003104:	d108      	bne.n	8003118 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003106:	4b24      	ldr	r3, [pc, #144]	; (8003198 <HAL_RCC_OscConfig+0x4c4>)
 8003108:	685b      	ldr	r3, [r3, #4]
 800310a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	689b      	ldr	r3, [r3, #8]
 8003112:	4921      	ldr	r1, [pc, #132]	; (8003198 <HAL_RCC_OscConfig+0x4c4>)
 8003114:	4313      	orrs	r3, r2
 8003116:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003118:	4b1f      	ldr	r3, [pc, #124]	; (8003198 <HAL_RCC_OscConfig+0x4c4>)
 800311a:	685b      	ldr	r3, [r3, #4]
 800311c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	6a19      	ldr	r1, [r3, #32]
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003128:	430b      	orrs	r3, r1
 800312a:	491b      	ldr	r1, [pc, #108]	; (8003198 <HAL_RCC_OscConfig+0x4c4>)
 800312c:	4313      	orrs	r3, r2
 800312e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003130:	4b1b      	ldr	r3, [pc, #108]	; (80031a0 <HAL_RCC_OscConfig+0x4cc>)
 8003132:	2201      	movs	r2, #1
 8003134:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003136:	f7fe ff17 	bl	8001f68 <HAL_GetTick>
 800313a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800313c:	e008      	b.n	8003150 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800313e:	f7fe ff13 	bl	8001f68 <HAL_GetTick>
 8003142:	4602      	mov	r2, r0
 8003144:	693b      	ldr	r3, [r7, #16]
 8003146:	1ad3      	subs	r3, r2, r3
 8003148:	2b02      	cmp	r3, #2
 800314a:	d901      	bls.n	8003150 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800314c:	2303      	movs	r3, #3
 800314e:	e03d      	b.n	80031cc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003150:	4b11      	ldr	r3, [pc, #68]	; (8003198 <HAL_RCC_OscConfig+0x4c4>)
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003158:	2b00      	cmp	r3, #0
 800315a:	d0f0      	beq.n	800313e <HAL_RCC_OscConfig+0x46a>
 800315c:	e035      	b.n	80031ca <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800315e:	4b10      	ldr	r3, [pc, #64]	; (80031a0 <HAL_RCC_OscConfig+0x4cc>)
 8003160:	2200      	movs	r2, #0
 8003162:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003164:	f7fe ff00 	bl	8001f68 <HAL_GetTick>
 8003168:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800316a:	e008      	b.n	800317e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800316c:	f7fe fefc 	bl	8001f68 <HAL_GetTick>
 8003170:	4602      	mov	r2, r0
 8003172:	693b      	ldr	r3, [r7, #16]
 8003174:	1ad3      	subs	r3, r2, r3
 8003176:	2b02      	cmp	r3, #2
 8003178:	d901      	bls.n	800317e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800317a:	2303      	movs	r3, #3
 800317c:	e026      	b.n	80031cc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800317e:	4b06      	ldr	r3, [pc, #24]	; (8003198 <HAL_RCC_OscConfig+0x4c4>)
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003186:	2b00      	cmp	r3, #0
 8003188:	d1f0      	bne.n	800316c <HAL_RCC_OscConfig+0x498>
 800318a:	e01e      	b.n	80031ca <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	69db      	ldr	r3, [r3, #28]
 8003190:	2b01      	cmp	r3, #1
 8003192:	d107      	bne.n	80031a4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003194:	2301      	movs	r3, #1
 8003196:	e019      	b.n	80031cc <HAL_RCC_OscConfig+0x4f8>
 8003198:	40021000 	.word	0x40021000
 800319c:	40007000 	.word	0x40007000
 80031a0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80031a4:	4b0b      	ldr	r3, [pc, #44]	; (80031d4 <HAL_RCC_OscConfig+0x500>)
 80031a6:	685b      	ldr	r3, [r3, #4]
 80031a8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	6a1b      	ldr	r3, [r3, #32]
 80031b4:	429a      	cmp	r2, r3
 80031b6:	d106      	bne.n	80031c6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80031c2:	429a      	cmp	r2, r3
 80031c4:	d001      	beq.n	80031ca <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80031c6:	2301      	movs	r3, #1
 80031c8:	e000      	b.n	80031cc <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80031ca:	2300      	movs	r3, #0
}
 80031cc:	4618      	mov	r0, r3
 80031ce:	3718      	adds	r7, #24
 80031d0:	46bd      	mov	sp, r7
 80031d2:	bd80      	pop	{r7, pc}
 80031d4:	40021000 	.word	0x40021000

080031d8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80031d8:	b580      	push	{r7, lr}
 80031da:	b084      	sub	sp, #16
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]
 80031e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d101      	bne.n	80031ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80031e8:	2301      	movs	r3, #1
 80031ea:	e0d0      	b.n	800338e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80031ec:	4b6a      	ldr	r3, [pc, #424]	; (8003398 <HAL_RCC_ClockConfig+0x1c0>)
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f003 0307 	and.w	r3, r3, #7
 80031f4:	683a      	ldr	r2, [r7, #0]
 80031f6:	429a      	cmp	r2, r3
 80031f8:	d910      	bls.n	800321c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031fa:	4b67      	ldr	r3, [pc, #412]	; (8003398 <HAL_RCC_ClockConfig+0x1c0>)
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f023 0207 	bic.w	r2, r3, #7
 8003202:	4965      	ldr	r1, [pc, #404]	; (8003398 <HAL_RCC_ClockConfig+0x1c0>)
 8003204:	683b      	ldr	r3, [r7, #0]
 8003206:	4313      	orrs	r3, r2
 8003208:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800320a:	4b63      	ldr	r3, [pc, #396]	; (8003398 <HAL_RCC_ClockConfig+0x1c0>)
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f003 0307 	and.w	r3, r3, #7
 8003212:	683a      	ldr	r2, [r7, #0]
 8003214:	429a      	cmp	r2, r3
 8003216:	d001      	beq.n	800321c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003218:	2301      	movs	r3, #1
 800321a:	e0b8      	b.n	800338e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f003 0302 	and.w	r3, r3, #2
 8003224:	2b00      	cmp	r3, #0
 8003226:	d020      	beq.n	800326a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f003 0304 	and.w	r3, r3, #4
 8003230:	2b00      	cmp	r3, #0
 8003232:	d005      	beq.n	8003240 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003234:	4b59      	ldr	r3, [pc, #356]	; (800339c <HAL_RCC_ClockConfig+0x1c4>)
 8003236:	685b      	ldr	r3, [r3, #4]
 8003238:	4a58      	ldr	r2, [pc, #352]	; (800339c <HAL_RCC_ClockConfig+0x1c4>)
 800323a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800323e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f003 0308 	and.w	r3, r3, #8
 8003248:	2b00      	cmp	r3, #0
 800324a:	d005      	beq.n	8003258 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800324c:	4b53      	ldr	r3, [pc, #332]	; (800339c <HAL_RCC_ClockConfig+0x1c4>)
 800324e:	685b      	ldr	r3, [r3, #4]
 8003250:	4a52      	ldr	r2, [pc, #328]	; (800339c <HAL_RCC_ClockConfig+0x1c4>)
 8003252:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003256:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003258:	4b50      	ldr	r3, [pc, #320]	; (800339c <HAL_RCC_ClockConfig+0x1c4>)
 800325a:	685b      	ldr	r3, [r3, #4]
 800325c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	689b      	ldr	r3, [r3, #8]
 8003264:	494d      	ldr	r1, [pc, #308]	; (800339c <HAL_RCC_ClockConfig+0x1c4>)
 8003266:	4313      	orrs	r3, r2
 8003268:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f003 0301 	and.w	r3, r3, #1
 8003272:	2b00      	cmp	r3, #0
 8003274:	d040      	beq.n	80032f8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	685b      	ldr	r3, [r3, #4]
 800327a:	2b01      	cmp	r3, #1
 800327c:	d107      	bne.n	800328e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800327e:	4b47      	ldr	r3, [pc, #284]	; (800339c <HAL_RCC_ClockConfig+0x1c4>)
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003286:	2b00      	cmp	r3, #0
 8003288:	d115      	bne.n	80032b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800328a:	2301      	movs	r3, #1
 800328c:	e07f      	b.n	800338e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	685b      	ldr	r3, [r3, #4]
 8003292:	2b02      	cmp	r3, #2
 8003294:	d107      	bne.n	80032a6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003296:	4b41      	ldr	r3, [pc, #260]	; (800339c <HAL_RCC_ClockConfig+0x1c4>)
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d109      	bne.n	80032b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032a2:	2301      	movs	r3, #1
 80032a4:	e073      	b.n	800338e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032a6:	4b3d      	ldr	r3, [pc, #244]	; (800339c <HAL_RCC_ClockConfig+0x1c4>)
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f003 0302 	and.w	r3, r3, #2
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d101      	bne.n	80032b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032b2:	2301      	movs	r3, #1
 80032b4:	e06b      	b.n	800338e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80032b6:	4b39      	ldr	r3, [pc, #228]	; (800339c <HAL_RCC_ClockConfig+0x1c4>)
 80032b8:	685b      	ldr	r3, [r3, #4]
 80032ba:	f023 0203 	bic.w	r2, r3, #3
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	685b      	ldr	r3, [r3, #4]
 80032c2:	4936      	ldr	r1, [pc, #216]	; (800339c <HAL_RCC_ClockConfig+0x1c4>)
 80032c4:	4313      	orrs	r3, r2
 80032c6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80032c8:	f7fe fe4e 	bl	8001f68 <HAL_GetTick>
 80032cc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032ce:	e00a      	b.n	80032e6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80032d0:	f7fe fe4a 	bl	8001f68 <HAL_GetTick>
 80032d4:	4602      	mov	r2, r0
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	1ad3      	subs	r3, r2, r3
 80032da:	f241 3288 	movw	r2, #5000	; 0x1388
 80032de:	4293      	cmp	r3, r2
 80032e0:	d901      	bls.n	80032e6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80032e2:	2303      	movs	r3, #3
 80032e4:	e053      	b.n	800338e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032e6:	4b2d      	ldr	r3, [pc, #180]	; (800339c <HAL_RCC_ClockConfig+0x1c4>)
 80032e8:	685b      	ldr	r3, [r3, #4]
 80032ea:	f003 020c 	and.w	r2, r3, #12
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	685b      	ldr	r3, [r3, #4]
 80032f2:	009b      	lsls	r3, r3, #2
 80032f4:	429a      	cmp	r2, r3
 80032f6:	d1eb      	bne.n	80032d0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80032f8:	4b27      	ldr	r3, [pc, #156]	; (8003398 <HAL_RCC_ClockConfig+0x1c0>)
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f003 0307 	and.w	r3, r3, #7
 8003300:	683a      	ldr	r2, [r7, #0]
 8003302:	429a      	cmp	r2, r3
 8003304:	d210      	bcs.n	8003328 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003306:	4b24      	ldr	r3, [pc, #144]	; (8003398 <HAL_RCC_ClockConfig+0x1c0>)
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f023 0207 	bic.w	r2, r3, #7
 800330e:	4922      	ldr	r1, [pc, #136]	; (8003398 <HAL_RCC_ClockConfig+0x1c0>)
 8003310:	683b      	ldr	r3, [r7, #0]
 8003312:	4313      	orrs	r3, r2
 8003314:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003316:	4b20      	ldr	r3, [pc, #128]	; (8003398 <HAL_RCC_ClockConfig+0x1c0>)
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f003 0307 	and.w	r3, r3, #7
 800331e:	683a      	ldr	r2, [r7, #0]
 8003320:	429a      	cmp	r2, r3
 8003322:	d001      	beq.n	8003328 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003324:	2301      	movs	r3, #1
 8003326:	e032      	b.n	800338e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f003 0304 	and.w	r3, r3, #4
 8003330:	2b00      	cmp	r3, #0
 8003332:	d008      	beq.n	8003346 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003334:	4b19      	ldr	r3, [pc, #100]	; (800339c <HAL_RCC_ClockConfig+0x1c4>)
 8003336:	685b      	ldr	r3, [r3, #4]
 8003338:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	68db      	ldr	r3, [r3, #12]
 8003340:	4916      	ldr	r1, [pc, #88]	; (800339c <HAL_RCC_ClockConfig+0x1c4>)
 8003342:	4313      	orrs	r3, r2
 8003344:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f003 0308 	and.w	r3, r3, #8
 800334e:	2b00      	cmp	r3, #0
 8003350:	d009      	beq.n	8003366 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003352:	4b12      	ldr	r3, [pc, #72]	; (800339c <HAL_RCC_ClockConfig+0x1c4>)
 8003354:	685b      	ldr	r3, [r3, #4]
 8003356:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	691b      	ldr	r3, [r3, #16]
 800335e:	00db      	lsls	r3, r3, #3
 8003360:	490e      	ldr	r1, [pc, #56]	; (800339c <HAL_RCC_ClockConfig+0x1c4>)
 8003362:	4313      	orrs	r3, r2
 8003364:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003366:	f000 f821 	bl	80033ac <HAL_RCC_GetSysClockFreq>
 800336a:	4602      	mov	r2, r0
 800336c:	4b0b      	ldr	r3, [pc, #44]	; (800339c <HAL_RCC_ClockConfig+0x1c4>)
 800336e:	685b      	ldr	r3, [r3, #4]
 8003370:	091b      	lsrs	r3, r3, #4
 8003372:	f003 030f 	and.w	r3, r3, #15
 8003376:	490a      	ldr	r1, [pc, #40]	; (80033a0 <HAL_RCC_ClockConfig+0x1c8>)
 8003378:	5ccb      	ldrb	r3, [r1, r3]
 800337a:	fa22 f303 	lsr.w	r3, r2, r3
 800337e:	4a09      	ldr	r2, [pc, #36]	; (80033a4 <HAL_RCC_ClockConfig+0x1cc>)
 8003380:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003382:	4b09      	ldr	r3, [pc, #36]	; (80033a8 <HAL_RCC_ClockConfig+0x1d0>)
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	4618      	mov	r0, r3
 8003388:	f7fe fdac 	bl	8001ee4 <HAL_InitTick>

  return HAL_OK;
 800338c:	2300      	movs	r3, #0
}
 800338e:	4618      	mov	r0, r3
 8003390:	3710      	adds	r7, #16
 8003392:	46bd      	mov	sp, r7
 8003394:	bd80      	pop	{r7, pc}
 8003396:	bf00      	nop
 8003398:	40022000 	.word	0x40022000
 800339c:	40021000 	.word	0x40021000
 80033a0:	080057fc 	.word	0x080057fc
 80033a4:	2000001c 	.word	0x2000001c
 80033a8:	20000020 	.word	0x20000020

080033ac <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80033ac:	b480      	push	{r7}
 80033ae:	b087      	sub	sp, #28
 80033b0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80033b2:	2300      	movs	r3, #0
 80033b4:	60fb      	str	r3, [r7, #12]
 80033b6:	2300      	movs	r3, #0
 80033b8:	60bb      	str	r3, [r7, #8]
 80033ba:	2300      	movs	r3, #0
 80033bc:	617b      	str	r3, [r7, #20]
 80033be:	2300      	movs	r3, #0
 80033c0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80033c2:	2300      	movs	r3, #0
 80033c4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80033c6:	4b1e      	ldr	r3, [pc, #120]	; (8003440 <HAL_RCC_GetSysClockFreq+0x94>)
 80033c8:	685b      	ldr	r3, [r3, #4]
 80033ca:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	f003 030c 	and.w	r3, r3, #12
 80033d2:	2b04      	cmp	r3, #4
 80033d4:	d002      	beq.n	80033dc <HAL_RCC_GetSysClockFreq+0x30>
 80033d6:	2b08      	cmp	r3, #8
 80033d8:	d003      	beq.n	80033e2 <HAL_RCC_GetSysClockFreq+0x36>
 80033da:	e027      	b.n	800342c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80033dc:	4b19      	ldr	r3, [pc, #100]	; (8003444 <HAL_RCC_GetSysClockFreq+0x98>)
 80033de:	613b      	str	r3, [r7, #16]
      break;
 80033e0:	e027      	b.n	8003432 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	0c9b      	lsrs	r3, r3, #18
 80033e6:	f003 030f 	and.w	r3, r3, #15
 80033ea:	4a17      	ldr	r2, [pc, #92]	; (8003448 <HAL_RCC_GetSysClockFreq+0x9c>)
 80033ec:	5cd3      	ldrb	r3, [r2, r3]
 80033ee:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d010      	beq.n	800341c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80033fa:	4b11      	ldr	r3, [pc, #68]	; (8003440 <HAL_RCC_GetSysClockFreq+0x94>)
 80033fc:	685b      	ldr	r3, [r3, #4]
 80033fe:	0c5b      	lsrs	r3, r3, #17
 8003400:	f003 0301 	and.w	r3, r3, #1
 8003404:	4a11      	ldr	r2, [pc, #68]	; (800344c <HAL_RCC_GetSysClockFreq+0xa0>)
 8003406:	5cd3      	ldrb	r3, [r2, r3]
 8003408:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	4a0d      	ldr	r2, [pc, #52]	; (8003444 <HAL_RCC_GetSysClockFreq+0x98>)
 800340e:	fb03 f202 	mul.w	r2, r3, r2
 8003412:	68bb      	ldr	r3, [r7, #8]
 8003414:	fbb2 f3f3 	udiv	r3, r2, r3
 8003418:	617b      	str	r3, [r7, #20]
 800341a:	e004      	b.n	8003426 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	4a0c      	ldr	r2, [pc, #48]	; (8003450 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003420:	fb02 f303 	mul.w	r3, r2, r3
 8003424:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003426:	697b      	ldr	r3, [r7, #20]
 8003428:	613b      	str	r3, [r7, #16]
      break;
 800342a:	e002      	b.n	8003432 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800342c:	4b05      	ldr	r3, [pc, #20]	; (8003444 <HAL_RCC_GetSysClockFreq+0x98>)
 800342e:	613b      	str	r3, [r7, #16]
      break;
 8003430:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003432:	693b      	ldr	r3, [r7, #16]
}
 8003434:	4618      	mov	r0, r3
 8003436:	371c      	adds	r7, #28
 8003438:	46bd      	mov	sp, r7
 800343a:	bc80      	pop	{r7}
 800343c:	4770      	bx	lr
 800343e:	bf00      	nop
 8003440:	40021000 	.word	0x40021000
 8003444:	007a1200 	.word	0x007a1200
 8003448:	08005814 	.word	0x08005814
 800344c:	08005824 	.word	0x08005824
 8003450:	003d0900 	.word	0x003d0900

08003454 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003454:	b480      	push	{r7}
 8003456:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003458:	4b02      	ldr	r3, [pc, #8]	; (8003464 <HAL_RCC_GetHCLKFreq+0x10>)
 800345a:	681b      	ldr	r3, [r3, #0]
}
 800345c:	4618      	mov	r0, r3
 800345e:	46bd      	mov	sp, r7
 8003460:	bc80      	pop	{r7}
 8003462:	4770      	bx	lr
 8003464:	2000001c 	.word	0x2000001c

08003468 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003468:	b580      	push	{r7, lr}
 800346a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800346c:	f7ff fff2 	bl	8003454 <HAL_RCC_GetHCLKFreq>
 8003470:	4602      	mov	r2, r0
 8003472:	4b05      	ldr	r3, [pc, #20]	; (8003488 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003474:	685b      	ldr	r3, [r3, #4]
 8003476:	0a1b      	lsrs	r3, r3, #8
 8003478:	f003 0307 	and.w	r3, r3, #7
 800347c:	4903      	ldr	r1, [pc, #12]	; (800348c <HAL_RCC_GetPCLK1Freq+0x24>)
 800347e:	5ccb      	ldrb	r3, [r1, r3]
 8003480:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003484:	4618      	mov	r0, r3
 8003486:	bd80      	pop	{r7, pc}
 8003488:	40021000 	.word	0x40021000
 800348c:	0800580c 	.word	0x0800580c

08003490 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003490:	b580      	push	{r7, lr}
 8003492:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003494:	f7ff ffde 	bl	8003454 <HAL_RCC_GetHCLKFreq>
 8003498:	4602      	mov	r2, r0
 800349a:	4b05      	ldr	r3, [pc, #20]	; (80034b0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800349c:	685b      	ldr	r3, [r3, #4]
 800349e:	0adb      	lsrs	r3, r3, #11
 80034a0:	f003 0307 	and.w	r3, r3, #7
 80034a4:	4903      	ldr	r1, [pc, #12]	; (80034b4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80034a6:	5ccb      	ldrb	r3, [r1, r3]
 80034a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80034ac:	4618      	mov	r0, r3
 80034ae:	bd80      	pop	{r7, pc}
 80034b0:	40021000 	.word	0x40021000
 80034b4:	0800580c 	.word	0x0800580c

080034b8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80034b8:	b480      	push	{r7}
 80034ba:	b085      	sub	sp, #20
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80034c0:	4b0a      	ldr	r3, [pc, #40]	; (80034ec <RCC_Delay+0x34>)
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	4a0a      	ldr	r2, [pc, #40]	; (80034f0 <RCC_Delay+0x38>)
 80034c6:	fba2 2303 	umull	r2, r3, r2, r3
 80034ca:	0a5b      	lsrs	r3, r3, #9
 80034cc:	687a      	ldr	r2, [r7, #4]
 80034ce:	fb02 f303 	mul.w	r3, r2, r3
 80034d2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80034d4:	bf00      	nop
  }
  while (Delay --);
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	1e5a      	subs	r2, r3, #1
 80034da:	60fa      	str	r2, [r7, #12]
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d1f9      	bne.n	80034d4 <RCC_Delay+0x1c>
}
 80034e0:	bf00      	nop
 80034e2:	bf00      	nop
 80034e4:	3714      	adds	r7, #20
 80034e6:	46bd      	mov	sp, r7
 80034e8:	bc80      	pop	{r7}
 80034ea:	4770      	bx	lr
 80034ec:	2000001c 	.word	0x2000001c
 80034f0:	10624dd3 	.word	0x10624dd3

080034f4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80034f4:	b580      	push	{r7, lr}
 80034f6:	b082      	sub	sp, #8
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d101      	bne.n	8003506 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003502:	2301      	movs	r3, #1
 8003504:	e042      	b.n	800358c <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800350c:	b2db      	uxtb	r3, r3
 800350e:	2b00      	cmp	r3, #0
 8003510:	d106      	bne.n	8003520 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	2200      	movs	r2, #0
 8003516:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800351a:	6878      	ldr	r0, [r7, #4]
 800351c:	f7fe fac8 	bl	8001ab0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	2224      	movs	r2, #36	; 0x24
 8003524:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	68da      	ldr	r2, [r3, #12]
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003536:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003538:	6878      	ldr	r0, [r7, #4]
 800353a:	f000 fefd 	bl	8004338 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	691a      	ldr	r2, [r3, #16]
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800354c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	695a      	ldr	r2, [r3, #20]
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800355c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	68da      	ldr	r2, [r3, #12]
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800356c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	2200      	movs	r2, #0
 8003572:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	2220      	movs	r2, #32
 8003578:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	2220      	movs	r2, #32
 8003580:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	2200      	movs	r2, #0
 8003588:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800358a:	2300      	movs	r3, #0
}
 800358c:	4618      	mov	r0, r3
 800358e:	3708      	adds	r7, #8
 8003590:	46bd      	mov	sp, r7
 8003592:	bd80      	pop	{r7, pc}

08003594 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003594:	b580      	push	{r7, lr}
 8003596:	b08a      	sub	sp, #40	; 0x28
 8003598:	af02      	add	r7, sp, #8
 800359a:	60f8      	str	r0, [r7, #12]
 800359c:	60b9      	str	r1, [r7, #8]
 800359e:	603b      	str	r3, [r7, #0]
 80035a0:	4613      	mov	r3, r2
 80035a2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80035a4:	2300      	movs	r3, #0
 80035a6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80035ae:	b2db      	uxtb	r3, r3
 80035b0:	2b20      	cmp	r3, #32
 80035b2:	d175      	bne.n	80036a0 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80035b4:	68bb      	ldr	r3, [r7, #8]
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d002      	beq.n	80035c0 <HAL_UART_Transmit+0x2c>
 80035ba:	88fb      	ldrh	r3, [r7, #6]
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d101      	bne.n	80035c4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80035c0:	2301      	movs	r3, #1
 80035c2:	e06e      	b.n	80036a2 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	2200      	movs	r2, #0
 80035c8:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	2221      	movs	r2, #33	; 0x21
 80035ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80035d2:	f7fe fcc9 	bl	8001f68 <HAL_GetTick>
 80035d6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	88fa      	ldrh	r2, [r7, #6]
 80035dc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	88fa      	ldrh	r2, [r7, #6]
 80035e2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	689b      	ldr	r3, [r3, #8]
 80035e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80035ec:	d108      	bne.n	8003600 <HAL_UART_Transmit+0x6c>
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	691b      	ldr	r3, [r3, #16]
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d104      	bne.n	8003600 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80035f6:	2300      	movs	r3, #0
 80035f8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80035fa:	68bb      	ldr	r3, [r7, #8]
 80035fc:	61bb      	str	r3, [r7, #24]
 80035fe:	e003      	b.n	8003608 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003600:	68bb      	ldr	r3, [r7, #8]
 8003602:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003604:	2300      	movs	r3, #0
 8003606:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003608:	e02e      	b.n	8003668 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800360a:	683b      	ldr	r3, [r7, #0]
 800360c:	9300      	str	r3, [sp, #0]
 800360e:	697b      	ldr	r3, [r7, #20]
 8003610:	2200      	movs	r2, #0
 8003612:	2180      	movs	r1, #128	; 0x80
 8003614:	68f8      	ldr	r0, [r7, #12]
 8003616:	f000 fc3a 	bl	8003e8e <UART_WaitOnFlagUntilTimeout>
 800361a:	4603      	mov	r3, r0
 800361c:	2b00      	cmp	r3, #0
 800361e:	d005      	beq.n	800362c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	2220      	movs	r2, #32
 8003624:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 8003628:	2303      	movs	r3, #3
 800362a:	e03a      	b.n	80036a2 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800362c:	69fb      	ldr	r3, [r7, #28]
 800362e:	2b00      	cmp	r3, #0
 8003630:	d10b      	bne.n	800364a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003632:	69bb      	ldr	r3, [r7, #24]
 8003634:	881b      	ldrh	r3, [r3, #0]
 8003636:	461a      	mov	r2, r3
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003640:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003642:	69bb      	ldr	r3, [r7, #24]
 8003644:	3302      	adds	r3, #2
 8003646:	61bb      	str	r3, [r7, #24]
 8003648:	e007      	b.n	800365a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800364a:	69fb      	ldr	r3, [r7, #28]
 800364c:	781a      	ldrb	r2, [r3, #0]
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003654:	69fb      	ldr	r3, [r7, #28]
 8003656:	3301      	adds	r3, #1
 8003658:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800365e:	b29b      	uxth	r3, r3
 8003660:	3b01      	subs	r3, #1
 8003662:	b29a      	uxth	r2, r3
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800366c:	b29b      	uxth	r3, r3
 800366e:	2b00      	cmp	r3, #0
 8003670:	d1cb      	bne.n	800360a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003672:	683b      	ldr	r3, [r7, #0]
 8003674:	9300      	str	r3, [sp, #0]
 8003676:	697b      	ldr	r3, [r7, #20]
 8003678:	2200      	movs	r2, #0
 800367a:	2140      	movs	r1, #64	; 0x40
 800367c:	68f8      	ldr	r0, [r7, #12]
 800367e:	f000 fc06 	bl	8003e8e <UART_WaitOnFlagUntilTimeout>
 8003682:	4603      	mov	r3, r0
 8003684:	2b00      	cmp	r3, #0
 8003686:	d005      	beq.n	8003694 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	2220      	movs	r2, #32
 800368c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 8003690:	2303      	movs	r3, #3
 8003692:	e006      	b.n	80036a2 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	2220      	movs	r2, #32
 8003698:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 800369c:	2300      	movs	r3, #0
 800369e:	e000      	b.n	80036a2 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80036a0:	2302      	movs	r3, #2
  }
}
 80036a2:	4618      	mov	r0, r3
 80036a4:	3720      	adds	r7, #32
 80036a6:	46bd      	mov	sp, r7
 80036a8:	bd80      	pop	{r7, pc}

080036aa <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80036aa:	b580      	push	{r7, lr}
 80036ac:	b084      	sub	sp, #16
 80036ae:	af00      	add	r7, sp, #0
 80036b0:	60f8      	str	r0, [r7, #12]
 80036b2:	60b9      	str	r1, [r7, #8]
 80036b4:	4613      	mov	r3, r2
 80036b6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80036be:	b2db      	uxtb	r3, r3
 80036c0:	2b20      	cmp	r3, #32
 80036c2:	d112      	bne.n	80036ea <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80036c4:	68bb      	ldr	r3, [r7, #8]
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d002      	beq.n	80036d0 <HAL_UART_Receive_IT+0x26>
 80036ca:	88fb      	ldrh	r3, [r7, #6]
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d101      	bne.n	80036d4 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80036d0:	2301      	movs	r3, #1
 80036d2:	e00b      	b.n	80036ec <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	2200      	movs	r2, #0
 80036d8:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80036da:	88fb      	ldrh	r3, [r7, #6]
 80036dc:	461a      	mov	r2, r3
 80036de:	68b9      	ldr	r1, [r7, #8]
 80036e0:	68f8      	ldr	r0, [r7, #12]
 80036e2:	f000 fc2d 	bl	8003f40 <UART_Start_Receive_IT>
 80036e6:	4603      	mov	r3, r0
 80036e8:	e000      	b.n	80036ec <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 80036ea:	2302      	movs	r3, #2
  }
}
 80036ec:	4618      	mov	r0, r3
 80036ee:	3710      	adds	r7, #16
 80036f0:	46bd      	mov	sp, r7
 80036f2:	bd80      	pop	{r7, pc}

080036f4 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80036f4:	b580      	push	{r7, lr}
 80036f6:	b08c      	sub	sp, #48	; 0x30
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	60f8      	str	r0, [r7, #12]
 80036fc:	60b9      	str	r1, [r7, #8]
 80036fe:	4613      	mov	r3, r2
 8003700:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003708:	b2db      	uxtb	r3, r3
 800370a:	2b20      	cmp	r3, #32
 800370c:	d156      	bne.n	80037bc <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 800370e:	68bb      	ldr	r3, [r7, #8]
 8003710:	2b00      	cmp	r3, #0
 8003712:	d002      	beq.n	800371a <HAL_UART_Transmit_DMA+0x26>
 8003714:	88fb      	ldrh	r3, [r7, #6]
 8003716:	2b00      	cmp	r3, #0
 8003718:	d101      	bne.n	800371e <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800371a:	2301      	movs	r3, #1
 800371c:	e04f      	b.n	80037be <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 800371e:	68ba      	ldr	r2, [r7, #8]
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	88fa      	ldrh	r2, [r7, #6]
 8003728:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	88fa      	ldrh	r2, [r7, #6]
 800372e:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	2200      	movs	r2, #0
 8003734:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	2221      	movs	r2, #33	; 0x21
 800373a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003742:	4a21      	ldr	r2, [pc, #132]	; (80037c8 <HAL_UART_Transmit_DMA+0xd4>)
 8003744:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800374a:	4a20      	ldr	r2, [pc, #128]	; (80037cc <HAL_UART_Transmit_DMA+0xd8>)
 800374c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003752:	4a1f      	ldr	r2, [pc, #124]	; (80037d0 <HAL_UART_Transmit_DMA+0xdc>)
 8003754:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800375a:	2200      	movs	r2, #0
 800375c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the UART transmit DMA channel */
    tmp = (const uint32_t *)&pData;
 800375e:	f107 0308 	add.w	r3, r7, #8
 8003762:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8003768:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800376a:	6819      	ldr	r1, [r3, #0]
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	3304      	adds	r3, #4
 8003772:	461a      	mov	r2, r3
 8003774:	88fb      	ldrh	r3, [r7, #6]
 8003776:	f7fe fd8d 	bl	8002294 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003782:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	3314      	adds	r3, #20
 800378a:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800378c:	69bb      	ldr	r3, [r7, #24]
 800378e:	e853 3f00 	ldrex	r3, [r3]
 8003792:	617b      	str	r3, [r7, #20]
   return(result);
 8003794:	697b      	ldr	r3, [r7, #20]
 8003796:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800379a:	62bb      	str	r3, [r7, #40]	; 0x28
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	3314      	adds	r3, #20
 80037a2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80037a4:	627a      	str	r2, [r7, #36]	; 0x24
 80037a6:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037a8:	6a39      	ldr	r1, [r7, #32]
 80037aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80037ac:	e841 2300 	strex	r3, r2, [r1]
 80037b0:	61fb      	str	r3, [r7, #28]
   return(result);
 80037b2:	69fb      	ldr	r3, [r7, #28]
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d1e5      	bne.n	8003784 <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 80037b8:	2300      	movs	r3, #0
 80037ba:	e000      	b.n	80037be <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 80037bc:	2302      	movs	r3, #2
  }
}
 80037be:	4618      	mov	r0, r3
 80037c0:	3730      	adds	r7, #48	; 0x30
 80037c2:	46bd      	mov	sp, r7
 80037c4:	bd80      	pop	{r7, pc}
 80037c6:	bf00      	nop
 80037c8:	08003d45 	.word	0x08003d45
 80037cc:	08003ddf 	.word	0x08003ddf
 80037d0:	08003dfb 	.word	0x08003dfb

080037d4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80037d4:	b580      	push	{r7, lr}
 80037d6:	b0ba      	sub	sp, #232	; 0xe8
 80037d8:	af00      	add	r7, sp, #0
 80037da:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	68db      	ldr	r3, [r3, #12]
 80037ec:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	695b      	ldr	r3, [r3, #20]
 80037f6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80037fa:	2300      	movs	r3, #0
 80037fc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003800:	2300      	movs	r3, #0
 8003802:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003806:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800380a:	f003 030f 	and.w	r3, r3, #15
 800380e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8003812:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003816:	2b00      	cmp	r3, #0
 8003818:	d10f      	bne.n	800383a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800381a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800381e:	f003 0320 	and.w	r3, r3, #32
 8003822:	2b00      	cmp	r3, #0
 8003824:	d009      	beq.n	800383a <HAL_UART_IRQHandler+0x66>
 8003826:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800382a:	f003 0320 	and.w	r3, r3, #32
 800382e:	2b00      	cmp	r3, #0
 8003830:	d003      	beq.n	800383a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003832:	6878      	ldr	r0, [r7, #4]
 8003834:	f000 fcc1 	bl	80041ba <UART_Receive_IT>
      return;
 8003838:	e25b      	b.n	8003cf2 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800383a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800383e:	2b00      	cmp	r3, #0
 8003840:	f000 80de 	beq.w	8003a00 <HAL_UART_IRQHandler+0x22c>
 8003844:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003848:	f003 0301 	and.w	r3, r3, #1
 800384c:	2b00      	cmp	r3, #0
 800384e:	d106      	bne.n	800385e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003850:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003854:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003858:	2b00      	cmp	r3, #0
 800385a:	f000 80d1 	beq.w	8003a00 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800385e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003862:	f003 0301 	and.w	r3, r3, #1
 8003866:	2b00      	cmp	r3, #0
 8003868:	d00b      	beq.n	8003882 <HAL_UART_IRQHandler+0xae>
 800386a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800386e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003872:	2b00      	cmp	r3, #0
 8003874:	d005      	beq.n	8003882 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800387a:	f043 0201 	orr.w	r2, r3, #1
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003882:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003886:	f003 0304 	and.w	r3, r3, #4
 800388a:	2b00      	cmp	r3, #0
 800388c:	d00b      	beq.n	80038a6 <HAL_UART_IRQHandler+0xd2>
 800388e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003892:	f003 0301 	and.w	r3, r3, #1
 8003896:	2b00      	cmp	r3, #0
 8003898:	d005      	beq.n	80038a6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800389e:	f043 0202 	orr.w	r2, r3, #2
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80038a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80038aa:	f003 0302 	and.w	r3, r3, #2
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d00b      	beq.n	80038ca <HAL_UART_IRQHandler+0xf6>
 80038b2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80038b6:	f003 0301 	and.w	r3, r3, #1
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d005      	beq.n	80038ca <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038c2:	f043 0204 	orr.w	r2, r3, #4
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80038ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80038ce:	f003 0308 	and.w	r3, r3, #8
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d011      	beq.n	80038fa <HAL_UART_IRQHandler+0x126>
 80038d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80038da:	f003 0320 	and.w	r3, r3, #32
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d105      	bne.n	80038ee <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80038e2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80038e6:	f003 0301 	and.w	r3, r3, #1
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d005      	beq.n	80038fa <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038f2:	f043 0208 	orr.w	r2, r3, #8
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038fe:	2b00      	cmp	r3, #0
 8003900:	f000 81f2 	beq.w	8003ce8 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003904:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003908:	f003 0320 	and.w	r3, r3, #32
 800390c:	2b00      	cmp	r3, #0
 800390e:	d008      	beq.n	8003922 <HAL_UART_IRQHandler+0x14e>
 8003910:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003914:	f003 0320 	and.w	r3, r3, #32
 8003918:	2b00      	cmp	r3, #0
 800391a:	d002      	beq.n	8003922 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800391c:	6878      	ldr	r0, [r7, #4]
 800391e:	f000 fc4c 	bl	80041ba <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	695b      	ldr	r3, [r3, #20]
 8003928:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800392c:	2b00      	cmp	r3, #0
 800392e:	bf14      	ite	ne
 8003930:	2301      	movne	r3, #1
 8003932:	2300      	moveq	r3, #0
 8003934:	b2db      	uxtb	r3, r3
 8003936:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800393e:	f003 0308 	and.w	r3, r3, #8
 8003942:	2b00      	cmp	r3, #0
 8003944:	d103      	bne.n	800394e <HAL_UART_IRQHandler+0x17a>
 8003946:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800394a:	2b00      	cmp	r3, #0
 800394c:	d04f      	beq.n	80039ee <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800394e:	6878      	ldr	r0, [r7, #4]
 8003950:	f000 fb56 	bl	8004000 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	695b      	ldr	r3, [r3, #20]
 800395a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800395e:	2b00      	cmp	r3, #0
 8003960:	d041      	beq.n	80039e6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	3314      	adds	r3, #20
 8003968:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800396c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003970:	e853 3f00 	ldrex	r3, [r3]
 8003974:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003978:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800397c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003980:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	3314      	adds	r3, #20
 800398a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800398e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003992:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003996:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800399a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800399e:	e841 2300 	strex	r3, r2, [r1]
 80039a2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80039a6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d1d9      	bne.n	8003962 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d013      	beq.n	80039de <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039ba:	4a7e      	ldr	r2, [pc, #504]	; (8003bb4 <HAL_UART_IRQHandler+0x3e0>)
 80039bc:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039c2:	4618      	mov	r0, r3
 80039c4:	f7fe fd02 	bl	80023cc <HAL_DMA_Abort_IT>
 80039c8:	4603      	mov	r3, r0
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d016      	beq.n	80039fc <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039d4:	687a      	ldr	r2, [r7, #4]
 80039d6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80039d8:	4610      	mov	r0, r2
 80039da:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80039dc:	e00e      	b.n	80039fc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80039de:	6878      	ldr	r0, [r7, #4]
 80039e0:	f000 f99c 	bl	8003d1c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80039e4:	e00a      	b.n	80039fc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80039e6:	6878      	ldr	r0, [r7, #4]
 80039e8:	f000 f998 	bl	8003d1c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80039ec:	e006      	b.n	80039fc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80039ee:	6878      	ldr	r0, [r7, #4]
 80039f0:	f000 f994 	bl	8003d1c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	2200      	movs	r2, #0
 80039f8:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 80039fa:	e175      	b.n	8003ce8 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80039fc:	bf00      	nop
    return;
 80039fe:	e173      	b.n	8003ce8 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a04:	2b01      	cmp	r3, #1
 8003a06:	f040 814f 	bne.w	8003ca8 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003a0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a0e:	f003 0310 	and.w	r3, r3, #16
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	f000 8148 	beq.w	8003ca8 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003a18:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003a1c:	f003 0310 	and.w	r3, r3, #16
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	f000 8141 	beq.w	8003ca8 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003a26:	2300      	movs	r3, #0
 8003a28:	60bb      	str	r3, [r7, #8]
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	60bb      	str	r3, [r7, #8]
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	685b      	ldr	r3, [r3, #4]
 8003a38:	60bb      	str	r3, [r7, #8]
 8003a3a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	695b      	ldr	r3, [r3, #20]
 8003a42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	f000 80b6 	beq.w	8003bb8 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	685b      	ldr	r3, [r3, #4]
 8003a54:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003a58:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	f000 8145 	beq.w	8003cec <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003a66:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003a6a:	429a      	cmp	r2, r3
 8003a6c:	f080 813e 	bcs.w	8003cec <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003a76:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a7c:	699b      	ldr	r3, [r3, #24]
 8003a7e:	2b20      	cmp	r3, #32
 8003a80:	f000 8088 	beq.w	8003b94 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	330c      	adds	r3, #12
 8003a8a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a8e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003a92:	e853 3f00 	ldrex	r3, [r3]
 8003a96:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003a9a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003a9e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003aa2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	330c      	adds	r3, #12
 8003aac:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003ab0:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003ab4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ab8:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003abc:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003ac0:	e841 2300 	strex	r3, r2, [r1]
 8003ac4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003ac8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d1d9      	bne.n	8003a84 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	3314      	adds	r3, #20
 8003ad6:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ad8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003ada:	e853 3f00 	ldrex	r3, [r3]
 8003ade:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003ae0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003ae2:	f023 0301 	bic.w	r3, r3, #1
 8003ae6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	3314      	adds	r3, #20
 8003af0:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003af4:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003af8:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003afa:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003afc:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003b00:	e841 2300 	strex	r3, r2, [r1]
 8003b04:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003b06:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d1e1      	bne.n	8003ad0 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	3314      	adds	r3, #20
 8003b12:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b14:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003b16:	e853 3f00 	ldrex	r3, [r3]
 8003b1a:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003b1c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003b1e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003b22:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	3314      	adds	r3, #20
 8003b2c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003b30:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003b32:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b34:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003b36:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003b38:	e841 2300 	strex	r3, r2, [r1]
 8003b3c:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003b3e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d1e3      	bne.n	8003b0c <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	2220      	movs	r2, #32
 8003b48:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	2200      	movs	r2, #0
 8003b50:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	330c      	adds	r3, #12
 8003b58:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b5a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b5c:	e853 3f00 	ldrex	r3, [r3]
 8003b60:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003b62:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003b64:	f023 0310 	bic.w	r3, r3, #16
 8003b68:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	330c      	adds	r3, #12
 8003b72:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003b76:	65ba      	str	r2, [r7, #88]	; 0x58
 8003b78:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b7a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003b7c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003b7e:	e841 2300 	strex	r3, r2, [r1]
 8003b82:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003b84:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d1e3      	bne.n	8003b52 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b8e:	4618      	mov	r0, r3
 8003b90:	f7fe fbe0 	bl	8002354 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	2202      	movs	r2, #2
 8003b98:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003ba2:	b29b      	uxth	r3, r3
 8003ba4:	1ad3      	subs	r3, r2, r3
 8003ba6:	b29b      	uxth	r3, r3
 8003ba8:	4619      	mov	r1, r3
 8003baa:	6878      	ldr	r0, [r7, #4]
 8003bac:	f000 f8bf 	bl	8003d2e <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003bb0:	e09c      	b.n	8003cec <HAL_UART_IRQHandler+0x518>
 8003bb2:	bf00      	nop
 8003bb4:	080040c5 	.word	0x080040c5
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003bc0:	b29b      	uxth	r3, r3
 8003bc2:	1ad3      	subs	r3, r2, r3
 8003bc4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003bcc:	b29b      	uxth	r3, r3
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	f000 808e 	beq.w	8003cf0 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003bd4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	f000 8089 	beq.w	8003cf0 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	330c      	adds	r3, #12
 8003be4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003be6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003be8:	e853 3f00 	ldrex	r3, [r3]
 8003bec:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003bee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003bf0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003bf4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	330c      	adds	r3, #12
 8003bfe:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8003c02:	647a      	str	r2, [r7, #68]	; 0x44
 8003c04:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c06:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003c08:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003c0a:	e841 2300 	strex	r3, r2, [r1]
 8003c0e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003c10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d1e3      	bne.n	8003bde <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	3314      	adds	r3, #20
 8003c1c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c20:	e853 3f00 	ldrex	r3, [r3]
 8003c24:	623b      	str	r3, [r7, #32]
   return(result);
 8003c26:	6a3b      	ldr	r3, [r7, #32]
 8003c28:	f023 0301 	bic.w	r3, r3, #1
 8003c2c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	3314      	adds	r3, #20
 8003c36:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003c3a:	633a      	str	r2, [r7, #48]	; 0x30
 8003c3c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c3e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003c40:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003c42:	e841 2300 	strex	r3, r2, [r1]
 8003c46:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003c48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d1e3      	bne.n	8003c16 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	2220      	movs	r2, #32
 8003c52:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	2200      	movs	r2, #0
 8003c5a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	330c      	adds	r3, #12
 8003c62:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c64:	693b      	ldr	r3, [r7, #16]
 8003c66:	e853 3f00 	ldrex	r3, [r3]
 8003c6a:	60fb      	str	r3, [r7, #12]
   return(result);
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	f023 0310 	bic.w	r3, r3, #16
 8003c72:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	330c      	adds	r3, #12
 8003c7c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003c80:	61fa      	str	r2, [r7, #28]
 8003c82:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c84:	69b9      	ldr	r1, [r7, #24]
 8003c86:	69fa      	ldr	r2, [r7, #28]
 8003c88:	e841 2300 	strex	r3, r2, [r1]
 8003c8c:	617b      	str	r3, [r7, #20]
   return(result);
 8003c8e:	697b      	ldr	r3, [r7, #20]
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d1e3      	bne.n	8003c5c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	2202      	movs	r2, #2
 8003c98:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003c9a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003c9e:	4619      	mov	r1, r3
 8003ca0:	6878      	ldr	r0, [r7, #4]
 8003ca2:	f000 f844 	bl	8003d2e <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003ca6:	e023      	b.n	8003cf0 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003ca8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003cac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d009      	beq.n	8003cc8 <HAL_UART_IRQHandler+0x4f4>
 8003cb4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003cb8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d003      	beq.n	8003cc8 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003cc0:	6878      	ldr	r0, [r7, #4]
 8003cc2:	f000 fa13 	bl	80040ec <UART_Transmit_IT>
    return;
 8003cc6:	e014      	b.n	8003cf2 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003cc8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ccc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d00e      	beq.n	8003cf2 <HAL_UART_IRQHandler+0x51e>
 8003cd4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003cd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d008      	beq.n	8003cf2 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003ce0:	6878      	ldr	r0, [r7, #4]
 8003ce2:	f000 fa52 	bl	800418a <UART_EndTransmit_IT>
    return;
 8003ce6:	e004      	b.n	8003cf2 <HAL_UART_IRQHandler+0x51e>
    return;
 8003ce8:	bf00      	nop
 8003cea:	e002      	b.n	8003cf2 <HAL_UART_IRQHandler+0x51e>
      return;
 8003cec:	bf00      	nop
 8003cee:	e000      	b.n	8003cf2 <HAL_UART_IRQHandler+0x51e>
      return;
 8003cf0:	bf00      	nop
  }
}
 8003cf2:	37e8      	adds	r7, #232	; 0xe8
 8003cf4:	46bd      	mov	sp, r7
 8003cf6:	bd80      	pop	{r7, pc}

08003cf8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003cf8:	b480      	push	{r7}
 8003cfa:	b083      	sub	sp, #12
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003d00:	bf00      	nop
 8003d02:	370c      	adds	r7, #12
 8003d04:	46bd      	mov	sp, r7
 8003d06:	bc80      	pop	{r7}
 8003d08:	4770      	bx	lr

08003d0a <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003d0a:	b480      	push	{r7}
 8003d0c:	b083      	sub	sp, #12
 8003d0e:	af00      	add	r7, sp, #0
 8003d10:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8003d12:	bf00      	nop
 8003d14:	370c      	adds	r7, #12
 8003d16:	46bd      	mov	sp, r7
 8003d18:	bc80      	pop	{r7}
 8003d1a:	4770      	bx	lr

08003d1c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003d1c:	b480      	push	{r7}
 8003d1e:	b083      	sub	sp, #12
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003d24:	bf00      	nop
 8003d26:	370c      	adds	r7, #12
 8003d28:	46bd      	mov	sp, r7
 8003d2a:	bc80      	pop	{r7}
 8003d2c:	4770      	bx	lr

08003d2e <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003d2e:	b480      	push	{r7}
 8003d30:	b083      	sub	sp, #12
 8003d32:	af00      	add	r7, sp, #0
 8003d34:	6078      	str	r0, [r7, #4]
 8003d36:	460b      	mov	r3, r1
 8003d38:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003d3a:	bf00      	nop
 8003d3c:	370c      	adds	r7, #12
 8003d3e:	46bd      	mov	sp, r7
 8003d40:	bc80      	pop	{r7}
 8003d42:	4770      	bx	lr

08003d44 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8003d44:	b580      	push	{r7, lr}
 8003d46:	b090      	sub	sp, #64	; 0x40
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d50:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f003 0320 	and.w	r3, r3, #32
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d137      	bne.n	8003dd0 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8003d60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d62:	2200      	movs	r2, #0
 8003d64:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003d66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	3314      	adds	r3, #20
 8003d6c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d70:	e853 3f00 	ldrex	r3, [r3]
 8003d74:	623b      	str	r3, [r7, #32]
   return(result);
 8003d76:	6a3b      	ldr	r3, [r7, #32]
 8003d78:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003d7c:	63bb      	str	r3, [r7, #56]	; 0x38
 8003d7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	3314      	adds	r3, #20
 8003d84:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003d86:	633a      	str	r2, [r7, #48]	; 0x30
 8003d88:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d8a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003d8c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003d8e:	e841 2300 	strex	r3, r2, [r1]
 8003d92:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003d94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d1e5      	bne.n	8003d66 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003d9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	330c      	adds	r3, #12
 8003da0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003da2:	693b      	ldr	r3, [r7, #16]
 8003da4:	e853 3f00 	ldrex	r3, [r3]
 8003da8:	60fb      	str	r3, [r7, #12]
   return(result);
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003db0:	637b      	str	r3, [r7, #52]	; 0x34
 8003db2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	330c      	adds	r3, #12
 8003db8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003dba:	61fa      	str	r2, [r7, #28]
 8003dbc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dbe:	69b9      	ldr	r1, [r7, #24]
 8003dc0:	69fa      	ldr	r2, [r7, #28]
 8003dc2:	e841 2300 	strex	r3, r2, [r1]
 8003dc6:	617b      	str	r3, [r7, #20]
   return(result);
 8003dc8:	697b      	ldr	r3, [r7, #20]
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d1e5      	bne.n	8003d9a <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003dce:	e002      	b.n	8003dd6 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8003dd0:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8003dd2:	f7ff ff91 	bl	8003cf8 <HAL_UART_TxCpltCallback>
}
 8003dd6:	bf00      	nop
 8003dd8:	3740      	adds	r7, #64	; 0x40
 8003dda:	46bd      	mov	sp, r7
 8003ddc:	bd80      	pop	{r7, pc}

08003dde <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003dde:	b580      	push	{r7, lr}
 8003de0:	b084      	sub	sp, #16
 8003de2:	af00      	add	r7, sp, #0
 8003de4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dea:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8003dec:	68f8      	ldr	r0, [r7, #12]
 8003dee:	f7ff ff8c 	bl	8003d0a <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003df2:	bf00      	nop
 8003df4:	3710      	adds	r7, #16
 8003df6:	46bd      	mov	sp, r7
 8003df8:	bd80      	pop	{r7, pc}

08003dfa <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8003dfa:	b580      	push	{r7, lr}
 8003dfc:	b084      	sub	sp, #16
 8003dfe:	af00      	add	r7, sp, #0
 8003e00:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8003e02:	2300      	movs	r3, #0
 8003e04:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e0a:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8003e0c:	68bb      	ldr	r3, [r7, #8]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	695b      	ldr	r3, [r3, #20]
 8003e12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	bf14      	ite	ne
 8003e1a:	2301      	movne	r3, #1
 8003e1c:	2300      	moveq	r3, #0
 8003e1e:	b2db      	uxtb	r3, r3
 8003e20:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8003e22:	68bb      	ldr	r3, [r7, #8]
 8003e24:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003e28:	b2db      	uxtb	r3, r3
 8003e2a:	2b21      	cmp	r3, #33	; 0x21
 8003e2c:	d108      	bne.n	8003e40 <UART_DMAError+0x46>
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d005      	beq.n	8003e40 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8003e34:	68bb      	ldr	r3, [r7, #8]
 8003e36:	2200      	movs	r2, #0
 8003e38:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8003e3a:	68b8      	ldr	r0, [r7, #8]
 8003e3c:	f000 f8b9 	bl	8003fb2 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003e40:	68bb      	ldr	r3, [r7, #8]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	695b      	ldr	r3, [r3, #20]
 8003e46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	bf14      	ite	ne
 8003e4e:	2301      	movne	r3, #1
 8003e50:	2300      	moveq	r3, #0
 8003e52:	b2db      	uxtb	r3, r3
 8003e54:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8003e56:	68bb      	ldr	r3, [r7, #8]
 8003e58:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003e5c:	b2db      	uxtb	r3, r3
 8003e5e:	2b22      	cmp	r3, #34	; 0x22
 8003e60:	d108      	bne.n	8003e74 <UART_DMAError+0x7a>
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d005      	beq.n	8003e74 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8003e68:	68bb      	ldr	r3, [r7, #8]
 8003e6a:	2200      	movs	r2, #0
 8003e6c:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8003e6e:	68b8      	ldr	r0, [r7, #8]
 8003e70:	f000 f8c6 	bl	8004000 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8003e74:	68bb      	ldr	r3, [r7, #8]
 8003e76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e78:	f043 0210 	orr.w	r2, r3, #16
 8003e7c:	68bb      	ldr	r3, [r7, #8]
 8003e7e:	645a      	str	r2, [r3, #68]	; 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003e80:	68b8      	ldr	r0, [r7, #8]
 8003e82:	f7ff ff4b 	bl	8003d1c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003e86:	bf00      	nop
 8003e88:	3710      	adds	r7, #16
 8003e8a:	46bd      	mov	sp, r7
 8003e8c:	bd80      	pop	{r7, pc}

08003e8e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003e8e:	b580      	push	{r7, lr}
 8003e90:	b086      	sub	sp, #24
 8003e92:	af00      	add	r7, sp, #0
 8003e94:	60f8      	str	r0, [r7, #12]
 8003e96:	60b9      	str	r1, [r7, #8]
 8003e98:	603b      	str	r3, [r7, #0]
 8003e9a:	4613      	mov	r3, r2
 8003e9c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e9e:	e03b      	b.n	8003f18 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ea0:	6a3b      	ldr	r3, [r7, #32]
 8003ea2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ea6:	d037      	beq.n	8003f18 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ea8:	f7fe f85e 	bl	8001f68 <HAL_GetTick>
 8003eac:	4602      	mov	r2, r0
 8003eae:	683b      	ldr	r3, [r7, #0]
 8003eb0:	1ad3      	subs	r3, r2, r3
 8003eb2:	6a3a      	ldr	r2, [r7, #32]
 8003eb4:	429a      	cmp	r2, r3
 8003eb6:	d302      	bcc.n	8003ebe <UART_WaitOnFlagUntilTimeout+0x30>
 8003eb8:	6a3b      	ldr	r3, [r7, #32]
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d101      	bne.n	8003ec2 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003ebe:	2303      	movs	r3, #3
 8003ec0:	e03a      	b.n	8003f38 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	68db      	ldr	r3, [r3, #12]
 8003ec8:	f003 0304 	and.w	r3, r3, #4
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d023      	beq.n	8003f18 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003ed0:	68bb      	ldr	r3, [r7, #8]
 8003ed2:	2b80      	cmp	r3, #128	; 0x80
 8003ed4:	d020      	beq.n	8003f18 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003ed6:	68bb      	ldr	r3, [r7, #8]
 8003ed8:	2b40      	cmp	r3, #64	; 0x40
 8003eda:	d01d      	beq.n	8003f18 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f003 0308 	and.w	r3, r3, #8
 8003ee6:	2b08      	cmp	r3, #8
 8003ee8:	d116      	bne.n	8003f18 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003eea:	2300      	movs	r3, #0
 8003eec:	617b      	str	r3, [r7, #20]
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	617b      	str	r3, [r7, #20]
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	685b      	ldr	r3, [r3, #4]
 8003efc:	617b      	str	r3, [r7, #20]
 8003efe:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003f00:	68f8      	ldr	r0, [r7, #12]
 8003f02:	f000 f87d 	bl	8004000 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	2208      	movs	r2, #8
 8003f0a:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	2200      	movs	r2, #0
 8003f10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8003f14:	2301      	movs	r3, #1
 8003f16:	e00f      	b.n	8003f38 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	681a      	ldr	r2, [r3, #0]
 8003f1e:	68bb      	ldr	r3, [r7, #8]
 8003f20:	4013      	ands	r3, r2
 8003f22:	68ba      	ldr	r2, [r7, #8]
 8003f24:	429a      	cmp	r2, r3
 8003f26:	bf0c      	ite	eq
 8003f28:	2301      	moveq	r3, #1
 8003f2a:	2300      	movne	r3, #0
 8003f2c:	b2db      	uxtb	r3, r3
 8003f2e:	461a      	mov	r2, r3
 8003f30:	79fb      	ldrb	r3, [r7, #7]
 8003f32:	429a      	cmp	r2, r3
 8003f34:	d0b4      	beq.n	8003ea0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003f36:	2300      	movs	r3, #0
}
 8003f38:	4618      	mov	r0, r3
 8003f3a:	3718      	adds	r7, #24
 8003f3c:	46bd      	mov	sp, r7
 8003f3e:	bd80      	pop	{r7, pc}

08003f40 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003f40:	b480      	push	{r7}
 8003f42:	b085      	sub	sp, #20
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	60f8      	str	r0, [r7, #12]
 8003f48:	60b9      	str	r1, [r7, #8]
 8003f4a:	4613      	mov	r3, r2
 8003f4c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	68ba      	ldr	r2, [r7, #8]
 8003f52:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	88fa      	ldrh	r2, [r7, #6]
 8003f58:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	88fa      	ldrh	r2, [r7, #6]
 8003f5e:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	2200      	movs	r2, #0
 8003f64:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	2222      	movs	r2, #34	; 0x22
 8003f6a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	691b      	ldr	r3, [r3, #16]
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d007      	beq.n	8003f86 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	68da      	ldr	r2, [r3, #12]
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003f84:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	695a      	ldr	r2, [r3, #20]
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f042 0201 	orr.w	r2, r2, #1
 8003f94:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	68da      	ldr	r2, [r3, #12]
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f042 0220 	orr.w	r2, r2, #32
 8003fa4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003fa6:	2300      	movs	r3, #0
}
 8003fa8:	4618      	mov	r0, r3
 8003faa:	3714      	adds	r7, #20
 8003fac:	46bd      	mov	sp, r7
 8003fae:	bc80      	pop	{r7}
 8003fb0:	4770      	bx	lr

08003fb2 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8003fb2:	b480      	push	{r7}
 8003fb4:	b089      	sub	sp, #36	; 0x24
 8003fb6:	af00      	add	r7, sp, #0
 8003fb8:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	330c      	adds	r3, #12
 8003fc0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	e853 3f00 	ldrex	r3, [r3]
 8003fc8:	60bb      	str	r3, [r7, #8]
   return(result);
 8003fca:	68bb      	ldr	r3, [r7, #8]
 8003fcc:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8003fd0:	61fb      	str	r3, [r7, #28]
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	330c      	adds	r3, #12
 8003fd8:	69fa      	ldr	r2, [r7, #28]
 8003fda:	61ba      	str	r2, [r7, #24]
 8003fdc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fde:	6979      	ldr	r1, [r7, #20]
 8003fe0:	69ba      	ldr	r2, [r7, #24]
 8003fe2:	e841 2300 	strex	r3, r2, [r1]
 8003fe6:	613b      	str	r3, [r7, #16]
   return(result);
 8003fe8:	693b      	ldr	r3, [r7, #16]
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d1e5      	bne.n	8003fba <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	2220      	movs	r2, #32
 8003ff2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
}
 8003ff6:	bf00      	nop
 8003ff8:	3724      	adds	r7, #36	; 0x24
 8003ffa:	46bd      	mov	sp, r7
 8003ffc:	bc80      	pop	{r7}
 8003ffe:	4770      	bx	lr

08004000 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004000:	b480      	push	{r7}
 8004002:	b095      	sub	sp, #84	; 0x54
 8004004:	af00      	add	r7, sp, #0
 8004006:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	330c      	adds	r3, #12
 800400e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004010:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004012:	e853 3f00 	ldrex	r3, [r3]
 8004016:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004018:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800401a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800401e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	330c      	adds	r3, #12
 8004026:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004028:	643a      	str	r2, [r7, #64]	; 0x40
 800402a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800402c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800402e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004030:	e841 2300 	strex	r3, r2, [r1]
 8004034:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004036:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004038:	2b00      	cmp	r3, #0
 800403a:	d1e5      	bne.n	8004008 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	3314      	adds	r3, #20
 8004042:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004044:	6a3b      	ldr	r3, [r7, #32]
 8004046:	e853 3f00 	ldrex	r3, [r3]
 800404a:	61fb      	str	r3, [r7, #28]
   return(result);
 800404c:	69fb      	ldr	r3, [r7, #28]
 800404e:	f023 0301 	bic.w	r3, r3, #1
 8004052:	64bb      	str	r3, [r7, #72]	; 0x48
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	3314      	adds	r3, #20
 800405a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800405c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800405e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004060:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004062:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004064:	e841 2300 	strex	r3, r2, [r1]
 8004068:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800406a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800406c:	2b00      	cmp	r3, #0
 800406e:	d1e5      	bne.n	800403c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004074:	2b01      	cmp	r3, #1
 8004076:	d119      	bne.n	80040ac <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	330c      	adds	r3, #12
 800407e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	e853 3f00 	ldrex	r3, [r3]
 8004086:	60bb      	str	r3, [r7, #8]
   return(result);
 8004088:	68bb      	ldr	r3, [r7, #8]
 800408a:	f023 0310 	bic.w	r3, r3, #16
 800408e:	647b      	str	r3, [r7, #68]	; 0x44
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	330c      	adds	r3, #12
 8004096:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004098:	61ba      	str	r2, [r7, #24]
 800409a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800409c:	6979      	ldr	r1, [r7, #20]
 800409e:	69ba      	ldr	r2, [r7, #24]
 80040a0:	e841 2300 	strex	r3, r2, [r1]
 80040a4:	613b      	str	r3, [r7, #16]
   return(result);
 80040a6:	693b      	ldr	r3, [r7, #16]
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d1e5      	bne.n	8004078 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2220      	movs	r2, #32
 80040b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	2200      	movs	r2, #0
 80040b8:	631a      	str	r2, [r3, #48]	; 0x30
}
 80040ba:	bf00      	nop
 80040bc:	3754      	adds	r7, #84	; 0x54
 80040be:	46bd      	mov	sp, r7
 80040c0:	bc80      	pop	{r7}
 80040c2:	4770      	bx	lr

080040c4 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80040c4:	b580      	push	{r7, lr}
 80040c6:	b084      	sub	sp, #16
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040d0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	2200      	movs	r2, #0
 80040d6:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	2200      	movs	r2, #0
 80040dc:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80040de:	68f8      	ldr	r0, [r7, #12]
 80040e0:	f7ff fe1c 	bl	8003d1c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80040e4:	bf00      	nop
 80040e6:	3710      	adds	r7, #16
 80040e8:	46bd      	mov	sp, r7
 80040ea:	bd80      	pop	{r7, pc}

080040ec <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80040ec:	b480      	push	{r7}
 80040ee:	b085      	sub	sp, #20
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80040fa:	b2db      	uxtb	r3, r3
 80040fc:	2b21      	cmp	r3, #33	; 0x21
 80040fe:	d13e      	bne.n	800417e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	689b      	ldr	r3, [r3, #8]
 8004104:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004108:	d114      	bne.n	8004134 <UART_Transmit_IT+0x48>
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	691b      	ldr	r3, [r3, #16]
 800410e:	2b00      	cmp	r3, #0
 8004110:	d110      	bne.n	8004134 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	6a1b      	ldr	r3, [r3, #32]
 8004116:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	881b      	ldrh	r3, [r3, #0]
 800411c:	461a      	mov	r2, r3
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004126:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	6a1b      	ldr	r3, [r3, #32]
 800412c:	1c9a      	adds	r2, r3, #2
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	621a      	str	r2, [r3, #32]
 8004132:	e008      	b.n	8004146 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	6a1b      	ldr	r3, [r3, #32]
 8004138:	1c59      	adds	r1, r3, #1
 800413a:	687a      	ldr	r2, [r7, #4]
 800413c:	6211      	str	r1, [r2, #32]
 800413e:	781a      	ldrb	r2, [r3, #0]
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800414a:	b29b      	uxth	r3, r3
 800414c:	3b01      	subs	r3, #1
 800414e:	b29b      	uxth	r3, r3
 8004150:	687a      	ldr	r2, [r7, #4]
 8004152:	4619      	mov	r1, r3
 8004154:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004156:	2b00      	cmp	r3, #0
 8004158:	d10f      	bne.n	800417a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	68da      	ldr	r2, [r3, #12]
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004168:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	68da      	ldr	r2, [r3, #12]
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004178:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800417a:	2300      	movs	r3, #0
 800417c:	e000      	b.n	8004180 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800417e:	2302      	movs	r3, #2
  }
}
 8004180:	4618      	mov	r0, r3
 8004182:	3714      	adds	r7, #20
 8004184:	46bd      	mov	sp, r7
 8004186:	bc80      	pop	{r7}
 8004188:	4770      	bx	lr

0800418a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800418a:	b580      	push	{r7, lr}
 800418c:	b082      	sub	sp, #8
 800418e:	af00      	add	r7, sp, #0
 8004190:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	68da      	ldr	r2, [r3, #12]
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80041a0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	2220      	movs	r2, #32
 80041a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80041aa:	6878      	ldr	r0, [r7, #4]
 80041ac:	f7ff fda4 	bl	8003cf8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80041b0:	2300      	movs	r3, #0
}
 80041b2:	4618      	mov	r0, r3
 80041b4:	3708      	adds	r7, #8
 80041b6:	46bd      	mov	sp, r7
 80041b8:	bd80      	pop	{r7, pc}

080041ba <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80041ba:	b580      	push	{r7, lr}
 80041bc:	b08c      	sub	sp, #48	; 0x30
 80041be:	af00      	add	r7, sp, #0
 80041c0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80041c8:	b2db      	uxtb	r3, r3
 80041ca:	2b22      	cmp	r3, #34	; 0x22
 80041cc:	f040 80ae 	bne.w	800432c <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	689b      	ldr	r3, [r3, #8]
 80041d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80041d8:	d117      	bne.n	800420a <UART_Receive_IT+0x50>
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	691b      	ldr	r3, [r3, #16]
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d113      	bne.n	800420a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80041e2:	2300      	movs	r3, #0
 80041e4:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041ea:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	685b      	ldr	r3, [r3, #4]
 80041f2:	b29b      	uxth	r3, r3
 80041f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80041f8:	b29a      	uxth	r2, r3
 80041fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041fc:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004202:	1c9a      	adds	r2, r3, #2
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	629a      	str	r2, [r3, #40]	; 0x28
 8004208:	e026      	b.n	8004258 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800420e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004210:	2300      	movs	r3, #0
 8004212:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	689b      	ldr	r3, [r3, #8]
 8004218:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800421c:	d007      	beq.n	800422e <UART_Receive_IT+0x74>
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	689b      	ldr	r3, [r3, #8]
 8004222:	2b00      	cmp	r3, #0
 8004224:	d10a      	bne.n	800423c <UART_Receive_IT+0x82>
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	691b      	ldr	r3, [r3, #16]
 800422a:	2b00      	cmp	r3, #0
 800422c:	d106      	bne.n	800423c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	685b      	ldr	r3, [r3, #4]
 8004234:	b2da      	uxtb	r2, r3
 8004236:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004238:	701a      	strb	r2, [r3, #0]
 800423a:	e008      	b.n	800424e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	685b      	ldr	r3, [r3, #4]
 8004242:	b2db      	uxtb	r3, r3
 8004244:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004248:	b2da      	uxtb	r2, r3
 800424a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800424c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004252:	1c5a      	adds	r2, r3, #1
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800425c:	b29b      	uxth	r3, r3
 800425e:	3b01      	subs	r3, #1
 8004260:	b29b      	uxth	r3, r3
 8004262:	687a      	ldr	r2, [r7, #4]
 8004264:	4619      	mov	r1, r3
 8004266:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004268:	2b00      	cmp	r3, #0
 800426a:	d15d      	bne.n	8004328 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	68da      	ldr	r2, [r3, #12]
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f022 0220 	bic.w	r2, r2, #32
 800427a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	68da      	ldr	r2, [r3, #12]
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800428a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	695a      	ldr	r2, [r3, #20]
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f022 0201 	bic.w	r2, r2, #1
 800429a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	2220      	movs	r2, #32
 80042a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	2200      	movs	r2, #0
 80042a8:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042ae:	2b01      	cmp	r3, #1
 80042b0:	d135      	bne.n	800431e <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	2200      	movs	r2, #0
 80042b6:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	330c      	adds	r3, #12
 80042be:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042c0:	697b      	ldr	r3, [r7, #20]
 80042c2:	e853 3f00 	ldrex	r3, [r3]
 80042c6:	613b      	str	r3, [r7, #16]
   return(result);
 80042c8:	693b      	ldr	r3, [r7, #16]
 80042ca:	f023 0310 	bic.w	r3, r3, #16
 80042ce:	627b      	str	r3, [r7, #36]	; 0x24
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	330c      	adds	r3, #12
 80042d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80042d8:	623a      	str	r2, [r7, #32]
 80042da:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042dc:	69f9      	ldr	r1, [r7, #28]
 80042de:	6a3a      	ldr	r2, [r7, #32]
 80042e0:	e841 2300 	strex	r3, r2, [r1]
 80042e4:	61bb      	str	r3, [r7, #24]
   return(result);
 80042e6:	69bb      	ldr	r3, [r7, #24]
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d1e5      	bne.n	80042b8 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f003 0310 	and.w	r3, r3, #16
 80042f6:	2b10      	cmp	r3, #16
 80042f8:	d10a      	bne.n	8004310 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80042fa:	2300      	movs	r3, #0
 80042fc:	60fb      	str	r3, [r7, #12]
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	60fb      	str	r3, [r7, #12]
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	685b      	ldr	r3, [r3, #4]
 800430c:	60fb      	str	r3, [r7, #12]
 800430e:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004314:	4619      	mov	r1, r3
 8004316:	6878      	ldr	r0, [r7, #4]
 8004318:	f7ff fd09 	bl	8003d2e <HAL_UARTEx_RxEventCallback>
 800431c:	e002      	b.n	8004324 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800431e:	6878      	ldr	r0, [r7, #4]
 8004320:	f7fc fbf2 	bl	8000b08 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004324:	2300      	movs	r3, #0
 8004326:	e002      	b.n	800432e <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004328:	2300      	movs	r3, #0
 800432a:	e000      	b.n	800432e <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800432c:	2302      	movs	r3, #2
  }
}
 800432e:	4618      	mov	r0, r3
 8004330:	3730      	adds	r7, #48	; 0x30
 8004332:	46bd      	mov	sp, r7
 8004334:	bd80      	pop	{r7, pc}
	...

08004338 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004338:	b580      	push	{r7, lr}
 800433a:	b084      	sub	sp, #16
 800433c:	af00      	add	r7, sp, #0
 800433e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	691b      	ldr	r3, [r3, #16]
 8004346:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	68da      	ldr	r2, [r3, #12]
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	430a      	orrs	r2, r1
 8004354:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	689a      	ldr	r2, [r3, #8]
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	691b      	ldr	r3, [r3, #16]
 800435e:	431a      	orrs	r2, r3
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	695b      	ldr	r3, [r3, #20]
 8004364:	4313      	orrs	r3, r2
 8004366:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	68db      	ldr	r3, [r3, #12]
 800436e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8004372:	f023 030c 	bic.w	r3, r3, #12
 8004376:	687a      	ldr	r2, [r7, #4]
 8004378:	6812      	ldr	r2, [r2, #0]
 800437a:	68b9      	ldr	r1, [r7, #8]
 800437c:	430b      	orrs	r3, r1
 800437e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	695b      	ldr	r3, [r3, #20]
 8004386:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	699a      	ldr	r2, [r3, #24]
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	430a      	orrs	r2, r1
 8004394:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	4a2c      	ldr	r2, [pc, #176]	; (800444c <UART_SetConfig+0x114>)
 800439c:	4293      	cmp	r3, r2
 800439e:	d103      	bne.n	80043a8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80043a0:	f7ff f876 	bl	8003490 <HAL_RCC_GetPCLK2Freq>
 80043a4:	60f8      	str	r0, [r7, #12]
 80043a6:	e002      	b.n	80043ae <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80043a8:	f7ff f85e 	bl	8003468 <HAL_RCC_GetPCLK1Freq>
 80043ac:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80043ae:	68fa      	ldr	r2, [r7, #12]
 80043b0:	4613      	mov	r3, r2
 80043b2:	009b      	lsls	r3, r3, #2
 80043b4:	4413      	add	r3, r2
 80043b6:	009a      	lsls	r2, r3, #2
 80043b8:	441a      	add	r2, r3
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	685b      	ldr	r3, [r3, #4]
 80043be:	009b      	lsls	r3, r3, #2
 80043c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80043c4:	4a22      	ldr	r2, [pc, #136]	; (8004450 <UART_SetConfig+0x118>)
 80043c6:	fba2 2303 	umull	r2, r3, r2, r3
 80043ca:	095b      	lsrs	r3, r3, #5
 80043cc:	0119      	lsls	r1, r3, #4
 80043ce:	68fa      	ldr	r2, [r7, #12]
 80043d0:	4613      	mov	r3, r2
 80043d2:	009b      	lsls	r3, r3, #2
 80043d4:	4413      	add	r3, r2
 80043d6:	009a      	lsls	r2, r3, #2
 80043d8:	441a      	add	r2, r3
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	685b      	ldr	r3, [r3, #4]
 80043de:	009b      	lsls	r3, r3, #2
 80043e0:	fbb2 f2f3 	udiv	r2, r2, r3
 80043e4:	4b1a      	ldr	r3, [pc, #104]	; (8004450 <UART_SetConfig+0x118>)
 80043e6:	fba3 0302 	umull	r0, r3, r3, r2
 80043ea:	095b      	lsrs	r3, r3, #5
 80043ec:	2064      	movs	r0, #100	; 0x64
 80043ee:	fb00 f303 	mul.w	r3, r0, r3
 80043f2:	1ad3      	subs	r3, r2, r3
 80043f4:	011b      	lsls	r3, r3, #4
 80043f6:	3332      	adds	r3, #50	; 0x32
 80043f8:	4a15      	ldr	r2, [pc, #84]	; (8004450 <UART_SetConfig+0x118>)
 80043fa:	fba2 2303 	umull	r2, r3, r2, r3
 80043fe:	095b      	lsrs	r3, r3, #5
 8004400:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004404:	4419      	add	r1, r3
 8004406:	68fa      	ldr	r2, [r7, #12]
 8004408:	4613      	mov	r3, r2
 800440a:	009b      	lsls	r3, r3, #2
 800440c:	4413      	add	r3, r2
 800440e:	009a      	lsls	r2, r3, #2
 8004410:	441a      	add	r2, r3
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	685b      	ldr	r3, [r3, #4]
 8004416:	009b      	lsls	r3, r3, #2
 8004418:	fbb2 f2f3 	udiv	r2, r2, r3
 800441c:	4b0c      	ldr	r3, [pc, #48]	; (8004450 <UART_SetConfig+0x118>)
 800441e:	fba3 0302 	umull	r0, r3, r3, r2
 8004422:	095b      	lsrs	r3, r3, #5
 8004424:	2064      	movs	r0, #100	; 0x64
 8004426:	fb00 f303 	mul.w	r3, r0, r3
 800442a:	1ad3      	subs	r3, r2, r3
 800442c:	011b      	lsls	r3, r3, #4
 800442e:	3332      	adds	r3, #50	; 0x32
 8004430:	4a07      	ldr	r2, [pc, #28]	; (8004450 <UART_SetConfig+0x118>)
 8004432:	fba2 2303 	umull	r2, r3, r2, r3
 8004436:	095b      	lsrs	r3, r3, #5
 8004438:	f003 020f 	and.w	r2, r3, #15
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	440a      	add	r2, r1
 8004442:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004444:	bf00      	nop
 8004446:	3710      	adds	r7, #16
 8004448:	46bd      	mov	sp, r7
 800444a:	bd80      	pop	{r7, pc}
 800444c:	40013800 	.word	0x40013800
 8004450:	51eb851f 	.word	0x51eb851f

08004454 <__errno>:
 8004454:	4b01      	ldr	r3, [pc, #4]	; (800445c <__errno+0x8>)
 8004456:	6818      	ldr	r0, [r3, #0]
 8004458:	4770      	bx	lr
 800445a:	bf00      	nop
 800445c:	20000028 	.word	0x20000028

08004460 <__libc_init_array>:
 8004460:	b570      	push	{r4, r5, r6, lr}
 8004462:	2600      	movs	r6, #0
 8004464:	4d0c      	ldr	r5, [pc, #48]	; (8004498 <__libc_init_array+0x38>)
 8004466:	4c0d      	ldr	r4, [pc, #52]	; (800449c <__libc_init_array+0x3c>)
 8004468:	1b64      	subs	r4, r4, r5
 800446a:	10a4      	asrs	r4, r4, #2
 800446c:	42a6      	cmp	r6, r4
 800446e:	d109      	bne.n	8004484 <__libc_init_array+0x24>
 8004470:	f000 fcfa 	bl	8004e68 <_init>
 8004474:	2600      	movs	r6, #0
 8004476:	4d0a      	ldr	r5, [pc, #40]	; (80044a0 <__libc_init_array+0x40>)
 8004478:	4c0a      	ldr	r4, [pc, #40]	; (80044a4 <__libc_init_array+0x44>)
 800447a:	1b64      	subs	r4, r4, r5
 800447c:	10a4      	asrs	r4, r4, #2
 800447e:	42a6      	cmp	r6, r4
 8004480:	d105      	bne.n	800448e <__libc_init_array+0x2e>
 8004482:	bd70      	pop	{r4, r5, r6, pc}
 8004484:	f855 3b04 	ldr.w	r3, [r5], #4
 8004488:	4798      	blx	r3
 800448a:	3601      	adds	r6, #1
 800448c:	e7ee      	b.n	800446c <__libc_init_array+0xc>
 800448e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004492:	4798      	blx	r3
 8004494:	3601      	adds	r6, #1
 8004496:	e7f2      	b.n	800447e <__libc_init_array+0x1e>
 8004498:	080058bc 	.word	0x080058bc
 800449c:	080058bc 	.word	0x080058bc
 80044a0:	080058bc 	.word	0x080058bc
 80044a4:	080058c0 	.word	0x080058c0

080044a8 <memcpy>:
 80044a8:	440a      	add	r2, r1
 80044aa:	4291      	cmp	r1, r2
 80044ac:	f100 33ff 	add.w	r3, r0, #4294967295
 80044b0:	d100      	bne.n	80044b4 <memcpy+0xc>
 80044b2:	4770      	bx	lr
 80044b4:	b510      	push	{r4, lr}
 80044b6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80044ba:	4291      	cmp	r1, r2
 80044bc:	f803 4f01 	strb.w	r4, [r3, #1]!
 80044c0:	d1f9      	bne.n	80044b6 <memcpy+0xe>
 80044c2:	bd10      	pop	{r4, pc}

080044c4 <memset>:
 80044c4:	4603      	mov	r3, r0
 80044c6:	4402      	add	r2, r0
 80044c8:	4293      	cmp	r3, r2
 80044ca:	d100      	bne.n	80044ce <memset+0xa>
 80044cc:	4770      	bx	lr
 80044ce:	f803 1b01 	strb.w	r1, [r3], #1
 80044d2:	e7f9      	b.n	80044c8 <memset+0x4>

080044d4 <_free_r>:
 80044d4:	b538      	push	{r3, r4, r5, lr}
 80044d6:	4605      	mov	r5, r0
 80044d8:	2900      	cmp	r1, #0
 80044da:	d040      	beq.n	800455e <_free_r+0x8a>
 80044dc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80044e0:	1f0c      	subs	r4, r1, #4
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	bfb8      	it	lt
 80044e6:	18e4      	addlt	r4, r4, r3
 80044e8:	f000 f960 	bl	80047ac <__malloc_lock>
 80044ec:	4a1c      	ldr	r2, [pc, #112]	; (8004560 <_free_r+0x8c>)
 80044ee:	6813      	ldr	r3, [r2, #0]
 80044f0:	b933      	cbnz	r3, 8004500 <_free_r+0x2c>
 80044f2:	6063      	str	r3, [r4, #4]
 80044f4:	6014      	str	r4, [r2, #0]
 80044f6:	4628      	mov	r0, r5
 80044f8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80044fc:	f000 b95c 	b.w	80047b8 <__malloc_unlock>
 8004500:	42a3      	cmp	r3, r4
 8004502:	d908      	bls.n	8004516 <_free_r+0x42>
 8004504:	6820      	ldr	r0, [r4, #0]
 8004506:	1821      	adds	r1, r4, r0
 8004508:	428b      	cmp	r3, r1
 800450a:	bf01      	itttt	eq
 800450c:	6819      	ldreq	r1, [r3, #0]
 800450e:	685b      	ldreq	r3, [r3, #4]
 8004510:	1809      	addeq	r1, r1, r0
 8004512:	6021      	streq	r1, [r4, #0]
 8004514:	e7ed      	b.n	80044f2 <_free_r+0x1e>
 8004516:	461a      	mov	r2, r3
 8004518:	685b      	ldr	r3, [r3, #4]
 800451a:	b10b      	cbz	r3, 8004520 <_free_r+0x4c>
 800451c:	42a3      	cmp	r3, r4
 800451e:	d9fa      	bls.n	8004516 <_free_r+0x42>
 8004520:	6811      	ldr	r1, [r2, #0]
 8004522:	1850      	adds	r0, r2, r1
 8004524:	42a0      	cmp	r0, r4
 8004526:	d10b      	bne.n	8004540 <_free_r+0x6c>
 8004528:	6820      	ldr	r0, [r4, #0]
 800452a:	4401      	add	r1, r0
 800452c:	1850      	adds	r0, r2, r1
 800452e:	4283      	cmp	r3, r0
 8004530:	6011      	str	r1, [r2, #0]
 8004532:	d1e0      	bne.n	80044f6 <_free_r+0x22>
 8004534:	6818      	ldr	r0, [r3, #0]
 8004536:	685b      	ldr	r3, [r3, #4]
 8004538:	4401      	add	r1, r0
 800453a:	6011      	str	r1, [r2, #0]
 800453c:	6053      	str	r3, [r2, #4]
 800453e:	e7da      	b.n	80044f6 <_free_r+0x22>
 8004540:	d902      	bls.n	8004548 <_free_r+0x74>
 8004542:	230c      	movs	r3, #12
 8004544:	602b      	str	r3, [r5, #0]
 8004546:	e7d6      	b.n	80044f6 <_free_r+0x22>
 8004548:	6820      	ldr	r0, [r4, #0]
 800454a:	1821      	adds	r1, r4, r0
 800454c:	428b      	cmp	r3, r1
 800454e:	bf01      	itttt	eq
 8004550:	6819      	ldreq	r1, [r3, #0]
 8004552:	685b      	ldreq	r3, [r3, #4]
 8004554:	1809      	addeq	r1, r1, r0
 8004556:	6021      	streq	r1, [r4, #0]
 8004558:	6063      	str	r3, [r4, #4]
 800455a:	6054      	str	r4, [r2, #4]
 800455c:	e7cb      	b.n	80044f6 <_free_r+0x22>
 800455e:	bd38      	pop	{r3, r4, r5, pc}
 8004560:	20000bd8 	.word	0x20000bd8

08004564 <sbrk_aligned>:
 8004564:	b570      	push	{r4, r5, r6, lr}
 8004566:	4e0e      	ldr	r6, [pc, #56]	; (80045a0 <sbrk_aligned+0x3c>)
 8004568:	460c      	mov	r4, r1
 800456a:	6831      	ldr	r1, [r6, #0]
 800456c:	4605      	mov	r5, r0
 800456e:	b911      	cbnz	r1, 8004576 <sbrk_aligned+0x12>
 8004570:	f000 f88c 	bl	800468c <_sbrk_r>
 8004574:	6030      	str	r0, [r6, #0]
 8004576:	4621      	mov	r1, r4
 8004578:	4628      	mov	r0, r5
 800457a:	f000 f887 	bl	800468c <_sbrk_r>
 800457e:	1c43      	adds	r3, r0, #1
 8004580:	d00a      	beq.n	8004598 <sbrk_aligned+0x34>
 8004582:	1cc4      	adds	r4, r0, #3
 8004584:	f024 0403 	bic.w	r4, r4, #3
 8004588:	42a0      	cmp	r0, r4
 800458a:	d007      	beq.n	800459c <sbrk_aligned+0x38>
 800458c:	1a21      	subs	r1, r4, r0
 800458e:	4628      	mov	r0, r5
 8004590:	f000 f87c 	bl	800468c <_sbrk_r>
 8004594:	3001      	adds	r0, #1
 8004596:	d101      	bne.n	800459c <sbrk_aligned+0x38>
 8004598:	f04f 34ff 	mov.w	r4, #4294967295
 800459c:	4620      	mov	r0, r4
 800459e:	bd70      	pop	{r4, r5, r6, pc}
 80045a0:	20000bdc 	.word	0x20000bdc

080045a4 <_malloc_r>:
 80045a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80045a8:	1ccd      	adds	r5, r1, #3
 80045aa:	f025 0503 	bic.w	r5, r5, #3
 80045ae:	3508      	adds	r5, #8
 80045b0:	2d0c      	cmp	r5, #12
 80045b2:	bf38      	it	cc
 80045b4:	250c      	movcc	r5, #12
 80045b6:	2d00      	cmp	r5, #0
 80045b8:	4607      	mov	r7, r0
 80045ba:	db01      	blt.n	80045c0 <_malloc_r+0x1c>
 80045bc:	42a9      	cmp	r1, r5
 80045be:	d905      	bls.n	80045cc <_malloc_r+0x28>
 80045c0:	230c      	movs	r3, #12
 80045c2:	2600      	movs	r6, #0
 80045c4:	603b      	str	r3, [r7, #0]
 80045c6:	4630      	mov	r0, r6
 80045c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80045cc:	4e2e      	ldr	r6, [pc, #184]	; (8004688 <_malloc_r+0xe4>)
 80045ce:	f000 f8ed 	bl	80047ac <__malloc_lock>
 80045d2:	6833      	ldr	r3, [r6, #0]
 80045d4:	461c      	mov	r4, r3
 80045d6:	bb34      	cbnz	r4, 8004626 <_malloc_r+0x82>
 80045d8:	4629      	mov	r1, r5
 80045da:	4638      	mov	r0, r7
 80045dc:	f7ff ffc2 	bl	8004564 <sbrk_aligned>
 80045e0:	1c43      	adds	r3, r0, #1
 80045e2:	4604      	mov	r4, r0
 80045e4:	d14d      	bne.n	8004682 <_malloc_r+0xde>
 80045e6:	6834      	ldr	r4, [r6, #0]
 80045e8:	4626      	mov	r6, r4
 80045ea:	2e00      	cmp	r6, #0
 80045ec:	d140      	bne.n	8004670 <_malloc_r+0xcc>
 80045ee:	6823      	ldr	r3, [r4, #0]
 80045f0:	4631      	mov	r1, r6
 80045f2:	4638      	mov	r0, r7
 80045f4:	eb04 0803 	add.w	r8, r4, r3
 80045f8:	f000 f848 	bl	800468c <_sbrk_r>
 80045fc:	4580      	cmp	r8, r0
 80045fe:	d13a      	bne.n	8004676 <_malloc_r+0xd2>
 8004600:	6821      	ldr	r1, [r4, #0]
 8004602:	3503      	adds	r5, #3
 8004604:	1a6d      	subs	r5, r5, r1
 8004606:	f025 0503 	bic.w	r5, r5, #3
 800460a:	3508      	adds	r5, #8
 800460c:	2d0c      	cmp	r5, #12
 800460e:	bf38      	it	cc
 8004610:	250c      	movcc	r5, #12
 8004612:	4638      	mov	r0, r7
 8004614:	4629      	mov	r1, r5
 8004616:	f7ff ffa5 	bl	8004564 <sbrk_aligned>
 800461a:	3001      	adds	r0, #1
 800461c:	d02b      	beq.n	8004676 <_malloc_r+0xd2>
 800461e:	6823      	ldr	r3, [r4, #0]
 8004620:	442b      	add	r3, r5
 8004622:	6023      	str	r3, [r4, #0]
 8004624:	e00e      	b.n	8004644 <_malloc_r+0xa0>
 8004626:	6822      	ldr	r2, [r4, #0]
 8004628:	1b52      	subs	r2, r2, r5
 800462a:	d41e      	bmi.n	800466a <_malloc_r+0xc6>
 800462c:	2a0b      	cmp	r2, #11
 800462e:	d916      	bls.n	800465e <_malloc_r+0xba>
 8004630:	1961      	adds	r1, r4, r5
 8004632:	42a3      	cmp	r3, r4
 8004634:	6025      	str	r5, [r4, #0]
 8004636:	bf18      	it	ne
 8004638:	6059      	strne	r1, [r3, #4]
 800463a:	6863      	ldr	r3, [r4, #4]
 800463c:	bf08      	it	eq
 800463e:	6031      	streq	r1, [r6, #0]
 8004640:	5162      	str	r2, [r4, r5]
 8004642:	604b      	str	r3, [r1, #4]
 8004644:	4638      	mov	r0, r7
 8004646:	f104 060b 	add.w	r6, r4, #11
 800464a:	f000 f8b5 	bl	80047b8 <__malloc_unlock>
 800464e:	f026 0607 	bic.w	r6, r6, #7
 8004652:	1d23      	adds	r3, r4, #4
 8004654:	1af2      	subs	r2, r6, r3
 8004656:	d0b6      	beq.n	80045c6 <_malloc_r+0x22>
 8004658:	1b9b      	subs	r3, r3, r6
 800465a:	50a3      	str	r3, [r4, r2]
 800465c:	e7b3      	b.n	80045c6 <_malloc_r+0x22>
 800465e:	6862      	ldr	r2, [r4, #4]
 8004660:	42a3      	cmp	r3, r4
 8004662:	bf0c      	ite	eq
 8004664:	6032      	streq	r2, [r6, #0]
 8004666:	605a      	strne	r2, [r3, #4]
 8004668:	e7ec      	b.n	8004644 <_malloc_r+0xa0>
 800466a:	4623      	mov	r3, r4
 800466c:	6864      	ldr	r4, [r4, #4]
 800466e:	e7b2      	b.n	80045d6 <_malloc_r+0x32>
 8004670:	4634      	mov	r4, r6
 8004672:	6876      	ldr	r6, [r6, #4]
 8004674:	e7b9      	b.n	80045ea <_malloc_r+0x46>
 8004676:	230c      	movs	r3, #12
 8004678:	4638      	mov	r0, r7
 800467a:	603b      	str	r3, [r7, #0]
 800467c:	f000 f89c 	bl	80047b8 <__malloc_unlock>
 8004680:	e7a1      	b.n	80045c6 <_malloc_r+0x22>
 8004682:	6025      	str	r5, [r4, #0]
 8004684:	e7de      	b.n	8004644 <_malloc_r+0xa0>
 8004686:	bf00      	nop
 8004688:	20000bd8 	.word	0x20000bd8

0800468c <_sbrk_r>:
 800468c:	b538      	push	{r3, r4, r5, lr}
 800468e:	2300      	movs	r3, #0
 8004690:	4d05      	ldr	r5, [pc, #20]	; (80046a8 <_sbrk_r+0x1c>)
 8004692:	4604      	mov	r4, r0
 8004694:	4608      	mov	r0, r1
 8004696:	602b      	str	r3, [r5, #0]
 8004698:	f7fd fbac 	bl	8001df4 <_sbrk>
 800469c:	1c43      	adds	r3, r0, #1
 800469e:	d102      	bne.n	80046a6 <_sbrk_r+0x1a>
 80046a0:	682b      	ldr	r3, [r5, #0]
 80046a2:	b103      	cbz	r3, 80046a6 <_sbrk_r+0x1a>
 80046a4:	6023      	str	r3, [r4, #0]
 80046a6:	bd38      	pop	{r3, r4, r5, pc}
 80046a8:	20000be0 	.word	0x20000be0

080046ac <sniprintf>:
 80046ac:	b40c      	push	{r2, r3}
 80046ae:	b530      	push	{r4, r5, lr}
 80046b0:	4b17      	ldr	r3, [pc, #92]	; (8004710 <sniprintf+0x64>)
 80046b2:	1e0c      	subs	r4, r1, #0
 80046b4:	681d      	ldr	r5, [r3, #0]
 80046b6:	b09d      	sub	sp, #116	; 0x74
 80046b8:	da08      	bge.n	80046cc <sniprintf+0x20>
 80046ba:	238b      	movs	r3, #139	; 0x8b
 80046bc:	f04f 30ff 	mov.w	r0, #4294967295
 80046c0:	602b      	str	r3, [r5, #0]
 80046c2:	b01d      	add	sp, #116	; 0x74
 80046c4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80046c8:	b002      	add	sp, #8
 80046ca:	4770      	bx	lr
 80046cc:	f44f 7302 	mov.w	r3, #520	; 0x208
 80046d0:	f8ad 3014 	strh.w	r3, [sp, #20]
 80046d4:	bf0c      	ite	eq
 80046d6:	4623      	moveq	r3, r4
 80046d8:	f104 33ff 	addne.w	r3, r4, #4294967295
 80046dc:	9304      	str	r3, [sp, #16]
 80046de:	9307      	str	r3, [sp, #28]
 80046e0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80046e4:	9002      	str	r0, [sp, #8]
 80046e6:	9006      	str	r0, [sp, #24]
 80046e8:	f8ad 3016 	strh.w	r3, [sp, #22]
 80046ec:	4628      	mov	r0, r5
 80046ee:	ab21      	add	r3, sp, #132	; 0x84
 80046f0:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80046f2:	a902      	add	r1, sp, #8
 80046f4:	9301      	str	r3, [sp, #4]
 80046f6:	f000 f8ef 	bl	80048d8 <_svfiprintf_r>
 80046fa:	1c43      	adds	r3, r0, #1
 80046fc:	bfbc      	itt	lt
 80046fe:	238b      	movlt	r3, #139	; 0x8b
 8004700:	602b      	strlt	r3, [r5, #0]
 8004702:	2c00      	cmp	r4, #0
 8004704:	d0dd      	beq.n	80046c2 <sniprintf+0x16>
 8004706:	2200      	movs	r2, #0
 8004708:	9b02      	ldr	r3, [sp, #8]
 800470a:	701a      	strb	r2, [r3, #0]
 800470c:	e7d9      	b.n	80046c2 <sniprintf+0x16>
 800470e:	bf00      	nop
 8004710:	20000028 	.word	0x20000028

08004714 <siprintf>:
 8004714:	b40e      	push	{r1, r2, r3}
 8004716:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800471a:	b500      	push	{lr}
 800471c:	b09c      	sub	sp, #112	; 0x70
 800471e:	ab1d      	add	r3, sp, #116	; 0x74
 8004720:	9002      	str	r0, [sp, #8]
 8004722:	9006      	str	r0, [sp, #24]
 8004724:	9107      	str	r1, [sp, #28]
 8004726:	9104      	str	r1, [sp, #16]
 8004728:	4808      	ldr	r0, [pc, #32]	; (800474c <siprintf+0x38>)
 800472a:	4909      	ldr	r1, [pc, #36]	; (8004750 <siprintf+0x3c>)
 800472c:	f853 2b04 	ldr.w	r2, [r3], #4
 8004730:	9105      	str	r1, [sp, #20]
 8004732:	6800      	ldr	r0, [r0, #0]
 8004734:	a902      	add	r1, sp, #8
 8004736:	9301      	str	r3, [sp, #4]
 8004738:	f000 f8ce 	bl	80048d8 <_svfiprintf_r>
 800473c:	2200      	movs	r2, #0
 800473e:	9b02      	ldr	r3, [sp, #8]
 8004740:	701a      	strb	r2, [r3, #0]
 8004742:	b01c      	add	sp, #112	; 0x70
 8004744:	f85d eb04 	ldr.w	lr, [sp], #4
 8004748:	b003      	add	sp, #12
 800474a:	4770      	bx	lr
 800474c:	20000028 	.word	0x20000028
 8004750:	ffff0208 	.word	0xffff0208

08004754 <strchr>:
 8004754:	4603      	mov	r3, r0
 8004756:	b2c9      	uxtb	r1, r1
 8004758:	4618      	mov	r0, r3
 800475a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800475e:	b112      	cbz	r2, 8004766 <strchr+0x12>
 8004760:	428a      	cmp	r2, r1
 8004762:	d1f9      	bne.n	8004758 <strchr+0x4>
 8004764:	4770      	bx	lr
 8004766:	2900      	cmp	r1, #0
 8004768:	bf18      	it	ne
 800476a:	2000      	movne	r0, #0
 800476c:	4770      	bx	lr

0800476e <strcpy>:
 800476e:	4603      	mov	r3, r0
 8004770:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004774:	f803 2b01 	strb.w	r2, [r3], #1
 8004778:	2a00      	cmp	r2, #0
 800477a:	d1f9      	bne.n	8004770 <strcpy+0x2>
 800477c:	4770      	bx	lr

0800477e <strstr>:
 800477e:	780a      	ldrb	r2, [r1, #0]
 8004780:	b570      	push	{r4, r5, r6, lr}
 8004782:	b96a      	cbnz	r2, 80047a0 <strstr+0x22>
 8004784:	bd70      	pop	{r4, r5, r6, pc}
 8004786:	429a      	cmp	r2, r3
 8004788:	d109      	bne.n	800479e <strstr+0x20>
 800478a:	460c      	mov	r4, r1
 800478c:	4605      	mov	r5, r0
 800478e:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8004792:	2b00      	cmp	r3, #0
 8004794:	d0f6      	beq.n	8004784 <strstr+0x6>
 8004796:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800479a:	429e      	cmp	r6, r3
 800479c:	d0f7      	beq.n	800478e <strstr+0x10>
 800479e:	3001      	adds	r0, #1
 80047a0:	7803      	ldrb	r3, [r0, #0]
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d1ef      	bne.n	8004786 <strstr+0x8>
 80047a6:	4618      	mov	r0, r3
 80047a8:	e7ec      	b.n	8004784 <strstr+0x6>
	...

080047ac <__malloc_lock>:
 80047ac:	4801      	ldr	r0, [pc, #4]	; (80047b4 <__malloc_lock+0x8>)
 80047ae:	f000 bb29 	b.w	8004e04 <__retarget_lock_acquire_recursive>
 80047b2:	bf00      	nop
 80047b4:	20000be4 	.word	0x20000be4

080047b8 <__malloc_unlock>:
 80047b8:	4801      	ldr	r0, [pc, #4]	; (80047c0 <__malloc_unlock+0x8>)
 80047ba:	f000 bb24 	b.w	8004e06 <__retarget_lock_release_recursive>
 80047be:	bf00      	nop
 80047c0:	20000be4 	.word	0x20000be4

080047c4 <_realloc_r>:
 80047c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80047c8:	4680      	mov	r8, r0
 80047ca:	4614      	mov	r4, r2
 80047cc:	460e      	mov	r6, r1
 80047ce:	b921      	cbnz	r1, 80047da <_realloc_r+0x16>
 80047d0:	4611      	mov	r1, r2
 80047d2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80047d6:	f7ff bee5 	b.w	80045a4 <_malloc_r>
 80047da:	b92a      	cbnz	r2, 80047e8 <_realloc_r+0x24>
 80047dc:	f7ff fe7a 	bl	80044d4 <_free_r>
 80047e0:	4625      	mov	r5, r4
 80047e2:	4628      	mov	r0, r5
 80047e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80047e8:	f000 fb36 	bl	8004e58 <_malloc_usable_size_r>
 80047ec:	4284      	cmp	r4, r0
 80047ee:	4607      	mov	r7, r0
 80047f0:	d802      	bhi.n	80047f8 <_realloc_r+0x34>
 80047f2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80047f6:	d812      	bhi.n	800481e <_realloc_r+0x5a>
 80047f8:	4621      	mov	r1, r4
 80047fa:	4640      	mov	r0, r8
 80047fc:	f7ff fed2 	bl	80045a4 <_malloc_r>
 8004800:	4605      	mov	r5, r0
 8004802:	2800      	cmp	r0, #0
 8004804:	d0ed      	beq.n	80047e2 <_realloc_r+0x1e>
 8004806:	42bc      	cmp	r4, r7
 8004808:	4622      	mov	r2, r4
 800480a:	4631      	mov	r1, r6
 800480c:	bf28      	it	cs
 800480e:	463a      	movcs	r2, r7
 8004810:	f7ff fe4a 	bl	80044a8 <memcpy>
 8004814:	4631      	mov	r1, r6
 8004816:	4640      	mov	r0, r8
 8004818:	f7ff fe5c 	bl	80044d4 <_free_r>
 800481c:	e7e1      	b.n	80047e2 <_realloc_r+0x1e>
 800481e:	4635      	mov	r5, r6
 8004820:	e7df      	b.n	80047e2 <_realloc_r+0x1e>

08004822 <__ssputs_r>:
 8004822:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004826:	688e      	ldr	r6, [r1, #8]
 8004828:	4682      	mov	sl, r0
 800482a:	429e      	cmp	r6, r3
 800482c:	460c      	mov	r4, r1
 800482e:	4690      	mov	r8, r2
 8004830:	461f      	mov	r7, r3
 8004832:	d838      	bhi.n	80048a6 <__ssputs_r+0x84>
 8004834:	898a      	ldrh	r2, [r1, #12]
 8004836:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800483a:	d032      	beq.n	80048a2 <__ssputs_r+0x80>
 800483c:	6825      	ldr	r5, [r4, #0]
 800483e:	6909      	ldr	r1, [r1, #16]
 8004840:	3301      	adds	r3, #1
 8004842:	eba5 0901 	sub.w	r9, r5, r1
 8004846:	6965      	ldr	r5, [r4, #20]
 8004848:	444b      	add	r3, r9
 800484a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800484e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004852:	106d      	asrs	r5, r5, #1
 8004854:	429d      	cmp	r5, r3
 8004856:	bf38      	it	cc
 8004858:	461d      	movcc	r5, r3
 800485a:	0553      	lsls	r3, r2, #21
 800485c:	d531      	bpl.n	80048c2 <__ssputs_r+0xa0>
 800485e:	4629      	mov	r1, r5
 8004860:	f7ff fea0 	bl	80045a4 <_malloc_r>
 8004864:	4606      	mov	r6, r0
 8004866:	b950      	cbnz	r0, 800487e <__ssputs_r+0x5c>
 8004868:	230c      	movs	r3, #12
 800486a:	f04f 30ff 	mov.w	r0, #4294967295
 800486e:	f8ca 3000 	str.w	r3, [sl]
 8004872:	89a3      	ldrh	r3, [r4, #12]
 8004874:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004878:	81a3      	strh	r3, [r4, #12]
 800487a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800487e:	464a      	mov	r2, r9
 8004880:	6921      	ldr	r1, [r4, #16]
 8004882:	f7ff fe11 	bl	80044a8 <memcpy>
 8004886:	89a3      	ldrh	r3, [r4, #12]
 8004888:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800488c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004890:	81a3      	strh	r3, [r4, #12]
 8004892:	6126      	str	r6, [r4, #16]
 8004894:	444e      	add	r6, r9
 8004896:	6026      	str	r6, [r4, #0]
 8004898:	463e      	mov	r6, r7
 800489a:	6165      	str	r5, [r4, #20]
 800489c:	eba5 0509 	sub.w	r5, r5, r9
 80048a0:	60a5      	str	r5, [r4, #8]
 80048a2:	42be      	cmp	r6, r7
 80048a4:	d900      	bls.n	80048a8 <__ssputs_r+0x86>
 80048a6:	463e      	mov	r6, r7
 80048a8:	4632      	mov	r2, r6
 80048aa:	4641      	mov	r1, r8
 80048ac:	6820      	ldr	r0, [r4, #0]
 80048ae:	f000 fab9 	bl	8004e24 <memmove>
 80048b2:	68a3      	ldr	r3, [r4, #8]
 80048b4:	2000      	movs	r0, #0
 80048b6:	1b9b      	subs	r3, r3, r6
 80048b8:	60a3      	str	r3, [r4, #8]
 80048ba:	6823      	ldr	r3, [r4, #0]
 80048bc:	4433      	add	r3, r6
 80048be:	6023      	str	r3, [r4, #0]
 80048c0:	e7db      	b.n	800487a <__ssputs_r+0x58>
 80048c2:	462a      	mov	r2, r5
 80048c4:	f7ff ff7e 	bl	80047c4 <_realloc_r>
 80048c8:	4606      	mov	r6, r0
 80048ca:	2800      	cmp	r0, #0
 80048cc:	d1e1      	bne.n	8004892 <__ssputs_r+0x70>
 80048ce:	4650      	mov	r0, sl
 80048d0:	6921      	ldr	r1, [r4, #16]
 80048d2:	f7ff fdff 	bl	80044d4 <_free_r>
 80048d6:	e7c7      	b.n	8004868 <__ssputs_r+0x46>

080048d8 <_svfiprintf_r>:
 80048d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80048dc:	4698      	mov	r8, r3
 80048de:	898b      	ldrh	r3, [r1, #12]
 80048e0:	4607      	mov	r7, r0
 80048e2:	061b      	lsls	r3, r3, #24
 80048e4:	460d      	mov	r5, r1
 80048e6:	4614      	mov	r4, r2
 80048e8:	b09d      	sub	sp, #116	; 0x74
 80048ea:	d50e      	bpl.n	800490a <_svfiprintf_r+0x32>
 80048ec:	690b      	ldr	r3, [r1, #16]
 80048ee:	b963      	cbnz	r3, 800490a <_svfiprintf_r+0x32>
 80048f0:	2140      	movs	r1, #64	; 0x40
 80048f2:	f7ff fe57 	bl	80045a4 <_malloc_r>
 80048f6:	6028      	str	r0, [r5, #0]
 80048f8:	6128      	str	r0, [r5, #16]
 80048fa:	b920      	cbnz	r0, 8004906 <_svfiprintf_r+0x2e>
 80048fc:	230c      	movs	r3, #12
 80048fe:	603b      	str	r3, [r7, #0]
 8004900:	f04f 30ff 	mov.w	r0, #4294967295
 8004904:	e0d1      	b.n	8004aaa <_svfiprintf_r+0x1d2>
 8004906:	2340      	movs	r3, #64	; 0x40
 8004908:	616b      	str	r3, [r5, #20]
 800490a:	2300      	movs	r3, #0
 800490c:	9309      	str	r3, [sp, #36]	; 0x24
 800490e:	2320      	movs	r3, #32
 8004910:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004914:	2330      	movs	r3, #48	; 0x30
 8004916:	f04f 0901 	mov.w	r9, #1
 800491a:	f8cd 800c 	str.w	r8, [sp, #12]
 800491e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8004ac4 <_svfiprintf_r+0x1ec>
 8004922:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004926:	4623      	mov	r3, r4
 8004928:	469a      	mov	sl, r3
 800492a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800492e:	b10a      	cbz	r2, 8004934 <_svfiprintf_r+0x5c>
 8004930:	2a25      	cmp	r2, #37	; 0x25
 8004932:	d1f9      	bne.n	8004928 <_svfiprintf_r+0x50>
 8004934:	ebba 0b04 	subs.w	fp, sl, r4
 8004938:	d00b      	beq.n	8004952 <_svfiprintf_r+0x7a>
 800493a:	465b      	mov	r3, fp
 800493c:	4622      	mov	r2, r4
 800493e:	4629      	mov	r1, r5
 8004940:	4638      	mov	r0, r7
 8004942:	f7ff ff6e 	bl	8004822 <__ssputs_r>
 8004946:	3001      	adds	r0, #1
 8004948:	f000 80aa 	beq.w	8004aa0 <_svfiprintf_r+0x1c8>
 800494c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800494e:	445a      	add	r2, fp
 8004950:	9209      	str	r2, [sp, #36]	; 0x24
 8004952:	f89a 3000 	ldrb.w	r3, [sl]
 8004956:	2b00      	cmp	r3, #0
 8004958:	f000 80a2 	beq.w	8004aa0 <_svfiprintf_r+0x1c8>
 800495c:	2300      	movs	r3, #0
 800495e:	f04f 32ff 	mov.w	r2, #4294967295
 8004962:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004966:	f10a 0a01 	add.w	sl, sl, #1
 800496a:	9304      	str	r3, [sp, #16]
 800496c:	9307      	str	r3, [sp, #28]
 800496e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004972:	931a      	str	r3, [sp, #104]	; 0x68
 8004974:	4654      	mov	r4, sl
 8004976:	2205      	movs	r2, #5
 8004978:	f814 1b01 	ldrb.w	r1, [r4], #1
 800497c:	4851      	ldr	r0, [pc, #324]	; (8004ac4 <_svfiprintf_r+0x1ec>)
 800497e:	f000 fa43 	bl	8004e08 <memchr>
 8004982:	9a04      	ldr	r2, [sp, #16]
 8004984:	b9d8      	cbnz	r0, 80049be <_svfiprintf_r+0xe6>
 8004986:	06d0      	lsls	r0, r2, #27
 8004988:	bf44      	itt	mi
 800498a:	2320      	movmi	r3, #32
 800498c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004990:	0711      	lsls	r1, r2, #28
 8004992:	bf44      	itt	mi
 8004994:	232b      	movmi	r3, #43	; 0x2b
 8004996:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800499a:	f89a 3000 	ldrb.w	r3, [sl]
 800499e:	2b2a      	cmp	r3, #42	; 0x2a
 80049a0:	d015      	beq.n	80049ce <_svfiprintf_r+0xf6>
 80049a2:	4654      	mov	r4, sl
 80049a4:	2000      	movs	r0, #0
 80049a6:	f04f 0c0a 	mov.w	ip, #10
 80049aa:	9a07      	ldr	r2, [sp, #28]
 80049ac:	4621      	mov	r1, r4
 80049ae:	f811 3b01 	ldrb.w	r3, [r1], #1
 80049b2:	3b30      	subs	r3, #48	; 0x30
 80049b4:	2b09      	cmp	r3, #9
 80049b6:	d94e      	bls.n	8004a56 <_svfiprintf_r+0x17e>
 80049b8:	b1b0      	cbz	r0, 80049e8 <_svfiprintf_r+0x110>
 80049ba:	9207      	str	r2, [sp, #28]
 80049bc:	e014      	b.n	80049e8 <_svfiprintf_r+0x110>
 80049be:	eba0 0308 	sub.w	r3, r0, r8
 80049c2:	fa09 f303 	lsl.w	r3, r9, r3
 80049c6:	4313      	orrs	r3, r2
 80049c8:	46a2      	mov	sl, r4
 80049ca:	9304      	str	r3, [sp, #16]
 80049cc:	e7d2      	b.n	8004974 <_svfiprintf_r+0x9c>
 80049ce:	9b03      	ldr	r3, [sp, #12]
 80049d0:	1d19      	adds	r1, r3, #4
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	9103      	str	r1, [sp, #12]
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	bfbb      	ittet	lt
 80049da:	425b      	neglt	r3, r3
 80049dc:	f042 0202 	orrlt.w	r2, r2, #2
 80049e0:	9307      	strge	r3, [sp, #28]
 80049e2:	9307      	strlt	r3, [sp, #28]
 80049e4:	bfb8      	it	lt
 80049e6:	9204      	strlt	r2, [sp, #16]
 80049e8:	7823      	ldrb	r3, [r4, #0]
 80049ea:	2b2e      	cmp	r3, #46	; 0x2e
 80049ec:	d10c      	bne.n	8004a08 <_svfiprintf_r+0x130>
 80049ee:	7863      	ldrb	r3, [r4, #1]
 80049f0:	2b2a      	cmp	r3, #42	; 0x2a
 80049f2:	d135      	bne.n	8004a60 <_svfiprintf_r+0x188>
 80049f4:	9b03      	ldr	r3, [sp, #12]
 80049f6:	3402      	adds	r4, #2
 80049f8:	1d1a      	adds	r2, r3, #4
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	9203      	str	r2, [sp, #12]
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	bfb8      	it	lt
 8004a02:	f04f 33ff 	movlt.w	r3, #4294967295
 8004a06:	9305      	str	r3, [sp, #20]
 8004a08:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8004ac8 <_svfiprintf_r+0x1f0>
 8004a0c:	2203      	movs	r2, #3
 8004a0e:	4650      	mov	r0, sl
 8004a10:	7821      	ldrb	r1, [r4, #0]
 8004a12:	f000 f9f9 	bl	8004e08 <memchr>
 8004a16:	b140      	cbz	r0, 8004a2a <_svfiprintf_r+0x152>
 8004a18:	2340      	movs	r3, #64	; 0x40
 8004a1a:	eba0 000a 	sub.w	r0, r0, sl
 8004a1e:	fa03 f000 	lsl.w	r0, r3, r0
 8004a22:	9b04      	ldr	r3, [sp, #16]
 8004a24:	3401      	adds	r4, #1
 8004a26:	4303      	orrs	r3, r0
 8004a28:	9304      	str	r3, [sp, #16]
 8004a2a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004a2e:	2206      	movs	r2, #6
 8004a30:	4826      	ldr	r0, [pc, #152]	; (8004acc <_svfiprintf_r+0x1f4>)
 8004a32:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004a36:	f000 f9e7 	bl	8004e08 <memchr>
 8004a3a:	2800      	cmp	r0, #0
 8004a3c:	d038      	beq.n	8004ab0 <_svfiprintf_r+0x1d8>
 8004a3e:	4b24      	ldr	r3, [pc, #144]	; (8004ad0 <_svfiprintf_r+0x1f8>)
 8004a40:	bb1b      	cbnz	r3, 8004a8a <_svfiprintf_r+0x1b2>
 8004a42:	9b03      	ldr	r3, [sp, #12]
 8004a44:	3307      	adds	r3, #7
 8004a46:	f023 0307 	bic.w	r3, r3, #7
 8004a4a:	3308      	adds	r3, #8
 8004a4c:	9303      	str	r3, [sp, #12]
 8004a4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004a50:	4433      	add	r3, r6
 8004a52:	9309      	str	r3, [sp, #36]	; 0x24
 8004a54:	e767      	b.n	8004926 <_svfiprintf_r+0x4e>
 8004a56:	460c      	mov	r4, r1
 8004a58:	2001      	movs	r0, #1
 8004a5a:	fb0c 3202 	mla	r2, ip, r2, r3
 8004a5e:	e7a5      	b.n	80049ac <_svfiprintf_r+0xd4>
 8004a60:	2300      	movs	r3, #0
 8004a62:	f04f 0c0a 	mov.w	ip, #10
 8004a66:	4619      	mov	r1, r3
 8004a68:	3401      	adds	r4, #1
 8004a6a:	9305      	str	r3, [sp, #20]
 8004a6c:	4620      	mov	r0, r4
 8004a6e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004a72:	3a30      	subs	r2, #48	; 0x30
 8004a74:	2a09      	cmp	r2, #9
 8004a76:	d903      	bls.n	8004a80 <_svfiprintf_r+0x1a8>
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d0c5      	beq.n	8004a08 <_svfiprintf_r+0x130>
 8004a7c:	9105      	str	r1, [sp, #20]
 8004a7e:	e7c3      	b.n	8004a08 <_svfiprintf_r+0x130>
 8004a80:	4604      	mov	r4, r0
 8004a82:	2301      	movs	r3, #1
 8004a84:	fb0c 2101 	mla	r1, ip, r1, r2
 8004a88:	e7f0      	b.n	8004a6c <_svfiprintf_r+0x194>
 8004a8a:	ab03      	add	r3, sp, #12
 8004a8c:	9300      	str	r3, [sp, #0]
 8004a8e:	462a      	mov	r2, r5
 8004a90:	4638      	mov	r0, r7
 8004a92:	4b10      	ldr	r3, [pc, #64]	; (8004ad4 <_svfiprintf_r+0x1fc>)
 8004a94:	a904      	add	r1, sp, #16
 8004a96:	f3af 8000 	nop.w
 8004a9a:	1c42      	adds	r2, r0, #1
 8004a9c:	4606      	mov	r6, r0
 8004a9e:	d1d6      	bne.n	8004a4e <_svfiprintf_r+0x176>
 8004aa0:	89ab      	ldrh	r3, [r5, #12]
 8004aa2:	065b      	lsls	r3, r3, #25
 8004aa4:	f53f af2c 	bmi.w	8004900 <_svfiprintf_r+0x28>
 8004aa8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004aaa:	b01d      	add	sp, #116	; 0x74
 8004aac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004ab0:	ab03      	add	r3, sp, #12
 8004ab2:	9300      	str	r3, [sp, #0]
 8004ab4:	462a      	mov	r2, r5
 8004ab6:	4638      	mov	r0, r7
 8004ab8:	4b06      	ldr	r3, [pc, #24]	; (8004ad4 <_svfiprintf_r+0x1fc>)
 8004aba:	a904      	add	r1, sp, #16
 8004abc:	f000 f87c 	bl	8004bb8 <_printf_i>
 8004ac0:	e7eb      	b.n	8004a9a <_svfiprintf_r+0x1c2>
 8004ac2:	bf00      	nop
 8004ac4:	08005826 	.word	0x08005826
 8004ac8:	0800582c 	.word	0x0800582c
 8004acc:	08005830 	.word	0x08005830
 8004ad0:	00000000 	.word	0x00000000
 8004ad4:	08004823 	.word	0x08004823

08004ad8 <_printf_common>:
 8004ad8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004adc:	4616      	mov	r6, r2
 8004ade:	4699      	mov	r9, r3
 8004ae0:	688a      	ldr	r2, [r1, #8]
 8004ae2:	690b      	ldr	r3, [r1, #16]
 8004ae4:	4607      	mov	r7, r0
 8004ae6:	4293      	cmp	r3, r2
 8004ae8:	bfb8      	it	lt
 8004aea:	4613      	movlt	r3, r2
 8004aec:	6033      	str	r3, [r6, #0]
 8004aee:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004af2:	460c      	mov	r4, r1
 8004af4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004af8:	b10a      	cbz	r2, 8004afe <_printf_common+0x26>
 8004afa:	3301      	adds	r3, #1
 8004afc:	6033      	str	r3, [r6, #0]
 8004afe:	6823      	ldr	r3, [r4, #0]
 8004b00:	0699      	lsls	r1, r3, #26
 8004b02:	bf42      	ittt	mi
 8004b04:	6833      	ldrmi	r3, [r6, #0]
 8004b06:	3302      	addmi	r3, #2
 8004b08:	6033      	strmi	r3, [r6, #0]
 8004b0a:	6825      	ldr	r5, [r4, #0]
 8004b0c:	f015 0506 	ands.w	r5, r5, #6
 8004b10:	d106      	bne.n	8004b20 <_printf_common+0x48>
 8004b12:	f104 0a19 	add.w	sl, r4, #25
 8004b16:	68e3      	ldr	r3, [r4, #12]
 8004b18:	6832      	ldr	r2, [r6, #0]
 8004b1a:	1a9b      	subs	r3, r3, r2
 8004b1c:	42ab      	cmp	r3, r5
 8004b1e:	dc28      	bgt.n	8004b72 <_printf_common+0x9a>
 8004b20:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004b24:	1e13      	subs	r3, r2, #0
 8004b26:	6822      	ldr	r2, [r4, #0]
 8004b28:	bf18      	it	ne
 8004b2a:	2301      	movne	r3, #1
 8004b2c:	0692      	lsls	r2, r2, #26
 8004b2e:	d42d      	bmi.n	8004b8c <_printf_common+0xb4>
 8004b30:	4649      	mov	r1, r9
 8004b32:	4638      	mov	r0, r7
 8004b34:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004b38:	47c0      	blx	r8
 8004b3a:	3001      	adds	r0, #1
 8004b3c:	d020      	beq.n	8004b80 <_printf_common+0xa8>
 8004b3e:	6823      	ldr	r3, [r4, #0]
 8004b40:	68e5      	ldr	r5, [r4, #12]
 8004b42:	f003 0306 	and.w	r3, r3, #6
 8004b46:	2b04      	cmp	r3, #4
 8004b48:	bf18      	it	ne
 8004b4a:	2500      	movne	r5, #0
 8004b4c:	6832      	ldr	r2, [r6, #0]
 8004b4e:	f04f 0600 	mov.w	r6, #0
 8004b52:	68a3      	ldr	r3, [r4, #8]
 8004b54:	bf08      	it	eq
 8004b56:	1aad      	subeq	r5, r5, r2
 8004b58:	6922      	ldr	r2, [r4, #16]
 8004b5a:	bf08      	it	eq
 8004b5c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004b60:	4293      	cmp	r3, r2
 8004b62:	bfc4      	itt	gt
 8004b64:	1a9b      	subgt	r3, r3, r2
 8004b66:	18ed      	addgt	r5, r5, r3
 8004b68:	341a      	adds	r4, #26
 8004b6a:	42b5      	cmp	r5, r6
 8004b6c:	d11a      	bne.n	8004ba4 <_printf_common+0xcc>
 8004b6e:	2000      	movs	r0, #0
 8004b70:	e008      	b.n	8004b84 <_printf_common+0xac>
 8004b72:	2301      	movs	r3, #1
 8004b74:	4652      	mov	r2, sl
 8004b76:	4649      	mov	r1, r9
 8004b78:	4638      	mov	r0, r7
 8004b7a:	47c0      	blx	r8
 8004b7c:	3001      	adds	r0, #1
 8004b7e:	d103      	bne.n	8004b88 <_printf_common+0xb0>
 8004b80:	f04f 30ff 	mov.w	r0, #4294967295
 8004b84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b88:	3501      	adds	r5, #1
 8004b8a:	e7c4      	b.n	8004b16 <_printf_common+0x3e>
 8004b8c:	2030      	movs	r0, #48	; 0x30
 8004b8e:	18e1      	adds	r1, r4, r3
 8004b90:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004b94:	1c5a      	adds	r2, r3, #1
 8004b96:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004b9a:	4422      	add	r2, r4
 8004b9c:	3302      	adds	r3, #2
 8004b9e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004ba2:	e7c5      	b.n	8004b30 <_printf_common+0x58>
 8004ba4:	2301      	movs	r3, #1
 8004ba6:	4622      	mov	r2, r4
 8004ba8:	4649      	mov	r1, r9
 8004baa:	4638      	mov	r0, r7
 8004bac:	47c0      	blx	r8
 8004bae:	3001      	adds	r0, #1
 8004bb0:	d0e6      	beq.n	8004b80 <_printf_common+0xa8>
 8004bb2:	3601      	adds	r6, #1
 8004bb4:	e7d9      	b.n	8004b6a <_printf_common+0x92>
	...

08004bb8 <_printf_i>:
 8004bb8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004bbc:	7e0f      	ldrb	r7, [r1, #24]
 8004bbe:	4691      	mov	r9, r2
 8004bc0:	2f78      	cmp	r7, #120	; 0x78
 8004bc2:	4680      	mov	r8, r0
 8004bc4:	460c      	mov	r4, r1
 8004bc6:	469a      	mov	sl, r3
 8004bc8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004bca:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004bce:	d807      	bhi.n	8004be0 <_printf_i+0x28>
 8004bd0:	2f62      	cmp	r7, #98	; 0x62
 8004bd2:	d80a      	bhi.n	8004bea <_printf_i+0x32>
 8004bd4:	2f00      	cmp	r7, #0
 8004bd6:	f000 80d9 	beq.w	8004d8c <_printf_i+0x1d4>
 8004bda:	2f58      	cmp	r7, #88	; 0x58
 8004bdc:	f000 80a4 	beq.w	8004d28 <_printf_i+0x170>
 8004be0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004be4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004be8:	e03a      	b.n	8004c60 <_printf_i+0xa8>
 8004bea:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004bee:	2b15      	cmp	r3, #21
 8004bf0:	d8f6      	bhi.n	8004be0 <_printf_i+0x28>
 8004bf2:	a101      	add	r1, pc, #4	; (adr r1, 8004bf8 <_printf_i+0x40>)
 8004bf4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004bf8:	08004c51 	.word	0x08004c51
 8004bfc:	08004c65 	.word	0x08004c65
 8004c00:	08004be1 	.word	0x08004be1
 8004c04:	08004be1 	.word	0x08004be1
 8004c08:	08004be1 	.word	0x08004be1
 8004c0c:	08004be1 	.word	0x08004be1
 8004c10:	08004c65 	.word	0x08004c65
 8004c14:	08004be1 	.word	0x08004be1
 8004c18:	08004be1 	.word	0x08004be1
 8004c1c:	08004be1 	.word	0x08004be1
 8004c20:	08004be1 	.word	0x08004be1
 8004c24:	08004d73 	.word	0x08004d73
 8004c28:	08004c95 	.word	0x08004c95
 8004c2c:	08004d55 	.word	0x08004d55
 8004c30:	08004be1 	.word	0x08004be1
 8004c34:	08004be1 	.word	0x08004be1
 8004c38:	08004d95 	.word	0x08004d95
 8004c3c:	08004be1 	.word	0x08004be1
 8004c40:	08004c95 	.word	0x08004c95
 8004c44:	08004be1 	.word	0x08004be1
 8004c48:	08004be1 	.word	0x08004be1
 8004c4c:	08004d5d 	.word	0x08004d5d
 8004c50:	682b      	ldr	r3, [r5, #0]
 8004c52:	1d1a      	adds	r2, r3, #4
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	602a      	str	r2, [r5, #0]
 8004c58:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004c5c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004c60:	2301      	movs	r3, #1
 8004c62:	e0a4      	b.n	8004dae <_printf_i+0x1f6>
 8004c64:	6820      	ldr	r0, [r4, #0]
 8004c66:	6829      	ldr	r1, [r5, #0]
 8004c68:	0606      	lsls	r6, r0, #24
 8004c6a:	f101 0304 	add.w	r3, r1, #4
 8004c6e:	d50a      	bpl.n	8004c86 <_printf_i+0xce>
 8004c70:	680e      	ldr	r6, [r1, #0]
 8004c72:	602b      	str	r3, [r5, #0]
 8004c74:	2e00      	cmp	r6, #0
 8004c76:	da03      	bge.n	8004c80 <_printf_i+0xc8>
 8004c78:	232d      	movs	r3, #45	; 0x2d
 8004c7a:	4276      	negs	r6, r6
 8004c7c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004c80:	230a      	movs	r3, #10
 8004c82:	485e      	ldr	r0, [pc, #376]	; (8004dfc <_printf_i+0x244>)
 8004c84:	e019      	b.n	8004cba <_printf_i+0x102>
 8004c86:	680e      	ldr	r6, [r1, #0]
 8004c88:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004c8c:	602b      	str	r3, [r5, #0]
 8004c8e:	bf18      	it	ne
 8004c90:	b236      	sxthne	r6, r6
 8004c92:	e7ef      	b.n	8004c74 <_printf_i+0xbc>
 8004c94:	682b      	ldr	r3, [r5, #0]
 8004c96:	6820      	ldr	r0, [r4, #0]
 8004c98:	1d19      	adds	r1, r3, #4
 8004c9a:	6029      	str	r1, [r5, #0]
 8004c9c:	0601      	lsls	r1, r0, #24
 8004c9e:	d501      	bpl.n	8004ca4 <_printf_i+0xec>
 8004ca0:	681e      	ldr	r6, [r3, #0]
 8004ca2:	e002      	b.n	8004caa <_printf_i+0xf2>
 8004ca4:	0646      	lsls	r6, r0, #25
 8004ca6:	d5fb      	bpl.n	8004ca0 <_printf_i+0xe8>
 8004ca8:	881e      	ldrh	r6, [r3, #0]
 8004caa:	2f6f      	cmp	r7, #111	; 0x6f
 8004cac:	bf0c      	ite	eq
 8004cae:	2308      	moveq	r3, #8
 8004cb0:	230a      	movne	r3, #10
 8004cb2:	4852      	ldr	r0, [pc, #328]	; (8004dfc <_printf_i+0x244>)
 8004cb4:	2100      	movs	r1, #0
 8004cb6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004cba:	6865      	ldr	r5, [r4, #4]
 8004cbc:	2d00      	cmp	r5, #0
 8004cbe:	bfa8      	it	ge
 8004cc0:	6821      	ldrge	r1, [r4, #0]
 8004cc2:	60a5      	str	r5, [r4, #8]
 8004cc4:	bfa4      	itt	ge
 8004cc6:	f021 0104 	bicge.w	r1, r1, #4
 8004cca:	6021      	strge	r1, [r4, #0]
 8004ccc:	b90e      	cbnz	r6, 8004cd2 <_printf_i+0x11a>
 8004cce:	2d00      	cmp	r5, #0
 8004cd0:	d04d      	beq.n	8004d6e <_printf_i+0x1b6>
 8004cd2:	4615      	mov	r5, r2
 8004cd4:	fbb6 f1f3 	udiv	r1, r6, r3
 8004cd8:	fb03 6711 	mls	r7, r3, r1, r6
 8004cdc:	5dc7      	ldrb	r7, [r0, r7]
 8004cde:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004ce2:	4637      	mov	r7, r6
 8004ce4:	42bb      	cmp	r3, r7
 8004ce6:	460e      	mov	r6, r1
 8004ce8:	d9f4      	bls.n	8004cd4 <_printf_i+0x11c>
 8004cea:	2b08      	cmp	r3, #8
 8004cec:	d10b      	bne.n	8004d06 <_printf_i+0x14e>
 8004cee:	6823      	ldr	r3, [r4, #0]
 8004cf0:	07de      	lsls	r6, r3, #31
 8004cf2:	d508      	bpl.n	8004d06 <_printf_i+0x14e>
 8004cf4:	6923      	ldr	r3, [r4, #16]
 8004cf6:	6861      	ldr	r1, [r4, #4]
 8004cf8:	4299      	cmp	r1, r3
 8004cfa:	bfde      	ittt	le
 8004cfc:	2330      	movle	r3, #48	; 0x30
 8004cfe:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004d02:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004d06:	1b52      	subs	r2, r2, r5
 8004d08:	6122      	str	r2, [r4, #16]
 8004d0a:	464b      	mov	r3, r9
 8004d0c:	4621      	mov	r1, r4
 8004d0e:	4640      	mov	r0, r8
 8004d10:	f8cd a000 	str.w	sl, [sp]
 8004d14:	aa03      	add	r2, sp, #12
 8004d16:	f7ff fedf 	bl	8004ad8 <_printf_common>
 8004d1a:	3001      	adds	r0, #1
 8004d1c:	d14c      	bne.n	8004db8 <_printf_i+0x200>
 8004d1e:	f04f 30ff 	mov.w	r0, #4294967295
 8004d22:	b004      	add	sp, #16
 8004d24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004d28:	4834      	ldr	r0, [pc, #208]	; (8004dfc <_printf_i+0x244>)
 8004d2a:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004d2e:	6829      	ldr	r1, [r5, #0]
 8004d30:	6823      	ldr	r3, [r4, #0]
 8004d32:	f851 6b04 	ldr.w	r6, [r1], #4
 8004d36:	6029      	str	r1, [r5, #0]
 8004d38:	061d      	lsls	r5, r3, #24
 8004d3a:	d514      	bpl.n	8004d66 <_printf_i+0x1ae>
 8004d3c:	07df      	lsls	r7, r3, #31
 8004d3e:	bf44      	itt	mi
 8004d40:	f043 0320 	orrmi.w	r3, r3, #32
 8004d44:	6023      	strmi	r3, [r4, #0]
 8004d46:	b91e      	cbnz	r6, 8004d50 <_printf_i+0x198>
 8004d48:	6823      	ldr	r3, [r4, #0]
 8004d4a:	f023 0320 	bic.w	r3, r3, #32
 8004d4e:	6023      	str	r3, [r4, #0]
 8004d50:	2310      	movs	r3, #16
 8004d52:	e7af      	b.n	8004cb4 <_printf_i+0xfc>
 8004d54:	6823      	ldr	r3, [r4, #0]
 8004d56:	f043 0320 	orr.w	r3, r3, #32
 8004d5a:	6023      	str	r3, [r4, #0]
 8004d5c:	2378      	movs	r3, #120	; 0x78
 8004d5e:	4828      	ldr	r0, [pc, #160]	; (8004e00 <_printf_i+0x248>)
 8004d60:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004d64:	e7e3      	b.n	8004d2e <_printf_i+0x176>
 8004d66:	0659      	lsls	r1, r3, #25
 8004d68:	bf48      	it	mi
 8004d6a:	b2b6      	uxthmi	r6, r6
 8004d6c:	e7e6      	b.n	8004d3c <_printf_i+0x184>
 8004d6e:	4615      	mov	r5, r2
 8004d70:	e7bb      	b.n	8004cea <_printf_i+0x132>
 8004d72:	682b      	ldr	r3, [r5, #0]
 8004d74:	6826      	ldr	r6, [r4, #0]
 8004d76:	1d18      	adds	r0, r3, #4
 8004d78:	6961      	ldr	r1, [r4, #20]
 8004d7a:	6028      	str	r0, [r5, #0]
 8004d7c:	0635      	lsls	r5, r6, #24
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	d501      	bpl.n	8004d86 <_printf_i+0x1ce>
 8004d82:	6019      	str	r1, [r3, #0]
 8004d84:	e002      	b.n	8004d8c <_printf_i+0x1d4>
 8004d86:	0670      	lsls	r0, r6, #25
 8004d88:	d5fb      	bpl.n	8004d82 <_printf_i+0x1ca>
 8004d8a:	8019      	strh	r1, [r3, #0]
 8004d8c:	2300      	movs	r3, #0
 8004d8e:	4615      	mov	r5, r2
 8004d90:	6123      	str	r3, [r4, #16]
 8004d92:	e7ba      	b.n	8004d0a <_printf_i+0x152>
 8004d94:	682b      	ldr	r3, [r5, #0]
 8004d96:	2100      	movs	r1, #0
 8004d98:	1d1a      	adds	r2, r3, #4
 8004d9a:	602a      	str	r2, [r5, #0]
 8004d9c:	681d      	ldr	r5, [r3, #0]
 8004d9e:	6862      	ldr	r2, [r4, #4]
 8004da0:	4628      	mov	r0, r5
 8004da2:	f000 f831 	bl	8004e08 <memchr>
 8004da6:	b108      	cbz	r0, 8004dac <_printf_i+0x1f4>
 8004da8:	1b40      	subs	r0, r0, r5
 8004daa:	6060      	str	r0, [r4, #4]
 8004dac:	6863      	ldr	r3, [r4, #4]
 8004dae:	6123      	str	r3, [r4, #16]
 8004db0:	2300      	movs	r3, #0
 8004db2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004db6:	e7a8      	b.n	8004d0a <_printf_i+0x152>
 8004db8:	462a      	mov	r2, r5
 8004dba:	4649      	mov	r1, r9
 8004dbc:	4640      	mov	r0, r8
 8004dbe:	6923      	ldr	r3, [r4, #16]
 8004dc0:	47d0      	blx	sl
 8004dc2:	3001      	adds	r0, #1
 8004dc4:	d0ab      	beq.n	8004d1e <_printf_i+0x166>
 8004dc6:	6823      	ldr	r3, [r4, #0]
 8004dc8:	079b      	lsls	r3, r3, #30
 8004dca:	d413      	bmi.n	8004df4 <_printf_i+0x23c>
 8004dcc:	68e0      	ldr	r0, [r4, #12]
 8004dce:	9b03      	ldr	r3, [sp, #12]
 8004dd0:	4298      	cmp	r0, r3
 8004dd2:	bfb8      	it	lt
 8004dd4:	4618      	movlt	r0, r3
 8004dd6:	e7a4      	b.n	8004d22 <_printf_i+0x16a>
 8004dd8:	2301      	movs	r3, #1
 8004dda:	4632      	mov	r2, r6
 8004ddc:	4649      	mov	r1, r9
 8004dde:	4640      	mov	r0, r8
 8004de0:	47d0      	blx	sl
 8004de2:	3001      	adds	r0, #1
 8004de4:	d09b      	beq.n	8004d1e <_printf_i+0x166>
 8004de6:	3501      	adds	r5, #1
 8004de8:	68e3      	ldr	r3, [r4, #12]
 8004dea:	9903      	ldr	r1, [sp, #12]
 8004dec:	1a5b      	subs	r3, r3, r1
 8004dee:	42ab      	cmp	r3, r5
 8004df0:	dcf2      	bgt.n	8004dd8 <_printf_i+0x220>
 8004df2:	e7eb      	b.n	8004dcc <_printf_i+0x214>
 8004df4:	2500      	movs	r5, #0
 8004df6:	f104 0619 	add.w	r6, r4, #25
 8004dfa:	e7f5      	b.n	8004de8 <_printf_i+0x230>
 8004dfc:	08005837 	.word	0x08005837
 8004e00:	08005848 	.word	0x08005848

08004e04 <__retarget_lock_acquire_recursive>:
 8004e04:	4770      	bx	lr

08004e06 <__retarget_lock_release_recursive>:
 8004e06:	4770      	bx	lr

08004e08 <memchr>:
 8004e08:	4603      	mov	r3, r0
 8004e0a:	b510      	push	{r4, lr}
 8004e0c:	b2c9      	uxtb	r1, r1
 8004e0e:	4402      	add	r2, r0
 8004e10:	4293      	cmp	r3, r2
 8004e12:	4618      	mov	r0, r3
 8004e14:	d101      	bne.n	8004e1a <memchr+0x12>
 8004e16:	2000      	movs	r0, #0
 8004e18:	e003      	b.n	8004e22 <memchr+0x1a>
 8004e1a:	7804      	ldrb	r4, [r0, #0]
 8004e1c:	3301      	adds	r3, #1
 8004e1e:	428c      	cmp	r4, r1
 8004e20:	d1f6      	bne.n	8004e10 <memchr+0x8>
 8004e22:	bd10      	pop	{r4, pc}

08004e24 <memmove>:
 8004e24:	4288      	cmp	r0, r1
 8004e26:	b510      	push	{r4, lr}
 8004e28:	eb01 0402 	add.w	r4, r1, r2
 8004e2c:	d902      	bls.n	8004e34 <memmove+0x10>
 8004e2e:	4284      	cmp	r4, r0
 8004e30:	4623      	mov	r3, r4
 8004e32:	d807      	bhi.n	8004e44 <memmove+0x20>
 8004e34:	1e43      	subs	r3, r0, #1
 8004e36:	42a1      	cmp	r1, r4
 8004e38:	d008      	beq.n	8004e4c <memmove+0x28>
 8004e3a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004e3e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004e42:	e7f8      	b.n	8004e36 <memmove+0x12>
 8004e44:	4601      	mov	r1, r0
 8004e46:	4402      	add	r2, r0
 8004e48:	428a      	cmp	r2, r1
 8004e4a:	d100      	bne.n	8004e4e <memmove+0x2a>
 8004e4c:	bd10      	pop	{r4, pc}
 8004e4e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004e52:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004e56:	e7f7      	b.n	8004e48 <memmove+0x24>

08004e58 <_malloc_usable_size_r>:
 8004e58:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004e5c:	1f18      	subs	r0, r3, #4
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	bfbc      	itt	lt
 8004e62:	580b      	ldrlt	r3, [r1, r0]
 8004e64:	18c0      	addlt	r0, r0, r3
 8004e66:	4770      	bx	lr

08004e68 <_init>:
 8004e68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e6a:	bf00      	nop
 8004e6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e6e:	bc08      	pop	{r3}
 8004e70:	469e      	mov	lr, r3
 8004e72:	4770      	bx	lr

08004e74 <_fini>:
 8004e74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e76:	bf00      	nop
 8004e78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e7a:	bc08      	pop	{r3}
 8004e7c:	469e      	mov	lr, r3
 8004e7e:	4770      	bx	lr
