
sim800l.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000045c0  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003cc  080046cc  080046cc  000146cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004a98  08004a98  000200bc  2**0
                  CONTENTS
  4 .ARM          00000000  08004a98  08004a98  000200bc  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004a98  08004a98  000200bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004a98  08004a98  00014a98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004a9c  08004a9c  00014a9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000bc  20000000  08004aa0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000828  200000bc  08004b5c  000200bc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200008e4  08004b5c  000208e4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200bc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000826a  00000000  00000000  000200e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000016e0  00000000  00000000  0002834f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000710  00000000  00000000  00029a30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000688  00000000  00000000  0002a140  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00001562  00000000  00000000  0002a7c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008bf6  00000000  00000000  0002bd2a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00080430  00000000  00000000  00034920  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000b4d50  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002198  00000000  00000000  000b4da0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200000bc 	.word	0x200000bc
 8000128:	00000000 	.word	0x00000000
 800012c:	080046b4 	.word	0x080046b4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200000c0 	.word	0x200000c0
 8000148:	080046b4 	.word	0x080046b4

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <s800LSend>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void s800LSend(uint8_t *text, int nums) {
 800015c:	b580      	push	{r7, lr}
 800015e:	b082      	sub	sp, #8
 8000160:	af00      	add	r7, sp, #0
 8000162:	6078      	str	r0, [r7, #4]
 8000164:	6039      	str	r1, [r7, #0]
	HAL_UART_Transmit(&huart2, text, nums, 0xFFFF);
 8000166:	683b      	ldr	r3, [r7, #0]
 8000168:	b29a      	uxth	r2, r3
 800016a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800016e:	6879      	ldr	r1, [r7, #4]
 8000170:	4810      	ldr	r0, [pc, #64]	; (80001b4 <s800LSend+0x58>)
 8000172:	f002 fe29 	bl	8002dc8 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, (uint8_t*)"\r\n", 2, 0xFFFF);
 8000176:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800017a:	2202      	movs	r2, #2
 800017c:	490e      	ldr	r1, [pc, #56]	; (80001b8 <s800LSend+0x5c>)
 800017e:	480d      	ldr	r0, [pc, #52]	; (80001b4 <s800LSend+0x58>)
 8000180:	f002 fe22 	bl	8002dc8 <HAL_UART_Transmit>
	if (echoMode) {
 8000184:	4b0d      	ldr	r3, [pc, #52]	; (80001bc <s800LSend+0x60>)
 8000186:	781b      	ldrb	r3, [r3, #0]
 8000188:	2b00      	cmp	r3, #0
 800018a:	d00f      	beq.n	80001ac <s800LSend+0x50>
		HAL_UART_Transmit(&huart1, text, nums, 0xFFFF);
 800018c:	683b      	ldr	r3, [r7, #0]
 800018e:	b29a      	uxth	r2, r3
 8000190:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000194:	6879      	ldr	r1, [r7, #4]
 8000196:	480a      	ldr	r0, [pc, #40]	; (80001c0 <s800LSend+0x64>)
 8000198:	f002 fe16 	bl	8002dc8 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart1, (uint8_t*)"\r\n", 2, 0xFFFF);
 800019c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80001a0:	2202      	movs	r2, #2
 80001a2:	4905      	ldr	r1, [pc, #20]	; (80001b8 <s800LSend+0x5c>)
 80001a4:	4806      	ldr	r0, [pc, #24]	; (80001c0 <s800LSend+0x64>)
 80001a6:	f002 fe0f 	bl	8002dc8 <HAL_UART_Transmit>
	}
	return;
 80001aa:	bf00      	nop
 80001ac:	bf00      	nop
}
 80001ae:	3708      	adds	r7, #8
 80001b0:	46bd      	mov	sp, r7
 80001b2:	bd80      	pop	{r7, pc}
 80001b4:	20000128 	.word	0x20000128
 80001b8:	080046cc 	.word	0x080046cc
 80001bc:	20000049 	.word	0x20000049
 80001c0:	200000e0 	.word	0x200000e0

080001c4 <s800lMessAdd>:

int s800lMessAdd(uint8_t* text) {
 80001c4:	b480      	push	{r7}
 80001c6:	b085      	sub	sp, #20
 80001c8:	af00      	add	r7, sp, #0
 80001ca:	6078      	str	r0, [r7, #4]
	int i = 0;
 80001cc:	2300      	movs	r3, #0
 80001ce:	60fb      	str	r3, [r7, #12]
	for (i; i<250; i++) {
 80001d0:	e00a      	b.n	80001e8 <s800lMessAdd+0x24>
		if (text[i]=='!') return i;
 80001d2:	68fb      	ldr	r3, [r7, #12]
 80001d4:	687a      	ldr	r2, [r7, #4]
 80001d6:	4413      	add	r3, r2
 80001d8:	781b      	ldrb	r3, [r3, #0]
 80001da:	2b21      	cmp	r3, #33	; 0x21
 80001dc:	d101      	bne.n	80001e2 <s800lMessAdd+0x1e>
 80001de:	68fb      	ldr	r3, [r7, #12]
 80001e0:	e005      	b.n	80001ee <s800lMessAdd+0x2a>
	for (i; i<250; i++) {
 80001e2:	68fb      	ldr	r3, [r7, #12]
 80001e4:	3301      	adds	r3, #1
 80001e6:	60fb      	str	r3, [r7, #12]
 80001e8:	68fb      	ldr	r3, [r7, #12]
 80001ea:	2bf9      	cmp	r3, #249	; 0xf9
 80001ec:	ddf1      	ble.n	80001d2 <s800lMessAdd+0xe>
	}
}
 80001ee:	4618      	mov	r0, r3
 80001f0:	3714      	adds	r7, #20
 80001f2:	46bd      	mov	sp, r7
 80001f4:	bc80      	pop	{r7}
 80001f6:	4770      	bx	lr

080001f8 <buttStart>:

void buttStart() {
 80001f8:	b580      	push	{r7, lr}
 80001fa:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 0);
 80001fc:	2200      	movs	r2, #0
 80001fe:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000202:	480d      	ldr	r0, [pc, #52]	; (8000238 <buttStart+0x40>)
 8000204:	f002 f94e 	bl	80024a4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0);
 8000208:	2200      	movs	r2, #0
 800020a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800020e:	480b      	ldr	r0, [pc, #44]	; (800023c <buttStart+0x44>)
 8000210:	f002 f948 	bl	80024a4 <HAL_GPIO_WritePin>
	HAL_Delay(3000);
 8000214:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000218:	f001 fbf4 	bl	8001a04 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 1);
 800021c:	2201      	movs	r2, #1
 800021e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000222:	4805      	ldr	r0, [pc, #20]	; (8000238 <buttStart+0x40>)
 8000224:	f002 f93e 	bl	80024a4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);
 8000228:	2201      	movs	r2, #1
 800022a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800022e:	4803      	ldr	r0, [pc, #12]	; (800023c <buttStart+0x44>)
 8000230:	f002 f938 	bl	80024a4 <HAL_GPIO_WritePin>
}
 8000234:	bf00      	nop
 8000236:	bd80      	pop	{r7, pc}
 8000238:	40011000 	.word	0x40011000
 800023c:	40010c00 	.word	0x40010c00

08000240 <buttOpen>:

void buttOpen() {
 8000240:	b580      	push	{r7, lr}
 8000242:	b082      	sub	sp, #8
 8000244:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 0);
 8000246:	2200      	movs	r2, #0
 8000248:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800024c:	4816      	ldr	r0, [pc, #88]	; (80002a8 <buttOpen+0x68>)
 800024e:	f002 f929 	bl	80024a4 <HAL_GPIO_WritePin>
	for (int i = 0; i<5; i++) {
 8000252:	2300      	movs	r3, #0
 8000254:	607b      	str	r3, [r7, #4]
 8000256:	e014      	b.n	8000282 <buttOpen+0x42>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 0);
 8000258:	2200      	movs	r2, #0
 800025a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800025e:	4812      	ldr	r0, [pc, #72]	; (80002a8 <buttOpen+0x68>)
 8000260:	f002 f920 	bl	80024a4 <HAL_GPIO_WritePin>
		HAL_Delay(100);
 8000264:	2064      	movs	r0, #100	; 0x64
 8000266:	f001 fbcd 	bl	8001a04 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 1);
 800026a:	2201      	movs	r2, #1
 800026c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000270:	480d      	ldr	r0, [pc, #52]	; (80002a8 <buttOpen+0x68>)
 8000272:	f002 f917 	bl	80024a4 <HAL_GPIO_WritePin>
		HAL_Delay(100);
 8000276:	2064      	movs	r0, #100	; 0x64
 8000278:	f001 fbc4 	bl	8001a04 <HAL_Delay>
	for (int i = 0; i<5; i++) {
 800027c:	687b      	ldr	r3, [r7, #4]
 800027e:	3301      	adds	r3, #1
 8000280:	607b      	str	r3, [r7, #4]
 8000282:	687b      	ldr	r3, [r7, #4]
 8000284:	2b04      	cmp	r3, #4
 8000286:	dde7      	ble.n	8000258 <buttOpen+0x18>
	}
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 1);
 8000288:	2201      	movs	r2, #1
 800028a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800028e:	4806      	ldr	r0, [pc, #24]	; (80002a8 <buttOpen+0x68>)
 8000290:	f002 f908 	bl	80024a4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);
 8000294:	2201      	movs	r2, #1
 8000296:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800029a:	4804      	ldr	r0, [pc, #16]	; (80002ac <buttOpen+0x6c>)
 800029c:	f002 f902 	bl	80024a4 <HAL_GPIO_WritePin>
}
 80002a0:	bf00      	nop
 80002a2:	3708      	adds	r7, #8
 80002a4:	46bd      	mov	sp, r7
 80002a6:	bd80      	pop	{r7, pc}
 80002a8:	40011000 	.word	0x40011000
 80002ac:	40010c00 	.word	0x40010c00

080002b0 <buttClose>:

void buttClose() {
 80002b0:	b580      	push	{r7, lr}
 80002b2:	b082      	sub	sp, #8
 80002b4:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, 0);
 80002b6:	2200      	movs	r2, #0
 80002b8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80002bc:	4816      	ldr	r0, [pc, #88]	; (8000318 <buttClose+0x68>)
 80002be:	f002 f8f1 	bl	80024a4 <HAL_GPIO_WritePin>
	for (int i = 0; i<3; i++) {
 80002c2:	2300      	movs	r3, #0
 80002c4:	607b      	str	r3, [r7, #4]
 80002c6:	e014      	b.n	80002f2 <buttClose+0x42>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 0);
 80002c8:	2200      	movs	r2, #0
 80002ca:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80002ce:	4812      	ldr	r0, [pc, #72]	; (8000318 <buttClose+0x68>)
 80002d0:	f002 f8e8 	bl	80024a4 <HAL_GPIO_WritePin>
		HAL_Delay(250);
 80002d4:	20fa      	movs	r0, #250	; 0xfa
 80002d6:	f001 fb95 	bl	8001a04 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 1);
 80002da:	2201      	movs	r2, #1
 80002dc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80002e0:	480d      	ldr	r0, [pc, #52]	; (8000318 <buttClose+0x68>)
 80002e2:	f002 f8df 	bl	80024a4 <HAL_GPIO_WritePin>
		HAL_Delay(250);
 80002e6:	20fa      	movs	r0, #250	; 0xfa
 80002e8:	f001 fb8c 	bl	8001a04 <HAL_Delay>
	for (int i = 0; i<3; i++) {
 80002ec:	687b      	ldr	r3, [r7, #4]
 80002ee:	3301      	adds	r3, #1
 80002f0:	607b      	str	r3, [r7, #4]
 80002f2:	687b      	ldr	r3, [r7, #4]
 80002f4:	2b02      	cmp	r3, #2
 80002f6:	dde7      	ble.n	80002c8 <buttClose+0x18>
	}
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 1);
 80002f8:	2201      	movs	r2, #1
 80002fa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80002fe:	4806      	ldr	r0, [pc, #24]	; (8000318 <buttClose+0x68>)
 8000300:	f002 f8d0 	bl	80024a4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, 1);
 8000304:	2201      	movs	r2, #1
 8000306:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800030a:	4804      	ldr	r0, [pc, #16]	; (800031c <buttClose+0x6c>)
 800030c:	f002 f8ca 	bl	80024a4 <HAL_GPIO_WritePin>
}
 8000310:	bf00      	nop
 8000312:	3708      	adds	r7, #8
 8000314:	46bd      	mov	sp, r7
 8000316:	bd80      	pop	{r7, pc}
 8000318:	40011000 	.word	0x40011000
 800031c:	40010c00 	.word	0x40010c00

08000320 <txATcommand>:

void txATcommand() {
 8000320:	b580      	push	{r7, lr}
 8000322:	b0ce      	sub	sp, #312	; 0x138
 8000324:	af02      	add	r7, sp, #8
	//HAL_Delay(500);
	switch (step) {
 8000326:	4b95      	ldr	r3, [pc, #596]	; (800057c <txATcommand+0x25c>)
 8000328:	681b      	ldr	r3, [r3, #0]
 800032a:	2b18      	cmp	r3, #24
 800032c:	f200 8120 	bhi.w	8000570 <txATcommand+0x250>
 8000330:	a201      	add	r2, pc, #4	; (adr r2, 8000338 <txATcommand+0x18>)
 8000332:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000336:	bf00      	nop
 8000338:	0800039d 	.word	0x0800039d
 800033c:	080003ad 	.word	0x080003ad
 8000340:	080003bd 	.word	0x080003bd
 8000344:	080003cd 	.word	0x080003cd
 8000348:	080003dd 	.word	0x080003dd
 800034c:	080003f5 	.word	0x080003f5
 8000350:	08000405 	.word	0x08000405
 8000354:	08000415 	.word	0x08000415
 8000358:	08000483 	.word	0x08000483
 800035c:	08000493 	.word	0x08000493
 8000360:	080004a3 	.word	0x080004a3
 8000364:	080004b3 	.word	0x080004b3
 8000368:	08000571 	.word	0x08000571
 800036c:	08000571 	.word	0x08000571
 8000370:	08000571 	.word	0x08000571
 8000374:	08000571 	.word	0x08000571
 8000378:	08000571 	.word	0x08000571
 800037c:	08000571 	.word	0x08000571
 8000380:	08000571 	.word	0x08000571
 8000384:	08000571 	.word	0x08000571
 8000388:	080004c3 	.word	0x080004c3
 800038c:	080004d3 	.word	0x080004d3
 8000390:	08000513 	.word	0x08000513
 8000394:	08000523 	.word	0x08000523
 8000398:	08000539 	.word	0x08000539
		case 0: {
			ready=false;
 800039c:	4b78      	ldr	r3, [pc, #480]	; (8000580 <txATcommand+0x260>)
 800039e:	2200      	movs	r2, #0
 80003a0:	701a      	strb	r2, [r3, #0]
			s800LSend((uint8_t*)"ATE0", 4);
 80003a2:	2104      	movs	r1, #4
 80003a4:	4877      	ldr	r0, [pc, #476]	; (8000584 <txATcommand+0x264>)
 80003a6:	f7ff fed9 	bl	800015c <s800LSend>
			break;
 80003aa:	e0e0      	b.n	800056e <txATcommand+0x24e>
		}
		case 1: {
			ready=false;
 80003ac:	4b74      	ldr	r3, [pc, #464]	; (8000580 <txATcommand+0x260>)
 80003ae:	2200      	movs	r2, #0
 80003b0:	701a      	strb	r2, [r3, #0]
			s800LSend((uint8_t*)"AT+CSQ", 6);
 80003b2:	2106      	movs	r1, #6
 80003b4:	4874      	ldr	r0, [pc, #464]	; (8000588 <txATcommand+0x268>)
 80003b6:	f7ff fed1 	bl	800015c <s800LSend>
			break;
 80003ba:	e0d8      	b.n	800056e <txATcommand+0x24e>
		}
		case 2: {
			ready=false;
 80003bc:	4b70      	ldr	r3, [pc, #448]	; (8000580 <txATcommand+0x260>)
 80003be:	2200      	movs	r2, #0
 80003c0:	701a      	strb	r2, [r3, #0]
			s800LSend((uint8_t*)"AT+CBC", 6);
 80003c2:	2106      	movs	r1, #6
 80003c4:	4871      	ldr	r0, [pc, #452]	; (800058c <txATcommand+0x26c>)
 80003c6:	f7ff fec9 	bl	800015c <s800LSend>
			break;
 80003ca:	e0d0      	b.n	800056e <txATcommand+0x24e>
		}
		case 3: {
			ready=false;
 80003cc:	4b6c      	ldr	r3, [pc, #432]	; (8000580 <txATcommand+0x260>)
 80003ce:	2200      	movs	r2, #0
 80003d0:	701a      	strb	r2, [r3, #0]
			s800LSend((uint8_t*)"AT+CREG?", 8);
 80003d2:	2108      	movs	r1, #8
 80003d4:	486e      	ldr	r0, [pc, #440]	; (8000590 <txATcommand+0x270>)
 80003d6:	f7ff fec1 	bl	800015c <s800LSend>
			break;
 80003da:	e0c8      	b.n	800056e <txATcommand+0x24e>
		}
		case 4: {
			ready=false;
 80003dc:	4b68      	ldr	r3, [pc, #416]	; (8000580 <txATcommand+0x260>)
 80003de:	2200      	movs	r2, #0
 80003e0:	701a      	strb	r2, [r3, #0]
			s800LSend((uint8_t*)"AT+SAPBR=1,1", 12);
 80003e2:	210c      	movs	r1, #12
 80003e4:	486b      	ldr	r0, [pc, #428]	; (8000594 <txATcommand+0x274>)
 80003e6:	f7ff feb9 	bl	800015c <s800LSend>
			HAL_Delay(2000);
 80003ea:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80003ee:	f001 fb09 	bl	8001a04 <HAL_Delay>
			break;
 80003f2:	e0bc      	b.n	800056e <txATcommand+0x24e>
		}
		case 5: {
			ready=false;
 80003f4:	4b62      	ldr	r3, [pc, #392]	; (8000580 <txATcommand+0x260>)
 80003f6:	2200      	movs	r2, #0
 80003f8:	701a      	strb	r2, [r3, #0]
			s800LSend((uint8_t*)"AT+HTTPINIT", 11);
 80003fa:	210b      	movs	r1, #11
 80003fc:	4866      	ldr	r0, [pc, #408]	; (8000598 <txATcommand+0x278>)
 80003fe:	f7ff fead 	bl	800015c <s800LSend>
			break;
 8000402:	e0b4      	b.n	800056e <txATcommand+0x24e>
		}
		case 6: {
			ready=false;
 8000404:	4b5e      	ldr	r3, [pc, #376]	; (8000580 <txATcommand+0x260>)
 8000406:	2200      	movs	r2, #0
 8000408:	701a      	strb	r2, [r3, #0]
			s800LSend((uint8_t*)"AT+HTTPPARA=\"CID\",1",19);
 800040a:	2113      	movs	r1, #19
 800040c:	4863      	ldr	r0, [pc, #396]	; (800059c <txATcommand+0x27c>)
 800040e:	f7ff fea5 	bl	800015c <s800LSend>
			break;
 8000412:	e0ac      	b.n	800056e <txATcommand+0x24e>
		}
		case 7: {
			ready=false;
 8000414:	4b5a      	ldr	r3, [pc, #360]	; (8000580 <txATcommand+0x260>)
 8000416:	2200      	movs	r2, #0
 8000418:	701a      	strb	r2, [r3, #0]
			bat[7]=0;
 800041a:	4b61      	ldr	r3, [pc, #388]	; (80005a0 <txATcommand+0x280>)
 800041c:	2200      	movs	r2, #0
 800041e:	71da      	strb	r2, [r3, #7]
			uint8_t ext[250];
			if (answ)
 8000420:	4b60      	ldr	r3, [pc, #384]	; (80005a4 <txATcommand+0x284>)
 8000422:	781b      	ldrb	r3, [r3, #0]
 8000424:	2b00      	cmp	r3, #0
 8000426:	d00a      	beq.n	800043e <txATcommand+0x11e>
				sprintf(ext, "AT+HTTPPARA=\"URL\",\"http://simple.spamigor.ru/api/gst?csq=%s&bat=%s&mes=%s&id=%s\"", csqlvl, bat, smsText, unicID);
 8000428:	1d38      	adds	r0, r7, #4
 800042a:	4b5f      	ldr	r3, [pc, #380]	; (80005a8 <txATcommand+0x288>)
 800042c:	9301      	str	r3, [sp, #4]
 800042e:	4b5f      	ldr	r3, [pc, #380]	; (80005ac <txATcommand+0x28c>)
 8000430:	9300      	str	r3, [sp, #0]
 8000432:	4b5b      	ldr	r3, [pc, #364]	; (80005a0 <txATcommand+0x280>)
 8000434:	4a5e      	ldr	r2, [pc, #376]	; (80005b0 <txATcommand+0x290>)
 8000436:	495f      	ldr	r1, [pc, #380]	; (80005b4 <txATcommand+0x294>)
 8000438:	f003 fd92 	bl	8003f60 <siprintf>
 800043c:	e015      	b.n	800046a <txATcommand+0x14a>
			else if (!checkPhones)
 800043e:	4b5e      	ldr	r3, [pc, #376]	; (80005b8 <txATcommand+0x298>)
 8000440:	781b      	ldrb	r3, [r3, #0]
 8000442:	f083 0301 	eor.w	r3, r3, #1
 8000446:	b2db      	uxtb	r3, r3
 8000448:	2b00      	cmp	r3, #0
 800044a:	d008      	beq.n	800045e <txATcommand+0x13e>
				sprintf(ext, "AT+HTTPPARA=\"URL\",\"http://simple.spamigor.ru/api/gst?csq=%s&bat=%s&id=%s\"", csqlvl, bat, unicID);
 800044c:	1d38      	adds	r0, r7, #4
 800044e:	4b56      	ldr	r3, [pc, #344]	; (80005a8 <txATcommand+0x288>)
 8000450:	9300      	str	r3, [sp, #0]
 8000452:	4b53      	ldr	r3, [pc, #332]	; (80005a0 <txATcommand+0x280>)
 8000454:	4a56      	ldr	r2, [pc, #344]	; (80005b0 <txATcommand+0x290>)
 8000456:	4959      	ldr	r1, [pc, #356]	; (80005bc <txATcommand+0x29c>)
 8000458:	f003 fd82 	bl	8003f60 <siprintf>
 800045c:	e005      	b.n	800046a <txATcommand+0x14a>
			else sprintf(ext, "AT+HTTPPARA=\"URL\",\"http://simple.spamigor.ru/api/phn?id=%s\"", unicID);
 800045e:	1d3b      	adds	r3, r7, #4
 8000460:	4a51      	ldr	r2, [pc, #324]	; (80005a8 <txATcommand+0x288>)
 8000462:	4957      	ldr	r1, [pc, #348]	; (80005c0 <txATcommand+0x2a0>)
 8000464:	4618      	mov	r0, r3
 8000466:	f003 fd7b 	bl	8003f60 <siprintf>
			s800LSend(ext, strlen(ext));
 800046a:	1d3b      	adds	r3, r7, #4
 800046c:	4618      	mov	r0, r3
 800046e:	f7ff fe6d 	bl	800014c <strlen>
 8000472:	4603      	mov	r3, r0
 8000474:	461a      	mov	r2, r3
 8000476:	1d3b      	adds	r3, r7, #4
 8000478:	4611      	mov	r1, r2
 800047a:	4618      	mov	r0, r3
 800047c:	f7ff fe6e 	bl	800015c <s800LSend>
			break;
 8000480:	e075      	b.n	800056e <txATcommand+0x24e>
		}
		case 8: {
			ready=false;
 8000482:	4b3f      	ldr	r3, [pc, #252]	; (8000580 <txATcommand+0x260>)
 8000484:	2200      	movs	r2, #0
 8000486:	701a      	strb	r2, [r3, #0]
			s800LSend((uint8_t*)"AT+HTTPACTION=0",15);
 8000488:	210f      	movs	r1, #15
 800048a:	484e      	ldr	r0, [pc, #312]	; (80005c4 <txATcommand+0x2a4>)
 800048c:	f7ff fe66 	bl	800015c <s800LSend>
			break;
 8000490:	e06d      	b.n	800056e <txATcommand+0x24e>
		}
		case 9: {
			ready=false;
 8000492:	4b3b      	ldr	r3, [pc, #236]	; (8000580 <txATcommand+0x260>)
 8000494:	2200      	movs	r2, #0
 8000496:	701a      	strb	r2, [r3, #0]
			s800LSend((uint8_t*)"AT+HTTPREAD",11);
 8000498:	210b      	movs	r1, #11
 800049a:	484b      	ldr	r0, [pc, #300]	; (80005c8 <txATcommand+0x2a8>)
 800049c:	f7ff fe5e 	bl	800015c <s800LSend>
			break;
 80004a0:	e065      	b.n	800056e <txATcommand+0x24e>
		}
		case 10: {
			ready=false;
 80004a2:	4b37      	ldr	r3, [pc, #220]	; (8000580 <txATcommand+0x260>)
 80004a4:	2200      	movs	r2, #0
 80004a6:	701a      	strb	r2, [r3, #0]
			s800LSend((uint8_t*)"AT+HTTPTERM",11);
 80004a8:	210b      	movs	r1, #11
 80004aa:	4848      	ldr	r0, [pc, #288]	; (80005cc <txATcommand+0x2ac>)
 80004ac:	f7ff fe56 	bl	800015c <s800LSend>
			break;
 80004b0:	e05d      	b.n	800056e <txATcommand+0x24e>
		}
		case 11: {
			ready=false;
 80004b2:	4b33      	ldr	r3, [pc, #204]	; (8000580 <txATcommand+0x260>)
 80004b4:	2200      	movs	r2, #0
 80004b6:	701a      	strb	r2, [r3, #0]
			s800LSend((uint8_t*)"AT+SAPBR=0,1", 12);
 80004b8:	210c      	movs	r1, #12
 80004ba:	4845      	ldr	r0, [pc, #276]	; (80005d0 <txATcommand+0x2b0>)
 80004bc:	f7ff fe4e 	bl	800015c <s800LSend>
			break;
 80004c0:	e055      	b.n	800056e <txATcommand+0x24e>
		}
		case 20: {
			ready = false;
 80004c2:	4b2f      	ldr	r3, [pc, #188]	; (8000580 <txATcommand+0x260>)
 80004c4:	2200      	movs	r2, #0
 80004c6:	701a      	strb	r2, [r3, #0]
			s800LSend((uint8_t*)"AT+CMGF=1", 9);
 80004c8:	2109      	movs	r1, #9
 80004ca:	4842      	ldr	r0, [pc, #264]	; (80005d4 <txATcommand+0x2b4>)
 80004cc:	f7ff fe46 	bl	800015c <s800LSend>
			break;
 80004d0:	e04d      	b.n	800056e <txATcommand+0x24e>
		}
		case 21: {
			ready=false;
 80004d2:	4b2b      	ldr	r3, [pc, #172]	; (8000580 <txATcommand+0x260>)
 80004d4:	2200      	movs	r2, #0
 80004d6:	701a      	strb	r2, [r3, #0]
			uint8_t ext[15];
			uint8_t at[] = "AT+CMGR=";
 80004d8:	4a3f      	ldr	r2, [pc, #252]	; (80005d8 <txATcommand+0x2b8>)
 80004da:	f507 738a 	add.w	r3, r7, #276	; 0x114
 80004de:	ca07      	ldmia	r2, {r0, r1, r2}
 80004e0:	c303      	stmia	r3!, {r0, r1}
 80004e2:	701a      	strb	r2, [r3, #0]
			snprintf(ext, 15, "%s%s", at, smsNum);
 80004e4:	f507 738a 	add.w	r3, r7, #276	; 0x114
 80004e8:	f507 7090 	add.w	r0, r7, #288	; 0x120
 80004ec:	4a3b      	ldr	r2, [pc, #236]	; (80005dc <txATcommand+0x2bc>)
 80004ee:	9200      	str	r2, [sp, #0]
 80004f0:	4a3b      	ldr	r2, [pc, #236]	; (80005e0 <txATcommand+0x2c0>)
 80004f2:	210f      	movs	r1, #15
 80004f4:	f003 fd00 	bl	8003ef8 <sniprintf>
			s800LSend(ext, s800lMessAdd(ext));
 80004f8:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80004fc:	4618      	mov	r0, r3
 80004fe:	f7ff fe61 	bl	80001c4 <s800lMessAdd>
 8000502:	4602      	mov	r2, r0
 8000504:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8000508:	4611      	mov	r1, r2
 800050a:	4618      	mov	r0, r3
 800050c:	f7ff fe26 	bl	800015c <s800LSend>
			break;
 8000510:	e02d      	b.n	800056e <txATcommand+0x24e>
		}
		case 22: {
			ready = false;
 8000512:	4b1b      	ldr	r3, [pc, #108]	; (8000580 <txATcommand+0x260>)
 8000514:	2200      	movs	r2, #0
 8000516:	701a      	strb	r2, [r3, #0]
			s800LSend((uint8_t*)"AT+CMGDA=\"DEL ALL\"", 18);
 8000518:	2112      	movs	r1, #18
 800051a:	4832      	ldr	r0, [pc, #200]	; (80005e4 <txATcommand+0x2c4>)
 800051c:	f7ff fe1e 	bl	800015c <s800LSend>
			break;
 8000520:	e025      	b.n	800056e <txATcommand+0x24e>
		}
		case 23: {
			step=24;
 8000522:	4b16      	ldr	r3, [pc, #88]	; (800057c <txATcommand+0x25c>)
 8000524:	2218      	movs	r2, #24
 8000526:	601a      	str	r2, [r3, #0]
			ready = true;
 8000528:	4b15      	ldr	r3, [pc, #84]	; (8000580 <txATcommand+0x260>)
 800052a:	2201      	movs	r2, #1
 800052c:	701a      	strb	r2, [r3, #0]
			s800LSend((uint8_t*)"AT+CMGS=\"+79999811066\"", 22);
 800052e:	2116      	movs	r1, #22
 8000530:	482d      	ldr	r0, [pc, #180]	; (80005e8 <txATcommand+0x2c8>)
 8000532:	f7ff fe13 	bl	800015c <s800LSend>
			break;
 8000536:	e01a      	b.n	800056e <txATcommand+0x24e>
		}
		case 24: {
			ready = false;
 8000538:	4b11      	ldr	r3, [pc, #68]	; (8000580 <txATcommand+0x260>)
 800053a:	2200      	movs	r2, #0
 800053c:	701a      	strb	r2, [r3, #0]
			step=24;
 800053e:	4b0f      	ldr	r3, [pc, #60]	; (800057c <txATcommand+0x25c>)
 8000540:	2218      	movs	r2, #24
 8000542:	601a      	str	r2, [r3, #0]
			uint8_t ggg[20];
			sprintf(ggg, "%s%c", smsText, (uint8_t)0x1A);
 8000544:	f507 7080 	add.w	r0, r7, #256	; 0x100
 8000548:	231a      	movs	r3, #26
 800054a:	4a18      	ldr	r2, [pc, #96]	; (80005ac <txATcommand+0x28c>)
 800054c:	4927      	ldr	r1, [pc, #156]	; (80005ec <txATcommand+0x2cc>)
 800054e:	f003 fd07 	bl	8003f60 <siprintf>
			s800LSend(ggg, strlen(ggg));
 8000552:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8000556:	4618      	mov	r0, r3
 8000558:	f7ff fdf8 	bl	800014c <strlen>
 800055c:	4603      	mov	r3, r0
 800055e:	461a      	mov	r2, r3
 8000560:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8000564:	4611      	mov	r1, r2
 8000566:	4618      	mov	r0, r3
 8000568:	f7ff fdf8 	bl	800015c <s800LSend>
			break;
 800056c:	bf00      	nop
		}
	}
	return;
 800056e:	bf00      	nop
 8000570:	bf00      	nop
}
 8000572:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8000576:	46bd      	mov	sp, r7
 8000578:	bd80      	pop	{r7, pc}
 800057a:	bf00      	nop
 800057c:	200008b8 	.word	0x200008b8
 8000580:	200008c0 	.word	0x200008c0
 8000584:	080046d0 	.word	0x080046d0
 8000588:	080046d8 	.word	0x080046d8
 800058c:	080046e0 	.word	0x080046e0
 8000590:	080046e8 	.word	0x080046e8
 8000594:	080046f4 	.word	0x080046f4
 8000598:	08004704 	.word	0x08004704
 800059c:	08004710 	.word	0x08004710
 80005a0:	200008c4 	.word	0x200008c4
 80005a4:	200008c1 	.word	0x200008c1
 80005a8:	20000878 	.word	0x20000878
 80005ac:	20000008 	.word	0x20000008
 80005b0:	20000010 	.word	0x20000010
 80005b4:	08004724 	.word	0x08004724
 80005b8:	20000048 	.word	0x20000048
 80005bc:	08004778 	.word	0x08004778
 80005c0:	080047c4 	.word	0x080047c4
 80005c4:	08004800 	.word	0x08004800
 80005c8:	08004810 	.word	0x08004810
 80005cc:	0800481c 	.word	0x0800481c
 80005d0:	08004828 	.word	0x08004828
 80005d4:	08004838 	.word	0x08004838
 80005d8:	08004880 	.word	0x08004880
 80005dc:	20000870 	.word	0x20000870
 80005e0:	08004844 	.word	0x08004844
 80005e4:	0800484c 	.word	0x0800484c
 80005e8:	08004860 	.word	0x08004860
 80005ec:	08004878 	.word	0x08004878

080005f0 <rxATcommand>:

void rxATcommand(uint8_t* text) {
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b08a      	sub	sp, #40	; 0x28
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	6078      	str	r0, [r7, #4]
	switch (step) {
 80005f8:	4ba0      	ldr	r3, [pc, #640]	; (800087c <rxATcommand+0x28c>)
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	2b18      	cmp	r3, #24
 80005fe:	f200 83a8 	bhi.w	8000d52 <rxATcommand+0x762>
 8000602:	a201      	add	r2, pc, #4	; (adr r2, 8000608 <rxATcommand+0x18>)
 8000604:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000608:	0800066d 	.word	0x0800066d
 800060c:	080006b7 	.word	0x080006b7
 8000610:	080006e7 	.word	0x080006e7
 8000614:	08000747 	.word	0x08000747
 8000618:	08000767 	.word	0x08000767
 800061c:	0800079d 	.word	0x0800079d
 8000620:	080007d3 	.word	0x080007d3
 8000624:	080007fb 	.word	0x080007fb
 8000628:	08000823 	.word	0x08000823
 800062c:	080008b9 	.word	0x080008b9
 8000630:	08000a99 	.word	0x08000a99
 8000634:	08000acb 	.word	0x08000acb
 8000638:	08000aef 	.word	0x08000aef
 800063c:	08000d53 	.word	0x08000d53
 8000640:	08000d53 	.word	0x08000d53
 8000644:	08000d53 	.word	0x08000d53
 8000648:	08000d53 	.word	0x08000d53
 800064c:	08000d53 	.word	0x08000d53
 8000650:	08000d53 	.word	0x08000d53
 8000654:	08000d53 	.word	0x08000d53
 8000658:	08000be1 	.word	0x08000be1
 800065c:	08000c09 	.word	0x08000c09
 8000660:	08000cd1 	.word	0x08000cd1
 8000664:	08000ce3 	.word	0x08000ce3
 8000668:	08000cf5 	.word	0x08000cf5
		case 0: {
			if (strstr((char*)text, (char*)"OK")) {
 800066c:	4984      	ldr	r1, [pc, #528]	; (8000880 <rxATcommand+0x290>)
 800066e:	6878      	ldr	r0, [r7, #4]
 8000670:	f003 fcab 	bl	8003fca <strstr>
 8000674:	4603      	mov	r3, r0
 8000676:	2b00      	cmp	r3, #0
 8000678:	d008      	beq.n	800068c <rxATcommand+0x9c>
				step++;
 800067a:	4b80      	ldr	r3, [pc, #512]	; (800087c <rxATcommand+0x28c>)
 800067c:	681b      	ldr	r3, [r3, #0]
 800067e:	3301      	adds	r3, #1
 8000680:	4a7e      	ldr	r2, [pc, #504]	; (800087c <rxATcommand+0x28c>)
 8000682:	6013      	str	r3, [r2, #0]
				ready=true;
 8000684:	4b7f      	ldr	r3, [pc, #508]	; (8000884 <rxATcommand+0x294>)
 8000686:	2201      	movs	r2, #1
 8000688:	701a      	strb	r2, [r3, #0]
			}
			else {
				step=0;
				ready=true;
			}
			break;
 800068a:	e362      	b.n	8000d52 <rxATcommand+0x762>
			else if (strstr((char*)text, (char*)"CMTI")) {
 800068c:	497e      	ldr	r1, [pc, #504]	; (8000888 <rxATcommand+0x298>)
 800068e:	6878      	ldr	r0, [r7, #4]
 8000690:	f003 fc9b 	bl	8003fca <strstr>
 8000694:	4603      	mov	r3, r0
 8000696:	2b00      	cmp	r3, #0
 8000698:	d006      	beq.n	80006a8 <rxATcommand+0xb8>
				step=20;
 800069a:	4b78      	ldr	r3, [pc, #480]	; (800087c <rxATcommand+0x28c>)
 800069c:	2214      	movs	r2, #20
 800069e:	601a      	str	r2, [r3, #0]
				ready=true;
 80006a0:	4b78      	ldr	r3, [pc, #480]	; (8000884 <rxATcommand+0x294>)
 80006a2:	2201      	movs	r2, #1
 80006a4:	701a      	strb	r2, [r3, #0]
			break;
 80006a6:	e354      	b.n	8000d52 <rxATcommand+0x762>
				step=0;
 80006a8:	4b74      	ldr	r3, [pc, #464]	; (800087c <rxATcommand+0x28c>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	601a      	str	r2, [r3, #0]
				ready=true;
 80006ae:	4b75      	ldr	r3, [pc, #468]	; (8000884 <rxATcommand+0x294>)
 80006b0:	2201      	movs	r2, #1
 80006b2:	701a      	strb	r2, [r3, #0]
			break;
 80006b4:	e34d      	b.n	8000d52 <rxATcommand+0x762>
		}
		case 1: {
			if (strstr((char*)oldModem3, (char*)"CSQ")) {
 80006b6:	4975      	ldr	r1, [pc, #468]	; (800088c <rxATcommand+0x29c>)
 80006b8:	4875      	ldr	r0, [pc, #468]	; (8000890 <rxATcommand+0x2a0>)
 80006ba:	f003 fc86 	bl	8003fca <strstr>
 80006be:	4603      	mov	r3, r0
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	d00c      	beq.n	80006de <rxATcommand+0xee>
				csqlvl[0]=oldModem3[6];
 80006c4:	4b72      	ldr	r3, [pc, #456]	; (8000890 <rxATcommand+0x2a0>)
 80006c6:	799a      	ldrb	r2, [r3, #6]
 80006c8:	4b72      	ldr	r3, [pc, #456]	; (8000894 <rxATcommand+0x2a4>)
 80006ca:	701a      	strb	r2, [r3, #0]
				csqlvl[1]=oldModem3[7];
 80006cc:	4b70      	ldr	r3, [pc, #448]	; (8000890 <rxATcommand+0x2a0>)
 80006ce:	79da      	ldrb	r2, [r3, #7]
 80006d0:	4b70      	ldr	r3, [pc, #448]	; (8000894 <rxATcommand+0x2a4>)
 80006d2:	705a      	strb	r2, [r3, #1]
				step++;
 80006d4:	4b69      	ldr	r3, [pc, #420]	; (800087c <rxATcommand+0x28c>)
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	3301      	adds	r3, #1
 80006da:	4a68      	ldr	r2, [pc, #416]	; (800087c <rxATcommand+0x28c>)
 80006dc:	6013      	str	r3, [r2, #0]
			}
			ready=true;
 80006de:	4b69      	ldr	r3, [pc, #420]	; (8000884 <rxATcommand+0x294>)
 80006e0:	2201      	movs	r2, #1
 80006e2:	701a      	strb	r2, [r3, #0]
			break;
 80006e4:	e335      	b.n	8000d52 <rxATcommand+0x762>
		}
		case 2: {
			if (strstr((char*)oldModem3, (char*)"CBC")) {
 80006e6:	496c      	ldr	r1, [pc, #432]	; (8000898 <rxATcommand+0x2a8>)
 80006e8:	4869      	ldr	r0, [pc, #420]	; (8000890 <rxATcommand+0x2a0>)
 80006ea:	f003 fc6e 	bl	8003fca <strstr>
 80006ee:	4603      	mov	r3, r0
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d024      	beq.n	800073e <rxATcommand+0x14e>
				bat[0]=oldModem3[8];
 80006f4:	4b66      	ldr	r3, [pc, #408]	; (8000890 <rxATcommand+0x2a0>)
 80006f6:	7a1a      	ldrb	r2, [r3, #8]
 80006f8:	4b68      	ldr	r3, [pc, #416]	; (800089c <rxATcommand+0x2ac>)
 80006fa:	701a      	strb	r2, [r3, #0]
				bat[1]=oldModem3[9];
 80006fc:	4b64      	ldr	r3, [pc, #400]	; (8000890 <rxATcommand+0x2a0>)
 80006fe:	7a5a      	ldrb	r2, [r3, #9]
 8000700:	4b66      	ldr	r3, [pc, #408]	; (800089c <rxATcommand+0x2ac>)
 8000702:	705a      	strb	r2, [r3, #1]
				bat[2]=oldModem3[10];
 8000704:	4b62      	ldr	r3, [pc, #392]	; (8000890 <rxATcommand+0x2a0>)
 8000706:	7a9a      	ldrb	r2, [r3, #10]
 8000708:	4b64      	ldr	r3, [pc, #400]	; (800089c <rxATcommand+0x2ac>)
 800070a:	709a      	strb	r2, [r3, #2]
				bat[3]=oldModem3[11];
 800070c:	4b60      	ldr	r3, [pc, #384]	; (8000890 <rxATcommand+0x2a0>)
 800070e:	7ada      	ldrb	r2, [r3, #11]
 8000710:	4b62      	ldr	r3, [pc, #392]	; (800089c <rxATcommand+0x2ac>)
 8000712:	70da      	strb	r2, [r3, #3]
				bat[4]=oldModem3[12];
 8000714:	4b5e      	ldr	r3, [pc, #376]	; (8000890 <rxATcommand+0x2a0>)
 8000716:	7b1a      	ldrb	r2, [r3, #12]
 8000718:	4b60      	ldr	r3, [pc, #384]	; (800089c <rxATcommand+0x2ac>)
 800071a:	711a      	strb	r2, [r3, #4]
				bat[5]=oldModem3[13];
 800071c:	4b5c      	ldr	r3, [pc, #368]	; (8000890 <rxATcommand+0x2a0>)
 800071e:	7b5a      	ldrb	r2, [r3, #13]
 8000720:	4b5e      	ldr	r3, [pc, #376]	; (800089c <rxATcommand+0x2ac>)
 8000722:	715a      	strb	r2, [r3, #5]
				bat[6]=oldModem3[14];
 8000724:	4b5a      	ldr	r3, [pc, #360]	; (8000890 <rxATcommand+0x2a0>)
 8000726:	7b9a      	ldrb	r2, [r3, #14]
 8000728:	4b5c      	ldr	r3, [pc, #368]	; (800089c <rxATcommand+0x2ac>)
 800072a:	719a      	strb	r2, [r3, #6]
				bat[7]=oldModem3[15];
 800072c:	4b58      	ldr	r3, [pc, #352]	; (8000890 <rxATcommand+0x2a0>)
 800072e:	7bda      	ldrb	r2, [r3, #15]
 8000730:	4b5a      	ldr	r3, [pc, #360]	; (800089c <rxATcommand+0x2ac>)
 8000732:	71da      	strb	r2, [r3, #7]
				step++;
 8000734:	4b51      	ldr	r3, [pc, #324]	; (800087c <rxATcommand+0x28c>)
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	3301      	adds	r3, #1
 800073a:	4a50      	ldr	r2, [pc, #320]	; (800087c <rxATcommand+0x28c>)
 800073c:	6013      	str	r3, [r2, #0]
			}
			ready=true;
 800073e:	4b51      	ldr	r3, [pc, #324]	; (8000884 <rxATcommand+0x294>)
 8000740:	2201      	movs	r2, #1
 8000742:	701a      	strb	r2, [r3, #0]
			break;
 8000744:	e305      	b.n	8000d52 <rxATcommand+0x762>
		}
		case 3: {
			if (strstr((char*)oldModem3, (char*)"0,1")) step++;
 8000746:	4956      	ldr	r1, [pc, #344]	; (80008a0 <rxATcommand+0x2b0>)
 8000748:	4851      	ldr	r0, [pc, #324]	; (8000890 <rxATcommand+0x2a0>)
 800074a:	f003 fc3e 	bl	8003fca <strstr>
 800074e:	4603      	mov	r3, r0
 8000750:	2b00      	cmp	r3, #0
 8000752:	d004      	beq.n	800075e <rxATcommand+0x16e>
 8000754:	4b49      	ldr	r3, [pc, #292]	; (800087c <rxATcommand+0x28c>)
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	3301      	adds	r3, #1
 800075a:	4a48      	ldr	r2, [pc, #288]	; (800087c <rxATcommand+0x28c>)
 800075c:	6013      	str	r3, [r2, #0]
			ready=true;
 800075e:	4b49      	ldr	r3, [pc, #292]	; (8000884 <rxATcommand+0x294>)
 8000760:	2201      	movs	r2, #1
 8000762:	701a      	strb	r2, [r3, #0]
			break;
 8000764:	e2f5      	b.n	8000d52 <rxATcommand+0x762>
		}
		case 4: {
			if (strstr((char*)text, (char*)"OK")) step++;
 8000766:	4946      	ldr	r1, [pc, #280]	; (8000880 <rxATcommand+0x290>)
 8000768:	6878      	ldr	r0, [r7, #4]
 800076a:	f003 fc2e 	bl	8003fca <strstr>
 800076e:	4603      	mov	r3, r0
 8000770:	2b00      	cmp	r3, #0
 8000772:	d005      	beq.n	8000780 <rxATcommand+0x190>
 8000774:	4b41      	ldr	r3, [pc, #260]	; (800087c <rxATcommand+0x28c>)
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	3301      	adds	r3, #1
 800077a:	4a40      	ldr	r2, [pc, #256]	; (800087c <rxATcommand+0x28c>)
 800077c:	6013      	str	r3, [r2, #0]
 800077e:	e009      	b.n	8000794 <rxATcommand+0x1a4>
			else if (strstr((char*)text, (char*)"ERROR")) step=10;
 8000780:	4948      	ldr	r1, [pc, #288]	; (80008a4 <rxATcommand+0x2b4>)
 8000782:	6878      	ldr	r0, [r7, #4]
 8000784:	f003 fc21 	bl	8003fca <strstr>
 8000788:	4603      	mov	r3, r0
 800078a:	2b00      	cmp	r3, #0
 800078c:	d002      	beq.n	8000794 <rxATcommand+0x1a4>
 800078e:	4b3b      	ldr	r3, [pc, #236]	; (800087c <rxATcommand+0x28c>)
 8000790:	220a      	movs	r2, #10
 8000792:	601a      	str	r2, [r3, #0]
			ready=true;
 8000794:	4b3b      	ldr	r3, [pc, #236]	; (8000884 <rxATcommand+0x294>)
 8000796:	2201      	movs	r2, #1
 8000798:	701a      	strb	r2, [r3, #0]
			break;
 800079a:	e2da      	b.n	8000d52 <rxATcommand+0x762>
		}
		case 5: {
			if (strstr((char*)text, (char*)"OK")) step++;
 800079c:	4938      	ldr	r1, [pc, #224]	; (8000880 <rxATcommand+0x290>)
 800079e:	6878      	ldr	r0, [r7, #4]
 80007a0:	f003 fc13 	bl	8003fca <strstr>
 80007a4:	4603      	mov	r3, r0
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d005      	beq.n	80007b6 <rxATcommand+0x1c6>
 80007aa:	4b34      	ldr	r3, [pc, #208]	; (800087c <rxATcommand+0x28c>)
 80007ac:	681b      	ldr	r3, [r3, #0]
 80007ae:	3301      	adds	r3, #1
 80007b0:	4a32      	ldr	r2, [pc, #200]	; (800087c <rxATcommand+0x28c>)
 80007b2:	6013      	str	r3, [r2, #0]
 80007b4:	e009      	b.n	80007ca <rxATcommand+0x1da>
			else if (strstr((char*)text, (char*)"ERROR")) step=10;
 80007b6:	493b      	ldr	r1, [pc, #236]	; (80008a4 <rxATcommand+0x2b4>)
 80007b8:	6878      	ldr	r0, [r7, #4]
 80007ba:	f003 fc06 	bl	8003fca <strstr>
 80007be:	4603      	mov	r3, r0
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d002      	beq.n	80007ca <rxATcommand+0x1da>
 80007c4:	4b2d      	ldr	r3, [pc, #180]	; (800087c <rxATcommand+0x28c>)
 80007c6:	220a      	movs	r2, #10
 80007c8:	601a      	str	r2, [r3, #0]
			ready=true;
 80007ca:	4b2e      	ldr	r3, [pc, #184]	; (8000884 <rxATcommand+0x294>)
 80007cc:	2201      	movs	r2, #1
 80007ce:	701a      	strb	r2, [r3, #0]
			break;
 80007d0:	e2bf      	b.n	8000d52 <rxATcommand+0x762>
		}
		case 6: {
			if (strstr((char*)text, (char*)"OK")) step++;
 80007d2:	492b      	ldr	r1, [pc, #172]	; (8000880 <rxATcommand+0x290>)
 80007d4:	6878      	ldr	r0, [r7, #4]
 80007d6:	f003 fbf8 	bl	8003fca <strstr>
 80007da:	4603      	mov	r3, r0
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d005      	beq.n	80007ec <rxATcommand+0x1fc>
 80007e0:	4b26      	ldr	r3, [pc, #152]	; (800087c <rxATcommand+0x28c>)
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	3301      	adds	r3, #1
 80007e6:	4a25      	ldr	r2, [pc, #148]	; (800087c <rxATcommand+0x28c>)
 80007e8:	6013      	str	r3, [r2, #0]
 80007ea:	e002      	b.n	80007f2 <rxATcommand+0x202>
			else step=10;
 80007ec:	4b23      	ldr	r3, [pc, #140]	; (800087c <rxATcommand+0x28c>)
 80007ee:	220a      	movs	r2, #10
 80007f0:	601a      	str	r2, [r3, #0]
			ready=true;
 80007f2:	4b24      	ldr	r3, [pc, #144]	; (8000884 <rxATcommand+0x294>)
 80007f4:	2201      	movs	r2, #1
 80007f6:	701a      	strb	r2, [r3, #0]
			break;
 80007f8:	e2ab      	b.n	8000d52 <rxATcommand+0x762>
		}
		case 7: {
			if (strstr((char*)text, (char*)"OK")) step++;
 80007fa:	4921      	ldr	r1, [pc, #132]	; (8000880 <rxATcommand+0x290>)
 80007fc:	6878      	ldr	r0, [r7, #4]
 80007fe:	f003 fbe4 	bl	8003fca <strstr>
 8000802:	4603      	mov	r3, r0
 8000804:	2b00      	cmp	r3, #0
 8000806:	d005      	beq.n	8000814 <rxATcommand+0x224>
 8000808:	4b1c      	ldr	r3, [pc, #112]	; (800087c <rxATcommand+0x28c>)
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	3301      	adds	r3, #1
 800080e:	4a1b      	ldr	r2, [pc, #108]	; (800087c <rxATcommand+0x28c>)
 8000810:	6013      	str	r3, [r2, #0]
 8000812:	e002      	b.n	800081a <rxATcommand+0x22a>
			else step=10;
 8000814:	4b19      	ldr	r3, [pc, #100]	; (800087c <rxATcommand+0x28c>)
 8000816:	220a      	movs	r2, #10
 8000818:	601a      	str	r2, [r3, #0]
			ready=true;
 800081a:	4b1a      	ldr	r3, [pc, #104]	; (8000884 <rxATcommand+0x294>)
 800081c:	2201      	movs	r2, #1
 800081e:	701a      	strb	r2, [r3, #0]
			break;
 8000820:	e297      	b.n	8000d52 <rxATcommand+0x762>
		}
		case 8: {
			ready=true;
 8000822:	4b18      	ldr	r3, [pc, #96]	; (8000884 <rxATcommand+0x294>)
 8000824:	2201      	movs	r2, #1
 8000826:	701a      	strb	r2, [r3, #0]
			if (strstr((char*)text, (char*)"200")) step++;
 8000828:	491f      	ldr	r1, [pc, #124]	; (80008a8 <rxATcommand+0x2b8>)
 800082a:	6878      	ldr	r0, [r7, #4]
 800082c:	f003 fbcd 	bl	8003fca <strstr>
 8000830:	4603      	mov	r3, r0
 8000832:	2b00      	cmp	r3, #0
 8000834:	d005      	beq.n	8000842 <rxATcommand+0x252>
 8000836:	4b11      	ldr	r3, [pc, #68]	; (800087c <rxATcommand+0x28c>)
 8000838:	681b      	ldr	r3, [r3, #0]
 800083a:	3301      	adds	r3, #1
 800083c:	4a0f      	ldr	r2, [pc, #60]	; (800087c <rxATcommand+0x28c>)
 800083e:	6013      	str	r3, [r2, #0]
			else if ((strstr((char*)text, (char*)"0,60"))||(strstr((char*)text, (char*)"0,40"))||(strstr((char*)text, (char*)"0,50"))) step=10;
			else ready=false;
			break;
 8000840:	e287      	b.n	8000d52 <rxATcommand+0x762>
			else if ((strstr((char*)text, (char*)"0,60"))||(strstr((char*)text, (char*)"0,40"))||(strstr((char*)text, (char*)"0,50"))) step=10;
 8000842:	491a      	ldr	r1, [pc, #104]	; (80008ac <rxATcommand+0x2bc>)
 8000844:	6878      	ldr	r0, [r7, #4]
 8000846:	f003 fbc0 	bl	8003fca <strstr>
 800084a:	4603      	mov	r3, r0
 800084c:	2b00      	cmp	r3, #0
 800084e:	d10d      	bne.n	800086c <rxATcommand+0x27c>
 8000850:	4917      	ldr	r1, [pc, #92]	; (80008b0 <rxATcommand+0x2c0>)
 8000852:	6878      	ldr	r0, [r7, #4]
 8000854:	f003 fbb9 	bl	8003fca <strstr>
 8000858:	4603      	mov	r3, r0
 800085a:	2b00      	cmp	r3, #0
 800085c:	d106      	bne.n	800086c <rxATcommand+0x27c>
 800085e:	4915      	ldr	r1, [pc, #84]	; (80008b4 <rxATcommand+0x2c4>)
 8000860:	6878      	ldr	r0, [r7, #4]
 8000862:	f003 fbb2 	bl	8003fca <strstr>
 8000866:	4603      	mov	r3, r0
 8000868:	2b00      	cmp	r3, #0
 800086a:	d003      	beq.n	8000874 <rxATcommand+0x284>
 800086c:	4b03      	ldr	r3, [pc, #12]	; (800087c <rxATcommand+0x28c>)
 800086e:	220a      	movs	r2, #10
 8000870:	601a      	str	r2, [r3, #0]
			break;
 8000872:	e26e      	b.n	8000d52 <rxATcommand+0x762>
			else ready=false;
 8000874:	4b03      	ldr	r3, [pc, #12]	; (8000884 <rxATcommand+0x294>)
 8000876:	2200      	movs	r2, #0
 8000878:	701a      	strb	r2, [r3, #0]
			break;
 800087a:	e26a      	b.n	8000d52 <rxATcommand+0x762>
 800087c:	200008b8 	.word	0x200008b8
 8000880:	0800488c 	.word	0x0800488c
 8000884:	200008c0 	.word	0x200008c0
 8000888:	08004890 	.word	0x08004890
 800088c:	08004898 	.word	0x08004898
 8000890:	20000678 	.word	0x20000678
 8000894:	20000010 	.word	0x20000010
 8000898:	0800489c 	.word	0x0800489c
 800089c:	200008c4 	.word	0x200008c4
 80008a0:	080048a0 	.word	0x080048a0
 80008a4:	080048a4 	.word	0x080048a4
 80008a8:	080048ac 	.word	0x080048ac
 80008ac:	080048b0 	.word	0x080048b0
 80008b0:	080048b8 	.word	0x080048b8
 80008b4:	080048c0 	.word	0x080048c0
		}
		case 9: {
			if (!answ) {
 80008b8:	4ba1      	ldr	r3, [pc, #644]	; (8000b40 <rxATcommand+0x550>)
 80008ba:	781b      	ldrb	r3, [r3, #0]
 80008bc:	f083 0301 	eor.w	r3, r3, #1
 80008c0:	b2db      	uxtb	r3, r3
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	f000 80c8 	beq.w	8000a58 <rxATcommand+0x468>
				if (strstr((char*)text, (char*)"OK")) {
 80008c8:	499e      	ldr	r1, [pc, #632]	; (8000b44 <rxATcommand+0x554>)
 80008ca:	6878      	ldr	r0, [r7, #4]
 80008cc:	f003 fb7d 	bl	8003fca <strstr>
 80008d0:	4603      	mov	r3, r0
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	f000 80b6 	beq.w	8000a44 <rxATcommand+0x454>
					if (checkPhones) {
 80008d8:	4b9b      	ldr	r3, [pc, #620]	; (8000b48 <rxATcommand+0x558>)
 80008da:	781b      	ldrb	r3, [r3, #0]
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d04e      	beq.n	800097e <rxATcommand+0x38e>
						if (strstr((char*)oldModem2, (char*)"t1"))
 80008e0:	499a      	ldr	r1, [pc, #616]	; (8000b4c <rxATcommand+0x55c>)
 80008e2:	489b      	ldr	r0, [pc, #620]	; (8000b50 <rxATcommand+0x560>)
 80008e4:	f003 fb71 	bl	8003fca <strstr>
 80008e8:	4603      	mov	r3, r0
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d011      	beq.n	8000912 <rxATcommand+0x322>
							for (int i = 0; i<11; i++) tnumber1[i] = oldModem2[i+7];
 80008ee:	2300      	movs	r3, #0
 80008f0:	627b      	str	r3, [r7, #36]	; 0x24
 80008f2:	e00b      	b.n	800090c <rxATcommand+0x31c>
 80008f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008f6:	3307      	adds	r3, #7
 80008f8:	4a95      	ldr	r2, [pc, #596]	; (8000b50 <rxATcommand+0x560>)
 80008fa:	5cd1      	ldrb	r1, [r2, r3]
 80008fc:	4a95      	ldr	r2, [pc, #596]	; (8000b54 <rxATcommand+0x564>)
 80008fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000900:	4413      	add	r3, r2
 8000902:	460a      	mov	r2, r1
 8000904:	701a      	strb	r2, [r3, #0]
 8000906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000908:	3301      	adds	r3, #1
 800090a:	627b      	str	r3, [r7, #36]	; 0x24
 800090c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800090e:	2b0a      	cmp	r3, #10
 8000910:	ddf0      	ble.n	80008f4 <rxATcommand+0x304>
						if (strstr((char*)oldModem2, (char*)"t2"))
 8000912:	4991      	ldr	r1, [pc, #580]	; (8000b58 <rxATcommand+0x568>)
 8000914:	488e      	ldr	r0, [pc, #568]	; (8000b50 <rxATcommand+0x560>)
 8000916:	f003 fb58 	bl	8003fca <strstr>
 800091a:	4603      	mov	r3, r0
 800091c:	2b00      	cmp	r3, #0
 800091e:	d011      	beq.n	8000944 <rxATcommand+0x354>
							for (int i = 0; i<11; i++) tnumber2[i] = oldModem2[i+26];
 8000920:	2300      	movs	r3, #0
 8000922:	623b      	str	r3, [r7, #32]
 8000924:	e00b      	b.n	800093e <rxATcommand+0x34e>
 8000926:	6a3b      	ldr	r3, [r7, #32]
 8000928:	331a      	adds	r3, #26
 800092a:	4a89      	ldr	r2, [pc, #548]	; (8000b50 <rxATcommand+0x560>)
 800092c:	5cd1      	ldrb	r1, [r2, r3]
 800092e:	4a8b      	ldr	r2, [pc, #556]	; (8000b5c <rxATcommand+0x56c>)
 8000930:	6a3b      	ldr	r3, [r7, #32]
 8000932:	4413      	add	r3, r2
 8000934:	460a      	mov	r2, r1
 8000936:	701a      	strb	r2, [r3, #0]
 8000938:	6a3b      	ldr	r3, [r7, #32]
 800093a:	3301      	adds	r3, #1
 800093c:	623b      	str	r3, [r7, #32]
 800093e:	6a3b      	ldr	r3, [r7, #32]
 8000940:	2b0a      	cmp	r3, #10
 8000942:	ddf0      	ble.n	8000926 <rxATcommand+0x336>
						if (strstr((char*)oldModem2, (char*)"t3"))
 8000944:	4986      	ldr	r1, [pc, #536]	; (8000b60 <rxATcommand+0x570>)
 8000946:	4882      	ldr	r0, [pc, #520]	; (8000b50 <rxATcommand+0x560>)
 8000948:	f003 fb3f 	bl	8003fca <strstr>
 800094c:	4603      	mov	r3, r0
 800094e:	2b00      	cmp	r3, #0
 8000950:	d011      	beq.n	8000976 <rxATcommand+0x386>
							for (int i = 0; i<11; i++) tnumber3[i] = oldModem2[i+45];
 8000952:	2300      	movs	r3, #0
 8000954:	61fb      	str	r3, [r7, #28]
 8000956:	e00b      	b.n	8000970 <rxATcommand+0x380>
 8000958:	69fb      	ldr	r3, [r7, #28]
 800095a:	332d      	adds	r3, #45	; 0x2d
 800095c:	4a7c      	ldr	r2, [pc, #496]	; (8000b50 <rxATcommand+0x560>)
 800095e:	5cd1      	ldrb	r1, [r2, r3]
 8000960:	4a80      	ldr	r2, [pc, #512]	; (8000b64 <rxATcommand+0x574>)
 8000962:	69fb      	ldr	r3, [r7, #28]
 8000964:	4413      	add	r3, r2
 8000966:	460a      	mov	r2, r1
 8000968:	701a      	strb	r2, [r3, #0]
 800096a:	69fb      	ldr	r3, [r7, #28]
 800096c:	3301      	adds	r3, #1
 800096e:	61fb      	str	r3, [r7, #28]
 8000970:	69fb      	ldr	r3, [r7, #28]
 8000972:	2b0a      	cmp	r3, #10
 8000974:	ddf0      	ble.n	8000958 <rxATcommand+0x368>
						checkPhones = false;
 8000976:	4b74      	ldr	r3, [pc, #464]	; (8000b48 <rxATcommand+0x558>)
 8000978:	2200      	movs	r2, #0
 800097a:	701a      	strb	r2, [r3, #0]
 800097c:	e05e      	b.n	8000a3c <rxATcommand+0x44c>
					}
					else if (strstr((char*)oldModem2, "phones")) {
 800097e:	497a      	ldr	r1, [pc, #488]	; (8000b68 <rxATcommand+0x578>)
 8000980:	4873      	ldr	r0, [pc, #460]	; (8000b50 <rxATcommand+0x560>)
 8000982:	f003 fb22 	bl	8003fca <strstr>
 8000986:	4603      	mov	r3, r0
 8000988:	2b00      	cmp	r3, #0
 800098a:	d006      	beq.n	800099a <rxATcommand+0x3aa>
						checkPhones = true;
 800098c:	4b6e      	ldr	r3, [pc, #440]	; (8000b48 <rxATcommand+0x558>)
 800098e:	2201      	movs	r2, #1
 8000990:	701a      	strb	r2, [r3, #0]
						answ = false;
 8000992:	4b6b      	ldr	r3, [pc, #428]	; (8000b40 <rxATcommand+0x550>)
 8000994:	2200      	movs	r2, #0
 8000996:	701a      	strb	r2, [r3, #0]
 8000998:	e050      	b.n	8000a3c <rxATcommand+0x44c>
					}
					else if (strstr((char*)oldModem2, "res")) {
 800099a:	4974      	ldr	r1, [pc, #464]	; (8000b6c <rxATcommand+0x57c>)
 800099c:	486c      	ldr	r0, [pc, #432]	; (8000b50 <rxATcommand+0x560>)
 800099e:	f003 fb14 	bl	8003fca <strstr>
 80009a2:	4603      	mov	r3, r0
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d049      	beq.n	8000a3c <rxATcommand+0x44c>
						if (oldModem2[6]=='t') {
 80009a8:	4b69      	ldr	r3, [pc, #420]	; (8000b50 <rxATcommand+0x560>)
 80009aa:	799b      	ldrb	r3, [r3, #6]
 80009ac:	2b74      	cmp	r3, #116	; 0x74
 80009ae:	d112      	bne.n	80009d6 <rxATcommand+0x3e6>
							memset(smsText, 0, strlen(smsText));
 80009b0:	486f      	ldr	r0, [pc, #444]	; (8000b70 <rxATcommand+0x580>)
 80009b2:	f7ff fbcb 	bl	800014c <strlen>
 80009b6:	4603      	mov	r3, r0
 80009b8:	461a      	mov	r2, r3
 80009ba:	2100      	movs	r1, #0
 80009bc:	486c      	ldr	r0, [pc, #432]	; (8000b70 <rxATcommand+0x580>)
 80009be:	f003 f9a7 	bl	8003d10 <memset>
							buttStart();
 80009c2:	f7ff fc19 	bl	80001f8 <buttStart>
							strcpy(smsText, (uint8_t*)"Start");
 80009c6:	4b6a      	ldr	r3, [pc, #424]	; (8000b70 <rxATcommand+0x580>)
 80009c8:	4a6a      	ldr	r2, [pc, #424]	; (8000b74 <rxATcommand+0x584>)
 80009ca:	e892 0003 	ldmia.w	r2, {r0, r1}
 80009ce:	6018      	str	r0, [r3, #0]
 80009d0:	3304      	adds	r3, #4
 80009d2:	8019      	strh	r1, [r3, #0]
 80009d4:	e02f      	b.n	8000a36 <rxATcommand+0x446>
						}
						else if (oldModem2[17]=='t') {
 80009d6:	4b5e      	ldr	r3, [pc, #376]	; (8000b50 <rxATcommand+0x560>)
 80009d8:	7c5b      	ldrb	r3, [r3, #17]
 80009da:	2b74      	cmp	r3, #116	; 0x74
 80009dc:	d112      	bne.n	8000a04 <rxATcommand+0x414>
							memset(smsText, 0, strlen(smsText));
 80009de:	4864      	ldr	r0, [pc, #400]	; (8000b70 <rxATcommand+0x580>)
 80009e0:	f7ff fbb4 	bl	800014c <strlen>
 80009e4:	4603      	mov	r3, r0
 80009e6:	461a      	mov	r2, r3
 80009e8:	2100      	movs	r1, #0
 80009ea:	4861      	ldr	r0, [pc, #388]	; (8000b70 <rxATcommand+0x580>)
 80009ec:	f003 f990 	bl	8003d10 <memset>
							buttOpen();
 80009f0:	f7ff fc26 	bl	8000240 <buttOpen>
							strcpy(smsText, (uint8_t*)"Open");
 80009f4:	4b5e      	ldr	r3, [pc, #376]	; (8000b70 <rxATcommand+0x580>)
 80009f6:	4a60      	ldr	r2, [pc, #384]	; (8000b78 <rxATcommand+0x588>)
 80009f8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80009fc:	6018      	str	r0, [r3, #0]
 80009fe:	3304      	adds	r3, #4
 8000a00:	7019      	strb	r1, [r3, #0]
 8000a02:	e018      	b.n	8000a36 <rxATcommand+0x446>
						}
						else if (oldModem2[28]=='t') {
 8000a04:	4b52      	ldr	r3, [pc, #328]	; (8000b50 <rxATcommand+0x560>)
 8000a06:	7f1b      	ldrb	r3, [r3, #28]
 8000a08:	2b74      	cmp	r3, #116	; 0x74
 8000a0a:	d114      	bne.n	8000a36 <rxATcommand+0x446>
							memset(smsText, 0, strlen(smsText));
 8000a0c:	4858      	ldr	r0, [pc, #352]	; (8000b70 <rxATcommand+0x580>)
 8000a0e:	f7ff fb9d 	bl	800014c <strlen>
 8000a12:	4603      	mov	r3, r0
 8000a14:	461a      	mov	r2, r3
 8000a16:	2100      	movs	r1, #0
 8000a18:	4855      	ldr	r0, [pc, #340]	; (8000b70 <rxATcommand+0x580>)
 8000a1a:	f003 f979 	bl	8003d10 <memset>
							buttClose();
 8000a1e:	f7ff fc47 	bl	80002b0 <buttClose>
							strcpy(smsText, (uint8_t*)"Closed");
 8000a22:	4b53      	ldr	r3, [pc, #332]	; (8000b70 <rxATcommand+0x580>)
 8000a24:	4a55      	ldr	r2, [pc, #340]	; (8000b7c <rxATcommand+0x58c>)
 8000a26:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000a2a:	6018      	str	r0, [r3, #0]
 8000a2c:	3304      	adds	r3, #4
 8000a2e:	8019      	strh	r1, [r3, #0]
 8000a30:	3302      	adds	r3, #2
 8000a32:	0c0a      	lsrs	r2, r1, #16
 8000a34:	701a      	strb	r2, [r3, #0]
						}
						answ = true;
 8000a36:	4b42      	ldr	r3, [pc, #264]	; (8000b40 <rxATcommand+0x550>)
 8000a38:	2201      	movs	r2, #1
 8000a3a:	701a      	strb	r2, [r3, #0]
					}
					step=7;
 8000a3c:	4b50      	ldr	r3, [pc, #320]	; (8000b80 <rxATcommand+0x590>)
 8000a3e:	2207      	movs	r2, #7
 8000a40:	601a      	str	r2, [r3, #0]
 8000a42:	e005      	b.n	8000a50 <rxATcommand+0x460>
				}
				else {
					step=10;
 8000a44:	4b4e      	ldr	r3, [pc, #312]	; (8000b80 <rxATcommand+0x590>)
 8000a46:	220a      	movs	r2, #10
 8000a48:	601a      	str	r2, [r3, #0]
					answ = false;
 8000a4a:	4b3d      	ldr	r3, [pc, #244]	; (8000b40 <rxATcommand+0x550>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	701a      	strb	r2, [r3, #0]
				}
				ready=true;
 8000a50:	4b4c      	ldr	r3, [pc, #304]	; (8000b84 <rxATcommand+0x594>)
 8000a52:	2201      	movs	r2, #1
 8000a54:	701a      	strb	r2, [r3, #0]
				else step=10;
				answ = false;
				ready=true;
				memset(smsText, 0, strlen(smsText));
			}
			break;
 8000a56:	e17c      	b.n	8000d52 <rxATcommand+0x762>
				if (strstr((char*)text, (char*)"OK")) step++;
 8000a58:	493a      	ldr	r1, [pc, #232]	; (8000b44 <rxATcommand+0x554>)
 8000a5a:	6878      	ldr	r0, [r7, #4]
 8000a5c:	f003 fab5 	bl	8003fca <strstr>
 8000a60:	4603      	mov	r3, r0
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d005      	beq.n	8000a72 <rxATcommand+0x482>
 8000a66:	4b46      	ldr	r3, [pc, #280]	; (8000b80 <rxATcommand+0x590>)
 8000a68:	681b      	ldr	r3, [r3, #0]
 8000a6a:	3301      	adds	r3, #1
 8000a6c:	4a44      	ldr	r2, [pc, #272]	; (8000b80 <rxATcommand+0x590>)
 8000a6e:	6013      	str	r3, [r2, #0]
 8000a70:	e002      	b.n	8000a78 <rxATcommand+0x488>
				else step=10;
 8000a72:	4b43      	ldr	r3, [pc, #268]	; (8000b80 <rxATcommand+0x590>)
 8000a74:	220a      	movs	r2, #10
 8000a76:	601a      	str	r2, [r3, #0]
				answ = false;
 8000a78:	4b31      	ldr	r3, [pc, #196]	; (8000b40 <rxATcommand+0x550>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	701a      	strb	r2, [r3, #0]
				ready=true;
 8000a7e:	4b41      	ldr	r3, [pc, #260]	; (8000b84 <rxATcommand+0x594>)
 8000a80:	2201      	movs	r2, #1
 8000a82:	701a      	strb	r2, [r3, #0]
				memset(smsText, 0, strlen(smsText));
 8000a84:	483a      	ldr	r0, [pc, #232]	; (8000b70 <rxATcommand+0x580>)
 8000a86:	f7ff fb61 	bl	800014c <strlen>
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	461a      	mov	r2, r3
 8000a8e:	2100      	movs	r1, #0
 8000a90:	4837      	ldr	r0, [pc, #220]	; (8000b70 <rxATcommand+0x580>)
 8000a92:	f003 f93d 	bl	8003d10 <memset>
			break;
 8000a96:	e15c      	b.n	8000d52 <rxATcommand+0x762>
		}
		case 10: {
			if (strstr((char*)text, (char*)"OK")) step=11;
 8000a98:	492a      	ldr	r1, [pc, #168]	; (8000b44 <rxATcommand+0x554>)
 8000a9a:	6878      	ldr	r0, [r7, #4]
 8000a9c:	f003 fa95 	bl	8003fca <strstr>
 8000aa0:	4603      	mov	r3, r0
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d003      	beq.n	8000aae <rxATcommand+0x4be>
 8000aa6:	4b36      	ldr	r3, [pc, #216]	; (8000b80 <rxATcommand+0x590>)
 8000aa8:	220b      	movs	r2, #11
 8000aaa:	601a      	str	r2, [r3, #0]
 8000aac:	e009      	b.n	8000ac2 <rxATcommand+0x4d2>
			else if (strstr((char*)text, (char*)"ERROR")) step=11;
 8000aae:	4936      	ldr	r1, [pc, #216]	; (8000b88 <rxATcommand+0x598>)
 8000ab0:	6878      	ldr	r0, [r7, #4]
 8000ab2:	f003 fa8a 	bl	8003fca <strstr>
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d002      	beq.n	8000ac2 <rxATcommand+0x4d2>
 8000abc:	4b30      	ldr	r3, [pc, #192]	; (8000b80 <rxATcommand+0x590>)
 8000abe:	220b      	movs	r2, #11
 8000ac0:	601a      	str	r2, [r3, #0]
			ready=true;
 8000ac2:	4b30      	ldr	r3, [pc, #192]	; (8000b84 <rxATcommand+0x594>)
 8000ac4:	2201      	movs	r2, #1
 8000ac6:	701a      	strb	r2, [r3, #0]
			break;
 8000ac8:	e143      	b.n	8000d52 <rxATcommand+0x762>
		}
		case 11: {
			if (strstr((char*)text, (char*)"OK")) step=12;
 8000aca:	491e      	ldr	r1, [pc, #120]	; (8000b44 <rxATcommand+0x554>)
 8000acc:	6878      	ldr	r0, [r7, #4]
 8000ace:	f003 fa7c 	bl	8003fca <strstr>
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d003      	beq.n	8000ae0 <rxATcommand+0x4f0>
 8000ad8:	4b29      	ldr	r3, [pc, #164]	; (8000b80 <rxATcommand+0x590>)
 8000ada:	220c      	movs	r2, #12
 8000adc:	601a      	str	r2, [r3, #0]
 8000ade:	e002      	b.n	8000ae6 <rxATcommand+0x4f6>
			else step=0;
 8000ae0:	4b27      	ldr	r3, [pc, #156]	; (8000b80 <rxATcommand+0x590>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	601a      	str	r2, [r3, #0]
			ready=true;
 8000ae6:	4b27      	ldr	r3, [pc, #156]	; (8000b84 <rxATcommand+0x594>)
 8000ae8:	2201      	movs	r2, #1
 8000aea:	701a      	strb	r2, [r3, #0]
			break;
 8000aec:	e131      	b.n	8000d52 <rxATcommand+0x762>
		}
		case 12: {
			if (strstr((char*)text, (char*)"CMTI")) {
 8000aee:	4927      	ldr	r1, [pc, #156]	; (8000b8c <rxATcommand+0x59c>)
 8000af0:	6878      	ldr	r0, [r7, #4]
 8000af2:	f003 fa6a 	bl	8003fca <strstr>
 8000af6:	4603      	mov	r3, r0
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d06a      	beq.n	8000bd2 <rxATcommand+0x5e2>
				bool start = false;
 8000afc:	2300      	movs	r3, #0
 8000afe:	76fb      	strb	r3, [r7, #27]
				int j = 0;
 8000b00:	2300      	movs	r3, #0
 8000b02:	617b      	str	r3, [r7, #20]
				for (int i = 0; i<250; i++) {
 8000b04:	2300      	movs	r3, #0
 8000b06:	613b      	str	r3, [r7, #16]
 8000b08:	e05c      	b.n	8000bc4 <rxATcommand+0x5d4>
					if (start) {
 8000b0a:	7efb      	ldrb	r3, [r7, #27]
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d04e      	beq.n	8000bae <rxATcommand+0x5be>
						if ((text[i]=='\r')||(text[i]=='\n')||(text[i]=='\0')) {
 8000b10:	693b      	ldr	r3, [r7, #16]
 8000b12:	687a      	ldr	r2, [r7, #4]
 8000b14:	4413      	add	r3, r2
 8000b16:	781b      	ldrb	r3, [r3, #0]
 8000b18:	2b0d      	cmp	r3, #13
 8000b1a:	d00b      	beq.n	8000b34 <rxATcommand+0x544>
 8000b1c:	693b      	ldr	r3, [r7, #16]
 8000b1e:	687a      	ldr	r2, [r7, #4]
 8000b20:	4413      	add	r3, r2
 8000b22:	781b      	ldrb	r3, [r3, #0]
 8000b24:	2b0a      	cmp	r3, #10
 8000b26:	d005      	beq.n	8000b34 <rxATcommand+0x544>
 8000b28:	693b      	ldr	r3, [r7, #16]
 8000b2a:	687a      	ldr	r2, [r7, #4]
 8000b2c:	4413      	add	r3, r2
 8000b2e:	781b      	ldrb	r3, [r3, #0]
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d12f      	bne.n	8000b94 <rxATcommand+0x5a4>
							smsNum[j]='!';  //стоп-символ
 8000b34:	4a16      	ldr	r2, [pc, #88]	; (8000b90 <rxATcommand+0x5a0>)
 8000b36:	697b      	ldr	r3, [r7, #20]
 8000b38:	4413      	add	r3, r2
 8000b3a:	2221      	movs	r2, #33	; 0x21
 8000b3c:	701a      	strb	r2, [r3, #0]
							break;
 8000b3e:	e044      	b.n	8000bca <rxATcommand+0x5da>
 8000b40:	200008c1 	.word	0x200008c1
 8000b44:	0800488c 	.word	0x0800488c
 8000b48:	20000048 	.word	0x20000048
 8000b4c:	080048c8 	.word	0x080048c8
 8000b50:	2000057c 	.word	0x2000057c
 8000b54:	20000014 	.word	0x20000014
 8000b58:	080048cc 	.word	0x080048cc
 8000b5c:	20000020 	.word	0x20000020
 8000b60:	080048d0 	.word	0x080048d0
 8000b64:	2000002c 	.word	0x2000002c
 8000b68:	080048d4 	.word	0x080048d4
 8000b6c:	080048dc 	.word	0x080048dc
 8000b70:	20000008 	.word	0x20000008
 8000b74:	080048e0 	.word	0x080048e0
 8000b78:	080048e8 	.word	0x080048e8
 8000b7c:	080048f0 	.word	0x080048f0
 8000b80:	200008b8 	.word	0x200008b8
 8000b84:	200008c0 	.word	0x200008c0
 8000b88:	080048a4 	.word	0x080048a4
 8000b8c:	08004890 	.word	0x08004890
 8000b90:	20000870 	.word	0x20000870
						}
						else {
							smsNum[j]=text[i];
 8000b94:	693b      	ldr	r3, [r7, #16]
 8000b96:	687a      	ldr	r2, [r7, #4]
 8000b98:	4413      	add	r3, r2
 8000b9a:	7819      	ldrb	r1, [r3, #0]
 8000b9c:	4a6f      	ldr	r2, [pc, #444]	; (8000d5c <rxATcommand+0x76c>)
 8000b9e:	697b      	ldr	r3, [r7, #20]
 8000ba0:	4413      	add	r3, r2
 8000ba2:	460a      	mov	r2, r1
 8000ba4:	701a      	strb	r2, [r3, #0]
							j++;
 8000ba6:	697b      	ldr	r3, [r7, #20]
 8000ba8:	3301      	adds	r3, #1
 8000baa:	617b      	str	r3, [r7, #20]
 8000bac:	e007      	b.n	8000bbe <rxATcommand+0x5ce>
						}
					}
					else if (text[i]==',') start = true;
 8000bae:	693b      	ldr	r3, [r7, #16]
 8000bb0:	687a      	ldr	r2, [r7, #4]
 8000bb2:	4413      	add	r3, r2
 8000bb4:	781b      	ldrb	r3, [r3, #0]
 8000bb6:	2b2c      	cmp	r3, #44	; 0x2c
 8000bb8:	d101      	bne.n	8000bbe <rxATcommand+0x5ce>
 8000bba:	2301      	movs	r3, #1
 8000bbc:	76fb      	strb	r3, [r7, #27]
				for (int i = 0; i<250; i++) {
 8000bbe:	693b      	ldr	r3, [r7, #16]
 8000bc0:	3301      	adds	r3, #1
 8000bc2:	613b      	str	r3, [r7, #16]
 8000bc4:	693b      	ldr	r3, [r7, #16]
 8000bc6:	2bf9      	cmp	r3, #249	; 0xf9
 8000bc8:	dd9f      	ble.n	8000b0a <rxATcommand+0x51a>
				}
				step=20;
 8000bca:	4b65      	ldr	r3, [pc, #404]	; (8000d60 <rxATcommand+0x770>)
 8000bcc:	2214      	movs	r2, #20
 8000bce:	601a      	str	r2, [r3, #0]
 8000bd0:	e002      	b.n	8000bd8 <rxATcommand+0x5e8>
			}
			else step=12;
 8000bd2:	4b63      	ldr	r3, [pc, #396]	; (8000d60 <rxATcommand+0x770>)
 8000bd4:	220c      	movs	r2, #12
 8000bd6:	601a      	str	r2, [r3, #0]
			ready=true;
 8000bd8:	4b62      	ldr	r3, [pc, #392]	; (8000d64 <rxATcommand+0x774>)
 8000bda:	2201      	movs	r2, #1
 8000bdc:	701a      	strb	r2, [r3, #0]
			break;
 8000bde:	e0b8      	b.n	8000d52 <rxATcommand+0x762>
		}
		case 20: {
			if (strstr((char*)text, (char*)"OK")) step++;
 8000be0:	4961      	ldr	r1, [pc, #388]	; (8000d68 <rxATcommand+0x778>)
 8000be2:	6878      	ldr	r0, [r7, #4]
 8000be4:	f003 f9f1 	bl	8003fca <strstr>
 8000be8:	4603      	mov	r3, r0
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d005      	beq.n	8000bfa <rxATcommand+0x60a>
 8000bee:	4b5c      	ldr	r3, [pc, #368]	; (8000d60 <rxATcommand+0x770>)
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	3301      	adds	r3, #1
 8000bf4:	4a5a      	ldr	r2, [pc, #360]	; (8000d60 <rxATcommand+0x770>)
 8000bf6:	6013      	str	r3, [r2, #0]
 8000bf8:	e002      	b.n	8000c00 <rxATcommand+0x610>
			else step=12;
 8000bfa:	4b59      	ldr	r3, [pc, #356]	; (8000d60 <rxATcommand+0x770>)
 8000bfc:	220c      	movs	r2, #12
 8000bfe:	601a      	str	r2, [r3, #0]
			ready=true;
 8000c00:	4b58      	ldr	r3, [pc, #352]	; (8000d64 <rxATcommand+0x774>)
 8000c02:	2201      	movs	r2, #1
 8000c04:	701a      	strb	r2, [r3, #0]
			break;
 8000c06:	e0a4      	b.n	8000d52 <rxATcommand+0x762>
		}
		case 21: {
			memset(smsText, 0, sizeof(smsText));
 8000c08:	2206      	movs	r2, #6
 8000c0a:	2100      	movs	r1, #0
 8000c0c:	4857      	ldr	r0, [pc, #348]	; (8000d6c <rxATcommand+0x77c>)
 8000c0e:	f003 f87f 	bl	8003d10 <memset>
			strcpy(smsText, oldModem3);
 8000c12:	4957      	ldr	r1, [pc, #348]	; (8000d70 <rxATcommand+0x780>)
 8000c14:	4855      	ldr	r0, [pc, #340]	; (8000d6c <rxATcommand+0x77c>)
 8000c16:	f003 f9d0 	bl	8003fba <strcpy>
			bool numberCorrect = false;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	73fb      	strb	r3, [r7, #15]
			if (strstr((char*)oldModem4, (char*)tnumber1)) numberCorrect=true;
 8000c1e:	4955      	ldr	r1, [pc, #340]	; (8000d74 <rxATcommand+0x784>)
 8000c20:	4855      	ldr	r0, [pc, #340]	; (8000d78 <rxATcommand+0x788>)
 8000c22:	f003 f9d2 	bl	8003fca <strstr>
 8000c26:	4603      	mov	r3, r0
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d002      	beq.n	8000c32 <rxATcommand+0x642>
 8000c2c:	2301      	movs	r3, #1
 8000c2e:	73fb      	strb	r3, [r7, #15]
 8000c30:	e012      	b.n	8000c58 <rxATcommand+0x668>
			else if (strstr((char*)oldModem4, (char*)tnumber2)) numberCorrect=true;
 8000c32:	4952      	ldr	r1, [pc, #328]	; (8000d7c <rxATcommand+0x78c>)
 8000c34:	4850      	ldr	r0, [pc, #320]	; (8000d78 <rxATcommand+0x788>)
 8000c36:	f003 f9c8 	bl	8003fca <strstr>
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d002      	beq.n	8000c46 <rxATcommand+0x656>
 8000c40:	2301      	movs	r3, #1
 8000c42:	73fb      	strb	r3, [r7, #15]
 8000c44:	e008      	b.n	8000c58 <rxATcommand+0x668>
			else if (strstr((char*)oldModem4, (char*)tnumber3)) numberCorrect=true;
 8000c46:	494e      	ldr	r1, [pc, #312]	; (8000d80 <rxATcommand+0x790>)
 8000c48:	484b      	ldr	r0, [pc, #300]	; (8000d78 <rxATcommand+0x788>)
 8000c4a:	f003 f9be 	bl	8003fca <strstr>
 8000c4e:	4603      	mov	r3, r0
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d001      	beq.n	8000c58 <rxATcommand+0x668>
 8000c54:	2301      	movs	r3, #1
 8000c56:	73fb      	strb	r3, [r7, #15]
			if (numberCorrect) {
 8000c58:	7bfb      	ldrb	r3, [r7, #15]
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d022      	beq.n	8000ca4 <rxATcommand+0x6b4>
				if (strstr(oldModem3, "tart")) {
 8000c5e:	4949      	ldr	r1, [pc, #292]	; (8000d84 <rxATcommand+0x794>)
 8000c60:	4843      	ldr	r0, [pc, #268]	; (8000d70 <rxATcommand+0x780>)
 8000c62:	f003 f9b2 	bl	8003fca <strstr>
 8000c66:	4603      	mov	r3, r0
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d002      	beq.n	8000c72 <rxATcommand+0x682>
					buttStart();
 8000c6c:	f7ff fac4 	bl	80001f8 <buttStart>
 8000c70:	e012      	b.n	8000c98 <rxATcommand+0x6a8>
				}
				else if (strstr(oldModem3, "pen")) {
 8000c72:	4945      	ldr	r1, [pc, #276]	; (8000d88 <rxATcommand+0x798>)
 8000c74:	483e      	ldr	r0, [pc, #248]	; (8000d70 <rxATcommand+0x780>)
 8000c76:	f003 f9a8 	bl	8003fca <strstr>
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d002      	beq.n	8000c86 <rxATcommand+0x696>
					buttOpen();
 8000c80:	f7ff fade 	bl	8000240 <buttOpen>
 8000c84:	e008      	b.n	8000c98 <rxATcommand+0x6a8>
				}
				else if (strstr(oldModem3, "lose")) {
 8000c86:	4941      	ldr	r1, [pc, #260]	; (8000d8c <rxATcommand+0x79c>)
 8000c88:	4839      	ldr	r0, [pc, #228]	; (8000d70 <rxATcommand+0x780>)
 8000c8a:	f003 f99e 	bl	8003fca <strstr>
 8000c8e:	4603      	mov	r3, r0
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d001      	beq.n	8000c98 <rxATcommand+0x6a8>
					buttClose();
 8000c94:	f7ff fb0c 	bl	80002b0 <buttClose>
				}
				step++;
 8000c98:	4b31      	ldr	r3, [pc, #196]	; (8000d60 <rxATcommand+0x770>)
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	3301      	adds	r3, #1
 8000c9e:	4a30      	ldr	r2, [pc, #192]	; (8000d60 <rxATcommand+0x770>)
 8000ca0:	6013      	str	r3, [r2, #0]
 8000ca2:	e011      	b.n	8000cc8 <rxATcommand+0x6d8>
			}
			else {
				step = 0;
 8000ca4:	4b2e      	ldr	r3, [pc, #184]	; (8000d60 <rxATcommand+0x770>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	601a      	str	r2, [r3, #0]
				strncat(smsText, (uint8_t*)"-stranger", 9);
 8000caa:	4830      	ldr	r0, [pc, #192]	; (8000d6c <rxATcommand+0x77c>)
 8000cac:	f7ff fa4e 	bl	800014c <strlen>
 8000cb0:	4603      	mov	r3, r0
 8000cb2:	461a      	mov	r2, r3
 8000cb4:	4b2d      	ldr	r3, [pc, #180]	; (8000d6c <rxATcommand+0x77c>)
 8000cb6:	4413      	add	r3, r2
 8000cb8:	4935      	ldr	r1, [pc, #212]	; (8000d90 <rxATcommand+0x7a0>)
 8000cba:	461a      	mov	r2, r3
 8000cbc:	460b      	mov	r3, r1
 8000cbe:	cb03      	ldmia	r3!, {r0, r1}
 8000cc0:	6010      	str	r0, [r2, #0]
 8000cc2:	6051      	str	r1, [r2, #4]
 8000cc4:	881b      	ldrh	r3, [r3, #0]
 8000cc6:	8113      	strh	r3, [r2, #8]
			}
			ready=true;
 8000cc8:	4b26      	ldr	r3, [pc, #152]	; (8000d64 <rxATcommand+0x774>)
 8000cca:	2201      	movs	r2, #1
 8000ccc:	701a      	strb	r2, [r3, #0]
			break;
 8000cce:	e040      	b.n	8000d52 <rxATcommand+0x762>
		}
		case 22: {
			step++;
 8000cd0:	4b23      	ldr	r3, [pc, #140]	; (8000d60 <rxATcommand+0x770>)
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	3301      	adds	r3, #1
 8000cd6:	4a22      	ldr	r2, [pc, #136]	; (8000d60 <rxATcommand+0x770>)
 8000cd8:	6013      	str	r3, [r2, #0]
			ready=true;
 8000cda:	4b22      	ldr	r3, [pc, #136]	; (8000d64 <rxATcommand+0x774>)
 8000cdc:	2201      	movs	r2, #1
 8000cde:	701a      	strb	r2, [r3, #0]
			break;
 8000ce0:	e037      	b.n	8000d52 <rxATcommand+0x762>
		}
		case 23: {
			step++;
 8000ce2:	4b1f      	ldr	r3, [pc, #124]	; (8000d60 <rxATcommand+0x770>)
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	3301      	adds	r3, #1
 8000ce8:	4a1d      	ldr	r2, [pc, #116]	; (8000d60 <rxATcommand+0x770>)
 8000cea:	6013      	str	r3, [r2, #0]
			ready=true;
 8000cec:	4b1d      	ldr	r3, [pc, #116]	; (8000d64 <rxATcommand+0x774>)
 8000cee:	2201      	movs	r2, #1
 8000cf0:	701a      	strb	r2, [r3, #0]
			break;
 8000cf2:	e02e      	b.n	8000d52 <rxATcommand+0x762>
		}
		case 24: {
			if (strstr((char*)text, (char*)"OK")) {
 8000cf4:	491c      	ldr	r1, [pc, #112]	; (8000d68 <rxATcommand+0x778>)
 8000cf6:	6878      	ldr	r0, [r7, #4]
 8000cf8:	f003 f967 	bl	8003fca <strstr>
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d00c      	beq.n	8000d1c <rxATcommand+0x72c>
				if (stopStep==12) step=0;
 8000d02:	4b24      	ldr	r3, [pc, #144]	; (8000d94 <rxATcommand+0x7a4>)
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	2b0c      	cmp	r3, #12
 8000d08:	d103      	bne.n	8000d12 <rxATcommand+0x722>
 8000d0a:	4b15      	ldr	r3, [pc, #84]	; (8000d60 <rxATcommand+0x770>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	601a      	str	r2, [r3, #0]
 8000d10:	e01b      	b.n	8000d4a <rxATcommand+0x75a>
				else step=stopStep;
 8000d12:	4b20      	ldr	r3, [pc, #128]	; (8000d94 <rxATcommand+0x7a4>)
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	4a12      	ldr	r2, [pc, #72]	; (8000d60 <rxATcommand+0x770>)
 8000d18:	6013      	str	r3, [r2, #0]
 8000d1a:	e016      	b.n	8000d4a <rxATcommand+0x75a>
			}
			else if (strstr((char*)text, (char*)">")) {
 8000d1c:	213e      	movs	r1, #62	; 0x3e
 8000d1e:	6878      	ldr	r0, [r7, #4]
 8000d20:	f003 f93e 	bl	8003fa0 <strchr>
 8000d24:	4603      	mov	r3, r0
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d00c      	beq.n	8000d44 <rxATcommand+0x754>
				if (stopStep==12) step=0;
 8000d2a:	4b1a      	ldr	r3, [pc, #104]	; (8000d94 <rxATcommand+0x7a4>)
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	2b0c      	cmp	r3, #12
 8000d30:	d103      	bne.n	8000d3a <rxATcommand+0x74a>
 8000d32:	4b0b      	ldr	r3, [pc, #44]	; (8000d60 <rxATcommand+0x770>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	601a      	str	r2, [r3, #0]
 8000d38:	e007      	b.n	8000d4a <rxATcommand+0x75a>
				else step=stopStep;
 8000d3a:	4b16      	ldr	r3, [pc, #88]	; (8000d94 <rxATcommand+0x7a4>)
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	4a08      	ldr	r2, [pc, #32]	; (8000d60 <rxATcommand+0x770>)
 8000d40:	6013      	str	r3, [r2, #0]
 8000d42:	e002      	b.n	8000d4a <rxATcommand+0x75a>
			}
			else {
				step=12;
 8000d44:	4b06      	ldr	r3, [pc, #24]	; (8000d60 <rxATcommand+0x770>)
 8000d46:	220c      	movs	r2, #12
 8000d48:	601a      	str	r2, [r3, #0]
			}
			ready=true;
 8000d4a:	4b06      	ldr	r3, [pc, #24]	; (8000d64 <rxATcommand+0x774>)
 8000d4c:	2201      	movs	r2, #1
 8000d4e:	701a      	strb	r2, [r3, #0]
			break;
 8000d50:	bf00      	nop
		}
	}
}
 8000d52:	bf00      	nop
 8000d54:	3728      	adds	r7, #40	; 0x28
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bd80      	pop	{r7, pc}
 8000d5a:	bf00      	nop
 8000d5c:	20000870 	.word	0x20000870
 8000d60:	200008b8 	.word	0x200008b8
 8000d64:	200008c0 	.word	0x200008c0
 8000d68:	0800488c 	.word	0x0800488c
 8000d6c:	20000008 	.word	0x20000008
 8000d70:	20000678 	.word	0x20000678
 8000d74:	20000014 	.word	0x20000014
 8000d78:	20000774 	.word	0x20000774
 8000d7c:	20000020 	.word	0x20000020
 8000d80:	2000002c 	.word	0x2000002c
 8000d84:	080048f8 	.word	0x080048f8
 8000d88:	08004900 	.word	0x08004900
 8000d8c:	08004904 	.word	0x08004904
 8000d90:	0800490c 	.word	0x0800490c
 8000d94:	200000dc 	.word	0x200000dc

08000d98 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b088      	sub	sp, #32
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
	if (huart == &huart2) {
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	4a80      	ldr	r2, [pc, #512]	; (8000fa4 <HAL_UART_RxCpltCallback+0x20c>)
 8000da4:	4293      	cmp	r3, r2
 8000da6:	f040 809a 	bne.w	8000ede <HAL_UART_RxCpltCallback+0x146>
		if (str[0]!='\n') {
 8000daa:	4b7f      	ldr	r3, [pc, #508]	; (8000fa8 <HAL_UART_RxCpltCallback+0x210>)
 8000dac:	781b      	ldrb	r3, [r3, #0]
 8000dae:	2b0a      	cmp	r3, #10
 8000db0:	d00b      	beq.n	8000dca <HAL_UART_RxCpltCallback+0x32>
			modemString2[modemStringLength2] = str[0];
 8000db2:	4b7e      	ldr	r3, [pc, #504]	; (8000fac <HAL_UART_RxCpltCallback+0x214>)
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	4a7c      	ldr	r2, [pc, #496]	; (8000fa8 <HAL_UART_RxCpltCallback+0x210>)
 8000db8:	7811      	ldrb	r1, [r2, #0]
 8000dba:	4a7d      	ldr	r2, [pc, #500]	; (8000fb0 <HAL_UART_RxCpltCallback+0x218>)
 8000dbc:	54d1      	strb	r1, [r2, r3]
			modemStringLength2++;
 8000dbe:	4b7b      	ldr	r3, [pc, #492]	; (8000fac <HAL_UART_RxCpltCallback+0x214>)
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	3301      	adds	r3, #1
 8000dc4:	4a79      	ldr	r2, [pc, #484]	; (8000fac <HAL_UART_RxCpltCallback+0x214>)
 8000dc6:	6013      	str	r3, [r2, #0]
 8000dc8:	e083      	b.n	8000ed2 <HAL_UART_RxCpltCallback+0x13a>
		}
		else {
			modemString2[modemStringLength2] = str[0];
 8000dca:	4b78      	ldr	r3, [pc, #480]	; (8000fac <HAL_UART_RxCpltCallback+0x214>)
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	4a76      	ldr	r2, [pc, #472]	; (8000fa8 <HAL_UART_RxCpltCallback+0x210>)
 8000dd0:	7811      	ldrb	r1, [r2, #0]
 8000dd2:	4a77      	ldr	r2, [pc, #476]	; (8000fb0 <HAL_UART_RxCpltCallback+0x218>)
 8000dd4:	54d1      	strb	r1, [r2, r3]
			modemStringLength2++;
 8000dd6:	4b75      	ldr	r3, [pc, #468]	; (8000fac <HAL_UART_RxCpltCallback+0x214>)
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	3301      	adds	r3, #1
 8000ddc:	4a73      	ldr	r2, [pc, #460]	; (8000fac <HAL_UART_RxCpltCallback+0x214>)
 8000dde:	6013      	str	r3, [r2, #0]
			if (echoMode) HAL_UART_Transmit_DMA(&huart1, modemString2, modemStringLength2);
 8000de0:	4b74      	ldr	r3, [pc, #464]	; (8000fb4 <HAL_UART_RxCpltCallback+0x21c>)
 8000de2:	781b      	ldrb	r3, [r3, #0]
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d007      	beq.n	8000df8 <HAL_UART_RxCpltCallback+0x60>
 8000de8:	4b70      	ldr	r3, [pc, #448]	; (8000fac <HAL_UART_RxCpltCallback+0x214>)
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	b29b      	uxth	r3, r3
 8000dee:	461a      	mov	r2, r3
 8000df0:	496f      	ldr	r1, [pc, #444]	; (8000fb0 <HAL_UART_RxCpltCallback+0x218>)
 8000df2:	4871      	ldr	r0, [pc, #452]	; (8000fb8 <HAL_UART_RxCpltCallback+0x220>)
 8000df4:	f002 f890 	bl	8002f18 <HAL_UART_Transmit_DMA>
			for (int i = modemStringLength2; i<250; i++)modemString2[i]=(uint8_t)0x00;
 8000df8:	4b6c      	ldr	r3, [pc, #432]	; (8000fac <HAL_UART_RxCpltCallback+0x214>)
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	61fb      	str	r3, [r7, #28]
 8000dfe:	e007      	b.n	8000e10 <HAL_UART_RxCpltCallback+0x78>
 8000e00:	4a6b      	ldr	r2, [pc, #428]	; (8000fb0 <HAL_UART_RxCpltCallback+0x218>)
 8000e02:	69fb      	ldr	r3, [r7, #28]
 8000e04:	4413      	add	r3, r2
 8000e06:	2200      	movs	r2, #0
 8000e08:	701a      	strb	r2, [r3, #0]
 8000e0a:	69fb      	ldr	r3, [r7, #28]
 8000e0c:	3301      	adds	r3, #1
 8000e0e:	61fb      	str	r3, [r7, #28]
 8000e10:	69fb      	ldr	r3, [r7, #28]
 8000e12:	2bf9      	cmp	r3, #249	; 0xf9
 8000e14:	ddf4      	ble.n	8000e00 <HAL_UART_RxCpltCallback+0x68>
			for (int i = 0; i<250; i++) oldModem4[i] = oldModem3[i];
 8000e16:	2300      	movs	r3, #0
 8000e18:	61bb      	str	r3, [r7, #24]
 8000e1a:	e00b      	b.n	8000e34 <HAL_UART_RxCpltCallback+0x9c>
 8000e1c:	4a67      	ldr	r2, [pc, #412]	; (8000fbc <HAL_UART_RxCpltCallback+0x224>)
 8000e1e:	69bb      	ldr	r3, [r7, #24]
 8000e20:	4413      	add	r3, r2
 8000e22:	7819      	ldrb	r1, [r3, #0]
 8000e24:	4a66      	ldr	r2, [pc, #408]	; (8000fc0 <HAL_UART_RxCpltCallback+0x228>)
 8000e26:	69bb      	ldr	r3, [r7, #24]
 8000e28:	4413      	add	r3, r2
 8000e2a:	460a      	mov	r2, r1
 8000e2c:	701a      	strb	r2, [r3, #0]
 8000e2e:	69bb      	ldr	r3, [r7, #24]
 8000e30:	3301      	adds	r3, #1
 8000e32:	61bb      	str	r3, [r7, #24]
 8000e34:	69bb      	ldr	r3, [r7, #24]
 8000e36:	2bf9      	cmp	r3, #249	; 0xf9
 8000e38:	ddf0      	ble.n	8000e1c <HAL_UART_RxCpltCallback+0x84>
			for (int i = 0; i<250; i++) oldModem3[i] = oldModem2[i];
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	617b      	str	r3, [r7, #20]
 8000e3e:	e00b      	b.n	8000e58 <HAL_UART_RxCpltCallback+0xc0>
 8000e40:	4a60      	ldr	r2, [pc, #384]	; (8000fc4 <HAL_UART_RxCpltCallback+0x22c>)
 8000e42:	697b      	ldr	r3, [r7, #20]
 8000e44:	4413      	add	r3, r2
 8000e46:	7819      	ldrb	r1, [r3, #0]
 8000e48:	4a5c      	ldr	r2, [pc, #368]	; (8000fbc <HAL_UART_RxCpltCallback+0x224>)
 8000e4a:	697b      	ldr	r3, [r7, #20]
 8000e4c:	4413      	add	r3, r2
 8000e4e:	460a      	mov	r2, r1
 8000e50:	701a      	strb	r2, [r3, #0]
 8000e52:	697b      	ldr	r3, [r7, #20]
 8000e54:	3301      	adds	r3, #1
 8000e56:	617b      	str	r3, [r7, #20]
 8000e58:	697b      	ldr	r3, [r7, #20]
 8000e5a:	2bf9      	cmp	r3, #249	; 0xf9
 8000e5c:	ddf0      	ble.n	8000e40 <HAL_UART_RxCpltCallback+0xa8>
			for (int i = 0; i<250; i++) oldModem2[i] = oldModem[i];
 8000e5e:	2300      	movs	r3, #0
 8000e60:	613b      	str	r3, [r7, #16]
 8000e62:	e00b      	b.n	8000e7c <HAL_UART_RxCpltCallback+0xe4>
 8000e64:	4a58      	ldr	r2, [pc, #352]	; (8000fc8 <HAL_UART_RxCpltCallback+0x230>)
 8000e66:	693b      	ldr	r3, [r7, #16]
 8000e68:	4413      	add	r3, r2
 8000e6a:	7819      	ldrb	r1, [r3, #0]
 8000e6c:	4a55      	ldr	r2, [pc, #340]	; (8000fc4 <HAL_UART_RxCpltCallback+0x22c>)
 8000e6e:	693b      	ldr	r3, [r7, #16]
 8000e70:	4413      	add	r3, r2
 8000e72:	460a      	mov	r2, r1
 8000e74:	701a      	strb	r2, [r3, #0]
 8000e76:	693b      	ldr	r3, [r7, #16]
 8000e78:	3301      	adds	r3, #1
 8000e7a:	613b      	str	r3, [r7, #16]
 8000e7c:	693b      	ldr	r3, [r7, #16]
 8000e7e:	2bf9      	cmp	r3, #249	; 0xf9
 8000e80:	ddf0      	ble.n	8000e64 <HAL_UART_RxCpltCallback+0xcc>
			for (int i = 0; i<250; i++) oldModem[i] = modemString2[i];
 8000e82:	2300      	movs	r3, #0
 8000e84:	60fb      	str	r3, [r7, #12]
 8000e86:	e00b      	b.n	8000ea0 <HAL_UART_RxCpltCallback+0x108>
 8000e88:	4a49      	ldr	r2, [pc, #292]	; (8000fb0 <HAL_UART_RxCpltCallback+0x218>)
 8000e8a:	68fb      	ldr	r3, [r7, #12]
 8000e8c:	4413      	add	r3, r2
 8000e8e:	7819      	ldrb	r1, [r3, #0]
 8000e90:	4a4d      	ldr	r2, [pc, #308]	; (8000fc8 <HAL_UART_RxCpltCallback+0x230>)
 8000e92:	68fb      	ldr	r3, [r7, #12]
 8000e94:	4413      	add	r3, r2
 8000e96:	460a      	mov	r2, r1
 8000e98:	701a      	strb	r2, [r3, #0]
 8000e9a:	68fb      	ldr	r3, [r7, #12]
 8000e9c:	3301      	adds	r3, #1
 8000e9e:	60fb      	str	r3, [r7, #12]
 8000ea0:	68fb      	ldr	r3, [r7, #12]
 8000ea2:	2bf9      	cmp	r3, #249	; 0xf9
 8000ea4:	ddf0      	ble.n	8000e88 <HAL_UART_RxCpltCallback+0xf0>
			modemStringLength2 = 0;
 8000ea6:	4b41      	ldr	r3, [pc, #260]	; (8000fac <HAL_UART_RxCpltCallback+0x214>)
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	601a      	str	r2, [r3, #0]
			oldModem[strlen(oldModem)-1]=0;
 8000eac:	4846      	ldr	r0, [pc, #280]	; (8000fc8 <HAL_UART_RxCpltCallback+0x230>)
 8000eae:	f7ff f94d 	bl	800014c <strlen>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	3b01      	subs	r3, #1
 8000eb6:	4a44      	ldr	r2, [pc, #272]	; (8000fc8 <HAL_UART_RxCpltCallback+0x230>)
 8000eb8:	2100      	movs	r1, #0
 8000eba:	54d1      	strb	r1, [r2, r3]
			oldModem[strlen(oldModem)-1]=0;
 8000ebc:	4842      	ldr	r0, [pc, #264]	; (8000fc8 <HAL_UART_RxCpltCallback+0x230>)
 8000ebe:	f7ff f945 	bl	800014c <strlen>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	3b01      	subs	r3, #1
 8000ec6:	4a40      	ldr	r2, [pc, #256]	; (8000fc8 <HAL_UART_RxCpltCallback+0x230>)
 8000ec8:	2100      	movs	r1, #0
 8000eca:	54d1      	strb	r1, [r2, r3]
			rxNew=true;
 8000ecc:	4b3f      	ldr	r3, [pc, #252]	; (8000fcc <HAL_UART_RxCpltCallback+0x234>)
 8000ece:	2201      	movs	r2, #1
 8000ed0:	601a      	str	r2, [r3, #0]
		}
		HAL_UART_Receive_IT(&huart2,str,1);
 8000ed2:	2201      	movs	r2, #1
 8000ed4:	4934      	ldr	r1, [pc, #208]	; (8000fa8 <HAL_UART_RxCpltCallback+0x210>)
 8000ed6:	4833      	ldr	r0, [pc, #204]	; (8000fa4 <HAL_UART_RxCpltCallback+0x20c>)
 8000ed8:	f001 fff9 	bl	8002ece <HAL_UART_Receive_IT>
			else if (echoMode) HAL_UART_Transmit_DMA(&huart2, modemString1, modemStringLength1);
			modemStringLength1 = 0;
		}
		HAL_UART_Receive_IT(&huart1,str2,1);
	}
}
 8000edc:	e05e      	b.n	8000f9c <HAL_UART_RxCpltCallback+0x204>
		if (str2[0]!='\n') {
 8000ede:	4b3c      	ldr	r3, [pc, #240]	; (8000fd0 <HAL_UART_RxCpltCallback+0x238>)
 8000ee0:	781b      	ldrb	r3, [r3, #0]
 8000ee2:	2b0a      	cmp	r3, #10
 8000ee4:	d00b      	beq.n	8000efe <HAL_UART_RxCpltCallback+0x166>
			modemString1[modemStringLength1] = str2[0];
 8000ee6:	4b3b      	ldr	r3, [pc, #236]	; (8000fd4 <HAL_UART_RxCpltCallback+0x23c>)
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	4a39      	ldr	r2, [pc, #228]	; (8000fd0 <HAL_UART_RxCpltCallback+0x238>)
 8000eec:	7811      	ldrb	r1, [r2, #0]
 8000eee:	4a3a      	ldr	r2, [pc, #232]	; (8000fd8 <HAL_UART_RxCpltCallback+0x240>)
 8000ef0:	54d1      	strb	r1, [r2, r3]
			modemStringLength1++;
 8000ef2:	4b38      	ldr	r3, [pc, #224]	; (8000fd4 <HAL_UART_RxCpltCallback+0x23c>)
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	3301      	adds	r3, #1
 8000ef8:	4a36      	ldr	r2, [pc, #216]	; (8000fd4 <HAL_UART_RxCpltCallback+0x23c>)
 8000efa:	6013      	str	r3, [r2, #0]
 8000efc:	e049      	b.n	8000f92 <HAL_UART_RxCpltCallback+0x1fa>
			modemString1[modemStringLength1] = str2[0];
 8000efe:	4b35      	ldr	r3, [pc, #212]	; (8000fd4 <HAL_UART_RxCpltCallback+0x23c>)
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	4a33      	ldr	r2, [pc, #204]	; (8000fd0 <HAL_UART_RxCpltCallback+0x238>)
 8000f04:	7811      	ldrb	r1, [r2, #0]
 8000f06:	4a34      	ldr	r2, [pc, #208]	; (8000fd8 <HAL_UART_RxCpltCallback+0x240>)
 8000f08:	54d1      	strb	r1, [r2, r3]
			modemStringLength1++;
 8000f0a:	4b32      	ldr	r3, [pc, #200]	; (8000fd4 <HAL_UART_RxCpltCallback+0x23c>)
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	3301      	adds	r3, #1
 8000f10:	4a30      	ldr	r2, [pc, #192]	; (8000fd4 <HAL_UART_RxCpltCallback+0x23c>)
 8000f12:	6013      	str	r3, [r2, #0]
			if (strstr((char*)modemString1, (char*)"echoON")) {
 8000f14:	4931      	ldr	r1, [pc, #196]	; (8000fdc <HAL_UART_RxCpltCallback+0x244>)
 8000f16:	4830      	ldr	r0, [pc, #192]	; (8000fd8 <HAL_UART_RxCpltCallback+0x240>)
 8000f18:	f003 f857 	bl	8003fca <strstr>
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d008      	beq.n	8000f34 <HAL_UART_RxCpltCallback+0x19c>
				echoMode = true;
 8000f22:	4b24      	ldr	r3, [pc, #144]	; (8000fb4 <HAL_UART_RxCpltCallback+0x21c>)
 8000f24:	2201      	movs	r2, #1
 8000f26:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit_DMA(&huart1, (uint8_t*)"echo mode ON\r\n", 14);
 8000f28:	220e      	movs	r2, #14
 8000f2a:	492d      	ldr	r1, [pc, #180]	; (8000fe0 <HAL_UART_RxCpltCallback+0x248>)
 8000f2c:	4822      	ldr	r0, [pc, #136]	; (8000fb8 <HAL_UART_RxCpltCallback+0x220>)
 8000f2e:	f001 fff3 	bl	8002f18 <HAL_UART_Transmit_DMA>
 8000f32:	e02b      	b.n	8000f8c <HAL_UART_RxCpltCallback+0x1f4>
			else if (strstr((char*)modemString1, (char*)"echoOFF")) {
 8000f34:	492b      	ldr	r1, [pc, #172]	; (8000fe4 <HAL_UART_RxCpltCallback+0x24c>)
 8000f36:	4828      	ldr	r0, [pc, #160]	; (8000fd8 <HAL_UART_RxCpltCallback+0x240>)
 8000f38:	f003 f847 	bl	8003fca <strstr>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d008      	beq.n	8000f54 <HAL_UART_RxCpltCallback+0x1bc>
				echoMode = false;
 8000f42:	4b1c      	ldr	r3, [pc, #112]	; (8000fb4 <HAL_UART_RxCpltCallback+0x21c>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit_DMA(&huart1, (uint8_t*)"echo mode OFF\r\n", 14);
 8000f48:	220e      	movs	r2, #14
 8000f4a:	4927      	ldr	r1, [pc, #156]	; (8000fe8 <HAL_UART_RxCpltCallback+0x250>)
 8000f4c:	481a      	ldr	r0, [pc, #104]	; (8000fb8 <HAL_UART_RxCpltCallback+0x220>)
 8000f4e:	f001 ffe3 	bl	8002f18 <HAL_UART_Transmit_DMA>
 8000f52:	e01b      	b.n	8000f8c <HAL_UART_RxCpltCallback+0x1f4>
			else if (strstr((char*)modemString1, (char*)"gprs")) {
 8000f54:	4925      	ldr	r1, [pc, #148]	; (8000fec <HAL_UART_RxCpltCallback+0x254>)
 8000f56:	4820      	ldr	r0, [pc, #128]	; (8000fd8 <HAL_UART_RxCpltCallback+0x240>)
 8000f58:	f003 f837 	bl	8003fca <strstr>
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d008      	beq.n	8000f74 <HAL_UART_RxCpltCallback+0x1dc>
				timeRepeat = 0;
 8000f62:	4b23      	ldr	r3, [pc, #140]	; (8000ff0 <HAL_UART_RxCpltCallback+0x258>)
 8000f64:	2200      	movs	r2, #0
 8000f66:	601a      	str	r2, [r3, #0]
				HAL_UART_Transmit_DMA(&huart1, (uint8_t*)"update start\r\n", 14);
 8000f68:	220e      	movs	r2, #14
 8000f6a:	4922      	ldr	r1, [pc, #136]	; (8000ff4 <HAL_UART_RxCpltCallback+0x25c>)
 8000f6c:	4812      	ldr	r0, [pc, #72]	; (8000fb8 <HAL_UART_RxCpltCallback+0x220>)
 8000f6e:	f001 ffd3 	bl	8002f18 <HAL_UART_Transmit_DMA>
 8000f72:	e00b      	b.n	8000f8c <HAL_UART_RxCpltCallback+0x1f4>
			else if (echoMode) HAL_UART_Transmit_DMA(&huart2, modemString1, modemStringLength1);
 8000f74:	4b0f      	ldr	r3, [pc, #60]	; (8000fb4 <HAL_UART_RxCpltCallback+0x21c>)
 8000f76:	781b      	ldrb	r3, [r3, #0]
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d007      	beq.n	8000f8c <HAL_UART_RxCpltCallback+0x1f4>
 8000f7c:	4b15      	ldr	r3, [pc, #84]	; (8000fd4 <HAL_UART_RxCpltCallback+0x23c>)
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	b29b      	uxth	r3, r3
 8000f82:	461a      	mov	r2, r3
 8000f84:	4914      	ldr	r1, [pc, #80]	; (8000fd8 <HAL_UART_RxCpltCallback+0x240>)
 8000f86:	4807      	ldr	r0, [pc, #28]	; (8000fa4 <HAL_UART_RxCpltCallback+0x20c>)
 8000f88:	f001 ffc6 	bl	8002f18 <HAL_UART_Transmit_DMA>
			modemStringLength1 = 0;
 8000f8c:	4b11      	ldr	r3, [pc, #68]	; (8000fd4 <HAL_UART_RxCpltCallback+0x23c>)
 8000f8e:	2200      	movs	r2, #0
 8000f90:	601a      	str	r2, [r3, #0]
		HAL_UART_Receive_IT(&huart1,str2,1);
 8000f92:	2201      	movs	r2, #1
 8000f94:	490e      	ldr	r1, [pc, #56]	; (8000fd0 <HAL_UART_RxCpltCallback+0x238>)
 8000f96:	4808      	ldr	r0, [pc, #32]	; (8000fb8 <HAL_UART_RxCpltCallback+0x220>)
 8000f98:	f001 ff99 	bl	8002ece <HAL_UART_Receive_IT>
}
 8000f9c:	bf00      	nop
 8000f9e:	3720      	adds	r7, #32
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	bd80      	pop	{r7, pc}
 8000fa4:	20000128 	.word	0x20000128
 8000fa8:	20000000 	.word	0x20000000
 8000fac:	2000037c 	.word	0x2000037c
 8000fb0:	20000280 	.word	0x20000280
 8000fb4:	20000049 	.word	0x20000049
 8000fb8:	200000e0 	.word	0x200000e0
 8000fbc:	20000678 	.word	0x20000678
 8000fc0:	20000774 	.word	0x20000774
 8000fc4:	2000057c 	.word	0x2000057c
 8000fc8:	20000480 	.word	0x20000480
 8000fcc:	200008bc 	.word	0x200008bc
 8000fd0:	20000004 	.word	0x20000004
 8000fd4:	2000047c 	.word	0x2000047c
 8000fd8:	20000380 	.word	0x20000380
 8000fdc:	08004918 	.word	0x08004918
 8000fe0:	08004920 	.word	0x08004920
 8000fe4:	08004930 	.word	0x08004930
 8000fe8:	08004938 	.word	0x08004938
 8000fec:	08004948 	.word	0x08004948
 8000ff0:	200000d8 	.word	0x200000d8
 8000ff4:	08004950 	.word	0x08004950

08000ff8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b084      	sub	sp, #16
 8000ffc:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ffe:	f000 fc9f 	bl	8001940 <HAL_Init>

  /* USER CODE BEGIN Init */

  sprintf(unicID, "%x-%x-%lx-%lx", *idBase0, *idBase1, *idBase2, *idBase3);
 8001002:	4b77      	ldr	r3, [pc, #476]	; (80011e0 <main+0x1e8>)
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	881b      	ldrh	r3, [r3, #0]
 8001008:	4619      	mov	r1, r3
 800100a:	4b76      	ldr	r3, [pc, #472]	; (80011e4 <main+0x1ec>)
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	881b      	ldrh	r3, [r3, #0]
 8001010:	4618      	mov	r0, r3
 8001012:	4b75      	ldr	r3, [pc, #468]	; (80011e8 <main+0x1f0>)
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	4a74      	ldr	r2, [pc, #464]	; (80011ec <main+0x1f4>)
 800101a:	6812      	ldr	r2, [r2, #0]
 800101c:	6812      	ldr	r2, [r2, #0]
 800101e:	9201      	str	r2, [sp, #4]
 8001020:	9300      	str	r3, [sp, #0]
 8001022:	4603      	mov	r3, r0
 8001024:	460a      	mov	r2, r1
 8001026:	4972      	ldr	r1, [pc, #456]	; (80011f0 <main+0x1f8>)
 8001028:	4872      	ldr	r0, [pc, #456]	; (80011f4 <main+0x1fc>)
 800102a:	f002 ff99 	bl	8003f60 <siprintf>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800102e:	f000 f90d 	bl	800124c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001032:	f000 f9db 	bl	80013ec <MX_GPIO_Init>
  MX_DMA_Init();
 8001036:	f000 f9a3 	bl	8001380 <MX_DMA_Init>
  MX_USART1_UART_Init();
 800103a:	f000 f94d 	bl	80012d8 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 800103e:	f000 f975 	bl	800132c <MX_USART2_UART_Init>
  /*SSD1306_Init();
  SSD1306_GotoXY(0, 44); //Устанавливаем курсор в позицию 0;44. Сначала по горизонтали, потом вертикали.
  SSD1306_Puts("Hello, habrahabr!!", &Font_7x10, SSD1306_COLOR_WHITE); //пишем надпись в выставленной позиции шрифтом "Font_7x10" белым цветом.
  SSD1306_DrawCircle(10, 33, 7, SSD1306_COLOR_WHITE);
  SSD1306_UpdateScreen();*/
  for (int i = 0; i<10; i++) {
 8001042:	2300      	movs	r3, #0
 8001044:	607b      	str	r3, [r7, #4]
 8001046:	e00a      	b.n	800105e <main+0x66>
	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8001048:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800104c:	486a      	ldr	r0, [pc, #424]	; (80011f8 <main+0x200>)
 800104e:	f001 fa41 	bl	80024d4 <HAL_GPIO_TogglePin>
	  HAL_Delay(250);
 8001052:	20fa      	movs	r0, #250	; 0xfa
 8001054:	f000 fcd6 	bl	8001a04 <HAL_Delay>
  for (int i = 0; i<10; i++) {
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	3301      	adds	r3, #1
 800105c:	607b      	str	r3, [r7, #4]
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	2b09      	cmp	r3, #9
 8001062:	ddf1      	ble.n	8001048 <main+0x50>
  }

  HAL_UART_Transmit(&huart1,(uint8_t*)"start\r\n",7,0xFFFF);
 8001064:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001068:	2207      	movs	r2, #7
 800106a:	4964      	ldr	r1, [pc, #400]	; (80011fc <main+0x204>)
 800106c:	4864      	ldr	r0, [pc, #400]	; (8001200 <main+0x208>)
 800106e:	f001 feab 	bl	8002dc8 <HAL_UART_Transmit>
  HAL_UART_Transmit(&huart1,(uint8_t*)"echoON - for echo mode\r\n",24,0xFFFF);
 8001072:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001076:	2218      	movs	r2, #24
 8001078:	4962      	ldr	r1, [pc, #392]	; (8001204 <main+0x20c>)
 800107a:	4861      	ldr	r0, [pc, #388]	; (8001200 <main+0x208>)
 800107c:	f001 fea4 	bl	8002dc8 <HAL_UART_Transmit>
  HAL_UART_Transmit(&huart1,(uint8_t*)"echoOFF - for normal mode\r\n",27,0xFFFF);
 8001080:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001084:	221b      	movs	r2, #27
 8001086:	4960      	ldr	r1, [pc, #384]	; (8001208 <main+0x210>)
 8001088:	485d      	ldr	r0, [pc, #372]	; (8001200 <main+0x208>)
 800108a:	f001 fe9d 	bl	8002dc8 <HAL_UART_Transmit>
  HAL_UART_Transmit(&huart1,(uint8_t*)"gprs - gprs update\r\n",20,0xFFFF);
 800108e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001092:	2214      	movs	r2, #20
 8001094:	495d      	ldr	r1, [pc, #372]	; (800120c <main+0x214>)
 8001096:	485a      	ldr	r0, [pc, #360]	; (8001200 <main+0x208>)
 8001098:	f001 fe96 	bl	8002dc8 <HAL_UART_Transmit>
  HAL_UART_Transmit(&huart2,(uint8_t*)"AT\r\n",8,0xFFFF);
 800109c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80010a0:	2208      	movs	r2, #8
 80010a2:	495b      	ldr	r1, [pc, #364]	; (8001210 <main+0x218>)
 80010a4:	485b      	ldr	r0, [pc, #364]	; (8001214 <main+0x21c>)
 80010a6:	f001 fe8f 	bl	8002dc8 <HAL_UART_Transmit>

  HAL_UART_Receive_IT(&huart2,str,1);
 80010aa:	2201      	movs	r2, #1
 80010ac:	495a      	ldr	r1, [pc, #360]	; (8001218 <main+0x220>)
 80010ae:	4859      	ldr	r0, [pc, #356]	; (8001214 <main+0x21c>)
 80010b0:	f001 ff0d 	bl	8002ece <HAL_UART_Receive_IT>

  HAL_Delay(2000);
 80010b4:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80010b8:	f000 fca4 	bl	8001a04 <HAL_Delay>
  ready=true;
 80010bc:	4b57      	ldr	r3, [pc, #348]	; (800121c <main+0x224>)
 80010be:	2201      	movs	r2, #1
 80010c0:	701a      	strb	r2, [r3, #0]

  timeRepeat = HAL_GetTick();
 80010c2:	f000 fc95 	bl	80019f0 <HAL_GetTick>
 80010c6:	4603      	mov	r3, r0
 80010c8:	461a      	mov	r2, r3
 80010ca:	4b55      	ldr	r3, [pc, #340]	; (8001220 <main+0x228>)
 80010cc:	601a      	str	r2, [r3, #0]
  int lightTime = 0;
 80010ce:	2300      	movs	r3, #0
 80010d0:	603b      	str	r3, [r7, #0]
  HAL_UART_Receive_IT(&huart1,str2,1);
 80010d2:	2201      	movs	r2, #1
 80010d4:	4953      	ldr	r1, [pc, #332]	; (8001224 <main+0x22c>)
 80010d6:	484a      	ldr	r0, [pc, #296]	; (8001200 <main+0x208>)
 80010d8:	f001 fef9 	bl	8002ece <HAL_UART_Receive_IT>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 1);
 80010dc:	2201      	movs	r2, #1
 80010de:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80010e2:	4845      	ldr	r0, [pc, #276]	; (80011f8 <main+0x200>)
 80010e4:	f001 f9de 	bl	80024a4 <HAL_GPIO_WritePin>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if (ready) {
 80010e8:	4b4c      	ldr	r3, [pc, #304]	; (800121c <main+0x224>)
 80010ea:	781b      	ldrb	r3, [r3, #0]
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d03e      	beq.n	800116e <main+0x176>
		  txATcommand();
 80010f0:	f7ff f916 	bl	8000320 <txATcommand>
		  if (((HAL_GetTick()-timeRepeat)>(2*60*1000))&&(step==12)) {
 80010f4:	f000 fc7c 	bl	80019f0 <HAL_GetTick>
 80010f8:	4603      	mov	r3, r0
 80010fa:	4a49      	ldr	r2, [pc, #292]	; (8001220 <main+0x228>)
 80010fc:	6812      	ldr	r2, [r2, #0]
 80010fe:	1a9b      	subs	r3, r3, r2
 8001100:	4a49      	ldr	r2, [pc, #292]	; (8001228 <main+0x230>)
 8001102:	4293      	cmp	r3, r2
 8001104:	d90f      	bls.n	8001126 <main+0x12e>
 8001106:	4b49      	ldr	r3, [pc, #292]	; (800122c <main+0x234>)
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	2b0c      	cmp	r3, #12
 800110c:	d10b      	bne.n	8001126 <main+0x12e>
			  step = 0;
 800110e:	4b47      	ldr	r3, [pc, #284]	; (800122c <main+0x234>)
 8001110:	2200      	movs	r2, #0
 8001112:	601a      	str	r2, [r3, #0]
			  timeRepeat = HAL_GetTick();
 8001114:	f000 fc6c 	bl	80019f0 <HAL_GetTick>
 8001118:	4603      	mov	r3, r0
 800111a:	461a      	mov	r2, r3
 800111c:	4b40      	ldr	r3, [pc, #256]	; (8001220 <main+0x228>)
 800111e:	601a      	str	r2, [r3, #0]
			  txATcommand();
 8001120:	f7ff f8fe 	bl	8000320 <txATcommand>
 8001124:	e009      	b.n	800113a <main+0x142>
		  }
		  else if (step!=12) timeRepeat = HAL_GetTick();
 8001126:	4b41      	ldr	r3, [pc, #260]	; (800122c <main+0x234>)
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	2b0c      	cmp	r3, #12
 800112c:	d005      	beq.n	800113a <main+0x142>
 800112e:	f000 fc5f 	bl	80019f0 <HAL_GetTick>
 8001132:	4603      	mov	r3, r0
 8001134:	461a      	mov	r2, r3
 8001136:	4b3a      	ldr	r3, [pc, #232]	; (8001220 <main+0x228>)
 8001138:	601a      	str	r2, [r3, #0]
		  if ((HAL_GetTick()-lightTime)>(30*1000)) {
 800113a:	f000 fc59 	bl	80019f0 <HAL_GetTick>
 800113e:	4602      	mov	r2, r0
 8001140:	683b      	ldr	r3, [r7, #0]
 8001142:	1ad3      	subs	r3, r2, r3
 8001144:	f247 5230 	movw	r2, #30000	; 0x7530
 8001148:	4293      	cmp	r3, r2
 800114a:	d910      	bls.n	800116e <main+0x176>
			  lightTime = HAL_GetTick();
 800114c:	f000 fc50 	bl	80019f0 <HAL_GetTick>
 8001150:	4603      	mov	r3, r0
 8001152:	603b      	str	r3, [r7, #0]
			  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8001154:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001158:	4827      	ldr	r0, [pc, #156]	; (80011f8 <main+0x200>)
 800115a:	f001 f9bb 	bl	80024d4 <HAL_GPIO_TogglePin>
			  HAL_Delay(100);
 800115e:	2064      	movs	r0, #100	; 0x64
 8001160:	f000 fc50 	bl	8001a04 <HAL_Delay>
			  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8001164:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001168:	4823      	ldr	r0, [pc, #140]	; (80011f8 <main+0x200>)
 800116a:	f001 f9b3 	bl	80024d4 <HAL_GPIO_TogglePin>
		  }
	  }
	  if (strstr(modemString2, "\r\n")) {
 800116e:	4930      	ldr	r1, [pc, #192]	; (8001230 <main+0x238>)
 8001170:	4830      	ldr	r0, [pc, #192]	; (8001234 <main+0x23c>)
 8001172:	f002 ff2a 	bl	8003fca <strstr>
 8001176:	4603      	mov	r3, r0
 8001178:	2b00      	cmp	r3, #0
 800117a:	d023      	beq.n	80011c4 <main+0x1cc>
			SSD1306_Puts(oldModem2, &Font_7x10, SSD1306_COLOR_WHITE);
			SSD1306_GotoXY(0, 40);
			SSD1306_Puts(oldModem, &Font_7x10, SSD1306_COLOR_WHITE);
			SSD1306_UpdateScreen();
		}*/
		if (rxNew) {
 800117c:	4b2e      	ldr	r3, [pc, #184]	; (8001238 <main+0x240>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	2b00      	cmp	r3, #0
 8001182:	d01f      	beq.n	80011c4 <main+0x1cc>
			if (strstr(oldModem, "+CMTI")) {
 8001184:	492d      	ldr	r1, [pc, #180]	; (800123c <main+0x244>)
 8001186:	482e      	ldr	r0, [pc, #184]	; (8001240 <main+0x248>)
 8001188:	f002 ff1f 	bl	8003fca <strstr>
 800118c:	4603      	mov	r3, r0
 800118e:	2b00      	cmp	r3, #0
 8001190:	d00a      	beq.n	80011a8 <main+0x1b0>
				stopStep = step;
 8001192:	4b26      	ldr	r3, [pc, #152]	; (800122c <main+0x234>)
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	4a2b      	ldr	r2, [pc, #172]	; (8001244 <main+0x24c>)
 8001198:	6013      	str	r3, [r2, #0]
				step = 12;
 800119a:	4b24      	ldr	r3, [pc, #144]	; (800122c <main+0x234>)
 800119c:	220c      	movs	r2, #12
 800119e:	601a      	str	r2, [r3, #0]
				rxATcommand(oldModem);
 80011a0:	4827      	ldr	r0, [pc, #156]	; (8001240 <main+0x248>)
 80011a2:	f7ff fa25 	bl	80005f0 <rxATcommand>
 80011a6:	e00a      	b.n	80011be <main+0x1c6>
			}
			else if ((step==1))
 80011a8:	4b20      	ldr	r3, [pc, #128]	; (800122c <main+0x234>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	2b01      	cmp	r3, #1
 80011ae:	d103      	bne.n	80011b8 <main+0x1c0>
				rxATcommand(oldModem3);
 80011b0:	4825      	ldr	r0, [pc, #148]	; (8001248 <main+0x250>)
 80011b2:	f7ff fa1d 	bl	80005f0 <rxATcommand>
 80011b6:	e002      	b.n	80011be <main+0x1c6>
			else rxATcommand(oldModem);
 80011b8:	4821      	ldr	r0, [pc, #132]	; (8001240 <main+0x248>)
 80011ba:	f7ff fa19 	bl	80005f0 <rxATcommand>
			rxNew = false;
 80011be:	4b1e      	ldr	r3, [pc, #120]	; (8001238 <main+0x240>)
 80011c0:	2200      	movs	r2, #0
 80011c2:	601a      	str	r2, [r3, #0]
		}
	  }
	 if (step==12) HAL_Delay(1000);
 80011c4:	4b19      	ldr	r3, [pc, #100]	; (800122c <main+0x234>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	2b0c      	cmp	r3, #12
 80011ca:	d104      	bne.n	80011d6 <main+0x1de>
 80011cc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80011d0:	f000 fc18 	bl	8001a04 <HAL_Delay>
 80011d4:	e788      	b.n	80010e8 <main+0xf0>
	 else HAL_Delay(250);
 80011d6:	20fa      	movs	r0, #250	; 0xfa
 80011d8:	f000 fc14 	bl	8001a04 <HAL_Delay>
	  if (ready) {
 80011dc:	e784      	b.n	80010e8 <main+0xf0>
 80011de:	bf00      	nop
 80011e0:	20000038 	.word	0x20000038
 80011e4:	2000003c 	.word	0x2000003c
 80011e8:	20000040 	.word	0x20000040
 80011ec:	20000044 	.word	0x20000044
 80011f0:	08004960 	.word	0x08004960
 80011f4:	20000878 	.word	0x20000878
 80011f8:	40011000 	.word	0x40011000
 80011fc:	08004970 	.word	0x08004970
 8001200:	200000e0 	.word	0x200000e0
 8001204:	08004978 	.word	0x08004978
 8001208:	08004994 	.word	0x08004994
 800120c:	080049b0 	.word	0x080049b0
 8001210:	080049c8 	.word	0x080049c8
 8001214:	20000128 	.word	0x20000128
 8001218:	20000000 	.word	0x20000000
 800121c:	200008c0 	.word	0x200008c0
 8001220:	200000d8 	.word	0x200000d8
 8001224:	20000004 	.word	0x20000004
 8001228:	0001d4c0 	.word	0x0001d4c0
 800122c:	200008b8 	.word	0x200008b8
 8001230:	080046cc 	.word	0x080046cc
 8001234:	20000280 	.word	0x20000280
 8001238:	200008bc 	.word	0x200008bc
 800123c:	080049d0 	.word	0x080049d0
 8001240:	20000480 	.word	0x20000480
 8001244:	200000dc 	.word	0x200000dc
 8001248:	20000678 	.word	0x20000678

0800124c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b090      	sub	sp, #64	; 0x40
 8001250:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001252:	f107 0318 	add.w	r3, r7, #24
 8001256:	2228      	movs	r2, #40	; 0x28
 8001258:	2100      	movs	r1, #0
 800125a:	4618      	mov	r0, r3
 800125c:	f002 fd58 	bl	8003d10 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001260:	1d3b      	adds	r3, r7, #4
 8001262:	2200      	movs	r2, #0
 8001264:	601a      	str	r2, [r3, #0]
 8001266:	605a      	str	r2, [r3, #4]
 8001268:	609a      	str	r2, [r3, #8]
 800126a:	60da      	str	r2, [r3, #12]
 800126c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800126e:	2301      	movs	r3, #1
 8001270:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001272:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001276:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001278:	2300      	movs	r3, #0
 800127a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800127c:	2301      	movs	r3, #1
 800127e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001280:	2302      	movs	r3, #2
 8001282:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001284:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001288:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800128a:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800128e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001290:	f107 0318 	add.w	r3, r7, #24
 8001294:	4618      	mov	r0, r3
 8001296:	f001 f937 	bl	8002508 <HAL_RCC_OscConfig>
 800129a:	4603      	mov	r3, r0
 800129c:	2b00      	cmp	r3, #0
 800129e:	d001      	beq.n	80012a4 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80012a0:	f000 f912 	bl	80014c8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012a4:	230f      	movs	r3, #15
 80012a6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012a8:	2302      	movs	r3, #2
 80012aa:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012ac:	2300      	movs	r3, #0
 80012ae:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80012b0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80012b4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80012b6:	2300      	movs	r3, #0
 80012b8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80012ba:	1d3b      	adds	r3, r7, #4
 80012bc:	2102      	movs	r1, #2
 80012be:	4618      	mov	r0, r3
 80012c0:	f001 fba4 	bl	8002a0c <HAL_RCC_ClockConfig>
 80012c4:	4603      	mov	r3, r0
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d001      	beq.n	80012ce <SystemClock_Config+0x82>
  {
    Error_Handler();
 80012ca:	f000 f8fd 	bl	80014c8 <Error_Handler>
  }
}
 80012ce:	bf00      	nop
 80012d0:	3740      	adds	r7, #64	; 0x40
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}
	...

080012d8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80012dc:	4b11      	ldr	r3, [pc, #68]	; (8001324 <MX_USART1_UART_Init+0x4c>)
 80012de:	4a12      	ldr	r2, [pc, #72]	; (8001328 <MX_USART1_UART_Init+0x50>)
 80012e0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80012e2:	4b10      	ldr	r3, [pc, #64]	; (8001324 <MX_USART1_UART_Init+0x4c>)
 80012e4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80012e8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80012ea:	4b0e      	ldr	r3, [pc, #56]	; (8001324 <MX_USART1_UART_Init+0x4c>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80012f0:	4b0c      	ldr	r3, [pc, #48]	; (8001324 <MX_USART1_UART_Init+0x4c>)
 80012f2:	2200      	movs	r2, #0
 80012f4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80012f6:	4b0b      	ldr	r3, [pc, #44]	; (8001324 <MX_USART1_UART_Init+0x4c>)
 80012f8:	2200      	movs	r2, #0
 80012fa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80012fc:	4b09      	ldr	r3, [pc, #36]	; (8001324 <MX_USART1_UART_Init+0x4c>)
 80012fe:	220c      	movs	r2, #12
 8001300:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001302:	4b08      	ldr	r3, [pc, #32]	; (8001324 <MX_USART1_UART_Init+0x4c>)
 8001304:	2200      	movs	r2, #0
 8001306:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001308:	4b06      	ldr	r3, [pc, #24]	; (8001324 <MX_USART1_UART_Init+0x4c>)
 800130a:	2200      	movs	r2, #0
 800130c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800130e:	4805      	ldr	r0, [pc, #20]	; (8001324 <MX_USART1_UART_Init+0x4c>)
 8001310:	f001 fd0a 	bl	8002d28 <HAL_UART_Init>
 8001314:	4603      	mov	r3, r0
 8001316:	2b00      	cmp	r3, #0
 8001318:	d001      	beq.n	800131e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800131a:	f000 f8d5 	bl	80014c8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800131e:	bf00      	nop
 8001320:	bd80      	pop	{r7, pc}
 8001322:	bf00      	nop
 8001324:	200000e0 	.word	0x200000e0
 8001328:	40013800 	.word	0x40013800

0800132c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001330:	4b11      	ldr	r3, [pc, #68]	; (8001378 <MX_USART2_UART_Init+0x4c>)
 8001332:	4a12      	ldr	r2, [pc, #72]	; (800137c <MX_USART2_UART_Init+0x50>)
 8001334:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8001336:	4b10      	ldr	r3, [pc, #64]	; (8001378 <MX_USART2_UART_Init+0x4c>)
 8001338:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800133c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800133e:	4b0e      	ldr	r3, [pc, #56]	; (8001378 <MX_USART2_UART_Init+0x4c>)
 8001340:	2200      	movs	r2, #0
 8001342:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001344:	4b0c      	ldr	r3, [pc, #48]	; (8001378 <MX_USART2_UART_Init+0x4c>)
 8001346:	2200      	movs	r2, #0
 8001348:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800134a:	4b0b      	ldr	r3, [pc, #44]	; (8001378 <MX_USART2_UART_Init+0x4c>)
 800134c:	2200      	movs	r2, #0
 800134e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001350:	4b09      	ldr	r3, [pc, #36]	; (8001378 <MX_USART2_UART_Init+0x4c>)
 8001352:	220c      	movs	r2, #12
 8001354:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001356:	4b08      	ldr	r3, [pc, #32]	; (8001378 <MX_USART2_UART_Init+0x4c>)
 8001358:	2200      	movs	r2, #0
 800135a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800135c:	4b06      	ldr	r3, [pc, #24]	; (8001378 <MX_USART2_UART_Init+0x4c>)
 800135e:	2200      	movs	r2, #0
 8001360:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001362:	4805      	ldr	r0, [pc, #20]	; (8001378 <MX_USART2_UART_Init+0x4c>)
 8001364:	f001 fce0 	bl	8002d28 <HAL_UART_Init>
 8001368:	4603      	mov	r3, r0
 800136a:	2b00      	cmp	r3, #0
 800136c:	d001      	beq.n	8001372 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800136e:	f000 f8ab 	bl	80014c8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001372:	bf00      	nop
 8001374:	bd80      	pop	{r7, pc}
 8001376:	bf00      	nop
 8001378:	20000128 	.word	0x20000128
 800137c:	40004400 	.word	0x40004400

08001380 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b082      	sub	sp, #8
 8001384:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001386:	4b18      	ldr	r3, [pc, #96]	; (80013e8 <MX_DMA_Init+0x68>)
 8001388:	695b      	ldr	r3, [r3, #20]
 800138a:	4a17      	ldr	r2, [pc, #92]	; (80013e8 <MX_DMA_Init+0x68>)
 800138c:	f043 0301 	orr.w	r3, r3, #1
 8001390:	6153      	str	r3, [r2, #20]
 8001392:	4b15      	ldr	r3, [pc, #84]	; (80013e8 <MX_DMA_Init+0x68>)
 8001394:	695b      	ldr	r3, [r3, #20]
 8001396:	f003 0301 	and.w	r3, r3, #1
 800139a:	607b      	str	r3, [r7, #4]
 800139c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 800139e:	2200      	movs	r2, #0
 80013a0:	2100      	movs	r1, #0
 80013a2:	200e      	movs	r0, #14
 80013a4:	f000 fc29 	bl	8001bfa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 80013a8:	200e      	movs	r0, #14
 80013aa:	f000 fc42 	bl	8001c32 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 80013ae:	2200      	movs	r2, #0
 80013b0:	2100      	movs	r1, #0
 80013b2:	200f      	movs	r0, #15
 80013b4:	f000 fc21 	bl	8001bfa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 80013b8:	200f      	movs	r0, #15
 80013ba:	f000 fc3a 	bl	8001c32 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 80013be:	2200      	movs	r2, #0
 80013c0:	2100      	movs	r1, #0
 80013c2:	2010      	movs	r0, #16
 80013c4:	f000 fc19 	bl	8001bfa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 80013c8:	2010      	movs	r0, #16
 80013ca:	f000 fc32 	bl	8001c32 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 80013ce:	2200      	movs	r2, #0
 80013d0:	2100      	movs	r1, #0
 80013d2:	2011      	movs	r0, #17
 80013d4:	f000 fc11 	bl	8001bfa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 80013d8:	2011      	movs	r0, #17
 80013da:	f000 fc2a 	bl	8001c32 <HAL_NVIC_EnableIRQ>

}
 80013de:	bf00      	nop
 80013e0:	3708      	adds	r7, #8
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bd80      	pop	{r7, pc}
 80013e6:	bf00      	nop
 80013e8:	40021000 	.word	0x40021000

080013ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b088      	sub	sp, #32
 80013f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013f2:	f107 0310 	add.w	r3, r7, #16
 80013f6:	2200      	movs	r2, #0
 80013f8:	601a      	str	r2, [r3, #0]
 80013fa:	605a      	str	r2, [r3, #4]
 80013fc:	609a      	str	r2, [r3, #8]
 80013fe:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001400:	4b2e      	ldr	r3, [pc, #184]	; (80014bc <MX_GPIO_Init+0xd0>)
 8001402:	699b      	ldr	r3, [r3, #24]
 8001404:	4a2d      	ldr	r2, [pc, #180]	; (80014bc <MX_GPIO_Init+0xd0>)
 8001406:	f043 0310 	orr.w	r3, r3, #16
 800140a:	6193      	str	r3, [r2, #24]
 800140c:	4b2b      	ldr	r3, [pc, #172]	; (80014bc <MX_GPIO_Init+0xd0>)
 800140e:	699b      	ldr	r3, [r3, #24]
 8001410:	f003 0310 	and.w	r3, r3, #16
 8001414:	60fb      	str	r3, [r7, #12]
 8001416:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001418:	4b28      	ldr	r3, [pc, #160]	; (80014bc <MX_GPIO_Init+0xd0>)
 800141a:	699b      	ldr	r3, [r3, #24]
 800141c:	4a27      	ldr	r2, [pc, #156]	; (80014bc <MX_GPIO_Init+0xd0>)
 800141e:	f043 0320 	orr.w	r3, r3, #32
 8001422:	6193      	str	r3, [r2, #24]
 8001424:	4b25      	ldr	r3, [pc, #148]	; (80014bc <MX_GPIO_Init+0xd0>)
 8001426:	699b      	ldr	r3, [r3, #24]
 8001428:	f003 0320 	and.w	r3, r3, #32
 800142c:	60bb      	str	r3, [r7, #8]
 800142e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001430:	4b22      	ldr	r3, [pc, #136]	; (80014bc <MX_GPIO_Init+0xd0>)
 8001432:	699b      	ldr	r3, [r3, #24]
 8001434:	4a21      	ldr	r2, [pc, #132]	; (80014bc <MX_GPIO_Init+0xd0>)
 8001436:	f043 0304 	orr.w	r3, r3, #4
 800143a:	6193      	str	r3, [r2, #24]
 800143c:	4b1f      	ldr	r3, [pc, #124]	; (80014bc <MX_GPIO_Init+0xd0>)
 800143e:	699b      	ldr	r3, [r3, #24]
 8001440:	f003 0304 	and.w	r3, r3, #4
 8001444:	607b      	str	r3, [r7, #4]
 8001446:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001448:	4b1c      	ldr	r3, [pc, #112]	; (80014bc <MX_GPIO_Init+0xd0>)
 800144a:	699b      	ldr	r3, [r3, #24]
 800144c:	4a1b      	ldr	r2, [pc, #108]	; (80014bc <MX_GPIO_Init+0xd0>)
 800144e:	f043 0308 	orr.w	r3, r3, #8
 8001452:	6193      	str	r3, [r2, #24]
 8001454:	4b19      	ldr	r3, [pc, #100]	; (80014bc <MX_GPIO_Init+0xd0>)
 8001456:	699b      	ldr	r3, [r3, #24]
 8001458:	f003 0308 	and.w	r3, r3, #8
 800145c:	603b      	str	r3, [r7, #0]
 800145e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001460:	2200      	movs	r2, #0
 8001462:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001466:	4816      	ldr	r0, [pc, #88]	; (80014c0 <MX_GPIO_Init+0xd4>)
 8001468:	f001 f81c 	bl	80024a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_13, GPIO_PIN_RESET);
 800146c:	2200      	movs	r2, #0
 800146e:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8001472:	4814      	ldr	r0, [pc, #80]	; (80014c4 <MX_GPIO_Init+0xd8>)
 8001474:	f001 f816 	bl	80024a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001478:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800147c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800147e:	2301      	movs	r3, #1
 8001480:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001482:	2302      	movs	r3, #2
 8001484:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001486:	2303      	movs	r3, #3
 8001488:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800148a:	f107 0310 	add.w	r3, r7, #16
 800148e:	4619      	mov	r1, r3
 8001490:	480b      	ldr	r0, [pc, #44]	; (80014c0 <MX_GPIO_Init+0xd4>)
 8001492:	f000 fe8b 	bl	80021ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8001496:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800149a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800149c:	2301      	movs	r3, #1
 800149e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80014a0:	2302      	movs	r3, #2
 80014a2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80014a4:	2303      	movs	r3, #3
 80014a6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014a8:	f107 0310 	add.w	r3, r7, #16
 80014ac:	4619      	mov	r1, r3
 80014ae:	4805      	ldr	r0, [pc, #20]	; (80014c4 <MX_GPIO_Init+0xd8>)
 80014b0:	f000 fe7c 	bl	80021ac <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80014b4:	bf00      	nop
 80014b6:	3720      	adds	r7, #32
 80014b8:	46bd      	mov	sp, r7
 80014ba:	bd80      	pop	{r7, pc}
 80014bc:	40021000 	.word	0x40021000
 80014c0:	40011000 	.word	0x40011000
 80014c4:	40010c00 	.word	0x40010c00

080014c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014c8:	b480      	push	{r7}
 80014ca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014cc:	b672      	cpsid	i
}
 80014ce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80014d0:	e7fe      	b.n	80014d0 <Error_Handler+0x8>
	...

080014d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014d4:	b480      	push	{r7}
 80014d6:	b085      	sub	sp, #20
 80014d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80014da:	4b15      	ldr	r3, [pc, #84]	; (8001530 <HAL_MspInit+0x5c>)
 80014dc:	699b      	ldr	r3, [r3, #24]
 80014de:	4a14      	ldr	r2, [pc, #80]	; (8001530 <HAL_MspInit+0x5c>)
 80014e0:	f043 0301 	orr.w	r3, r3, #1
 80014e4:	6193      	str	r3, [r2, #24]
 80014e6:	4b12      	ldr	r3, [pc, #72]	; (8001530 <HAL_MspInit+0x5c>)
 80014e8:	699b      	ldr	r3, [r3, #24]
 80014ea:	f003 0301 	and.w	r3, r3, #1
 80014ee:	60bb      	str	r3, [r7, #8]
 80014f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80014f2:	4b0f      	ldr	r3, [pc, #60]	; (8001530 <HAL_MspInit+0x5c>)
 80014f4:	69db      	ldr	r3, [r3, #28]
 80014f6:	4a0e      	ldr	r2, [pc, #56]	; (8001530 <HAL_MspInit+0x5c>)
 80014f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014fc:	61d3      	str	r3, [r2, #28]
 80014fe:	4b0c      	ldr	r3, [pc, #48]	; (8001530 <HAL_MspInit+0x5c>)
 8001500:	69db      	ldr	r3, [r3, #28]
 8001502:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001506:	607b      	str	r3, [r7, #4]
 8001508:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 800150a:	4b0a      	ldr	r3, [pc, #40]	; (8001534 <HAL_MspInit+0x60>)
 800150c:	685b      	ldr	r3, [r3, #4]
 800150e:	60fb      	str	r3, [r7, #12]
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001516:	60fb      	str	r3, [r7, #12]
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800151e:	60fb      	str	r3, [r7, #12]
 8001520:	4a04      	ldr	r2, [pc, #16]	; (8001534 <HAL_MspInit+0x60>)
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001526:	bf00      	nop
 8001528:	3714      	adds	r7, #20
 800152a:	46bd      	mov	sp, r7
 800152c:	bc80      	pop	{r7}
 800152e:	4770      	bx	lr
 8001530:	40021000 	.word	0x40021000
 8001534:	40010000 	.word	0x40010000

08001538 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b08a      	sub	sp, #40	; 0x28
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001540:	f107 0318 	add.w	r3, r7, #24
 8001544:	2200      	movs	r2, #0
 8001546:	601a      	str	r2, [r3, #0]
 8001548:	605a      	str	r2, [r3, #4]
 800154a:	609a      	str	r2, [r3, #8]
 800154c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	4a8c      	ldr	r2, [pc, #560]	; (8001784 <HAL_UART_MspInit+0x24c>)
 8001554:	4293      	cmp	r3, r2
 8001556:	f040 8087 	bne.w	8001668 <HAL_UART_MspInit+0x130>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800155a:	4b8b      	ldr	r3, [pc, #556]	; (8001788 <HAL_UART_MspInit+0x250>)
 800155c:	699b      	ldr	r3, [r3, #24]
 800155e:	4a8a      	ldr	r2, [pc, #552]	; (8001788 <HAL_UART_MspInit+0x250>)
 8001560:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001564:	6193      	str	r3, [r2, #24]
 8001566:	4b88      	ldr	r3, [pc, #544]	; (8001788 <HAL_UART_MspInit+0x250>)
 8001568:	699b      	ldr	r3, [r3, #24]
 800156a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800156e:	617b      	str	r3, [r7, #20]
 8001570:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001572:	4b85      	ldr	r3, [pc, #532]	; (8001788 <HAL_UART_MspInit+0x250>)
 8001574:	699b      	ldr	r3, [r3, #24]
 8001576:	4a84      	ldr	r2, [pc, #528]	; (8001788 <HAL_UART_MspInit+0x250>)
 8001578:	f043 0304 	orr.w	r3, r3, #4
 800157c:	6193      	str	r3, [r2, #24]
 800157e:	4b82      	ldr	r3, [pc, #520]	; (8001788 <HAL_UART_MspInit+0x250>)
 8001580:	699b      	ldr	r3, [r3, #24]
 8001582:	f003 0304 	and.w	r3, r3, #4
 8001586:	613b      	str	r3, [r7, #16]
 8001588:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800158a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800158e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001590:	2302      	movs	r3, #2
 8001592:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001594:	2303      	movs	r3, #3
 8001596:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001598:	f107 0318 	add.w	r3, r7, #24
 800159c:	4619      	mov	r1, r3
 800159e:	487b      	ldr	r0, [pc, #492]	; (800178c <HAL_UART_MspInit+0x254>)
 80015a0:	f000 fe04 	bl	80021ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80015a4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80015a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015aa:	2300      	movs	r3, #0
 80015ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ae:	2300      	movs	r3, #0
 80015b0:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015b2:	f107 0318 	add.w	r3, r7, #24
 80015b6:	4619      	mov	r1, r3
 80015b8:	4874      	ldr	r0, [pc, #464]	; (800178c <HAL_UART_MspInit+0x254>)
 80015ba:	f000 fdf7 	bl	80021ac <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 80015be:	4b74      	ldr	r3, [pc, #464]	; (8001790 <HAL_UART_MspInit+0x258>)
 80015c0:	4a74      	ldr	r2, [pc, #464]	; (8001794 <HAL_UART_MspInit+0x25c>)
 80015c2:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80015c4:	4b72      	ldr	r3, [pc, #456]	; (8001790 <HAL_UART_MspInit+0x258>)
 80015c6:	2200      	movs	r2, #0
 80015c8:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80015ca:	4b71      	ldr	r3, [pc, #452]	; (8001790 <HAL_UART_MspInit+0x258>)
 80015cc:	2200      	movs	r2, #0
 80015ce:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80015d0:	4b6f      	ldr	r3, [pc, #444]	; (8001790 <HAL_UART_MspInit+0x258>)
 80015d2:	2280      	movs	r2, #128	; 0x80
 80015d4:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80015d6:	4b6e      	ldr	r3, [pc, #440]	; (8001790 <HAL_UART_MspInit+0x258>)
 80015d8:	2200      	movs	r2, #0
 80015da:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80015dc:	4b6c      	ldr	r3, [pc, #432]	; (8001790 <HAL_UART_MspInit+0x258>)
 80015de:	2200      	movs	r2, #0
 80015e0:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 80015e2:	4b6b      	ldr	r3, [pc, #428]	; (8001790 <HAL_UART_MspInit+0x258>)
 80015e4:	2200      	movs	r2, #0
 80015e6:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80015e8:	4b69      	ldr	r3, [pc, #420]	; (8001790 <HAL_UART_MspInit+0x258>)
 80015ea:	2200      	movs	r2, #0
 80015ec:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80015ee:	4868      	ldr	r0, [pc, #416]	; (8001790 <HAL_UART_MspInit+0x258>)
 80015f0:	f000 fb3a 	bl	8001c68 <HAL_DMA_Init>
 80015f4:	4603      	mov	r3, r0
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d001      	beq.n	80015fe <HAL_UART_MspInit+0xc6>
    {
      Error_Handler();
 80015fa:	f7ff ff65 	bl	80014c8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	4a63      	ldr	r2, [pc, #396]	; (8001790 <HAL_UART_MspInit+0x258>)
 8001602:	63da      	str	r2, [r3, #60]	; 0x3c
 8001604:	4a62      	ldr	r2, [pc, #392]	; (8001790 <HAL_UART_MspInit+0x258>)
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 800160a:	4b63      	ldr	r3, [pc, #396]	; (8001798 <HAL_UART_MspInit+0x260>)
 800160c:	4a63      	ldr	r2, [pc, #396]	; (800179c <HAL_UART_MspInit+0x264>)
 800160e:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001610:	4b61      	ldr	r3, [pc, #388]	; (8001798 <HAL_UART_MspInit+0x260>)
 8001612:	2210      	movs	r2, #16
 8001614:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001616:	4b60      	ldr	r3, [pc, #384]	; (8001798 <HAL_UART_MspInit+0x260>)
 8001618:	2200      	movs	r2, #0
 800161a:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800161c:	4b5e      	ldr	r3, [pc, #376]	; (8001798 <HAL_UART_MspInit+0x260>)
 800161e:	2280      	movs	r2, #128	; 0x80
 8001620:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001622:	4b5d      	ldr	r3, [pc, #372]	; (8001798 <HAL_UART_MspInit+0x260>)
 8001624:	2200      	movs	r2, #0
 8001626:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001628:	4b5b      	ldr	r3, [pc, #364]	; (8001798 <HAL_UART_MspInit+0x260>)
 800162a:	2200      	movs	r2, #0
 800162c:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 800162e:	4b5a      	ldr	r3, [pc, #360]	; (8001798 <HAL_UART_MspInit+0x260>)
 8001630:	2200      	movs	r2, #0
 8001632:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001634:	4b58      	ldr	r3, [pc, #352]	; (8001798 <HAL_UART_MspInit+0x260>)
 8001636:	2200      	movs	r2, #0
 8001638:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 800163a:	4857      	ldr	r0, [pc, #348]	; (8001798 <HAL_UART_MspInit+0x260>)
 800163c:	f000 fb14 	bl	8001c68 <HAL_DMA_Init>
 8001640:	4603      	mov	r3, r0
 8001642:	2b00      	cmp	r3, #0
 8001644:	d001      	beq.n	800164a <HAL_UART_MspInit+0x112>
    {
      Error_Handler();
 8001646:	f7ff ff3f 	bl	80014c8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	4a52      	ldr	r2, [pc, #328]	; (8001798 <HAL_UART_MspInit+0x260>)
 800164e:	639a      	str	r2, [r3, #56]	; 0x38
 8001650:	4a51      	ldr	r2, [pc, #324]	; (8001798 <HAL_UART_MspInit+0x260>)
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001656:	2200      	movs	r2, #0
 8001658:	2100      	movs	r1, #0
 800165a:	2025      	movs	r0, #37	; 0x25
 800165c:	f000 facd 	bl	8001bfa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001660:	2025      	movs	r0, #37	; 0x25
 8001662:	f000 fae6 	bl	8001c32 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001666:	e089      	b.n	800177c <HAL_UART_MspInit+0x244>
  else if(huart->Instance==USART2)
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	4a4c      	ldr	r2, [pc, #304]	; (80017a0 <HAL_UART_MspInit+0x268>)
 800166e:	4293      	cmp	r3, r2
 8001670:	f040 8084 	bne.w	800177c <HAL_UART_MspInit+0x244>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001674:	4b44      	ldr	r3, [pc, #272]	; (8001788 <HAL_UART_MspInit+0x250>)
 8001676:	69db      	ldr	r3, [r3, #28]
 8001678:	4a43      	ldr	r2, [pc, #268]	; (8001788 <HAL_UART_MspInit+0x250>)
 800167a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800167e:	61d3      	str	r3, [r2, #28]
 8001680:	4b41      	ldr	r3, [pc, #260]	; (8001788 <HAL_UART_MspInit+0x250>)
 8001682:	69db      	ldr	r3, [r3, #28]
 8001684:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001688:	60fb      	str	r3, [r7, #12]
 800168a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800168c:	4b3e      	ldr	r3, [pc, #248]	; (8001788 <HAL_UART_MspInit+0x250>)
 800168e:	699b      	ldr	r3, [r3, #24]
 8001690:	4a3d      	ldr	r2, [pc, #244]	; (8001788 <HAL_UART_MspInit+0x250>)
 8001692:	f043 0304 	orr.w	r3, r3, #4
 8001696:	6193      	str	r3, [r2, #24]
 8001698:	4b3b      	ldr	r3, [pc, #236]	; (8001788 <HAL_UART_MspInit+0x250>)
 800169a:	699b      	ldr	r3, [r3, #24]
 800169c:	f003 0304 	and.w	r3, r3, #4
 80016a0:	60bb      	str	r3, [r7, #8]
 80016a2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80016a4:	2304      	movs	r3, #4
 80016a6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016a8:	2302      	movs	r3, #2
 80016aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80016ac:	2303      	movs	r3, #3
 80016ae:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016b0:	f107 0318 	add.w	r3, r7, #24
 80016b4:	4619      	mov	r1, r3
 80016b6:	4835      	ldr	r0, [pc, #212]	; (800178c <HAL_UART_MspInit+0x254>)
 80016b8:	f000 fd78 	bl	80021ac <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80016bc:	2308      	movs	r3, #8
 80016be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016c0:	2300      	movs	r3, #0
 80016c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016c4:	2300      	movs	r3, #0
 80016c6:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016c8:	f107 0318 	add.w	r3, r7, #24
 80016cc:	4619      	mov	r1, r3
 80016ce:	482f      	ldr	r0, [pc, #188]	; (800178c <HAL_UART_MspInit+0x254>)
 80016d0:	f000 fd6c 	bl	80021ac <HAL_GPIO_Init>
    hdma_usart2_tx.Instance = DMA1_Channel7;
 80016d4:	4b33      	ldr	r3, [pc, #204]	; (80017a4 <HAL_UART_MspInit+0x26c>)
 80016d6:	4a34      	ldr	r2, [pc, #208]	; (80017a8 <HAL_UART_MspInit+0x270>)
 80016d8:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80016da:	4b32      	ldr	r3, [pc, #200]	; (80017a4 <HAL_UART_MspInit+0x26c>)
 80016dc:	2210      	movs	r2, #16
 80016de:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80016e0:	4b30      	ldr	r3, [pc, #192]	; (80017a4 <HAL_UART_MspInit+0x26c>)
 80016e2:	2200      	movs	r2, #0
 80016e4:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80016e6:	4b2f      	ldr	r3, [pc, #188]	; (80017a4 <HAL_UART_MspInit+0x26c>)
 80016e8:	2280      	movs	r2, #128	; 0x80
 80016ea:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80016ec:	4b2d      	ldr	r3, [pc, #180]	; (80017a4 <HAL_UART_MspInit+0x26c>)
 80016ee:	2200      	movs	r2, #0
 80016f0:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80016f2:	4b2c      	ldr	r3, [pc, #176]	; (80017a4 <HAL_UART_MspInit+0x26c>)
 80016f4:	2200      	movs	r2, #0
 80016f6:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80016f8:	4b2a      	ldr	r3, [pc, #168]	; (80017a4 <HAL_UART_MspInit+0x26c>)
 80016fa:	2200      	movs	r2, #0
 80016fc:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80016fe:	4b29      	ldr	r3, [pc, #164]	; (80017a4 <HAL_UART_MspInit+0x26c>)
 8001700:	2200      	movs	r2, #0
 8001702:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8001704:	4827      	ldr	r0, [pc, #156]	; (80017a4 <HAL_UART_MspInit+0x26c>)
 8001706:	f000 faaf 	bl	8001c68 <HAL_DMA_Init>
 800170a:	4603      	mov	r3, r0
 800170c:	2b00      	cmp	r3, #0
 800170e:	d001      	beq.n	8001714 <HAL_UART_MspInit+0x1dc>
      Error_Handler();
 8001710:	f7ff feda 	bl	80014c8 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	4a23      	ldr	r2, [pc, #140]	; (80017a4 <HAL_UART_MspInit+0x26c>)
 8001718:	639a      	str	r2, [r3, #56]	; 0x38
 800171a:	4a22      	ldr	r2, [pc, #136]	; (80017a4 <HAL_UART_MspInit+0x26c>)
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	6253      	str	r3, [r2, #36]	; 0x24
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8001720:	4b22      	ldr	r3, [pc, #136]	; (80017ac <HAL_UART_MspInit+0x274>)
 8001722:	4a23      	ldr	r2, [pc, #140]	; (80017b0 <HAL_UART_MspInit+0x278>)
 8001724:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001726:	4b21      	ldr	r3, [pc, #132]	; (80017ac <HAL_UART_MspInit+0x274>)
 8001728:	2200      	movs	r2, #0
 800172a:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800172c:	4b1f      	ldr	r3, [pc, #124]	; (80017ac <HAL_UART_MspInit+0x274>)
 800172e:	2200      	movs	r2, #0
 8001730:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001732:	4b1e      	ldr	r3, [pc, #120]	; (80017ac <HAL_UART_MspInit+0x274>)
 8001734:	2280      	movs	r2, #128	; 0x80
 8001736:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001738:	4b1c      	ldr	r3, [pc, #112]	; (80017ac <HAL_UART_MspInit+0x274>)
 800173a:	2200      	movs	r2, #0
 800173c:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800173e:	4b1b      	ldr	r3, [pc, #108]	; (80017ac <HAL_UART_MspInit+0x274>)
 8001740:	2200      	movs	r2, #0
 8001742:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8001744:	4b19      	ldr	r3, [pc, #100]	; (80017ac <HAL_UART_MspInit+0x274>)
 8001746:	2200      	movs	r2, #0
 8001748:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800174a:	4b18      	ldr	r3, [pc, #96]	; (80017ac <HAL_UART_MspInit+0x274>)
 800174c:	2200      	movs	r2, #0
 800174e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8001750:	4816      	ldr	r0, [pc, #88]	; (80017ac <HAL_UART_MspInit+0x274>)
 8001752:	f000 fa89 	bl	8001c68 <HAL_DMA_Init>
 8001756:	4603      	mov	r3, r0
 8001758:	2b00      	cmp	r3, #0
 800175a:	d001      	beq.n	8001760 <HAL_UART_MspInit+0x228>
      Error_Handler();
 800175c:	f7ff feb4 	bl	80014c8 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	4a12      	ldr	r2, [pc, #72]	; (80017ac <HAL_UART_MspInit+0x274>)
 8001764:	63da      	str	r2, [r3, #60]	; 0x3c
 8001766:	4a11      	ldr	r2, [pc, #68]	; (80017ac <HAL_UART_MspInit+0x274>)
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	6253      	str	r3, [r2, #36]	; 0x24
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800176c:	2200      	movs	r2, #0
 800176e:	2100      	movs	r1, #0
 8001770:	2026      	movs	r0, #38	; 0x26
 8001772:	f000 fa42 	bl	8001bfa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001776:	2026      	movs	r0, #38	; 0x26
 8001778:	f000 fa5b 	bl	8001c32 <HAL_NVIC_EnableIRQ>
}
 800177c:	bf00      	nop
 800177e:	3728      	adds	r7, #40	; 0x28
 8001780:	46bd      	mov	sp, r7
 8001782:	bd80      	pop	{r7, pc}
 8001784:	40013800 	.word	0x40013800
 8001788:	40021000 	.word	0x40021000
 800178c:	40010800 	.word	0x40010800
 8001790:	20000170 	.word	0x20000170
 8001794:	40020058 	.word	0x40020058
 8001798:	200001b4 	.word	0x200001b4
 800179c:	40020044 	.word	0x40020044
 80017a0:	40004400 	.word	0x40004400
 80017a4:	200001f8 	.word	0x200001f8
 80017a8:	40020080 	.word	0x40020080
 80017ac:	2000023c 	.word	0x2000023c
 80017b0:	4002006c 	.word	0x4002006c

080017b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017b4:	b480      	push	{r7}
 80017b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80017b8:	e7fe      	b.n	80017b8 <NMI_Handler+0x4>

080017ba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017ba:	b480      	push	{r7}
 80017bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017be:	e7fe      	b.n	80017be <HardFault_Handler+0x4>

080017c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017c0:	b480      	push	{r7}
 80017c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017c4:	e7fe      	b.n	80017c4 <MemManage_Handler+0x4>

080017c6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017c6:	b480      	push	{r7}
 80017c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017ca:	e7fe      	b.n	80017ca <BusFault_Handler+0x4>

080017cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017cc:	b480      	push	{r7}
 80017ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017d0:	e7fe      	b.n	80017d0 <UsageFault_Handler+0x4>

080017d2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80017d2:	b480      	push	{r7}
 80017d4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80017d6:	bf00      	nop
 80017d8:	46bd      	mov	sp, r7
 80017da:	bc80      	pop	{r7}
 80017dc:	4770      	bx	lr

080017de <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017de:	b480      	push	{r7}
 80017e0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017e2:	bf00      	nop
 80017e4:	46bd      	mov	sp, r7
 80017e6:	bc80      	pop	{r7}
 80017e8:	4770      	bx	lr

080017ea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80017ea:	b480      	push	{r7}
 80017ec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80017ee:	bf00      	nop
 80017f0:	46bd      	mov	sp, r7
 80017f2:	bc80      	pop	{r7}
 80017f4:	4770      	bx	lr

080017f6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017f6:	b580      	push	{r7, lr}
 80017f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017fa:	f000 f8e7 	bl	80019cc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017fe:	bf00      	nop
 8001800:	bd80      	pop	{r7, pc}
	...

08001804 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8001808:	4802      	ldr	r0, [pc, #8]	; (8001814 <DMA1_Channel4_IRQHandler+0x10>)
 800180a:	f000 fb9b 	bl	8001f44 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 800180e:	bf00      	nop
 8001810:	bd80      	pop	{r7, pc}
 8001812:	bf00      	nop
 8001814:	200001b4 	.word	0x200001b4

08001818 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 800181c:	4802      	ldr	r0, [pc, #8]	; (8001828 <DMA1_Channel5_IRQHandler+0x10>)
 800181e:	f000 fb91 	bl	8001f44 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8001822:	bf00      	nop
 8001824:	bd80      	pop	{r7, pc}
 8001826:	bf00      	nop
 8001828:	20000170 	.word	0x20000170

0800182c <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001830:	4802      	ldr	r0, [pc, #8]	; (800183c <DMA1_Channel6_IRQHandler+0x10>)
 8001832:	f000 fb87 	bl	8001f44 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8001836:	bf00      	nop
 8001838:	bd80      	pop	{r7, pc}
 800183a:	bf00      	nop
 800183c:	2000023c 	.word	0x2000023c

08001840 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8001844:	4802      	ldr	r0, [pc, #8]	; (8001850 <DMA1_Channel7_IRQHandler+0x10>)
 8001846:	f000 fb7d 	bl	8001f44 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 800184a:	bf00      	nop
 800184c:	bd80      	pop	{r7, pc}
 800184e:	bf00      	nop
 8001850:	200001f8 	.word	0x200001f8

08001854 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
	//HAL_UART_Transmit(&huart1,"USART Transmit\r\n",16,0xFFFF);
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001858:	4802      	ldr	r0, [pc, #8]	; (8001864 <USART1_IRQHandler+0x10>)
 800185a:	f001 fbcd 	bl	8002ff8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800185e:	bf00      	nop
 8001860:	bd80      	pop	{r7, pc}
 8001862:	bf00      	nop
 8001864:	200000e0 	.word	0x200000e0

08001868 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800186c:	4802      	ldr	r0, [pc, #8]	; (8001878 <USART2_IRQHandler+0x10>)
 800186e:	f001 fbc3 	bl	8002ff8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001872:	bf00      	nop
 8001874:	bd80      	pop	{r7, pc}
 8001876:	bf00      	nop
 8001878:	20000128 	.word	0x20000128

0800187c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	b086      	sub	sp, #24
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001884:	4a14      	ldr	r2, [pc, #80]	; (80018d8 <_sbrk+0x5c>)
 8001886:	4b15      	ldr	r3, [pc, #84]	; (80018dc <_sbrk+0x60>)
 8001888:	1ad3      	subs	r3, r2, r3
 800188a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800188c:	697b      	ldr	r3, [r7, #20]
 800188e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001890:	4b13      	ldr	r3, [pc, #76]	; (80018e0 <_sbrk+0x64>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	2b00      	cmp	r3, #0
 8001896:	d102      	bne.n	800189e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001898:	4b11      	ldr	r3, [pc, #68]	; (80018e0 <_sbrk+0x64>)
 800189a:	4a12      	ldr	r2, [pc, #72]	; (80018e4 <_sbrk+0x68>)
 800189c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800189e:	4b10      	ldr	r3, [pc, #64]	; (80018e0 <_sbrk+0x64>)
 80018a0:	681a      	ldr	r2, [r3, #0]
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	4413      	add	r3, r2
 80018a6:	693a      	ldr	r2, [r7, #16]
 80018a8:	429a      	cmp	r2, r3
 80018aa:	d207      	bcs.n	80018bc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80018ac:	f002 f9f8 	bl	8003ca0 <__errno>
 80018b0:	4603      	mov	r3, r0
 80018b2:	220c      	movs	r2, #12
 80018b4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80018b6:	f04f 33ff 	mov.w	r3, #4294967295
 80018ba:	e009      	b.n	80018d0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80018bc:	4b08      	ldr	r3, [pc, #32]	; (80018e0 <_sbrk+0x64>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80018c2:	4b07      	ldr	r3, [pc, #28]	; (80018e0 <_sbrk+0x64>)
 80018c4:	681a      	ldr	r2, [r3, #0]
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	4413      	add	r3, r2
 80018ca:	4a05      	ldr	r2, [pc, #20]	; (80018e0 <_sbrk+0x64>)
 80018cc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80018ce:	68fb      	ldr	r3, [r7, #12]
}
 80018d0:	4618      	mov	r0, r3
 80018d2:	3718      	adds	r7, #24
 80018d4:	46bd      	mov	sp, r7
 80018d6:	bd80      	pop	{r7, pc}
 80018d8:	20002800 	.word	0x20002800
 80018dc:	00000400 	.word	0x00000400
 80018e0:	200008cc 	.word	0x200008cc
 80018e4:	200008e8 	.word	0x200008e8

080018e8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80018e8:	b480      	push	{r7}
 80018ea:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80018ec:	bf00      	nop
 80018ee:	46bd      	mov	sp, r7
 80018f0:	bc80      	pop	{r7}
 80018f2:	4770      	bx	lr

080018f4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80018f4:	f7ff fff8 	bl	80018e8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80018f8:	480b      	ldr	r0, [pc, #44]	; (8001928 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80018fa:	490c      	ldr	r1, [pc, #48]	; (800192c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80018fc:	4a0c      	ldr	r2, [pc, #48]	; (8001930 <LoopFillZerobss+0x16>)
  movs r3, #0
 80018fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001900:	e002      	b.n	8001908 <LoopCopyDataInit>

08001902 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001902:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001904:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001906:	3304      	adds	r3, #4

08001908 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001908:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800190a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800190c:	d3f9      	bcc.n	8001902 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800190e:	4a09      	ldr	r2, [pc, #36]	; (8001934 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001910:	4c09      	ldr	r4, [pc, #36]	; (8001938 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001912:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001914:	e001      	b.n	800191a <LoopFillZerobss>

08001916 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001916:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001918:	3204      	adds	r2, #4

0800191a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800191a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800191c:	d3fb      	bcc.n	8001916 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800191e:	f002 f9c5 	bl	8003cac <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001922:	f7ff fb69 	bl	8000ff8 <main>
  bx lr
 8001926:	4770      	bx	lr
  ldr r0, =_sdata
 8001928:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800192c:	200000bc 	.word	0x200000bc
  ldr r2, =_sidata
 8001930:	08004aa0 	.word	0x08004aa0
  ldr r2, =_sbss
 8001934:	200000bc 	.word	0x200000bc
  ldr r4, =_ebss
 8001938:	200008e4 	.word	0x200008e4

0800193c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800193c:	e7fe      	b.n	800193c <ADC1_2_IRQHandler>
	...

08001940 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001944:	4b08      	ldr	r3, [pc, #32]	; (8001968 <HAL_Init+0x28>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	4a07      	ldr	r2, [pc, #28]	; (8001968 <HAL_Init+0x28>)
 800194a:	f043 0310 	orr.w	r3, r3, #16
 800194e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001950:	2003      	movs	r0, #3
 8001952:	f000 f947 	bl	8001be4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001956:	200f      	movs	r0, #15
 8001958:	f000 f808 	bl	800196c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800195c:	f7ff fdba 	bl	80014d4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001960:	2300      	movs	r3, #0
}
 8001962:	4618      	mov	r0, r3
 8001964:	bd80      	pop	{r7, pc}
 8001966:	bf00      	nop
 8001968:	40022000 	.word	0x40022000

0800196c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b082      	sub	sp, #8
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001974:	4b12      	ldr	r3, [pc, #72]	; (80019c0 <HAL_InitTick+0x54>)
 8001976:	681a      	ldr	r2, [r3, #0]
 8001978:	4b12      	ldr	r3, [pc, #72]	; (80019c4 <HAL_InitTick+0x58>)
 800197a:	781b      	ldrb	r3, [r3, #0]
 800197c:	4619      	mov	r1, r3
 800197e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001982:	fbb3 f3f1 	udiv	r3, r3, r1
 8001986:	fbb2 f3f3 	udiv	r3, r2, r3
 800198a:	4618      	mov	r0, r3
 800198c:	f000 f95f 	bl	8001c4e <HAL_SYSTICK_Config>
 8001990:	4603      	mov	r3, r0
 8001992:	2b00      	cmp	r3, #0
 8001994:	d001      	beq.n	800199a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001996:	2301      	movs	r3, #1
 8001998:	e00e      	b.n	80019b8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	2b0f      	cmp	r3, #15
 800199e:	d80a      	bhi.n	80019b6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80019a0:	2200      	movs	r2, #0
 80019a2:	6879      	ldr	r1, [r7, #4]
 80019a4:	f04f 30ff 	mov.w	r0, #4294967295
 80019a8:	f000 f927 	bl	8001bfa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80019ac:	4a06      	ldr	r2, [pc, #24]	; (80019c8 <HAL_InitTick+0x5c>)
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80019b2:	2300      	movs	r3, #0
 80019b4:	e000      	b.n	80019b8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80019b6:	2301      	movs	r3, #1
}
 80019b8:	4618      	mov	r0, r3
 80019ba:	3708      	adds	r7, #8
 80019bc:	46bd      	mov	sp, r7
 80019be:	bd80      	pop	{r7, pc}
 80019c0:	2000004c 	.word	0x2000004c
 80019c4:	20000054 	.word	0x20000054
 80019c8:	20000050 	.word	0x20000050

080019cc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80019cc:	b480      	push	{r7}
 80019ce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80019d0:	4b05      	ldr	r3, [pc, #20]	; (80019e8 <HAL_IncTick+0x1c>)
 80019d2:	781b      	ldrb	r3, [r3, #0]
 80019d4:	461a      	mov	r2, r3
 80019d6:	4b05      	ldr	r3, [pc, #20]	; (80019ec <HAL_IncTick+0x20>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	4413      	add	r3, r2
 80019dc:	4a03      	ldr	r2, [pc, #12]	; (80019ec <HAL_IncTick+0x20>)
 80019de:	6013      	str	r3, [r2, #0]
}
 80019e0:	bf00      	nop
 80019e2:	46bd      	mov	sp, r7
 80019e4:	bc80      	pop	{r7}
 80019e6:	4770      	bx	lr
 80019e8:	20000054 	.word	0x20000054
 80019ec:	200008d0 	.word	0x200008d0

080019f0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80019f0:	b480      	push	{r7}
 80019f2:	af00      	add	r7, sp, #0
  return uwTick;
 80019f4:	4b02      	ldr	r3, [pc, #8]	; (8001a00 <HAL_GetTick+0x10>)
 80019f6:	681b      	ldr	r3, [r3, #0]
}
 80019f8:	4618      	mov	r0, r3
 80019fa:	46bd      	mov	sp, r7
 80019fc:	bc80      	pop	{r7}
 80019fe:	4770      	bx	lr
 8001a00:	200008d0 	.word	0x200008d0

08001a04 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b084      	sub	sp, #16
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a0c:	f7ff fff0 	bl	80019f0 <HAL_GetTick>
 8001a10:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a1c:	d005      	beq.n	8001a2a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a1e:	4b0a      	ldr	r3, [pc, #40]	; (8001a48 <HAL_Delay+0x44>)
 8001a20:	781b      	ldrb	r3, [r3, #0]
 8001a22:	461a      	mov	r2, r3
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	4413      	add	r3, r2
 8001a28:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001a2a:	bf00      	nop
 8001a2c:	f7ff ffe0 	bl	80019f0 <HAL_GetTick>
 8001a30:	4602      	mov	r2, r0
 8001a32:	68bb      	ldr	r3, [r7, #8]
 8001a34:	1ad3      	subs	r3, r2, r3
 8001a36:	68fa      	ldr	r2, [r7, #12]
 8001a38:	429a      	cmp	r2, r3
 8001a3a:	d8f7      	bhi.n	8001a2c <HAL_Delay+0x28>
  {
  }
}
 8001a3c:	bf00      	nop
 8001a3e:	bf00      	nop
 8001a40:	3710      	adds	r7, #16
 8001a42:	46bd      	mov	sp, r7
 8001a44:	bd80      	pop	{r7, pc}
 8001a46:	bf00      	nop
 8001a48:	20000054 	.word	0x20000054

08001a4c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	b085      	sub	sp, #20
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	f003 0307 	and.w	r3, r3, #7
 8001a5a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a5c:	4b0c      	ldr	r3, [pc, #48]	; (8001a90 <__NVIC_SetPriorityGrouping+0x44>)
 8001a5e:	68db      	ldr	r3, [r3, #12]
 8001a60:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a62:	68ba      	ldr	r2, [r7, #8]
 8001a64:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001a68:	4013      	ands	r3, r2
 8001a6a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a70:	68bb      	ldr	r3, [r7, #8]
 8001a72:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a74:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001a78:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a7c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a7e:	4a04      	ldr	r2, [pc, #16]	; (8001a90 <__NVIC_SetPriorityGrouping+0x44>)
 8001a80:	68bb      	ldr	r3, [r7, #8]
 8001a82:	60d3      	str	r3, [r2, #12]
}
 8001a84:	bf00      	nop
 8001a86:	3714      	adds	r7, #20
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	bc80      	pop	{r7}
 8001a8c:	4770      	bx	lr
 8001a8e:	bf00      	nop
 8001a90:	e000ed00 	.word	0xe000ed00

08001a94 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a94:	b480      	push	{r7}
 8001a96:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a98:	4b04      	ldr	r3, [pc, #16]	; (8001aac <__NVIC_GetPriorityGrouping+0x18>)
 8001a9a:	68db      	ldr	r3, [r3, #12]
 8001a9c:	0a1b      	lsrs	r3, r3, #8
 8001a9e:	f003 0307 	and.w	r3, r3, #7
}
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	bc80      	pop	{r7}
 8001aa8:	4770      	bx	lr
 8001aaa:	bf00      	nop
 8001aac:	e000ed00 	.word	0xe000ed00

08001ab0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	b083      	sub	sp, #12
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001aba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	db0b      	blt.n	8001ada <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ac2:	79fb      	ldrb	r3, [r7, #7]
 8001ac4:	f003 021f 	and.w	r2, r3, #31
 8001ac8:	4906      	ldr	r1, [pc, #24]	; (8001ae4 <__NVIC_EnableIRQ+0x34>)
 8001aca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ace:	095b      	lsrs	r3, r3, #5
 8001ad0:	2001      	movs	r0, #1
 8001ad2:	fa00 f202 	lsl.w	r2, r0, r2
 8001ad6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001ada:	bf00      	nop
 8001adc:	370c      	adds	r7, #12
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bc80      	pop	{r7}
 8001ae2:	4770      	bx	lr
 8001ae4:	e000e100 	.word	0xe000e100

08001ae8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ae8:	b480      	push	{r7}
 8001aea:	b083      	sub	sp, #12
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	4603      	mov	r3, r0
 8001af0:	6039      	str	r1, [r7, #0]
 8001af2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001af4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	db0a      	blt.n	8001b12 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001afc:	683b      	ldr	r3, [r7, #0]
 8001afe:	b2da      	uxtb	r2, r3
 8001b00:	490c      	ldr	r1, [pc, #48]	; (8001b34 <__NVIC_SetPriority+0x4c>)
 8001b02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b06:	0112      	lsls	r2, r2, #4
 8001b08:	b2d2      	uxtb	r2, r2
 8001b0a:	440b      	add	r3, r1
 8001b0c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b10:	e00a      	b.n	8001b28 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b12:	683b      	ldr	r3, [r7, #0]
 8001b14:	b2da      	uxtb	r2, r3
 8001b16:	4908      	ldr	r1, [pc, #32]	; (8001b38 <__NVIC_SetPriority+0x50>)
 8001b18:	79fb      	ldrb	r3, [r7, #7]
 8001b1a:	f003 030f 	and.w	r3, r3, #15
 8001b1e:	3b04      	subs	r3, #4
 8001b20:	0112      	lsls	r2, r2, #4
 8001b22:	b2d2      	uxtb	r2, r2
 8001b24:	440b      	add	r3, r1
 8001b26:	761a      	strb	r2, [r3, #24]
}
 8001b28:	bf00      	nop
 8001b2a:	370c      	adds	r7, #12
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	bc80      	pop	{r7}
 8001b30:	4770      	bx	lr
 8001b32:	bf00      	nop
 8001b34:	e000e100 	.word	0xe000e100
 8001b38:	e000ed00 	.word	0xe000ed00

08001b3c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	b089      	sub	sp, #36	; 0x24
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	60f8      	str	r0, [r7, #12]
 8001b44:	60b9      	str	r1, [r7, #8]
 8001b46:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	f003 0307 	and.w	r3, r3, #7
 8001b4e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b50:	69fb      	ldr	r3, [r7, #28]
 8001b52:	f1c3 0307 	rsb	r3, r3, #7
 8001b56:	2b04      	cmp	r3, #4
 8001b58:	bf28      	it	cs
 8001b5a:	2304      	movcs	r3, #4
 8001b5c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b5e:	69fb      	ldr	r3, [r7, #28]
 8001b60:	3304      	adds	r3, #4
 8001b62:	2b06      	cmp	r3, #6
 8001b64:	d902      	bls.n	8001b6c <NVIC_EncodePriority+0x30>
 8001b66:	69fb      	ldr	r3, [r7, #28]
 8001b68:	3b03      	subs	r3, #3
 8001b6a:	e000      	b.n	8001b6e <NVIC_EncodePriority+0x32>
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b70:	f04f 32ff 	mov.w	r2, #4294967295
 8001b74:	69bb      	ldr	r3, [r7, #24]
 8001b76:	fa02 f303 	lsl.w	r3, r2, r3
 8001b7a:	43da      	mvns	r2, r3
 8001b7c:	68bb      	ldr	r3, [r7, #8]
 8001b7e:	401a      	ands	r2, r3
 8001b80:	697b      	ldr	r3, [r7, #20]
 8001b82:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b84:	f04f 31ff 	mov.w	r1, #4294967295
 8001b88:	697b      	ldr	r3, [r7, #20]
 8001b8a:	fa01 f303 	lsl.w	r3, r1, r3
 8001b8e:	43d9      	mvns	r1, r3
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b94:	4313      	orrs	r3, r2
         );
}
 8001b96:	4618      	mov	r0, r3
 8001b98:	3724      	adds	r7, #36	; 0x24
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	bc80      	pop	{r7}
 8001b9e:	4770      	bx	lr

08001ba0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b082      	sub	sp, #8
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	3b01      	subs	r3, #1
 8001bac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001bb0:	d301      	bcc.n	8001bb6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001bb2:	2301      	movs	r3, #1
 8001bb4:	e00f      	b.n	8001bd6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001bb6:	4a0a      	ldr	r2, [pc, #40]	; (8001be0 <SysTick_Config+0x40>)
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	3b01      	subs	r3, #1
 8001bbc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001bbe:	210f      	movs	r1, #15
 8001bc0:	f04f 30ff 	mov.w	r0, #4294967295
 8001bc4:	f7ff ff90 	bl	8001ae8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001bc8:	4b05      	ldr	r3, [pc, #20]	; (8001be0 <SysTick_Config+0x40>)
 8001bca:	2200      	movs	r2, #0
 8001bcc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001bce:	4b04      	ldr	r3, [pc, #16]	; (8001be0 <SysTick_Config+0x40>)
 8001bd0:	2207      	movs	r2, #7
 8001bd2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001bd4:	2300      	movs	r3, #0
}
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	3708      	adds	r7, #8
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bd80      	pop	{r7, pc}
 8001bde:	bf00      	nop
 8001be0:	e000e010 	.word	0xe000e010

08001be4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b082      	sub	sp, #8
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001bec:	6878      	ldr	r0, [r7, #4]
 8001bee:	f7ff ff2d 	bl	8001a4c <__NVIC_SetPriorityGrouping>
}
 8001bf2:	bf00      	nop
 8001bf4:	3708      	adds	r7, #8
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	bd80      	pop	{r7, pc}

08001bfa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001bfa:	b580      	push	{r7, lr}
 8001bfc:	b086      	sub	sp, #24
 8001bfe:	af00      	add	r7, sp, #0
 8001c00:	4603      	mov	r3, r0
 8001c02:	60b9      	str	r1, [r7, #8]
 8001c04:	607a      	str	r2, [r7, #4]
 8001c06:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001c08:	2300      	movs	r3, #0
 8001c0a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001c0c:	f7ff ff42 	bl	8001a94 <__NVIC_GetPriorityGrouping>
 8001c10:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c12:	687a      	ldr	r2, [r7, #4]
 8001c14:	68b9      	ldr	r1, [r7, #8]
 8001c16:	6978      	ldr	r0, [r7, #20]
 8001c18:	f7ff ff90 	bl	8001b3c <NVIC_EncodePriority>
 8001c1c:	4602      	mov	r2, r0
 8001c1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c22:	4611      	mov	r1, r2
 8001c24:	4618      	mov	r0, r3
 8001c26:	f7ff ff5f 	bl	8001ae8 <__NVIC_SetPriority>
}
 8001c2a:	bf00      	nop
 8001c2c:	3718      	adds	r7, #24
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	bd80      	pop	{r7, pc}

08001c32 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c32:	b580      	push	{r7, lr}
 8001c34:	b082      	sub	sp, #8
 8001c36:	af00      	add	r7, sp, #0
 8001c38:	4603      	mov	r3, r0
 8001c3a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c40:	4618      	mov	r0, r3
 8001c42:	f7ff ff35 	bl	8001ab0 <__NVIC_EnableIRQ>
}
 8001c46:	bf00      	nop
 8001c48:	3708      	adds	r7, #8
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	bd80      	pop	{r7, pc}

08001c4e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c4e:	b580      	push	{r7, lr}
 8001c50:	b082      	sub	sp, #8
 8001c52:	af00      	add	r7, sp, #0
 8001c54:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c56:	6878      	ldr	r0, [r7, #4]
 8001c58:	f7ff ffa2 	bl	8001ba0 <SysTick_Config>
 8001c5c:	4603      	mov	r3, r0
}
 8001c5e:	4618      	mov	r0, r3
 8001c60:	3708      	adds	r7, #8
 8001c62:	46bd      	mov	sp, r7
 8001c64:	bd80      	pop	{r7, pc}
	...

08001c68 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	b085      	sub	sp, #20
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001c70:	2300      	movs	r3, #0
 8001c72:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d101      	bne.n	8001c7e <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001c7a:	2301      	movs	r3, #1
 8001c7c:	e043      	b.n	8001d06 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	461a      	mov	r2, r3
 8001c84:	4b22      	ldr	r3, [pc, #136]	; (8001d10 <HAL_DMA_Init+0xa8>)
 8001c86:	4413      	add	r3, r2
 8001c88:	4a22      	ldr	r2, [pc, #136]	; (8001d14 <HAL_DMA_Init+0xac>)
 8001c8a:	fba2 2303 	umull	r2, r3, r2, r3
 8001c8e:	091b      	lsrs	r3, r3, #4
 8001c90:	009a      	lsls	r2, r3, #2
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	4a1f      	ldr	r2, [pc, #124]	; (8001d18 <HAL_DMA_Init+0xb0>)
 8001c9a:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	2202      	movs	r2, #2
 8001ca0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001cb2:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001cb6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001cc0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	68db      	ldr	r3, [r3, #12]
 8001cc6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ccc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	695b      	ldr	r3, [r3, #20]
 8001cd2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001cd8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	69db      	ldr	r3, [r3, #28]
 8001cde:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001ce0:	68fa      	ldr	r2, [r7, #12]
 8001ce2:	4313      	orrs	r3, r2
 8001ce4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	68fa      	ldr	r2, [r7, #12]
 8001cec:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	2201      	movs	r2, #1
 8001cf8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	2200      	movs	r2, #0
 8001d00:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001d04:	2300      	movs	r3, #0
}
 8001d06:	4618      	mov	r0, r3
 8001d08:	3714      	adds	r7, #20
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	bc80      	pop	{r7}
 8001d0e:	4770      	bx	lr
 8001d10:	bffdfff8 	.word	0xbffdfff8
 8001d14:	cccccccd 	.word	0xcccccccd
 8001d18:	40020000 	.word	0x40020000

08001d1c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b086      	sub	sp, #24
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	60f8      	str	r0, [r7, #12]
 8001d24:	60b9      	str	r1, [r7, #8]
 8001d26:	607a      	str	r2, [r7, #4]
 8001d28:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001d34:	2b01      	cmp	r3, #1
 8001d36:	d101      	bne.n	8001d3c <HAL_DMA_Start_IT+0x20>
 8001d38:	2302      	movs	r3, #2
 8001d3a:	e04b      	b.n	8001dd4 <HAL_DMA_Start_IT+0xb8>
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	2201      	movs	r2, #1
 8001d40:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001d4a:	b2db      	uxtb	r3, r3
 8001d4c:	2b01      	cmp	r3, #1
 8001d4e:	d13a      	bne.n	8001dc6 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	2202      	movs	r2, #2
 8001d54:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	681a      	ldr	r2, [r3, #0]
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f022 0201 	bic.w	r2, r2, #1
 8001d6c:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001d6e:	683b      	ldr	r3, [r7, #0]
 8001d70:	687a      	ldr	r2, [r7, #4]
 8001d72:	68b9      	ldr	r1, [r7, #8]
 8001d74:	68f8      	ldr	r0, [r7, #12]
 8001d76:	f000 f9eb 	bl	8002150 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d008      	beq.n	8001d94 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	681a      	ldr	r2, [r3, #0]
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f042 020e 	orr.w	r2, r2, #14
 8001d90:	601a      	str	r2, [r3, #0]
 8001d92:	e00f      	b.n	8001db4 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	681a      	ldr	r2, [r3, #0]
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f022 0204 	bic.w	r2, r2, #4
 8001da2:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	681a      	ldr	r2, [r3, #0]
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f042 020a 	orr.w	r2, r2, #10
 8001db2:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	681a      	ldr	r2, [r3, #0]
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f042 0201 	orr.w	r2, r2, #1
 8001dc2:	601a      	str	r2, [r3, #0]
 8001dc4:	e005      	b.n	8001dd2 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	2200      	movs	r2, #0
 8001dca:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8001dce:	2302      	movs	r3, #2
 8001dd0:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8001dd2:	7dfb      	ldrb	r3, [r7, #23]
}
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	3718      	adds	r7, #24
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	bd80      	pop	{r7, pc}

08001ddc <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001ddc:	b480      	push	{r7}
 8001dde:	b085      	sub	sp, #20
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001de4:	2300      	movs	r3, #0
 8001de6:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001dee:	b2db      	uxtb	r3, r3
 8001df0:	2b02      	cmp	r3, #2
 8001df2:	d008      	beq.n	8001e06 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	2204      	movs	r2, #4
 8001df8:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001e02:	2301      	movs	r3, #1
 8001e04:	e020      	b.n	8001e48 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	681a      	ldr	r2, [r3, #0]
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f022 020e 	bic.w	r2, r2, #14
 8001e14:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	681a      	ldr	r2, [r3, #0]
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f022 0201 	bic.w	r2, r2, #1
 8001e24:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e2e:	2101      	movs	r1, #1
 8001e30:	fa01 f202 	lsl.w	r2, r1, r2
 8001e34:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	2201      	movs	r2, #1
 8001e3a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	2200      	movs	r2, #0
 8001e42:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001e46:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e48:	4618      	mov	r0, r3
 8001e4a:	3714      	adds	r7, #20
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	bc80      	pop	{r7}
 8001e50:	4770      	bx	lr
	...

08001e54 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b084      	sub	sp, #16
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001e66:	b2db      	uxtb	r3, r3
 8001e68:	2b02      	cmp	r3, #2
 8001e6a:	d005      	beq.n	8001e78 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	2204      	movs	r2, #4
 8001e70:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001e72:	2301      	movs	r3, #1
 8001e74:	73fb      	strb	r3, [r7, #15]
 8001e76:	e051      	b.n	8001f1c <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	681a      	ldr	r2, [r3, #0]
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f022 020e 	bic.w	r2, r2, #14
 8001e86:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	681a      	ldr	r2, [r3, #0]
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f022 0201 	bic.w	r2, r2, #1
 8001e96:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	4a22      	ldr	r2, [pc, #136]	; (8001f28 <HAL_DMA_Abort_IT+0xd4>)
 8001e9e:	4293      	cmp	r3, r2
 8001ea0:	d029      	beq.n	8001ef6 <HAL_DMA_Abort_IT+0xa2>
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	4a21      	ldr	r2, [pc, #132]	; (8001f2c <HAL_DMA_Abort_IT+0xd8>)
 8001ea8:	4293      	cmp	r3, r2
 8001eaa:	d022      	beq.n	8001ef2 <HAL_DMA_Abort_IT+0x9e>
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	4a1f      	ldr	r2, [pc, #124]	; (8001f30 <HAL_DMA_Abort_IT+0xdc>)
 8001eb2:	4293      	cmp	r3, r2
 8001eb4:	d01a      	beq.n	8001eec <HAL_DMA_Abort_IT+0x98>
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	4a1e      	ldr	r2, [pc, #120]	; (8001f34 <HAL_DMA_Abort_IT+0xe0>)
 8001ebc:	4293      	cmp	r3, r2
 8001ebe:	d012      	beq.n	8001ee6 <HAL_DMA_Abort_IT+0x92>
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	4a1c      	ldr	r2, [pc, #112]	; (8001f38 <HAL_DMA_Abort_IT+0xe4>)
 8001ec6:	4293      	cmp	r3, r2
 8001ec8:	d00a      	beq.n	8001ee0 <HAL_DMA_Abort_IT+0x8c>
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	4a1b      	ldr	r2, [pc, #108]	; (8001f3c <HAL_DMA_Abort_IT+0xe8>)
 8001ed0:	4293      	cmp	r3, r2
 8001ed2:	d102      	bne.n	8001eda <HAL_DMA_Abort_IT+0x86>
 8001ed4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001ed8:	e00e      	b.n	8001ef8 <HAL_DMA_Abort_IT+0xa4>
 8001eda:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001ede:	e00b      	b.n	8001ef8 <HAL_DMA_Abort_IT+0xa4>
 8001ee0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001ee4:	e008      	b.n	8001ef8 <HAL_DMA_Abort_IT+0xa4>
 8001ee6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001eea:	e005      	b.n	8001ef8 <HAL_DMA_Abort_IT+0xa4>
 8001eec:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001ef0:	e002      	b.n	8001ef8 <HAL_DMA_Abort_IT+0xa4>
 8001ef2:	2310      	movs	r3, #16
 8001ef4:	e000      	b.n	8001ef8 <HAL_DMA_Abort_IT+0xa4>
 8001ef6:	2301      	movs	r3, #1
 8001ef8:	4a11      	ldr	r2, [pc, #68]	; (8001f40 <HAL_DMA_Abort_IT+0xec>)
 8001efa:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	2201      	movs	r2, #1
 8001f00:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	2200      	movs	r2, #0
 8001f08:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d003      	beq.n	8001f1c <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f18:	6878      	ldr	r0, [r7, #4]
 8001f1a:	4798      	blx	r3
    } 
  }
  return status;
 8001f1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f1e:	4618      	mov	r0, r3
 8001f20:	3710      	adds	r7, #16
 8001f22:	46bd      	mov	sp, r7
 8001f24:	bd80      	pop	{r7, pc}
 8001f26:	bf00      	nop
 8001f28:	40020008 	.word	0x40020008
 8001f2c:	4002001c 	.word	0x4002001c
 8001f30:	40020030 	.word	0x40020030
 8001f34:	40020044 	.word	0x40020044
 8001f38:	40020058 	.word	0x40020058
 8001f3c:	4002006c 	.word	0x4002006c
 8001f40:	40020000 	.word	0x40020000

08001f44 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b084      	sub	sp, #16
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f60:	2204      	movs	r2, #4
 8001f62:	409a      	lsls	r2, r3
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	4013      	ands	r3, r2
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d04f      	beq.n	800200c <HAL_DMA_IRQHandler+0xc8>
 8001f6c:	68bb      	ldr	r3, [r7, #8]
 8001f6e:	f003 0304 	and.w	r3, r3, #4
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d04a      	beq.n	800200c <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f003 0320 	and.w	r3, r3, #32
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d107      	bne.n	8001f94 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	681a      	ldr	r2, [r3, #0]
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f022 0204 	bic.w	r2, r2, #4
 8001f92:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	4a66      	ldr	r2, [pc, #408]	; (8002134 <HAL_DMA_IRQHandler+0x1f0>)
 8001f9a:	4293      	cmp	r3, r2
 8001f9c:	d029      	beq.n	8001ff2 <HAL_DMA_IRQHandler+0xae>
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	4a65      	ldr	r2, [pc, #404]	; (8002138 <HAL_DMA_IRQHandler+0x1f4>)
 8001fa4:	4293      	cmp	r3, r2
 8001fa6:	d022      	beq.n	8001fee <HAL_DMA_IRQHandler+0xaa>
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	4a63      	ldr	r2, [pc, #396]	; (800213c <HAL_DMA_IRQHandler+0x1f8>)
 8001fae:	4293      	cmp	r3, r2
 8001fb0:	d01a      	beq.n	8001fe8 <HAL_DMA_IRQHandler+0xa4>
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	4a62      	ldr	r2, [pc, #392]	; (8002140 <HAL_DMA_IRQHandler+0x1fc>)
 8001fb8:	4293      	cmp	r3, r2
 8001fba:	d012      	beq.n	8001fe2 <HAL_DMA_IRQHandler+0x9e>
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	4a60      	ldr	r2, [pc, #384]	; (8002144 <HAL_DMA_IRQHandler+0x200>)
 8001fc2:	4293      	cmp	r3, r2
 8001fc4:	d00a      	beq.n	8001fdc <HAL_DMA_IRQHandler+0x98>
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	4a5f      	ldr	r2, [pc, #380]	; (8002148 <HAL_DMA_IRQHandler+0x204>)
 8001fcc:	4293      	cmp	r3, r2
 8001fce:	d102      	bne.n	8001fd6 <HAL_DMA_IRQHandler+0x92>
 8001fd0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001fd4:	e00e      	b.n	8001ff4 <HAL_DMA_IRQHandler+0xb0>
 8001fd6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001fda:	e00b      	b.n	8001ff4 <HAL_DMA_IRQHandler+0xb0>
 8001fdc:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001fe0:	e008      	b.n	8001ff4 <HAL_DMA_IRQHandler+0xb0>
 8001fe2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001fe6:	e005      	b.n	8001ff4 <HAL_DMA_IRQHandler+0xb0>
 8001fe8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001fec:	e002      	b.n	8001ff4 <HAL_DMA_IRQHandler+0xb0>
 8001fee:	2340      	movs	r3, #64	; 0x40
 8001ff0:	e000      	b.n	8001ff4 <HAL_DMA_IRQHandler+0xb0>
 8001ff2:	2304      	movs	r3, #4
 8001ff4:	4a55      	ldr	r2, [pc, #340]	; (800214c <HAL_DMA_IRQHandler+0x208>)
 8001ff6:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	f000 8094 	beq.w	800212a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002006:	6878      	ldr	r0, [r7, #4]
 8002008:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 800200a:	e08e      	b.n	800212a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002010:	2202      	movs	r2, #2
 8002012:	409a      	lsls	r2, r3
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	4013      	ands	r3, r2
 8002018:	2b00      	cmp	r3, #0
 800201a:	d056      	beq.n	80020ca <HAL_DMA_IRQHandler+0x186>
 800201c:	68bb      	ldr	r3, [r7, #8]
 800201e:	f003 0302 	and.w	r3, r3, #2
 8002022:	2b00      	cmp	r3, #0
 8002024:	d051      	beq.n	80020ca <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f003 0320 	and.w	r3, r3, #32
 8002030:	2b00      	cmp	r3, #0
 8002032:	d10b      	bne.n	800204c <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	681a      	ldr	r2, [r3, #0]
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f022 020a 	bic.w	r2, r2, #10
 8002042:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	2201      	movs	r2, #1
 8002048:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	4a38      	ldr	r2, [pc, #224]	; (8002134 <HAL_DMA_IRQHandler+0x1f0>)
 8002052:	4293      	cmp	r3, r2
 8002054:	d029      	beq.n	80020aa <HAL_DMA_IRQHandler+0x166>
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	4a37      	ldr	r2, [pc, #220]	; (8002138 <HAL_DMA_IRQHandler+0x1f4>)
 800205c:	4293      	cmp	r3, r2
 800205e:	d022      	beq.n	80020a6 <HAL_DMA_IRQHandler+0x162>
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	4a35      	ldr	r2, [pc, #212]	; (800213c <HAL_DMA_IRQHandler+0x1f8>)
 8002066:	4293      	cmp	r3, r2
 8002068:	d01a      	beq.n	80020a0 <HAL_DMA_IRQHandler+0x15c>
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	4a34      	ldr	r2, [pc, #208]	; (8002140 <HAL_DMA_IRQHandler+0x1fc>)
 8002070:	4293      	cmp	r3, r2
 8002072:	d012      	beq.n	800209a <HAL_DMA_IRQHandler+0x156>
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	4a32      	ldr	r2, [pc, #200]	; (8002144 <HAL_DMA_IRQHandler+0x200>)
 800207a:	4293      	cmp	r3, r2
 800207c:	d00a      	beq.n	8002094 <HAL_DMA_IRQHandler+0x150>
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	4a31      	ldr	r2, [pc, #196]	; (8002148 <HAL_DMA_IRQHandler+0x204>)
 8002084:	4293      	cmp	r3, r2
 8002086:	d102      	bne.n	800208e <HAL_DMA_IRQHandler+0x14a>
 8002088:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800208c:	e00e      	b.n	80020ac <HAL_DMA_IRQHandler+0x168>
 800208e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002092:	e00b      	b.n	80020ac <HAL_DMA_IRQHandler+0x168>
 8002094:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002098:	e008      	b.n	80020ac <HAL_DMA_IRQHandler+0x168>
 800209a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800209e:	e005      	b.n	80020ac <HAL_DMA_IRQHandler+0x168>
 80020a0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80020a4:	e002      	b.n	80020ac <HAL_DMA_IRQHandler+0x168>
 80020a6:	2320      	movs	r3, #32
 80020a8:	e000      	b.n	80020ac <HAL_DMA_IRQHandler+0x168>
 80020aa:	2302      	movs	r3, #2
 80020ac:	4a27      	ldr	r2, [pc, #156]	; (800214c <HAL_DMA_IRQHandler+0x208>)
 80020ae:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	2200      	movs	r2, #0
 80020b4:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d034      	beq.n	800212a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020c4:	6878      	ldr	r0, [r7, #4]
 80020c6:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80020c8:	e02f      	b.n	800212a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ce:	2208      	movs	r2, #8
 80020d0:	409a      	lsls	r2, r3
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	4013      	ands	r3, r2
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d028      	beq.n	800212c <HAL_DMA_IRQHandler+0x1e8>
 80020da:	68bb      	ldr	r3, [r7, #8]
 80020dc:	f003 0308 	and.w	r3, r3, #8
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d023      	beq.n	800212c <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	681a      	ldr	r2, [r3, #0]
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f022 020e 	bic.w	r2, r2, #14
 80020f2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020fc:	2101      	movs	r1, #1
 80020fe:	fa01 f202 	lsl.w	r2, r1, r2
 8002102:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	2201      	movs	r2, #1
 8002108:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	2201      	movs	r2, #1
 800210e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	2200      	movs	r2, #0
 8002116:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800211e:	2b00      	cmp	r3, #0
 8002120:	d004      	beq.n	800212c <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002126:	6878      	ldr	r0, [r7, #4]
 8002128:	4798      	blx	r3
    }
  }
  return;
 800212a:	bf00      	nop
 800212c:	bf00      	nop
}
 800212e:	3710      	adds	r7, #16
 8002130:	46bd      	mov	sp, r7
 8002132:	bd80      	pop	{r7, pc}
 8002134:	40020008 	.word	0x40020008
 8002138:	4002001c 	.word	0x4002001c
 800213c:	40020030 	.word	0x40020030
 8002140:	40020044 	.word	0x40020044
 8002144:	40020058 	.word	0x40020058
 8002148:	4002006c 	.word	0x4002006c
 800214c:	40020000 	.word	0x40020000

08002150 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002150:	b480      	push	{r7}
 8002152:	b085      	sub	sp, #20
 8002154:	af00      	add	r7, sp, #0
 8002156:	60f8      	str	r0, [r7, #12]
 8002158:	60b9      	str	r1, [r7, #8]
 800215a:	607a      	str	r2, [r7, #4]
 800215c:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002166:	2101      	movs	r1, #1
 8002168:	fa01 f202 	lsl.w	r2, r1, r2
 800216c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	683a      	ldr	r2, [r7, #0]
 8002174:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	685b      	ldr	r3, [r3, #4]
 800217a:	2b10      	cmp	r3, #16
 800217c:	d108      	bne.n	8002190 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	687a      	ldr	r2, [r7, #4]
 8002184:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	68ba      	ldr	r2, [r7, #8]
 800218c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800218e:	e007      	b.n	80021a0 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	68ba      	ldr	r2, [r7, #8]
 8002196:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	687a      	ldr	r2, [r7, #4]
 800219e:	60da      	str	r2, [r3, #12]
}
 80021a0:	bf00      	nop
 80021a2:	3714      	adds	r7, #20
 80021a4:	46bd      	mov	sp, r7
 80021a6:	bc80      	pop	{r7}
 80021a8:	4770      	bx	lr
	...

080021ac <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80021ac:	b480      	push	{r7}
 80021ae:	b08b      	sub	sp, #44	; 0x2c
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
 80021b4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80021b6:	2300      	movs	r3, #0
 80021b8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80021ba:	2300      	movs	r3, #0
 80021bc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80021be:	e161      	b.n	8002484 <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80021c0:	2201      	movs	r2, #1
 80021c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021c4:	fa02 f303 	lsl.w	r3, r2, r3
 80021c8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80021ca:	683b      	ldr	r3, [r7, #0]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	69fa      	ldr	r2, [r7, #28]
 80021d0:	4013      	ands	r3, r2
 80021d2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80021d4:	69ba      	ldr	r2, [r7, #24]
 80021d6:	69fb      	ldr	r3, [r7, #28]
 80021d8:	429a      	cmp	r2, r3
 80021da:	f040 8150 	bne.w	800247e <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80021de:	683b      	ldr	r3, [r7, #0]
 80021e0:	685b      	ldr	r3, [r3, #4]
 80021e2:	4a97      	ldr	r2, [pc, #604]	; (8002440 <HAL_GPIO_Init+0x294>)
 80021e4:	4293      	cmp	r3, r2
 80021e6:	d05e      	beq.n	80022a6 <HAL_GPIO_Init+0xfa>
 80021e8:	4a95      	ldr	r2, [pc, #596]	; (8002440 <HAL_GPIO_Init+0x294>)
 80021ea:	4293      	cmp	r3, r2
 80021ec:	d875      	bhi.n	80022da <HAL_GPIO_Init+0x12e>
 80021ee:	4a95      	ldr	r2, [pc, #596]	; (8002444 <HAL_GPIO_Init+0x298>)
 80021f0:	4293      	cmp	r3, r2
 80021f2:	d058      	beq.n	80022a6 <HAL_GPIO_Init+0xfa>
 80021f4:	4a93      	ldr	r2, [pc, #588]	; (8002444 <HAL_GPIO_Init+0x298>)
 80021f6:	4293      	cmp	r3, r2
 80021f8:	d86f      	bhi.n	80022da <HAL_GPIO_Init+0x12e>
 80021fa:	4a93      	ldr	r2, [pc, #588]	; (8002448 <HAL_GPIO_Init+0x29c>)
 80021fc:	4293      	cmp	r3, r2
 80021fe:	d052      	beq.n	80022a6 <HAL_GPIO_Init+0xfa>
 8002200:	4a91      	ldr	r2, [pc, #580]	; (8002448 <HAL_GPIO_Init+0x29c>)
 8002202:	4293      	cmp	r3, r2
 8002204:	d869      	bhi.n	80022da <HAL_GPIO_Init+0x12e>
 8002206:	4a91      	ldr	r2, [pc, #580]	; (800244c <HAL_GPIO_Init+0x2a0>)
 8002208:	4293      	cmp	r3, r2
 800220a:	d04c      	beq.n	80022a6 <HAL_GPIO_Init+0xfa>
 800220c:	4a8f      	ldr	r2, [pc, #572]	; (800244c <HAL_GPIO_Init+0x2a0>)
 800220e:	4293      	cmp	r3, r2
 8002210:	d863      	bhi.n	80022da <HAL_GPIO_Init+0x12e>
 8002212:	4a8f      	ldr	r2, [pc, #572]	; (8002450 <HAL_GPIO_Init+0x2a4>)
 8002214:	4293      	cmp	r3, r2
 8002216:	d046      	beq.n	80022a6 <HAL_GPIO_Init+0xfa>
 8002218:	4a8d      	ldr	r2, [pc, #564]	; (8002450 <HAL_GPIO_Init+0x2a4>)
 800221a:	4293      	cmp	r3, r2
 800221c:	d85d      	bhi.n	80022da <HAL_GPIO_Init+0x12e>
 800221e:	2b12      	cmp	r3, #18
 8002220:	d82a      	bhi.n	8002278 <HAL_GPIO_Init+0xcc>
 8002222:	2b12      	cmp	r3, #18
 8002224:	d859      	bhi.n	80022da <HAL_GPIO_Init+0x12e>
 8002226:	a201      	add	r2, pc, #4	; (adr r2, 800222c <HAL_GPIO_Init+0x80>)
 8002228:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800222c:	080022a7 	.word	0x080022a7
 8002230:	08002281 	.word	0x08002281
 8002234:	08002293 	.word	0x08002293
 8002238:	080022d5 	.word	0x080022d5
 800223c:	080022db 	.word	0x080022db
 8002240:	080022db 	.word	0x080022db
 8002244:	080022db 	.word	0x080022db
 8002248:	080022db 	.word	0x080022db
 800224c:	080022db 	.word	0x080022db
 8002250:	080022db 	.word	0x080022db
 8002254:	080022db 	.word	0x080022db
 8002258:	080022db 	.word	0x080022db
 800225c:	080022db 	.word	0x080022db
 8002260:	080022db 	.word	0x080022db
 8002264:	080022db 	.word	0x080022db
 8002268:	080022db 	.word	0x080022db
 800226c:	080022db 	.word	0x080022db
 8002270:	08002289 	.word	0x08002289
 8002274:	0800229d 	.word	0x0800229d
 8002278:	4a76      	ldr	r2, [pc, #472]	; (8002454 <HAL_GPIO_Init+0x2a8>)
 800227a:	4293      	cmp	r3, r2
 800227c:	d013      	beq.n	80022a6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800227e:	e02c      	b.n	80022da <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002280:	683b      	ldr	r3, [r7, #0]
 8002282:	68db      	ldr	r3, [r3, #12]
 8002284:	623b      	str	r3, [r7, #32]
          break;
 8002286:	e029      	b.n	80022dc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	68db      	ldr	r3, [r3, #12]
 800228c:	3304      	adds	r3, #4
 800228e:	623b      	str	r3, [r7, #32]
          break;
 8002290:	e024      	b.n	80022dc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002292:	683b      	ldr	r3, [r7, #0]
 8002294:	68db      	ldr	r3, [r3, #12]
 8002296:	3308      	adds	r3, #8
 8002298:	623b      	str	r3, [r7, #32]
          break;
 800229a:	e01f      	b.n	80022dc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	68db      	ldr	r3, [r3, #12]
 80022a0:	330c      	adds	r3, #12
 80022a2:	623b      	str	r3, [r7, #32]
          break;
 80022a4:	e01a      	b.n	80022dc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80022a6:	683b      	ldr	r3, [r7, #0]
 80022a8:	689b      	ldr	r3, [r3, #8]
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d102      	bne.n	80022b4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80022ae:	2304      	movs	r3, #4
 80022b0:	623b      	str	r3, [r7, #32]
          break;
 80022b2:	e013      	b.n	80022dc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	689b      	ldr	r3, [r3, #8]
 80022b8:	2b01      	cmp	r3, #1
 80022ba:	d105      	bne.n	80022c8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80022bc:	2308      	movs	r3, #8
 80022be:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	69fa      	ldr	r2, [r7, #28]
 80022c4:	611a      	str	r2, [r3, #16]
          break;
 80022c6:	e009      	b.n	80022dc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80022c8:	2308      	movs	r3, #8
 80022ca:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	69fa      	ldr	r2, [r7, #28]
 80022d0:	615a      	str	r2, [r3, #20]
          break;
 80022d2:	e003      	b.n	80022dc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80022d4:	2300      	movs	r3, #0
 80022d6:	623b      	str	r3, [r7, #32]
          break;
 80022d8:	e000      	b.n	80022dc <HAL_GPIO_Init+0x130>
          break;
 80022da:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80022dc:	69bb      	ldr	r3, [r7, #24]
 80022de:	2bff      	cmp	r3, #255	; 0xff
 80022e0:	d801      	bhi.n	80022e6 <HAL_GPIO_Init+0x13a>
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	e001      	b.n	80022ea <HAL_GPIO_Init+0x13e>
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	3304      	adds	r3, #4
 80022ea:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80022ec:	69bb      	ldr	r3, [r7, #24]
 80022ee:	2bff      	cmp	r3, #255	; 0xff
 80022f0:	d802      	bhi.n	80022f8 <HAL_GPIO_Init+0x14c>
 80022f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022f4:	009b      	lsls	r3, r3, #2
 80022f6:	e002      	b.n	80022fe <HAL_GPIO_Init+0x152>
 80022f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022fa:	3b08      	subs	r3, #8
 80022fc:	009b      	lsls	r3, r3, #2
 80022fe:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002300:	697b      	ldr	r3, [r7, #20]
 8002302:	681a      	ldr	r2, [r3, #0]
 8002304:	210f      	movs	r1, #15
 8002306:	693b      	ldr	r3, [r7, #16]
 8002308:	fa01 f303 	lsl.w	r3, r1, r3
 800230c:	43db      	mvns	r3, r3
 800230e:	401a      	ands	r2, r3
 8002310:	6a39      	ldr	r1, [r7, #32]
 8002312:	693b      	ldr	r3, [r7, #16]
 8002314:	fa01 f303 	lsl.w	r3, r1, r3
 8002318:	431a      	orrs	r2, r3
 800231a:	697b      	ldr	r3, [r7, #20]
 800231c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800231e:	683b      	ldr	r3, [r7, #0]
 8002320:	685b      	ldr	r3, [r3, #4]
 8002322:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002326:	2b00      	cmp	r3, #0
 8002328:	f000 80a9 	beq.w	800247e <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800232c:	4b4a      	ldr	r3, [pc, #296]	; (8002458 <HAL_GPIO_Init+0x2ac>)
 800232e:	699b      	ldr	r3, [r3, #24]
 8002330:	4a49      	ldr	r2, [pc, #292]	; (8002458 <HAL_GPIO_Init+0x2ac>)
 8002332:	f043 0301 	orr.w	r3, r3, #1
 8002336:	6193      	str	r3, [r2, #24]
 8002338:	4b47      	ldr	r3, [pc, #284]	; (8002458 <HAL_GPIO_Init+0x2ac>)
 800233a:	699b      	ldr	r3, [r3, #24]
 800233c:	f003 0301 	and.w	r3, r3, #1
 8002340:	60bb      	str	r3, [r7, #8]
 8002342:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002344:	4a45      	ldr	r2, [pc, #276]	; (800245c <HAL_GPIO_Init+0x2b0>)
 8002346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002348:	089b      	lsrs	r3, r3, #2
 800234a:	3302      	adds	r3, #2
 800234c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002350:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002352:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002354:	f003 0303 	and.w	r3, r3, #3
 8002358:	009b      	lsls	r3, r3, #2
 800235a:	220f      	movs	r2, #15
 800235c:	fa02 f303 	lsl.w	r3, r2, r3
 8002360:	43db      	mvns	r3, r3
 8002362:	68fa      	ldr	r2, [r7, #12]
 8002364:	4013      	ands	r3, r2
 8002366:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	4a3d      	ldr	r2, [pc, #244]	; (8002460 <HAL_GPIO_Init+0x2b4>)
 800236c:	4293      	cmp	r3, r2
 800236e:	d00d      	beq.n	800238c <HAL_GPIO_Init+0x1e0>
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	4a3c      	ldr	r2, [pc, #240]	; (8002464 <HAL_GPIO_Init+0x2b8>)
 8002374:	4293      	cmp	r3, r2
 8002376:	d007      	beq.n	8002388 <HAL_GPIO_Init+0x1dc>
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	4a3b      	ldr	r2, [pc, #236]	; (8002468 <HAL_GPIO_Init+0x2bc>)
 800237c:	4293      	cmp	r3, r2
 800237e:	d101      	bne.n	8002384 <HAL_GPIO_Init+0x1d8>
 8002380:	2302      	movs	r3, #2
 8002382:	e004      	b.n	800238e <HAL_GPIO_Init+0x1e2>
 8002384:	2303      	movs	r3, #3
 8002386:	e002      	b.n	800238e <HAL_GPIO_Init+0x1e2>
 8002388:	2301      	movs	r3, #1
 800238a:	e000      	b.n	800238e <HAL_GPIO_Init+0x1e2>
 800238c:	2300      	movs	r3, #0
 800238e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002390:	f002 0203 	and.w	r2, r2, #3
 8002394:	0092      	lsls	r2, r2, #2
 8002396:	4093      	lsls	r3, r2
 8002398:	68fa      	ldr	r2, [r7, #12]
 800239a:	4313      	orrs	r3, r2
 800239c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800239e:	492f      	ldr	r1, [pc, #188]	; (800245c <HAL_GPIO_Init+0x2b0>)
 80023a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023a2:	089b      	lsrs	r3, r3, #2
 80023a4:	3302      	adds	r3, #2
 80023a6:	68fa      	ldr	r2, [r7, #12]
 80023a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	685b      	ldr	r3, [r3, #4]
 80023b0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d006      	beq.n	80023c6 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80023b8:	4b2c      	ldr	r3, [pc, #176]	; (800246c <HAL_GPIO_Init+0x2c0>)
 80023ba:	689a      	ldr	r2, [r3, #8]
 80023bc:	492b      	ldr	r1, [pc, #172]	; (800246c <HAL_GPIO_Init+0x2c0>)
 80023be:	69bb      	ldr	r3, [r7, #24]
 80023c0:	4313      	orrs	r3, r2
 80023c2:	608b      	str	r3, [r1, #8]
 80023c4:	e006      	b.n	80023d4 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80023c6:	4b29      	ldr	r3, [pc, #164]	; (800246c <HAL_GPIO_Init+0x2c0>)
 80023c8:	689a      	ldr	r2, [r3, #8]
 80023ca:	69bb      	ldr	r3, [r7, #24]
 80023cc:	43db      	mvns	r3, r3
 80023ce:	4927      	ldr	r1, [pc, #156]	; (800246c <HAL_GPIO_Init+0x2c0>)
 80023d0:	4013      	ands	r3, r2
 80023d2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80023d4:	683b      	ldr	r3, [r7, #0]
 80023d6:	685b      	ldr	r3, [r3, #4]
 80023d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d006      	beq.n	80023ee <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80023e0:	4b22      	ldr	r3, [pc, #136]	; (800246c <HAL_GPIO_Init+0x2c0>)
 80023e2:	68da      	ldr	r2, [r3, #12]
 80023e4:	4921      	ldr	r1, [pc, #132]	; (800246c <HAL_GPIO_Init+0x2c0>)
 80023e6:	69bb      	ldr	r3, [r7, #24]
 80023e8:	4313      	orrs	r3, r2
 80023ea:	60cb      	str	r3, [r1, #12]
 80023ec:	e006      	b.n	80023fc <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80023ee:	4b1f      	ldr	r3, [pc, #124]	; (800246c <HAL_GPIO_Init+0x2c0>)
 80023f0:	68da      	ldr	r2, [r3, #12]
 80023f2:	69bb      	ldr	r3, [r7, #24]
 80023f4:	43db      	mvns	r3, r3
 80023f6:	491d      	ldr	r1, [pc, #116]	; (800246c <HAL_GPIO_Init+0x2c0>)
 80023f8:	4013      	ands	r3, r2
 80023fa:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80023fc:	683b      	ldr	r3, [r7, #0]
 80023fe:	685b      	ldr	r3, [r3, #4]
 8002400:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002404:	2b00      	cmp	r3, #0
 8002406:	d006      	beq.n	8002416 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002408:	4b18      	ldr	r3, [pc, #96]	; (800246c <HAL_GPIO_Init+0x2c0>)
 800240a:	685a      	ldr	r2, [r3, #4]
 800240c:	4917      	ldr	r1, [pc, #92]	; (800246c <HAL_GPIO_Init+0x2c0>)
 800240e:	69bb      	ldr	r3, [r7, #24]
 8002410:	4313      	orrs	r3, r2
 8002412:	604b      	str	r3, [r1, #4]
 8002414:	e006      	b.n	8002424 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002416:	4b15      	ldr	r3, [pc, #84]	; (800246c <HAL_GPIO_Init+0x2c0>)
 8002418:	685a      	ldr	r2, [r3, #4]
 800241a:	69bb      	ldr	r3, [r7, #24]
 800241c:	43db      	mvns	r3, r3
 800241e:	4913      	ldr	r1, [pc, #76]	; (800246c <HAL_GPIO_Init+0x2c0>)
 8002420:	4013      	ands	r3, r2
 8002422:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	685b      	ldr	r3, [r3, #4]
 8002428:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800242c:	2b00      	cmp	r3, #0
 800242e:	d01f      	beq.n	8002470 <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002430:	4b0e      	ldr	r3, [pc, #56]	; (800246c <HAL_GPIO_Init+0x2c0>)
 8002432:	681a      	ldr	r2, [r3, #0]
 8002434:	490d      	ldr	r1, [pc, #52]	; (800246c <HAL_GPIO_Init+0x2c0>)
 8002436:	69bb      	ldr	r3, [r7, #24]
 8002438:	4313      	orrs	r3, r2
 800243a:	600b      	str	r3, [r1, #0]
 800243c:	e01f      	b.n	800247e <HAL_GPIO_Init+0x2d2>
 800243e:	bf00      	nop
 8002440:	10320000 	.word	0x10320000
 8002444:	10310000 	.word	0x10310000
 8002448:	10220000 	.word	0x10220000
 800244c:	10210000 	.word	0x10210000
 8002450:	10120000 	.word	0x10120000
 8002454:	10110000 	.word	0x10110000
 8002458:	40021000 	.word	0x40021000
 800245c:	40010000 	.word	0x40010000
 8002460:	40010800 	.word	0x40010800
 8002464:	40010c00 	.word	0x40010c00
 8002468:	40011000 	.word	0x40011000
 800246c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002470:	4b0b      	ldr	r3, [pc, #44]	; (80024a0 <HAL_GPIO_Init+0x2f4>)
 8002472:	681a      	ldr	r2, [r3, #0]
 8002474:	69bb      	ldr	r3, [r7, #24]
 8002476:	43db      	mvns	r3, r3
 8002478:	4909      	ldr	r1, [pc, #36]	; (80024a0 <HAL_GPIO_Init+0x2f4>)
 800247a:	4013      	ands	r3, r2
 800247c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800247e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002480:	3301      	adds	r3, #1
 8002482:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002484:	683b      	ldr	r3, [r7, #0]
 8002486:	681a      	ldr	r2, [r3, #0]
 8002488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800248a:	fa22 f303 	lsr.w	r3, r2, r3
 800248e:	2b00      	cmp	r3, #0
 8002490:	f47f ae96 	bne.w	80021c0 <HAL_GPIO_Init+0x14>
  }
}
 8002494:	bf00      	nop
 8002496:	bf00      	nop
 8002498:	372c      	adds	r7, #44	; 0x2c
 800249a:	46bd      	mov	sp, r7
 800249c:	bc80      	pop	{r7}
 800249e:	4770      	bx	lr
 80024a0:	40010400 	.word	0x40010400

080024a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80024a4:	b480      	push	{r7}
 80024a6:	b083      	sub	sp, #12
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
 80024ac:	460b      	mov	r3, r1
 80024ae:	807b      	strh	r3, [r7, #2]
 80024b0:	4613      	mov	r3, r2
 80024b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80024b4:	787b      	ldrb	r3, [r7, #1]
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d003      	beq.n	80024c2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80024ba:	887a      	ldrh	r2, [r7, #2]
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80024c0:	e003      	b.n	80024ca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80024c2:	887b      	ldrh	r3, [r7, #2]
 80024c4:	041a      	lsls	r2, r3, #16
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	611a      	str	r2, [r3, #16]
}
 80024ca:	bf00      	nop
 80024cc:	370c      	adds	r7, #12
 80024ce:	46bd      	mov	sp, r7
 80024d0:	bc80      	pop	{r7}
 80024d2:	4770      	bx	lr

080024d4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80024d4:	b480      	push	{r7}
 80024d6:	b085      	sub	sp, #20
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
 80024dc:	460b      	mov	r3, r1
 80024de:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	68db      	ldr	r3, [r3, #12]
 80024e4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80024e6:	887a      	ldrh	r2, [r7, #2]
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	4013      	ands	r3, r2
 80024ec:	041a      	lsls	r2, r3, #16
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	43d9      	mvns	r1, r3
 80024f2:	887b      	ldrh	r3, [r7, #2]
 80024f4:	400b      	ands	r3, r1
 80024f6:	431a      	orrs	r2, r3
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	611a      	str	r2, [r3, #16]
}
 80024fc:	bf00      	nop
 80024fe:	3714      	adds	r7, #20
 8002500:	46bd      	mov	sp, r7
 8002502:	bc80      	pop	{r7}
 8002504:	4770      	bx	lr
	...

08002508 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	b086      	sub	sp, #24
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	2b00      	cmp	r3, #0
 8002514:	d101      	bne.n	800251a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002516:	2301      	movs	r3, #1
 8002518:	e272      	b.n	8002a00 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f003 0301 	and.w	r3, r3, #1
 8002522:	2b00      	cmp	r3, #0
 8002524:	f000 8087 	beq.w	8002636 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002528:	4b92      	ldr	r3, [pc, #584]	; (8002774 <HAL_RCC_OscConfig+0x26c>)
 800252a:	685b      	ldr	r3, [r3, #4]
 800252c:	f003 030c 	and.w	r3, r3, #12
 8002530:	2b04      	cmp	r3, #4
 8002532:	d00c      	beq.n	800254e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002534:	4b8f      	ldr	r3, [pc, #572]	; (8002774 <HAL_RCC_OscConfig+0x26c>)
 8002536:	685b      	ldr	r3, [r3, #4]
 8002538:	f003 030c 	and.w	r3, r3, #12
 800253c:	2b08      	cmp	r3, #8
 800253e:	d112      	bne.n	8002566 <HAL_RCC_OscConfig+0x5e>
 8002540:	4b8c      	ldr	r3, [pc, #560]	; (8002774 <HAL_RCC_OscConfig+0x26c>)
 8002542:	685b      	ldr	r3, [r3, #4]
 8002544:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002548:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800254c:	d10b      	bne.n	8002566 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800254e:	4b89      	ldr	r3, [pc, #548]	; (8002774 <HAL_RCC_OscConfig+0x26c>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002556:	2b00      	cmp	r3, #0
 8002558:	d06c      	beq.n	8002634 <HAL_RCC_OscConfig+0x12c>
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	685b      	ldr	r3, [r3, #4]
 800255e:	2b00      	cmp	r3, #0
 8002560:	d168      	bne.n	8002634 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002562:	2301      	movs	r3, #1
 8002564:	e24c      	b.n	8002a00 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	685b      	ldr	r3, [r3, #4]
 800256a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800256e:	d106      	bne.n	800257e <HAL_RCC_OscConfig+0x76>
 8002570:	4b80      	ldr	r3, [pc, #512]	; (8002774 <HAL_RCC_OscConfig+0x26c>)
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	4a7f      	ldr	r2, [pc, #508]	; (8002774 <HAL_RCC_OscConfig+0x26c>)
 8002576:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800257a:	6013      	str	r3, [r2, #0]
 800257c:	e02e      	b.n	80025dc <HAL_RCC_OscConfig+0xd4>
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	685b      	ldr	r3, [r3, #4]
 8002582:	2b00      	cmp	r3, #0
 8002584:	d10c      	bne.n	80025a0 <HAL_RCC_OscConfig+0x98>
 8002586:	4b7b      	ldr	r3, [pc, #492]	; (8002774 <HAL_RCC_OscConfig+0x26c>)
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	4a7a      	ldr	r2, [pc, #488]	; (8002774 <HAL_RCC_OscConfig+0x26c>)
 800258c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002590:	6013      	str	r3, [r2, #0]
 8002592:	4b78      	ldr	r3, [pc, #480]	; (8002774 <HAL_RCC_OscConfig+0x26c>)
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	4a77      	ldr	r2, [pc, #476]	; (8002774 <HAL_RCC_OscConfig+0x26c>)
 8002598:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800259c:	6013      	str	r3, [r2, #0]
 800259e:	e01d      	b.n	80025dc <HAL_RCC_OscConfig+0xd4>
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	685b      	ldr	r3, [r3, #4]
 80025a4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80025a8:	d10c      	bne.n	80025c4 <HAL_RCC_OscConfig+0xbc>
 80025aa:	4b72      	ldr	r3, [pc, #456]	; (8002774 <HAL_RCC_OscConfig+0x26c>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	4a71      	ldr	r2, [pc, #452]	; (8002774 <HAL_RCC_OscConfig+0x26c>)
 80025b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80025b4:	6013      	str	r3, [r2, #0]
 80025b6:	4b6f      	ldr	r3, [pc, #444]	; (8002774 <HAL_RCC_OscConfig+0x26c>)
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	4a6e      	ldr	r2, [pc, #440]	; (8002774 <HAL_RCC_OscConfig+0x26c>)
 80025bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025c0:	6013      	str	r3, [r2, #0]
 80025c2:	e00b      	b.n	80025dc <HAL_RCC_OscConfig+0xd4>
 80025c4:	4b6b      	ldr	r3, [pc, #428]	; (8002774 <HAL_RCC_OscConfig+0x26c>)
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	4a6a      	ldr	r2, [pc, #424]	; (8002774 <HAL_RCC_OscConfig+0x26c>)
 80025ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80025ce:	6013      	str	r3, [r2, #0]
 80025d0:	4b68      	ldr	r3, [pc, #416]	; (8002774 <HAL_RCC_OscConfig+0x26c>)
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	4a67      	ldr	r2, [pc, #412]	; (8002774 <HAL_RCC_OscConfig+0x26c>)
 80025d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80025da:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	685b      	ldr	r3, [r3, #4]
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d013      	beq.n	800260c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025e4:	f7ff fa04 	bl	80019f0 <HAL_GetTick>
 80025e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025ea:	e008      	b.n	80025fe <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80025ec:	f7ff fa00 	bl	80019f0 <HAL_GetTick>
 80025f0:	4602      	mov	r2, r0
 80025f2:	693b      	ldr	r3, [r7, #16]
 80025f4:	1ad3      	subs	r3, r2, r3
 80025f6:	2b64      	cmp	r3, #100	; 0x64
 80025f8:	d901      	bls.n	80025fe <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80025fa:	2303      	movs	r3, #3
 80025fc:	e200      	b.n	8002a00 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025fe:	4b5d      	ldr	r3, [pc, #372]	; (8002774 <HAL_RCC_OscConfig+0x26c>)
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002606:	2b00      	cmp	r3, #0
 8002608:	d0f0      	beq.n	80025ec <HAL_RCC_OscConfig+0xe4>
 800260a:	e014      	b.n	8002636 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800260c:	f7ff f9f0 	bl	80019f0 <HAL_GetTick>
 8002610:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002612:	e008      	b.n	8002626 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002614:	f7ff f9ec 	bl	80019f0 <HAL_GetTick>
 8002618:	4602      	mov	r2, r0
 800261a:	693b      	ldr	r3, [r7, #16]
 800261c:	1ad3      	subs	r3, r2, r3
 800261e:	2b64      	cmp	r3, #100	; 0x64
 8002620:	d901      	bls.n	8002626 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002622:	2303      	movs	r3, #3
 8002624:	e1ec      	b.n	8002a00 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002626:	4b53      	ldr	r3, [pc, #332]	; (8002774 <HAL_RCC_OscConfig+0x26c>)
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800262e:	2b00      	cmp	r3, #0
 8002630:	d1f0      	bne.n	8002614 <HAL_RCC_OscConfig+0x10c>
 8002632:	e000      	b.n	8002636 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002634:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f003 0302 	and.w	r3, r3, #2
 800263e:	2b00      	cmp	r3, #0
 8002640:	d063      	beq.n	800270a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002642:	4b4c      	ldr	r3, [pc, #304]	; (8002774 <HAL_RCC_OscConfig+0x26c>)
 8002644:	685b      	ldr	r3, [r3, #4]
 8002646:	f003 030c 	and.w	r3, r3, #12
 800264a:	2b00      	cmp	r3, #0
 800264c:	d00b      	beq.n	8002666 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800264e:	4b49      	ldr	r3, [pc, #292]	; (8002774 <HAL_RCC_OscConfig+0x26c>)
 8002650:	685b      	ldr	r3, [r3, #4]
 8002652:	f003 030c 	and.w	r3, r3, #12
 8002656:	2b08      	cmp	r3, #8
 8002658:	d11c      	bne.n	8002694 <HAL_RCC_OscConfig+0x18c>
 800265a:	4b46      	ldr	r3, [pc, #280]	; (8002774 <HAL_RCC_OscConfig+0x26c>)
 800265c:	685b      	ldr	r3, [r3, #4]
 800265e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002662:	2b00      	cmp	r3, #0
 8002664:	d116      	bne.n	8002694 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002666:	4b43      	ldr	r3, [pc, #268]	; (8002774 <HAL_RCC_OscConfig+0x26c>)
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f003 0302 	and.w	r3, r3, #2
 800266e:	2b00      	cmp	r3, #0
 8002670:	d005      	beq.n	800267e <HAL_RCC_OscConfig+0x176>
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	691b      	ldr	r3, [r3, #16]
 8002676:	2b01      	cmp	r3, #1
 8002678:	d001      	beq.n	800267e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800267a:	2301      	movs	r3, #1
 800267c:	e1c0      	b.n	8002a00 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800267e:	4b3d      	ldr	r3, [pc, #244]	; (8002774 <HAL_RCC_OscConfig+0x26c>)
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	695b      	ldr	r3, [r3, #20]
 800268a:	00db      	lsls	r3, r3, #3
 800268c:	4939      	ldr	r1, [pc, #228]	; (8002774 <HAL_RCC_OscConfig+0x26c>)
 800268e:	4313      	orrs	r3, r2
 8002690:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002692:	e03a      	b.n	800270a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	691b      	ldr	r3, [r3, #16]
 8002698:	2b00      	cmp	r3, #0
 800269a:	d020      	beq.n	80026de <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800269c:	4b36      	ldr	r3, [pc, #216]	; (8002778 <HAL_RCC_OscConfig+0x270>)
 800269e:	2201      	movs	r2, #1
 80026a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026a2:	f7ff f9a5 	bl	80019f0 <HAL_GetTick>
 80026a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026a8:	e008      	b.n	80026bc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80026aa:	f7ff f9a1 	bl	80019f0 <HAL_GetTick>
 80026ae:	4602      	mov	r2, r0
 80026b0:	693b      	ldr	r3, [r7, #16]
 80026b2:	1ad3      	subs	r3, r2, r3
 80026b4:	2b02      	cmp	r3, #2
 80026b6:	d901      	bls.n	80026bc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80026b8:	2303      	movs	r3, #3
 80026ba:	e1a1      	b.n	8002a00 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026bc:	4b2d      	ldr	r3, [pc, #180]	; (8002774 <HAL_RCC_OscConfig+0x26c>)
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f003 0302 	and.w	r3, r3, #2
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d0f0      	beq.n	80026aa <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026c8:	4b2a      	ldr	r3, [pc, #168]	; (8002774 <HAL_RCC_OscConfig+0x26c>)
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	695b      	ldr	r3, [r3, #20]
 80026d4:	00db      	lsls	r3, r3, #3
 80026d6:	4927      	ldr	r1, [pc, #156]	; (8002774 <HAL_RCC_OscConfig+0x26c>)
 80026d8:	4313      	orrs	r3, r2
 80026da:	600b      	str	r3, [r1, #0]
 80026dc:	e015      	b.n	800270a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80026de:	4b26      	ldr	r3, [pc, #152]	; (8002778 <HAL_RCC_OscConfig+0x270>)
 80026e0:	2200      	movs	r2, #0
 80026e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026e4:	f7ff f984 	bl	80019f0 <HAL_GetTick>
 80026e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80026ea:	e008      	b.n	80026fe <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80026ec:	f7ff f980 	bl	80019f0 <HAL_GetTick>
 80026f0:	4602      	mov	r2, r0
 80026f2:	693b      	ldr	r3, [r7, #16]
 80026f4:	1ad3      	subs	r3, r2, r3
 80026f6:	2b02      	cmp	r3, #2
 80026f8:	d901      	bls.n	80026fe <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80026fa:	2303      	movs	r3, #3
 80026fc:	e180      	b.n	8002a00 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80026fe:	4b1d      	ldr	r3, [pc, #116]	; (8002774 <HAL_RCC_OscConfig+0x26c>)
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f003 0302 	and.w	r3, r3, #2
 8002706:	2b00      	cmp	r3, #0
 8002708:	d1f0      	bne.n	80026ec <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f003 0308 	and.w	r3, r3, #8
 8002712:	2b00      	cmp	r3, #0
 8002714:	d03a      	beq.n	800278c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	699b      	ldr	r3, [r3, #24]
 800271a:	2b00      	cmp	r3, #0
 800271c:	d019      	beq.n	8002752 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800271e:	4b17      	ldr	r3, [pc, #92]	; (800277c <HAL_RCC_OscConfig+0x274>)
 8002720:	2201      	movs	r2, #1
 8002722:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002724:	f7ff f964 	bl	80019f0 <HAL_GetTick>
 8002728:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800272a:	e008      	b.n	800273e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800272c:	f7ff f960 	bl	80019f0 <HAL_GetTick>
 8002730:	4602      	mov	r2, r0
 8002732:	693b      	ldr	r3, [r7, #16]
 8002734:	1ad3      	subs	r3, r2, r3
 8002736:	2b02      	cmp	r3, #2
 8002738:	d901      	bls.n	800273e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800273a:	2303      	movs	r3, #3
 800273c:	e160      	b.n	8002a00 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800273e:	4b0d      	ldr	r3, [pc, #52]	; (8002774 <HAL_RCC_OscConfig+0x26c>)
 8002740:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002742:	f003 0302 	and.w	r3, r3, #2
 8002746:	2b00      	cmp	r3, #0
 8002748:	d0f0      	beq.n	800272c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800274a:	2001      	movs	r0, #1
 800274c:	f000 face 	bl	8002cec <RCC_Delay>
 8002750:	e01c      	b.n	800278c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002752:	4b0a      	ldr	r3, [pc, #40]	; (800277c <HAL_RCC_OscConfig+0x274>)
 8002754:	2200      	movs	r2, #0
 8002756:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002758:	f7ff f94a 	bl	80019f0 <HAL_GetTick>
 800275c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800275e:	e00f      	b.n	8002780 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002760:	f7ff f946 	bl	80019f0 <HAL_GetTick>
 8002764:	4602      	mov	r2, r0
 8002766:	693b      	ldr	r3, [r7, #16]
 8002768:	1ad3      	subs	r3, r2, r3
 800276a:	2b02      	cmp	r3, #2
 800276c:	d908      	bls.n	8002780 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800276e:	2303      	movs	r3, #3
 8002770:	e146      	b.n	8002a00 <HAL_RCC_OscConfig+0x4f8>
 8002772:	bf00      	nop
 8002774:	40021000 	.word	0x40021000
 8002778:	42420000 	.word	0x42420000
 800277c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002780:	4b92      	ldr	r3, [pc, #584]	; (80029cc <HAL_RCC_OscConfig+0x4c4>)
 8002782:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002784:	f003 0302 	and.w	r3, r3, #2
 8002788:	2b00      	cmp	r3, #0
 800278a:	d1e9      	bne.n	8002760 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f003 0304 	and.w	r3, r3, #4
 8002794:	2b00      	cmp	r3, #0
 8002796:	f000 80a6 	beq.w	80028e6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800279a:	2300      	movs	r3, #0
 800279c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800279e:	4b8b      	ldr	r3, [pc, #556]	; (80029cc <HAL_RCC_OscConfig+0x4c4>)
 80027a0:	69db      	ldr	r3, [r3, #28]
 80027a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d10d      	bne.n	80027c6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80027aa:	4b88      	ldr	r3, [pc, #544]	; (80029cc <HAL_RCC_OscConfig+0x4c4>)
 80027ac:	69db      	ldr	r3, [r3, #28]
 80027ae:	4a87      	ldr	r2, [pc, #540]	; (80029cc <HAL_RCC_OscConfig+0x4c4>)
 80027b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027b4:	61d3      	str	r3, [r2, #28]
 80027b6:	4b85      	ldr	r3, [pc, #532]	; (80029cc <HAL_RCC_OscConfig+0x4c4>)
 80027b8:	69db      	ldr	r3, [r3, #28]
 80027ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027be:	60bb      	str	r3, [r7, #8]
 80027c0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80027c2:	2301      	movs	r3, #1
 80027c4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027c6:	4b82      	ldr	r3, [pc, #520]	; (80029d0 <HAL_RCC_OscConfig+0x4c8>)
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d118      	bne.n	8002804 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80027d2:	4b7f      	ldr	r3, [pc, #508]	; (80029d0 <HAL_RCC_OscConfig+0x4c8>)
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	4a7e      	ldr	r2, [pc, #504]	; (80029d0 <HAL_RCC_OscConfig+0x4c8>)
 80027d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027dc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80027de:	f7ff f907 	bl	80019f0 <HAL_GetTick>
 80027e2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027e4:	e008      	b.n	80027f8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027e6:	f7ff f903 	bl	80019f0 <HAL_GetTick>
 80027ea:	4602      	mov	r2, r0
 80027ec:	693b      	ldr	r3, [r7, #16]
 80027ee:	1ad3      	subs	r3, r2, r3
 80027f0:	2b64      	cmp	r3, #100	; 0x64
 80027f2:	d901      	bls.n	80027f8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80027f4:	2303      	movs	r3, #3
 80027f6:	e103      	b.n	8002a00 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027f8:	4b75      	ldr	r3, [pc, #468]	; (80029d0 <HAL_RCC_OscConfig+0x4c8>)
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002800:	2b00      	cmp	r3, #0
 8002802:	d0f0      	beq.n	80027e6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	68db      	ldr	r3, [r3, #12]
 8002808:	2b01      	cmp	r3, #1
 800280a:	d106      	bne.n	800281a <HAL_RCC_OscConfig+0x312>
 800280c:	4b6f      	ldr	r3, [pc, #444]	; (80029cc <HAL_RCC_OscConfig+0x4c4>)
 800280e:	6a1b      	ldr	r3, [r3, #32]
 8002810:	4a6e      	ldr	r2, [pc, #440]	; (80029cc <HAL_RCC_OscConfig+0x4c4>)
 8002812:	f043 0301 	orr.w	r3, r3, #1
 8002816:	6213      	str	r3, [r2, #32]
 8002818:	e02d      	b.n	8002876 <HAL_RCC_OscConfig+0x36e>
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	68db      	ldr	r3, [r3, #12]
 800281e:	2b00      	cmp	r3, #0
 8002820:	d10c      	bne.n	800283c <HAL_RCC_OscConfig+0x334>
 8002822:	4b6a      	ldr	r3, [pc, #424]	; (80029cc <HAL_RCC_OscConfig+0x4c4>)
 8002824:	6a1b      	ldr	r3, [r3, #32]
 8002826:	4a69      	ldr	r2, [pc, #420]	; (80029cc <HAL_RCC_OscConfig+0x4c4>)
 8002828:	f023 0301 	bic.w	r3, r3, #1
 800282c:	6213      	str	r3, [r2, #32]
 800282e:	4b67      	ldr	r3, [pc, #412]	; (80029cc <HAL_RCC_OscConfig+0x4c4>)
 8002830:	6a1b      	ldr	r3, [r3, #32]
 8002832:	4a66      	ldr	r2, [pc, #408]	; (80029cc <HAL_RCC_OscConfig+0x4c4>)
 8002834:	f023 0304 	bic.w	r3, r3, #4
 8002838:	6213      	str	r3, [r2, #32]
 800283a:	e01c      	b.n	8002876 <HAL_RCC_OscConfig+0x36e>
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	68db      	ldr	r3, [r3, #12]
 8002840:	2b05      	cmp	r3, #5
 8002842:	d10c      	bne.n	800285e <HAL_RCC_OscConfig+0x356>
 8002844:	4b61      	ldr	r3, [pc, #388]	; (80029cc <HAL_RCC_OscConfig+0x4c4>)
 8002846:	6a1b      	ldr	r3, [r3, #32]
 8002848:	4a60      	ldr	r2, [pc, #384]	; (80029cc <HAL_RCC_OscConfig+0x4c4>)
 800284a:	f043 0304 	orr.w	r3, r3, #4
 800284e:	6213      	str	r3, [r2, #32]
 8002850:	4b5e      	ldr	r3, [pc, #376]	; (80029cc <HAL_RCC_OscConfig+0x4c4>)
 8002852:	6a1b      	ldr	r3, [r3, #32]
 8002854:	4a5d      	ldr	r2, [pc, #372]	; (80029cc <HAL_RCC_OscConfig+0x4c4>)
 8002856:	f043 0301 	orr.w	r3, r3, #1
 800285a:	6213      	str	r3, [r2, #32]
 800285c:	e00b      	b.n	8002876 <HAL_RCC_OscConfig+0x36e>
 800285e:	4b5b      	ldr	r3, [pc, #364]	; (80029cc <HAL_RCC_OscConfig+0x4c4>)
 8002860:	6a1b      	ldr	r3, [r3, #32]
 8002862:	4a5a      	ldr	r2, [pc, #360]	; (80029cc <HAL_RCC_OscConfig+0x4c4>)
 8002864:	f023 0301 	bic.w	r3, r3, #1
 8002868:	6213      	str	r3, [r2, #32]
 800286a:	4b58      	ldr	r3, [pc, #352]	; (80029cc <HAL_RCC_OscConfig+0x4c4>)
 800286c:	6a1b      	ldr	r3, [r3, #32]
 800286e:	4a57      	ldr	r2, [pc, #348]	; (80029cc <HAL_RCC_OscConfig+0x4c4>)
 8002870:	f023 0304 	bic.w	r3, r3, #4
 8002874:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	68db      	ldr	r3, [r3, #12]
 800287a:	2b00      	cmp	r3, #0
 800287c:	d015      	beq.n	80028aa <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800287e:	f7ff f8b7 	bl	80019f0 <HAL_GetTick>
 8002882:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002884:	e00a      	b.n	800289c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002886:	f7ff f8b3 	bl	80019f0 <HAL_GetTick>
 800288a:	4602      	mov	r2, r0
 800288c:	693b      	ldr	r3, [r7, #16]
 800288e:	1ad3      	subs	r3, r2, r3
 8002890:	f241 3288 	movw	r2, #5000	; 0x1388
 8002894:	4293      	cmp	r3, r2
 8002896:	d901      	bls.n	800289c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002898:	2303      	movs	r3, #3
 800289a:	e0b1      	b.n	8002a00 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800289c:	4b4b      	ldr	r3, [pc, #300]	; (80029cc <HAL_RCC_OscConfig+0x4c4>)
 800289e:	6a1b      	ldr	r3, [r3, #32]
 80028a0:	f003 0302 	and.w	r3, r3, #2
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d0ee      	beq.n	8002886 <HAL_RCC_OscConfig+0x37e>
 80028a8:	e014      	b.n	80028d4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028aa:	f7ff f8a1 	bl	80019f0 <HAL_GetTick>
 80028ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80028b0:	e00a      	b.n	80028c8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028b2:	f7ff f89d 	bl	80019f0 <HAL_GetTick>
 80028b6:	4602      	mov	r2, r0
 80028b8:	693b      	ldr	r3, [r7, #16]
 80028ba:	1ad3      	subs	r3, r2, r3
 80028bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80028c0:	4293      	cmp	r3, r2
 80028c2:	d901      	bls.n	80028c8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80028c4:	2303      	movs	r3, #3
 80028c6:	e09b      	b.n	8002a00 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80028c8:	4b40      	ldr	r3, [pc, #256]	; (80029cc <HAL_RCC_OscConfig+0x4c4>)
 80028ca:	6a1b      	ldr	r3, [r3, #32]
 80028cc:	f003 0302 	and.w	r3, r3, #2
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d1ee      	bne.n	80028b2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80028d4:	7dfb      	ldrb	r3, [r7, #23]
 80028d6:	2b01      	cmp	r3, #1
 80028d8:	d105      	bne.n	80028e6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80028da:	4b3c      	ldr	r3, [pc, #240]	; (80029cc <HAL_RCC_OscConfig+0x4c4>)
 80028dc:	69db      	ldr	r3, [r3, #28]
 80028de:	4a3b      	ldr	r2, [pc, #236]	; (80029cc <HAL_RCC_OscConfig+0x4c4>)
 80028e0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80028e4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	69db      	ldr	r3, [r3, #28]
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	f000 8087 	beq.w	80029fe <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80028f0:	4b36      	ldr	r3, [pc, #216]	; (80029cc <HAL_RCC_OscConfig+0x4c4>)
 80028f2:	685b      	ldr	r3, [r3, #4]
 80028f4:	f003 030c 	and.w	r3, r3, #12
 80028f8:	2b08      	cmp	r3, #8
 80028fa:	d061      	beq.n	80029c0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	69db      	ldr	r3, [r3, #28]
 8002900:	2b02      	cmp	r3, #2
 8002902:	d146      	bne.n	8002992 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002904:	4b33      	ldr	r3, [pc, #204]	; (80029d4 <HAL_RCC_OscConfig+0x4cc>)
 8002906:	2200      	movs	r2, #0
 8002908:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800290a:	f7ff f871 	bl	80019f0 <HAL_GetTick>
 800290e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002910:	e008      	b.n	8002924 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002912:	f7ff f86d 	bl	80019f0 <HAL_GetTick>
 8002916:	4602      	mov	r2, r0
 8002918:	693b      	ldr	r3, [r7, #16]
 800291a:	1ad3      	subs	r3, r2, r3
 800291c:	2b02      	cmp	r3, #2
 800291e:	d901      	bls.n	8002924 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002920:	2303      	movs	r3, #3
 8002922:	e06d      	b.n	8002a00 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002924:	4b29      	ldr	r3, [pc, #164]	; (80029cc <HAL_RCC_OscConfig+0x4c4>)
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800292c:	2b00      	cmp	r3, #0
 800292e:	d1f0      	bne.n	8002912 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	6a1b      	ldr	r3, [r3, #32]
 8002934:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002938:	d108      	bne.n	800294c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800293a:	4b24      	ldr	r3, [pc, #144]	; (80029cc <HAL_RCC_OscConfig+0x4c4>)
 800293c:	685b      	ldr	r3, [r3, #4]
 800293e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	689b      	ldr	r3, [r3, #8]
 8002946:	4921      	ldr	r1, [pc, #132]	; (80029cc <HAL_RCC_OscConfig+0x4c4>)
 8002948:	4313      	orrs	r3, r2
 800294a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800294c:	4b1f      	ldr	r3, [pc, #124]	; (80029cc <HAL_RCC_OscConfig+0x4c4>)
 800294e:	685b      	ldr	r3, [r3, #4]
 8002950:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	6a19      	ldr	r1, [r3, #32]
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800295c:	430b      	orrs	r3, r1
 800295e:	491b      	ldr	r1, [pc, #108]	; (80029cc <HAL_RCC_OscConfig+0x4c4>)
 8002960:	4313      	orrs	r3, r2
 8002962:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002964:	4b1b      	ldr	r3, [pc, #108]	; (80029d4 <HAL_RCC_OscConfig+0x4cc>)
 8002966:	2201      	movs	r2, #1
 8002968:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800296a:	f7ff f841 	bl	80019f0 <HAL_GetTick>
 800296e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002970:	e008      	b.n	8002984 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002972:	f7ff f83d 	bl	80019f0 <HAL_GetTick>
 8002976:	4602      	mov	r2, r0
 8002978:	693b      	ldr	r3, [r7, #16]
 800297a:	1ad3      	subs	r3, r2, r3
 800297c:	2b02      	cmp	r3, #2
 800297e:	d901      	bls.n	8002984 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002980:	2303      	movs	r3, #3
 8002982:	e03d      	b.n	8002a00 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002984:	4b11      	ldr	r3, [pc, #68]	; (80029cc <HAL_RCC_OscConfig+0x4c4>)
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800298c:	2b00      	cmp	r3, #0
 800298e:	d0f0      	beq.n	8002972 <HAL_RCC_OscConfig+0x46a>
 8002990:	e035      	b.n	80029fe <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002992:	4b10      	ldr	r3, [pc, #64]	; (80029d4 <HAL_RCC_OscConfig+0x4cc>)
 8002994:	2200      	movs	r2, #0
 8002996:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002998:	f7ff f82a 	bl	80019f0 <HAL_GetTick>
 800299c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800299e:	e008      	b.n	80029b2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029a0:	f7ff f826 	bl	80019f0 <HAL_GetTick>
 80029a4:	4602      	mov	r2, r0
 80029a6:	693b      	ldr	r3, [r7, #16]
 80029a8:	1ad3      	subs	r3, r2, r3
 80029aa:	2b02      	cmp	r3, #2
 80029ac:	d901      	bls.n	80029b2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80029ae:	2303      	movs	r3, #3
 80029b0:	e026      	b.n	8002a00 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80029b2:	4b06      	ldr	r3, [pc, #24]	; (80029cc <HAL_RCC_OscConfig+0x4c4>)
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d1f0      	bne.n	80029a0 <HAL_RCC_OscConfig+0x498>
 80029be:	e01e      	b.n	80029fe <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	69db      	ldr	r3, [r3, #28]
 80029c4:	2b01      	cmp	r3, #1
 80029c6:	d107      	bne.n	80029d8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80029c8:	2301      	movs	r3, #1
 80029ca:	e019      	b.n	8002a00 <HAL_RCC_OscConfig+0x4f8>
 80029cc:	40021000 	.word	0x40021000
 80029d0:	40007000 	.word	0x40007000
 80029d4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80029d8:	4b0b      	ldr	r3, [pc, #44]	; (8002a08 <HAL_RCC_OscConfig+0x500>)
 80029da:	685b      	ldr	r3, [r3, #4]
 80029dc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	6a1b      	ldr	r3, [r3, #32]
 80029e8:	429a      	cmp	r2, r3
 80029ea:	d106      	bne.n	80029fa <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029f6:	429a      	cmp	r2, r3
 80029f8:	d001      	beq.n	80029fe <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80029fa:	2301      	movs	r3, #1
 80029fc:	e000      	b.n	8002a00 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80029fe:	2300      	movs	r3, #0
}
 8002a00:	4618      	mov	r0, r3
 8002a02:	3718      	adds	r7, #24
 8002a04:	46bd      	mov	sp, r7
 8002a06:	bd80      	pop	{r7, pc}
 8002a08:	40021000 	.word	0x40021000

08002a0c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b084      	sub	sp, #16
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]
 8002a14:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d101      	bne.n	8002a20 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002a1c:	2301      	movs	r3, #1
 8002a1e:	e0d0      	b.n	8002bc2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002a20:	4b6a      	ldr	r3, [pc, #424]	; (8002bcc <HAL_RCC_ClockConfig+0x1c0>)
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f003 0307 	and.w	r3, r3, #7
 8002a28:	683a      	ldr	r2, [r7, #0]
 8002a2a:	429a      	cmp	r2, r3
 8002a2c:	d910      	bls.n	8002a50 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a2e:	4b67      	ldr	r3, [pc, #412]	; (8002bcc <HAL_RCC_ClockConfig+0x1c0>)
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f023 0207 	bic.w	r2, r3, #7
 8002a36:	4965      	ldr	r1, [pc, #404]	; (8002bcc <HAL_RCC_ClockConfig+0x1c0>)
 8002a38:	683b      	ldr	r3, [r7, #0]
 8002a3a:	4313      	orrs	r3, r2
 8002a3c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a3e:	4b63      	ldr	r3, [pc, #396]	; (8002bcc <HAL_RCC_ClockConfig+0x1c0>)
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f003 0307 	and.w	r3, r3, #7
 8002a46:	683a      	ldr	r2, [r7, #0]
 8002a48:	429a      	cmp	r2, r3
 8002a4a:	d001      	beq.n	8002a50 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002a4c:	2301      	movs	r3, #1
 8002a4e:	e0b8      	b.n	8002bc2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f003 0302 	and.w	r3, r3, #2
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d020      	beq.n	8002a9e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f003 0304 	and.w	r3, r3, #4
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d005      	beq.n	8002a74 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002a68:	4b59      	ldr	r3, [pc, #356]	; (8002bd0 <HAL_RCC_ClockConfig+0x1c4>)
 8002a6a:	685b      	ldr	r3, [r3, #4]
 8002a6c:	4a58      	ldr	r2, [pc, #352]	; (8002bd0 <HAL_RCC_ClockConfig+0x1c4>)
 8002a6e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002a72:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f003 0308 	and.w	r3, r3, #8
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d005      	beq.n	8002a8c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002a80:	4b53      	ldr	r3, [pc, #332]	; (8002bd0 <HAL_RCC_ClockConfig+0x1c4>)
 8002a82:	685b      	ldr	r3, [r3, #4]
 8002a84:	4a52      	ldr	r2, [pc, #328]	; (8002bd0 <HAL_RCC_ClockConfig+0x1c4>)
 8002a86:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002a8a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a8c:	4b50      	ldr	r3, [pc, #320]	; (8002bd0 <HAL_RCC_ClockConfig+0x1c4>)
 8002a8e:	685b      	ldr	r3, [r3, #4]
 8002a90:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	689b      	ldr	r3, [r3, #8]
 8002a98:	494d      	ldr	r1, [pc, #308]	; (8002bd0 <HAL_RCC_ClockConfig+0x1c4>)
 8002a9a:	4313      	orrs	r3, r2
 8002a9c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f003 0301 	and.w	r3, r3, #1
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d040      	beq.n	8002b2c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	685b      	ldr	r3, [r3, #4]
 8002aae:	2b01      	cmp	r3, #1
 8002ab0:	d107      	bne.n	8002ac2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ab2:	4b47      	ldr	r3, [pc, #284]	; (8002bd0 <HAL_RCC_ClockConfig+0x1c4>)
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d115      	bne.n	8002aea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002abe:	2301      	movs	r3, #1
 8002ac0:	e07f      	b.n	8002bc2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	685b      	ldr	r3, [r3, #4]
 8002ac6:	2b02      	cmp	r3, #2
 8002ac8:	d107      	bne.n	8002ada <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002aca:	4b41      	ldr	r3, [pc, #260]	; (8002bd0 <HAL_RCC_ClockConfig+0x1c4>)
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d109      	bne.n	8002aea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ad6:	2301      	movs	r3, #1
 8002ad8:	e073      	b.n	8002bc2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ada:	4b3d      	ldr	r3, [pc, #244]	; (8002bd0 <HAL_RCC_ClockConfig+0x1c4>)
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f003 0302 	and.w	r3, r3, #2
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d101      	bne.n	8002aea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ae6:	2301      	movs	r3, #1
 8002ae8:	e06b      	b.n	8002bc2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002aea:	4b39      	ldr	r3, [pc, #228]	; (8002bd0 <HAL_RCC_ClockConfig+0x1c4>)
 8002aec:	685b      	ldr	r3, [r3, #4]
 8002aee:	f023 0203 	bic.w	r2, r3, #3
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	685b      	ldr	r3, [r3, #4]
 8002af6:	4936      	ldr	r1, [pc, #216]	; (8002bd0 <HAL_RCC_ClockConfig+0x1c4>)
 8002af8:	4313      	orrs	r3, r2
 8002afa:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002afc:	f7fe ff78 	bl	80019f0 <HAL_GetTick>
 8002b00:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b02:	e00a      	b.n	8002b1a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b04:	f7fe ff74 	bl	80019f0 <HAL_GetTick>
 8002b08:	4602      	mov	r2, r0
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	1ad3      	subs	r3, r2, r3
 8002b0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b12:	4293      	cmp	r3, r2
 8002b14:	d901      	bls.n	8002b1a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002b16:	2303      	movs	r3, #3
 8002b18:	e053      	b.n	8002bc2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b1a:	4b2d      	ldr	r3, [pc, #180]	; (8002bd0 <HAL_RCC_ClockConfig+0x1c4>)
 8002b1c:	685b      	ldr	r3, [r3, #4]
 8002b1e:	f003 020c 	and.w	r2, r3, #12
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	685b      	ldr	r3, [r3, #4]
 8002b26:	009b      	lsls	r3, r3, #2
 8002b28:	429a      	cmp	r2, r3
 8002b2a:	d1eb      	bne.n	8002b04 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002b2c:	4b27      	ldr	r3, [pc, #156]	; (8002bcc <HAL_RCC_ClockConfig+0x1c0>)
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f003 0307 	and.w	r3, r3, #7
 8002b34:	683a      	ldr	r2, [r7, #0]
 8002b36:	429a      	cmp	r2, r3
 8002b38:	d210      	bcs.n	8002b5c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b3a:	4b24      	ldr	r3, [pc, #144]	; (8002bcc <HAL_RCC_ClockConfig+0x1c0>)
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f023 0207 	bic.w	r2, r3, #7
 8002b42:	4922      	ldr	r1, [pc, #136]	; (8002bcc <HAL_RCC_ClockConfig+0x1c0>)
 8002b44:	683b      	ldr	r3, [r7, #0]
 8002b46:	4313      	orrs	r3, r2
 8002b48:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b4a:	4b20      	ldr	r3, [pc, #128]	; (8002bcc <HAL_RCC_ClockConfig+0x1c0>)
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f003 0307 	and.w	r3, r3, #7
 8002b52:	683a      	ldr	r2, [r7, #0]
 8002b54:	429a      	cmp	r2, r3
 8002b56:	d001      	beq.n	8002b5c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002b58:	2301      	movs	r3, #1
 8002b5a:	e032      	b.n	8002bc2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f003 0304 	and.w	r3, r3, #4
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d008      	beq.n	8002b7a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b68:	4b19      	ldr	r3, [pc, #100]	; (8002bd0 <HAL_RCC_ClockConfig+0x1c4>)
 8002b6a:	685b      	ldr	r3, [r3, #4]
 8002b6c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	68db      	ldr	r3, [r3, #12]
 8002b74:	4916      	ldr	r1, [pc, #88]	; (8002bd0 <HAL_RCC_ClockConfig+0x1c4>)
 8002b76:	4313      	orrs	r3, r2
 8002b78:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f003 0308 	and.w	r3, r3, #8
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d009      	beq.n	8002b9a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002b86:	4b12      	ldr	r3, [pc, #72]	; (8002bd0 <HAL_RCC_ClockConfig+0x1c4>)
 8002b88:	685b      	ldr	r3, [r3, #4]
 8002b8a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	691b      	ldr	r3, [r3, #16]
 8002b92:	00db      	lsls	r3, r3, #3
 8002b94:	490e      	ldr	r1, [pc, #56]	; (8002bd0 <HAL_RCC_ClockConfig+0x1c4>)
 8002b96:	4313      	orrs	r3, r2
 8002b98:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002b9a:	f000 f821 	bl	8002be0 <HAL_RCC_GetSysClockFreq>
 8002b9e:	4602      	mov	r2, r0
 8002ba0:	4b0b      	ldr	r3, [pc, #44]	; (8002bd0 <HAL_RCC_ClockConfig+0x1c4>)
 8002ba2:	685b      	ldr	r3, [r3, #4]
 8002ba4:	091b      	lsrs	r3, r3, #4
 8002ba6:	f003 030f 	and.w	r3, r3, #15
 8002baa:	490a      	ldr	r1, [pc, #40]	; (8002bd4 <HAL_RCC_ClockConfig+0x1c8>)
 8002bac:	5ccb      	ldrb	r3, [r1, r3]
 8002bae:	fa22 f303 	lsr.w	r3, r2, r3
 8002bb2:	4a09      	ldr	r2, [pc, #36]	; (8002bd8 <HAL_RCC_ClockConfig+0x1cc>)
 8002bb4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002bb6:	4b09      	ldr	r3, [pc, #36]	; (8002bdc <HAL_RCC_ClockConfig+0x1d0>)
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	4618      	mov	r0, r3
 8002bbc:	f7fe fed6 	bl	800196c <HAL_InitTick>

  return HAL_OK;
 8002bc0:	2300      	movs	r3, #0
}
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	3710      	adds	r7, #16
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	bd80      	pop	{r7, pc}
 8002bca:	bf00      	nop
 8002bcc:	40022000 	.word	0x40022000
 8002bd0:	40021000 	.word	0x40021000
 8002bd4:	080049d8 	.word	0x080049d8
 8002bd8:	2000004c 	.word	0x2000004c
 8002bdc:	20000050 	.word	0x20000050

08002be0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002be0:	b480      	push	{r7}
 8002be2:	b087      	sub	sp, #28
 8002be4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002be6:	2300      	movs	r3, #0
 8002be8:	60fb      	str	r3, [r7, #12]
 8002bea:	2300      	movs	r3, #0
 8002bec:	60bb      	str	r3, [r7, #8]
 8002bee:	2300      	movs	r3, #0
 8002bf0:	617b      	str	r3, [r7, #20]
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002bfa:	4b1e      	ldr	r3, [pc, #120]	; (8002c74 <HAL_RCC_GetSysClockFreq+0x94>)
 8002bfc:	685b      	ldr	r3, [r3, #4]
 8002bfe:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	f003 030c 	and.w	r3, r3, #12
 8002c06:	2b04      	cmp	r3, #4
 8002c08:	d002      	beq.n	8002c10 <HAL_RCC_GetSysClockFreq+0x30>
 8002c0a:	2b08      	cmp	r3, #8
 8002c0c:	d003      	beq.n	8002c16 <HAL_RCC_GetSysClockFreq+0x36>
 8002c0e:	e027      	b.n	8002c60 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002c10:	4b19      	ldr	r3, [pc, #100]	; (8002c78 <HAL_RCC_GetSysClockFreq+0x98>)
 8002c12:	613b      	str	r3, [r7, #16]
      break;
 8002c14:	e027      	b.n	8002c66 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	0c9b      	lsrs	r3, r3, #18
 8002c1a:	f003 030f 	and.w	r3, r3, #15
 8002c1e:	4a17      	ldr	r2, [pc, #92]	; (8002c7c <HAL_RCC_GetSysClockFreq+0x9c>)
 8002c20:	5cd3      	ldrb	r3, [r2, r3]
 8002c22:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d010      	beq.n	8002c50 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002c2e:	4b11      	ldr	r3, [pc, #68]	; (8002c74 <HAL_RCC_GetSysClockFreq+0x94>)
 8002c30:	685b      	ldr	r3, [r3, #4]
 8002c32:	0c5b      	lsrs	r3, r3, #17
 8002c34:	f003 0301 	and.w	r3, r3, #1
 8002c38:	4a11      	ldr	r2, [pc, #68]	; (8002c80 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002c3a:	5cd3      	ldrb	r3, [r2, r3]
 8002c3c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	4a0d      	ldr	r2, [pc, #52]	; (8002c78 <HAL_RCC_GetSysClockFreq+0x98>)
 8002c42:	fb03 f202 	mul.w	r2, r3, r2
 8002c46:	68bb      	ldr	r3, [r7, #8]
 8002c48:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c4c:	617b      	str	r3, [r7, #20]
 8002c4e:	e004      	b.n	8002c5a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	4a0c      	ldr	r2, [pc, #48]	; (8002c84 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002c54:	fb02 f303 	mul.w	r3, r2, r3
 8002c58:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002c5a:	697b      	ldr	r3, [r7, #20]
 8002c5c:	613b      	str	r3, [r7, #16]
      break;
 8002c5e:	e002      	b.n	8002c66 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002c60:	4b05      	ldr	r3, [pc, #20]	; (8002c78 <HAL_RCC_GetSysClockFreq+0x98>)
 8002c62:	613b      	str	r3, [r7, #16]
      break;
 8002c64:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002c66:	693b      	ldr	r3, [r7, #16]
}
 8002c68:	4618      	mov	r0, r3
 8002c6a:	371c      	adds	r7, #28
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	bc80      	pop	{r7}
 8002c70:	4770      	bx	lr
 8002c72:	bf00      	nop
 8002c74:	40021000 	.word	0x40021000
 8002c78:	007a1200 	.word	0x007a1200
 8002c7c:	080049f0 	.word	0x080049f0
 8002c80:	08004a00 	.word	0x08004a00
 8002c84:	003d0900 	.word	0x003d0900

08002c88 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002c88:	b480      	push	{r7}
 8002c8a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002c8c:	4b02      	ldr	r3, [pc, #8]	; (8002c98 <HAL_RCC_GetHCLKFreq+0x10>)
 8002c8e:	681b      	ldr	r3, [r3, #0]
}
 8002c90:	4618      	mov	r0, r3
 8002c92:	46bd      	mov	sp, r7
 8002c94:	bc80      	pop	{r7}
 8002c96:	4770      	bx	lr
 8002c98:	2000004c 	.word	0x2000004c

08002c9c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002ca0:	f7ff fff2 	bl	8002c88 <HAL_RCC_GetHCLKFreq>
 8002ca4:	4602      	mov	r2, r0
 8002ca6:	4b05      	ldr	r3, [pc, #20]	; (8002cbc <HAL_RCC_GetPCLK1Freq+0x20>)
 8002ca8:	685b      	ldr	r3, [r3, #4]
 8002caa:	0a1b      	lsrs	r3, r3, #8
 8002cac:	f003 0307 	and.w	r3, r3, #7
 8002cb0:	4903      	ldr	r1, [pc, #12]	; (8002cc0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002cb2:	5ccb      	ldrb	r3, [r1, r3]
 8002cb4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002cb8:	4618      	mov	r0, r3
 8002cba:	bd80      	pop	{r7, pc}
 8002cbc:	40021000 	.word	0x40021000
 8002cc0:	080049e8 	.word	0x080049e8

08002cc4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002cc8:	f7ff ffde 	bl	8002c88 <HAL_RCC_GetHCLKFreq>
 8002ccc:	4602      	mov	r2, r0
 8002cce:	4b05      	ldr	r3, [pc, #20]	; (8002ce4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002cd0:	685b      	ldr	r3, [r3, #4]
 8002cd2:	0adb      	lsrs	r3, r3, #11
 8002cd4:	f003 0307 	and.w	r3, r3, #7
 8002cd8:	4903      	ldr	r1, [pc, #12]	; (8002ce8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002cda:	5ccb      	ldrb	r3, [r1, r3]
 8002cdc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	bd80      	pop	{r7, pc}
 8002ce4:	40021000 	.word	0x40021000
 8002ce8:	080049e8 	.word	0x080049e8

08002cec <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002cec:	b480      	push	{r7}
 8002cee:	b085      	sub	sp, #20
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002cf4:	4b0a      	ldr	r3, [pc, #40]	; (8002d20 <RCC_Delay+0x34>)
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	4a0a      	ldr	r2, [pc, #40]	; (8002d24 <RCC_Delay+0x38>)
 8002cfa:	fba2 2303 	umull	r2, r3, r2, r3
 8002cfe:	0a5b      	lsrs	r3, r3, #9
 8002d00:	687a      	ldr	r2, [r7, #4]
 8002d02:	fb02 f303 	mul.w	r3, r2, r3
 8002d06:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002d08:	bf00      	nop
  }
  while (Delay --);
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	1e5a      	subs	r2, r3, #1
 8002d0e:	60fa      	str	r2, [r7, #12]
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d1f9      	bne.n	8002d08 <RCC_Delay+0x1c>
}
 8002d14:	bf00      	nop
 8002d16:	bf00      	nop
 8002d18:	3714      	adds	r7, #20
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	bc80      	pop	{r7}
 8002d1e:	4770      	bx	lr
 8002d20:	2000004c 	.word	0x2000004c
 8002d24:	10624dd3 	.word	0x10624dd3

08002d28 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	b082      	sub	sp, #8
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d101      	bne.n	8002d3a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002d36:	2301      	movs	r3, #1
 8002d38:	e042      	b.n	8002dc0 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002d40:	b2db      	uxtb	r3, r3
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d106      	bne.n	8002d54 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	2200      	movs	r2, #0
 8002d4a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002d4e:	6878      	ldr	r0, [r7, #4]
 8002d50:	f7fe fbf2 	bl	8001538 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	2224      	movs	r2, #36	; 0x24
 8002d58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	68da      	ldr	r2, [r3, #12]
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002d6a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002d6c:	6878      	ldr	r0, [r7, #4]
 8002d6e:	f000 ff09 	bl	8003b84 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	691a      	ldr	r2, [r3, #16]
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002d80:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	695a      	ldr	r2, [r3, #20]
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002d90:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	68da      	ldr	r2, [r3, #12]
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002da0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	2200      	movs	r2, #0
 8002da6:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	2220      	movs	r2, #32
 8002dac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	2220      	movs	r2, #32
 8002db4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	2200      	movs	r2, #0
 8002dbc:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8002dbe:	2300      	movs	r3, #0
}
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	3708      	adds	r7, #8
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	bd80      	pop	{r7, pc}

08002dc8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	b08a      	sub	sp, #40	; 0x28
 8002dcc:	af02      	add	r7, sp, #8
 8002dce:	60f8      	str	r0, [r7, #12]
 8002dd0:	60b9      	str	r1, [r7, #8]
 8002dd2:	603b      	str	r3, [r7, #0]
 8002dd4:	4613      	mov	r3, r2
 8002dd6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002dd8:	2300      	movs	r3, #0
 8002dda:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002de2:	b2db      	uxtb	r3, r3
 8002de4:	2b20      	cmp	r3, #32
 8002de6:	d16d      	bne.n	8002ec4 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8002de8:	68bb      	ldr	r3, [r7, #8]
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d002      	beq.n	8002df4 <HAL_UART_Transmit+0x2c>
 8002dee:	88fb      	ldrh	r3, [r7, #6]
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d101      	bne.n	8002df8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002df4:	2301      	movs	r3, #1
 8002df6:	e066      	b.n	8002ec6 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	2221      	movs	r2, #33	; 0x21
 8002e02:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002e06:	f7fe fdf3 	bl	80019f0 <HAL_GetTick>
 8002e0a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	88fa      	ldrh	r2, [r7, #6]
 8002e10:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	88fa      	ldrh	r2, [r7, #6]
 8002e16:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	689b      	ldr	r3, [r3, #8]
 8002e1c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e20:	d108      	bne.n	8002e34 <HAL_UART_Transmit+0x6c>
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	691b      	ldr	r3, [r3, #16]
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d104      	bne.n	8002e34 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002e2e:	68bb      	ldr	r3, [r7, #8]
 8002e30:	61bb      	str	r3, [r7, #24]
 8002e32:	e003      	b.n	8002e3c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002e34:	68bb      	ldr	r3, [r7, #8]
 8002e36:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002e38:	2300      	movs	r3, #0
 8002e3a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002e3c:	e02a      	b.n	8002e94 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002e3e:	683b      	ldr	r3, [r7, #0]
 8002e40:	9300      	str	r3, [sp, #0]
 8002e42:	697b      	ldr	r3, [r7, #20]
 8002e44:	2200      	movs	r2, #0
 8002e46:	2180      	movs	r1, #128	; 0x80
 8002e48:	68f8      	ldr	r0, [r7, #12]
 8002e4a:	f000 fc32 	bl	80036b2 <UART_WaitOnFlagUntilTimeout>
 8002e4e:	4603      	mov	r3, r0
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d001      	beq.n	8002e58 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8002e54:	2303      	movs	r3, #3
 8002e56:	e036      	b.n	8002ec6 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8002e58:	69fb      	ldr	r3, [r7, #28]
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d10b      	bne.n	8002e76 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002e5e:	69bb      	ldr	r3, [r7, #24]
 8002e60:	881b      	ldrh	r3, [r3, #0]
 8002e62:	461a      	mov	r2, r3
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002e6c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002e6e:	69bb      	ldr	r3, [r7, #24]
 8002e70:	3302      	adds	r3, #2
 8002e72:	61bb      	str	r3, [r7, #24]
 8002e74:	e007      	b.n	8002e86 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002e76:	69fb      	ldr	r3, [r7, #28]
 8002e78:	781a      	ldrb	r2, [r3, #0]
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002e80:	69fb      	ldr	r3, [r7, #28]
 8002e82:	3301      	adds	r3, #1
 8002e84:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002e8a:	b29b      	uxth	r3, r3
 8002e8c:	3b01      	subs	r3, #1
 8002e8e:	b29a      	uxth	r2, r3
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002e98:	b29b      	uxth	r3, r3
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d1cf      	bne.n	8002e3e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002e9e:	683b      	ldr	r3, [r7, #0]
 8002ea0:	9300      	str	r3, [sp, #0]
 8002ea2:	697b      	ldr	r3, [r7, #20]
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	2140      	movs	r1, #64	; 0x40
 8002ea8:	68f8      	ldr	r0, [r7, #12]
 8002eaa:	f000 fc02 	bl	80036b2 <UART_WaitOnFlagUntilTimeout>
 8002eae:	4603      	mov	r3, r0
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d001      	beq.n	8002eb8 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8002eb4:	2303      	movs	r3, #3
 8002eb6:	e006      	b.n	8002ec6 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	2220      	movs	r2, #32
 8002ebc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8002ec0:	2300      	movs	r3, #0
 8002ec2:	e000      	b.n	8002ec6 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8002ec4:	2302      	movs	r3, #2
  }
}
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	3720      	adds	r7, #32
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	bd80      	pop	{r7, pc}

08002ece <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002ece:	b580      	push	{r7, lr}
 8002ed0:	b084      	sub	sp, #16
 8002ed2:	af00      	add	r7, sp, #0
 8002ed4:	60f8      	str	r0, [r7, #12]
 8002ed6:	60b9      	str	r1, [r7, #8]
 8002ed8:	4613      	mov	r3, r2
 8002eda:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002ee2:	b2db      	uxtb	r3, r3
 8002ee4:	2b20      	cmp	r3, #32
 8002ee6:	d112      	bne.n	8002f0e <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8002ee8:	68bb      	ldr	r3, [r7, #8]
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d002      	beq.n	8002ef4 <HAL_UART_Receive_IT+0x26>
 8002eee:	88fb      	ldrh	r3, [r7, #6]
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d101      	bne.n	8002ef8 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002ef4:	2301      	movs	r3, #1
 8002ef6:	e00b      	b.n	8002f10 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	2200      	movs	r2, #0
 8002efc:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002efe:	88fb      	ldrh	r3, [r7, #6]
 8002f00:	461a      	mov	r2, r3
 8002f02:	68b9      	ldr	r1, [r7, #8]
 8002f04:	68f8      	ldr	r0, [r7, #12]
 8002f06:	f000 fc42 	bl	800378e <UART_Start_Receive_IT>
 8002f0a:	4603      	mov	r3, r0
 8002f0c:	e000      	b.n	8002f10 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8002f0e:	2302      	movs	r3, #2
  }
}
 8002f10:	4618      	mov	r0, r3
 8002f12:	3710      	adds	r7, #16
 8002f14:	46bd      	mov	sp, r7
 8002f16:	bd80      	pop	{r7, pc}

08002f18 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	b08c      	sub	sp, #48	; 0x30
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	60f8      	str	r0, [r7, #12]
 8002f20:	60b9      	str	r1, [r7, #8]
 8002f22:	4613      	mov	r3, r2
 8002f24:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002f2c:	b2db      	uxtb	r3, r3
 8002f2e:	2b20      	cmp	r3, #32
 8002f30:	d156      	bne.n	8002fe0 <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 8002f32:	68bb      	ldr	r3, [r7, #8]
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d002      	beq.n	8002f3e <HAL_UART_Transmit_DMA+0x26>
 8002f38:	88fb      	ldrh	r3, [r7, #6]
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d101      	bne.n	8002f42 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8002f3e:	2301      	movs	r3, #1
 8002f40:	e04f      	b.n	8002fe2 <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 8002f42:	68ba      	ldr	r2, [r7, #8]
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	88fa      	ldrh	r2, [r7, #6]
 8002f4c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	88fa      	ldrh	r2, [r7, #6]
 8002f52:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	2200      	movs	r2, #0
 8002f58:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	2221      	movs	r2, #33	; 0x21
 8002f5e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f66:	4a21      	ldr	r2, [pc, #132]	; (8002fec <HAL_UART_Transmit_DMA+0xd4>)
 8002f68:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f6e:	4a20      	ldr	r2, [pc, #128]	; (8002ff0 <HAL_UART_Transmit_DMA+0xd8>)
 8002f70:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f76:	4a1f      	ldr	r2, [pc, #124]	; (8002ff4 <HAL_UART_Transmit_DMA+0xdc>)
 8002f78:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f7e:	2200      	movs	r2, #0
 8002f80:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the UART transmit DMA channel */
    tmp = (const uint32_t *)&pData;
 8002f82:	f107 0308 	add.w	r3, r7, #8
 8002f86:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8002f8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f8e:	6819      	ldr	r1, [r3, #0]
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	3304      	adds	r3, #4
 8002f96:	461a      	mov	r2, r3
 8002f98:	88fb      	ldrh	r3, [r7, #6]
 8002f9a:	f7fe febf 	bl	8001d1c <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002fa6:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	3314      	adds	r3, #20
 8002fae:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fb0:	69bb      	ldr	r3, [r7, #24]
 8002fb2:	e853 3f00 	ldrex	r3, [r3]
 8002fb6:	617b      	str	r3, [r7, #20]
   return(result);
 8002fb8:	697b      	ldr	r3, [r7, #20]
 8002fba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002fbe:	62bb      	str	r3, [r7, #40]	; 0x28
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	3314      	adds	r3, #20
 8002fc6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002fc8:	627a      	str	r2, [r7, #36]	; 0x24
 8002fca:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fcc:	6a39      	ldr	r1, [r7, #32]
 8002fce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002fd0:	e841 2300 	strex	r3, r2, [r1]
 8002fd4:	61fb      	str	r3, [r7, #28]
   return(result);
 8002fd6:	69fb      	ldr	r3, [r7, #28]
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d1e5      	bne.n	8002fa8 <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 8002fdc:	2300      	movs	r3, #0
 8002fde:	e000      	b.n	8002fe2 <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 8002fe0:	2302      	movs	r3, #2
  }
}
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	3730      	adds	r7, #48	; 0x30
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	bd80      	pop	{r7, pc}
 8002fea:	bf00      	nop
 8002fec:	08003569 	.word	0x08003569
 8002ff0:	08003603 	.word	0x08003603
 8002ff4:	0800361f 	.word	0x0800361f

08002ff8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b0ba      	sub	sp, #232	; 0xe8
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	68db      	ldr	r3, [r3, #12]
 8003010:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	695b      	ldr	r3, [r3, #20]
 800301a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800301e:	2300      	movs	r3, #0
 8003020:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003024:	2300      	movs	r3, #0
 8003026:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800302a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800302e:	f003 030f 	and.w	r3, r3, #15
 8003032:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8003036:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800303a:	2b00      	cmp	r3, #0
 800303c:	d10f      	bne.n	800305e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800303e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003042:	f003 0320 	and.w	r3, r3, #32
 8003046:	2b00      	cmp	r3, #0
 8003048:	d009      	beq.n	800305e <HAL_UART_IRQHandler+0x66>
 800304a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800304e:	f003 0320 	and.w	r3, r3, #32
 8003052:	2b00      	cmp	r3, #0
 8003054:	d003      	beq.n	800305e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003056:	6878      	ldr	r0, [r7, #4]
 8003058:	f000 fcd6 	bl	8003a08 <UART_Receive_IT>
      return;
 800305c:	e25b      	b.n	8003516 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800305e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003062:	2b00      	cmp	r3, #0
 8003064:	f000 80de 	beq.w	8003224 <HAL_UART_IRQHandler+0x22c>
 8003068:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800306c:	f003 0301 	and.w	r3, r3, #1
 8003070:	2b00      	cmp	r3, #0
 8003072:	d106      	bne.n	8003082 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003074:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003078:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800307c:	2b00      	cmp	r3, #0
 800307e:	f000 80d1 	beq.w	8003224 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003082:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003086:	f003 0301 	and.w	r3, r3, #1
 800308a:	2b00      	cmp	r3, #0
 800308c:	d00b      	beq.n	80030a6 <HAL_UART_IRQHandler+0xae>
 800308e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003092:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003096:	2b00      	cmp	r3, #0
 8003098:	d005      	beq.n	80030a6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800309e:	f043 0201 	orr.w	r2, r3, #1
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80030a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80030aa:	f003 0304 	and.w	r3, r3, #4
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d00b      	beq.n	80030ca <HAL_UART_IRQHandler+0xd2>
 80030b2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80030b6:	f003 0301 	and.w	r3, r3, #1
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d005      	beq.n	80030ca <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030c2:	f043 0202 	orr.w	r2, r3, #2
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80030ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80030ce:	f003 0302 	and.w	r3, r3, #2
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d00b      	beq.n	80030ee <HAL_UART_IRQHandler+0xf6>
 80030d6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80030da:	f003 0301 	and.w	r3, r3, #1
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d005      	beq.n	80030ee <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030e6:	f043 0204 	orr.w	r2, r3, #4
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80030ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80030f2:	f003 0308 	and.w	r3, r3, #8
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d011      	beq.n	800311e <HAL_UART_IRQHandler+0x126>
 80030fa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80030fe:	f003 0320 	and.w	r3, r3, #32
 8003102:	2b00      	cmp	r3, #0
 8003104:	d105      	bne.n	8003112 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003106:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800310a:	f003 0301 	and.w	r3, r3, #1
 800310e:	2b00      	cmp	r3, #0
 8003110:	d005      	beq.n	800311e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003116:	f043 0208 	orr.w	r2, r3, #8
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003122:	2b00      	cmp	r3, #0
 8003124:	f000 81f2 	beq.w	800350c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003128:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800312c:	f003 0320 	and.w	r3, r3, #32
 8003130:	2b00      	cmp	r3, #0
 8003132:	d008      	beq.n	8003146 <HAL_UART_IRQHandler+0x14e>
 8003134:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003138:	f003 0320 	and.w	r3, r3, #32
 800313c:	2b00      	cmp	r3, #0
 800313e:	d002      	beq.n	8003146 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003140:	6878      	ldr	r0, [r7, #4]
 8003142:	f000 fc61 	bl	8003a08 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	695b      	ldr	r3, [r3, #20]
 800314c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003150:	2b00      	cmp	r3, #0
 8003152:	bf14      	ite	ne
 8003154:	2301      	movne	r3, #1
 8003156:	2300      	moveq	r3, #0
 8003158:	b2db      	uxtb	r3, r3
 800315a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003162:	f003 0308 	and.w	r3, r3, #8
 8003166:	2b00      	cmp	r3, #0
 8003168:	d103      	bne.n	8003172 <HAL_UART_IRQHandler+0x17a>
 800316a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800316e:	2b00      	cmp	r3, #0
 8003170:	d04f      	beq.n	8003212 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003172:	6878      	ldr	r0, [r7, #4]
 8003174:	f000 fb6b 	bl	800384e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	695b      	ldr	r3, [r3, #20]
 800317e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003182:	2b00      	cmp	r3, #0
 8003184:	d041      	beq.n	800320a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	3314      	adds	r3, #20
 800318c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003190:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003194:	e853 3f00 	ldrex	r3, [r3]
 8003198:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800319c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80031a0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80031a4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	3314      	adds	r3, #20
 80031ae:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80031b2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80031b6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031ba:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80031be:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80031c2:	e841 2300 	strex	r3, r2, [r1]
 80031c6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80031ca:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d1d9      	bne.n	8003186 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d013      	beq.n	8003202 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031de:	4a7e      	ldr	r2, [pc, #504]	; (80033d8 <HAL_UART_IRQHandler+0x3e0>)
 80031e0:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031e6:	4618      	mov	r0, r3
 80031e8:	f7fe fe34 	bl	8001e54 <HAL_DMA_Abort_IT>
 80031ec:	4603      	mov	r3, r0
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d016      	beq.n	8003220 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031f8:	687a      	ldr	r2, [r7, #4]
 80031fa:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80031fc:	4610      	mov	r0, r2
 80031fe:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003200:	e00e      	b.n	8003220 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003202:	6878      	ldr	r0, [r7, #4]
 8003204:	f000 f99c 	bl	8003540 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003208:	e00a      	b.n	8003220 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800320a:	6878      	ldr	r0, [r7, #4]
 800320c:	f000 f998 	bl	8003540 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003210:	e006      	b.n	8003220 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003212:	6878      	ldr	r0, [r7, #4]
 8003214:	f000 f994 	bl	8003540 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	2200      	movs	r2, #0
 800321c:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 800321e:	e175      	b.n	800350c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003220:	bf00      	nop
    return;
 8003222:	e173      	b.n	800350c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003228:	2b01      	cmp	r3, #1
 800322a:	f040 814f 	bne.w	80034cc <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800322e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003232:	f003 0310 	and.w	r3, r3, #16
 8003236:	2b00      	cmp	r3, #0
 8003238:	f000 8148 	beq.w	80034cc <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800323c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003240:	f003 0310 	and.w	r3, r3, #16
 8003244:	2b00      	cmp	r3, #0
 8003246:	f000 8141 	beq.w	80034cc <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800324a:	2300      	movs	r3, #0
 800324c:	60bb      	str	r3, [r7, #8]
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	60bb      	str	r3, [r7, #8]
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	685b      	ldr	r3, [r3, #4]
 800325c:	60bb      	str	r3, [r7, #8]
 800325e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	695b      	ldr	r3, [r3, #20]
 8003266:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800326a:	2b00      	cmp	r3, #0
 800326c:	f000 80b6 	beq.w	80033dc <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	685b      	ldr	r3, [r3, #4]
 8003278:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800327c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003280:	2b00      	cmp	r3, #0
 8003282:	f000 8145 	beq.w	8003510 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800328a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800328e:	429a      	cmp	r2, r3
 8003290:	f080 813e 	bcs.w	8003510 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800329a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032a0:	699b      	ldr	r3, [r3, #24]
 80032a2:	2b20      	cmp	r3, #32
 80032a4:	f000 8088 	beq.w	80033b8 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	330c      	adds	r3, #12
 80032ae:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032b2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80032b6:	e853 3f00 	ldrex	r3, [r3]
 80032ba:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80032be:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80032c2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80032c6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	330c      	adds	r3, #12
 80032d0:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80032d4:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80032d8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032dc:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80032e0:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80032e4:	e841 2300 	strex	r3, r2, [r1]
 80032e8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80032ec:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d1d9      	bne.n	80032a8 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	3314      	adds	r3, #20
 80032fa:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032fc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80032fe:	e853 3f00 	ldrex	r3, [r3]
 8003302:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003304:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003306:	f023 0301 	bic.w	r3, r3, #1
 800330a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	3314      	adds	r3, #20
 8003314:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003318:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800331c:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800331e:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003320:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003324:	e841 2300 	strex	r3, r2, [r1]
 8003328:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800332a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800332c:	2b00      	cmp	r3, #0
 800332e:	d1e1      	bne.n	80032f4 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	3314      	adds	r3, #20
 8003336:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003338:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800333a:	e853 3f00 	ldrex	r3, [r3]
 800333e:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003340:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003342:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003346:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	3314      	adds	r3, #20
 8003350:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003354:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003356:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003358:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800335a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800335c:	e841 2300 	strex	r3, r2, [r1]
 8003360:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003362:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003364:	2b00      	cmp	r3, #0
 8003366:	d1e3      	bne.n	8003330 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	2220      	movs	r2, #32
 800336c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	2200      	movs	r2, #0
 8003374:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	330c      	adds	r3, #12
 800337c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800337e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003380:	e853 3f00 	ldrex	r3, [r3]
 8003384:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003386:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003388:	f023 0310 	bic.w	r3, r3, #16
 800338c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	330c      	adds	r3, #12
 8003396:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800339a:	65ba      	str	r2, [r7, #88]	; 0x58
 800339c:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800339e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80033a0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80033a2:	e841 2300 	strex	r3, r2, [r1]
 80033a6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80033a8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d1e3      	bne.n	8003376 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033b2:	4618      	mov	r0, r3
 80033b4:	f7fe fd12 	bl	8001ddc <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	2202      	movs	r2, #2
 80033bc:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80033c6:	b29b      	uxth	r3, r3
 80033c8:	1ad3      	subs	r3, r2, r3
 80033ca:	b29b      	uxth	r3, r3
 80033cc:	4619      	mov	r1, r3
 80033ce:	6878      	ldr	r0, [r7, #4]
 80033d0:	f000 f8bf 	bl	8003552 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80033d4:	e09c      	b.n	8003510 <HAL_UART_IRQHandler+0x518>
 80033d6:	bf00      	nop
 80033d8:	08003913 	.word	0x08003913
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80033e4:	b29b      	uxth	r3, r3
 80033e6:	1ad3      	subs	r3, r2, r3
 80033e8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80033f0:	b29b      	uxth	r3, r3
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	f000 808e 	beq.w	8003514 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80033f8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	f000 8089 	beq.w	8003514 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	330c      	adds	r3, #12
 8003408:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800340a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800340c:	e853 3f00 	ldrex	r3, [r3]
 8003410:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003412:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003414:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003418:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	330c      	adds	r3, #12
 8003422:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8003426:	647a      	str	r2, [r7, #68]	; 0x44
 8003428:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800342a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800342c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800342e:	e841 2300 	strex	r3, r2, [r1]
 8003432:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003434:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003436:	2b00      	cmp	r3, #0
 8003438:	d1e3      	bne.n	8003402 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	3314      	adds	r3, #20
 8003440:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003444:	e853 3f00 	ldrex	r3, [r3]
 8003448:	623b      	str	r3, [r7, #32]
   return(result);
 800344a:	6a3b      	ldr	r3, [r7, #32]
 800344c:	f023 0301 	bic.w	r3, r3, #1
 8003450:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	3314      	adds	r3, #20
 800345a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800345e:	633a      	str	r2, [r7, #48]	; 0x30
 8003460:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003462:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003464:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003466:	e841 2300 	strex	r3, r2, [r1]
 800346a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800346c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800346e:	2b00      	cmp	r3, #0
 8003470:	d1e3      	bne.n	800343a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	2220      	movs	r2, #32
 8003476:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	2200      	movs	r2, #0
 800347e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	330c      	adds	r3, #12
 8003486:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003488:	693b      	ldr	r3, [r7, #16]
 800348a:	e853 3f00 	ldrex	r3, [r3]
 800348e:	60fb      	str	r3, [r7, #12]
   return(result);
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	f023 0310 	bic.w	r3, r3, #16
 8003496:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	330c      	adds	r3, #12
 80034a0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80034a4:	61fa      	str	r2, [r7, #28]
 80034a6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034a8:	69b9      	ldr	r1, [r7, #24]
 80034aa:	69fa      	ldr	r2, [r7, #28]
 80034ac:	e841 2300 	strex	r3, r2, [r1]
 80034b0:	617b      	str	r3, [r7, #20]
   return(result);
 80034b2:	697b      	ldr	r3, [r7, #20]
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d1e3      	bne.n	8003480 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2202      	movs	r2, #2
 80034bc:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80034be:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80034c2:	4619      	mov	r1, r3
 80034c4:	6878      	ldr	r0, [r7, #4]
 80034c6:	f000 f844 	bl	8003552 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80034ca:	e023      	b.n	8003514 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80034cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80034d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d009      	beq.n	80034ec <HAL_UART_IRQHandler+0x4f4>
 80034d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80034dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d003      	beq.n	80034ec <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80034e4:	6878      	ldr	r0, [r7, #4]
 80034e6:	f000 fa28 	bl	800393a <UART_Transmit_IT>
    return;
 80034ea:	e014      	b.n	8003516 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80034ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80034f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d00e      	beq.n	8003516 <HAL_UART_IRQHandler+0x51e>
 80034f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80034fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003500:	2b00      	cmp	r3, #0
 8003502:	d008      	beq.n	8003516 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003504:	6878      	ldr	r0, [r7, #4]
 8003506:	f000 fa67 	bl	80039d8 <UART_EndTransmit_IT>
    return;
 800350a:	e004      	b.n	8003516 <HAL_UART_IRQHandler+0x51e>
    return;
 800350c:	bf00      	nop
 800350e:	e002      	b.n	8003516 <HAL_UART_IRQHandler+0x51e>
      return;
 8003510:	bf00      	nop
 8003512:	e000      	b.n	8003516 <HAL_UART_IRQHandler+0x51e>
      return;
 8003514:	bf00      	nop
  }
}
 8003516:	37e8      	adds	r7, #232	; 0xe8
 8003518:	46bd      	mov	sp, r7
 800351a:	bd80      	pop	{r7, pc}

0800351c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800351c:	b480      	push	{r7}
 800351e:	b083      	sub	sp, #12
 8003520:	af00      	add	r7, sp, #0
 8003522:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003524:	bf00      	nop
 8003526:	370c      	adds	r7, #12
 8003528:	46bd      	mov	sp, r7
 800352a:	bc80      	pop	{r7}
 800352c:	4770      	bx	lr

0800352e <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800352e:	b480      	push	{r7}
 8003530:	b083      	sub	sp, #12
 8003532:	af00      	add	r7, sp, #0
 8003534:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8003536:	bf00      	nop
 8003538:	370c      	adds	r7, #12
 800353a:	46bd      	mov	sp, r7
 800353c:	bc80      	pop	{r7}
 800353e:	4770      	bx	lr

08003540 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003540:	b480      	push	{r7}
 8003542:	b083      	sub	sp, #12
 8003544:	af00      	add	r7, sp, #0
 8003546:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003548:	bf00      	nop
 800354a:	370c      	adds	r7, #12
 800354c:	46bd      	mov	sp, r7
 800354e:	bc80      	pop	{r7}
 8003550:	4770      	bx	lr

08003552 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003552:	b480      	push	{r7}
 8003554:	b083      	sub	sp, #12
 8003556:	af00      	add	r7, sp, #0
 8003558:	6078      	str	r0, [r7, #4]
 800355a:	460b      	mov	r3, r1
 800355c:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800355e:	bf00      	nop
 8003560:	370c      	adds	r7, #12
 8003562:	46bd      	mov	sp, r7
 8003564:	bc80      	pop	{r7}
 8003566:	4770      	bx	lr

08003568 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8003568:	b580      	push	{r7, lr}
 800356a:	b090      	sub	sp, #64	; 0x40
 800356c:	af00      	add	r7, sp, #0
 800356e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003574:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f003 0320 	and.w	r3, r3, #32
 8003580:	2b00      	cmp	r3, #0
 8003582:	d137      	bne.n	80035f4 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8003584:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003586:	2200      	movs	r2, #0
 8003588:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800358a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	3314      	adds	r3, #20
 8003590:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003592:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003594:	e853 3f00 	ldrex	r3, [r3]
 8003598:	623b      	str	r3, [r7, #32]
   return(result);
 800359a:	6a3b      	ldr	r3, [r7, #32]
 800359c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80035a0:	63bb      	str	r3, [r7, #56]	; 0x38
 80035a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	3314      	adds	r3, #20
 80035a8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80035aa:	633a      	str	r2, [r7, #48]	; 0x30
 80035ac:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035ae:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80035b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80035b2:	e841 2300 	strex	r3, r2, [r1]
 80035b6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80035b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d1e5      	bne.n	800358a <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80035be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	330c      	adds	r3, #12
 80035c4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035c6:	693b      	ldr	r3, [r7, #16]
 80035c8:	e853 3f00 	ldrex	r3, [r3]
 80035cc:	60fb      	str	r3, [r7, #12]
   return(result);
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80035d4:	637b      	str	r3, [r7, #52]	; 0x34
 80035d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	330c      	adds	r3, #12
 80035dc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80035de:	61fa      	str	r2, [r7, #28]
 80035e0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035e2:	69b9      	ldr	r1, [r7, #24]
 80035e4:	69fa      	ldr	r2, [r7, #28]
 80035e6:	e841 2300 	strex	r3, r2, [r1]
 80035ea:	617b      	str	r3, [r7, #20]
   return(result);
 80035ec:	697b      	ldr	r3, [r7, #20]
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d1e5      	bne.n	80035be <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80035f2:	e002      	b.n	80035fa <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 80035f4:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80035f6:	f7ff ff91 	bl	800351c <HAL_UART_TxCpltCallback>
}
 80035fa:	bf00      	nop
 80035fc:	3740      	adds	r7, #64	; 0x40
 80035fe:	46bd      	mov	sp, r7
 8003600:	bd80      	pop	{r7, pc}

08003602 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003602:	b580      	push	{r7, lr}
 8003604:	b084      	sub	sp, #16
 8003606:	af00      	add	r7, sp, #0
 8003608:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800360e:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8003610:	68f8      	ldr	r0, [r7, #12]
 8003612:	f7ff ff8c 	bl	800352e <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003616:	bf00      	nop
 8003618:	3710      	adds	r7, #16
 800361a:	46bd      	mov	sp, r7
 800361c:	bd80      	pop	{r7, pc}

0800361e <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800361e:	b580      	push	{r7, lr}
 8003620:	b084      	sub	sp, #16
 8003622:	af00      	add	r7, sp, #0
 8003624:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8003626:	2300      	movs	r3, #0
 8003628:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800362e:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8003630:	68bb      	ldr	r3, [r7, #8]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	695b      	ldr	r3, [r3, #20]
 8003636:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800363a:	2b00      	cmp	r3, #0
 800363c:	bf14      	ite	ne
 800363e:	2301      	movne	r3, #1
 8003640:	2300      	moveq	r3, #0
 8003642:	b2db      	uxtb	r3, r3
 8003644:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8003646:	68bb      	ldr	r3, [r7, #8]
 8003648:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800364c:	b2db      	uxtb	r3, r3
 800364e:	2b21      	cmp	r3, #33	; 0x21
 8003650:	d108      	bne.n	8003664 <UART_DMAError+0x46>
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	2b00      	cmp	r3, #0
 8003656:	d005      	beq.n	8003664 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8003658:	68bb      	ldr	r3, [r7, #8]
 800365a:	2200      	movs	r2, #0
 800365c:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800365e:	68b8      	ldr	r0, [r7, #8]
 8003660:	f000 f8ce 	bl	8003800 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003664:	68bb      	ldr	r3, [r7, #8]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	695b      	ldr	r3, [r3, #20]
 800366a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800366e:	2b00      	cmp	r3, #0
 8003670:	bf14      	ite	ne
 8003672:	2301      	movne	r3, #1
 8003674:	2300      	moveq	r3, #0
 8003676:	b2db      	uxtb	r3, r3
 8003678:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800367a:	68bb      	ldr	r3, [r7, #8]
 800367c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003680:	b2db      	uxtb	r3, r3
 8003682:	2b22      	cmp	r3, #34	; 0x22
 8003684:	d108      	bne.n	8003698 <UART_DMAError+0x7a>
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	2b00      	cmp	r3, #0
 800368a:	d005      	beq.n	8003698 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800368c:	68bb      	ldr	r3, [r7, #8]
 800368e:	2200      	movs	r2, #0
 8003690:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8003692:	68b8      	ldr	r0, [r7, #8]
 8003694:	f000 f8db 	bl	800384e <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8003698:	68bb      	ldr	r3, [r7, #8]
 800369a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800369c:	f043 0210 	orr.w	r2, r3, #16
 80036a0:	68bb      	ldr	r3, [r7, #8]
 80036a2:	645a      	str	r2, [r3, #68]	; 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80036a4:	68b8      	ldr	r0, [r7, #8]
 80036a6:	f7ff ff4b 	bl	8003540 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80036aa:	bf00      	nop
 80036ac:	3710      	adds	r7, #16
 80036ae:	46bd      	mov	sp, r7
 80036b0:	bd80      	pop	{r7, pc}

080036b2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80036b2:	b580      	push	{r7, lr}
 80036b4:	b090      	sub	sp, #64	; 0x40
 80036b6:	af00      	add	r7, sp, #0
 80036b8:	60f8      	str	r0, [r7, #12]
 80036ba:	60b9      	str	r1, [r7, #8]
 80036bc:	603b      	str	r3, [r7, #0]
 80036be:	4613      	mov	r3, r2
 80036c0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80036c2:	e050      	b.n	8003766 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80036c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80036c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036ca:	d04c      	beq.n	8003766 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80036cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d007      	beq.n	80036e2 <UART_WaitOnFlagUntilTimeout+0x30>
 80036d2:	f7fe f98d 	bl	80019f0 <HAL_GetTick>
 80036d6:	4602      	mov	r2, r0
 80036d8:	683b      	ldr	r3, [r7, #0]
 80036da:	1ad3      	subs	r3, r2, r3
 80036dc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80036de:	429a      	cmp	r2, r3
 80036e0:	d241      	bcs.n	8003766 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	330c      	adds	r3, #12
 80036e8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036ec:	e853 3f00 	ldrex	r3, [r3]
 80036f0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80036f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036f4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80036f8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	330c      	adds	r3, #12
 8003700:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003702:	637a      	str	r2, [r7, #52]	; 0x34
 8003704:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003706:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003708:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800370a:	e841 2300 	strex	r3, r2, [r1]
 800370e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003710:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003712:	2b00      	cmp	r3, #0
 8003714:	d1e5      	bne.n	80036e2 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	3314      	adds	r3, #20
 800371c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800371e:	697b      	ldr	r3, [r7, #20]
 8003720:	e853 3f00 	ldrex	r3, [r3]
 8003724:	613b      	str	r3, [r7, #16]
   return(result);
 8003726:	693b      	ldr	r3, [r7, #16]
 8003728:	f023 0301 	bic.w	r3, r3, #1
 800372c:	63bb      	str	r3, [r7, #56]	; 0x38
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	3314      	adds	r3, #20
 8003734:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003736:	623a      	str	r2, [r7, #32]
 8003738:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800373a:	69f9      	ldr	r1, [r7, #28]
 800373c:	6a3a      	ldr	r2, [r7, #32]
 800373e:	e841 2300 	strex	r3, r2, [r1]
 8003742:	61bb      	str	r3, [r7, #24]
   return(result);
 8003744:	69bb      	ldr	r3, [r7, #24]
 8003746:	2b00      	cmp	r3, #0
 8003748:	d1e5      	bne.n	8003716 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	2220      	movs	r2, #32
 800374e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	2220      	movs	r2, #32
 8003756:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	2200      	movs	r2, #0
 800375e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8003762:	2303      	movs	r3, #3
 8003764:	e00f      	b.n	8003786 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	681a      	ldr	r2, [r3, #0]
 800376c:	68bb      	ldr	r3, [r7, #8]
 800376e:	4013      	ands	r3, r2
 8003770:	68ba      	ldr	r2, [r7, #8]
 8003772:	429a      	cmp	r2, r3
 8003774:	bf0c      	ite	eq
 8003776:	2301      	moveq	r3, #1
 8003778:	2300      	movne	r3, #0
 800377a:	b2db      	uxtb	r3, r3
 800377c:	461a      	mov	r2, r3
 800377e:	79fb      	ldrb	r3, [r7, #7]
 8003780:	429a      	cmp	r2, r3
 8003782:	d09f      	beq.n	80036c4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003784:	2300      	movs	r3, #0
}
 8003786:	4618      	mov	r0, r3
 8003788:	3740      	adds	r7, #64	; 0x40
 800378a:	46bd      	mov	sp, r7
 800378c:	bd80      	pop	{r7, pc}

0800378e <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800378e:	b480      	push	{r7}
 8003790:	b085      	sub	sp, #20
 8003792:	af00      	add	r7, sp, #0
 8003794:	60f8      	str	r0, [r7, #12]
 8003796:	60b9      	str	r1, [r7, #8]
 8003798:	4613      	mov	r3, r2
 800379a:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	68ba      	ldr	r2, [r7, #8]
 80037a0:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	88fa      	ldrh	r2, [r7, #6]
 80037a6:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	88fa      	ldrh	r2, [r7, #6]
 80037ac:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	2200      	movs	r2, #0
 80037b2:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	2222      	movs	r2, #34	; 0x22
 80037b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	691b      	ldr	r3, [r3, #16]
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d007      	beq.n	80037d4 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	68da      	ldr	r2, [r3, #12]
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80037d2:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	695a      	ldr	r2, [r3, #20]
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f042 0201 	orr.w	r2, r2, #1
 80037e2:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	68da      	ldr	r2, [r3, #12]
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f042 0220 	orr.w	r2, r2, #32
 80037f2:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80037f4:	2300      	movs	r3, #0
}
 80037f6:	4618      	mov	r0, r3
 80037f8:	3714      	adds	r7, #20
 80037fa:	46bd      	mov	sp, r7
 80037fc:	bc80      	pop	{r7}
 80037fe:	4770      	bx	lr

08003800 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8003800:	b480      	push	{r7}
 8003802:	b089      	sub	sp, #36	; 0x24
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	330c      	adds	r3, #12
 800380e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	e853 3f00 	ldrex	r3, [r3]
 8003816:	60bb      	str	r3, [r7, #8]
   return(result);
 8003818:	68bb      	ldr	r3, [r7, #8]
 800381a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800381e:	61fb      	str	r3, [r7, #28]
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	330c      	adds	r3, #12
 8003826:	69fa      	ldr	r2, [r7, #28]
 8003828:	61ba      	str	r2, [r7, #24]
 800382a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800382c:	6979      	ldr	r1, [r7, #20]
 800382e:	69ba      	ldr	r2, [r7, #24]
 8003830:	e841 2300 	strex	r3, r2, [r1]
 8003834:	613b      	str	r3, [r7, #16]
   return(result);
 8003836:	693b      	ldr	r3, [r7, #16]
 8003838:	2b00      	cmp	r3, #0
 800383a:	d1e5      	bne.n	8003808 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	2220      	movs	r2, #32
 8003840:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
}
 8003844:	bf00      	nop
 8003846:	3724      	adds	r7, #36	; 0x24
 8003848:	46bd      	mov	sp, r7
 800384a:	bc80      	pop	{r7}
 800384c:	4770      	bx	lr

0800384e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800384e:	b480      	push	{r7}
 8003850:	b095      	sub	sp, #84	; 0x54
 8003852:	af00      	add	r7, sp, #0
 8003854:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	330c      	adds	r3, #12
 800385c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800385e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003860:	e853 3f00 	ldrex	r3, [r3]
 8003864:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003866:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003868:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800386c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	330c      	adds	r3, #12
 8003874:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003876:	643a      	str	r2, [r7, #64]	; 0x40
 8003878:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800387a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800387c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800387e:	e841 2300 	strex	r3, r2, [r1]
 8003882:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003884:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003886:	2b00      	cmp	r3, #0
 8003888:	d1e5      	bne.n	8003856 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	3314      	adds	r3, #20
 8003890:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003892:	6a3b      	ldr	r3, [r7, #32]
 8003894:	e853 3f00 	ldrex	r3, [r3]
 8003898:	61fb      	str	r3, [r7, #28]
   return(result);
 800389a:	69fb      	ldr	r3, [r7, #28]
 800389c:	f023 0301 	bic.w	r3, r3, #1
 80038a0:	64bb      	str	r3, [r7, #72]	; 0x48
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	3314      	adds	r3, #20
 80038a8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80038aa:	62fa      	str	r2, [r7, #44]	; 0x2c
 80038ac:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038ae:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80038b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80038b2:	e841 2300 	strex	r3, r2, [r1]
 80038b6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80038b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d1e5      	bne.n	800388a <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038c2:	2b01      	cmp	r3, #1
 80038c4:	d119      	bne.n	80038fa <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	330c      	adds	r3, #12
 80038cc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	e853 3f00 	ldrex	r3, [r3]
 80038d4:	60bb      	str	r3, [r7, #8]
   return(result);
 80038d6:	68bb      	ldr	r3, [r7, #8]
 80038d8:	f023 0310 	bic.w	r3, r3, #16
 80038dc:	647b      	str	r3, [r7, #68]	; 0x44
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	330c      	adds	r3, #12
 80038e4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80038e6:	61ba      	str	r2, [r7, #24]
 80038e8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038ea:	6979      	ldr	r1, [r7, #20]
 80038ec:	69ba      	ldr	r2, [r7, #24]
 80038ee:	e841 2300 	strex	r3, r2, [r1]
 80038f2:	613b      	str	r3, [r7, #16]
   return(result);
 80038f4:	693b      	ldr	r3, [r7, #16]
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d1e5      	bne.n	80038c6 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	2220      	movs	r2, #32
 80038fe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	2200      	movs	r2, #0
 8003906:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003908:	bf00      	nop
 800390a:	3754      	adds	r7, #84	; 0x54
 800390c:	46bd      	mov	sp, r7
 800390e:	bc80      	pop	{r7}
 8003910:	4770      	bx	lr

08003912 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003912:	b580      	push	{r7, lr}
 8003914:	b084      	sub	sp, #16
 8003916:	af00      	add	r7, sp, #0
 8003918:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800391e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	2200      	movs	r2, #0
 8003924:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	2200      	movs	r2, #0
 800392a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800392c:	68f8      	ldr	r0, [r7, #12]
 800392e:	f7ff fe07 	bl	8003540 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003932:	bf00      	nop
 8003934:	3710      	adds	r7, #16
 8003936:	46bd      	mov	sp, r7
 8003938:	bd80      	pop	{r7, pc}

0800393a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800393a:	b480      	push	{r7}
 800393c:	b085      	sub	sp, #20
 800393e:	af00      	add	r7, sp, #0
 8003940:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003948:	b2db      	uxtb	r3, r3
 800394a:	2b21      	cmp	r3, #33	; 0x21
 800394c:	d13e      	bne.n	80039cc <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	689b      	ldr	r3, [r3, #8]
 8003952:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003956:	d114      	bne.n	8003982 <UART_Transmit_IT+0x48>
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	691b      	ldr	r3, [r3, #16]
 800395c:	2b00      	cmp	r3, #0
 800395e:	d110      	bne.n	8003982 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	6a1b      	ldr	r3, [r3, #32]
 8003964:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	881b      	ldrh	r3, [r3, #0]
 800396a:	461a      	mov	r2, r3
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003974:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	6a1b      	ldr	r3, [r3, #32]
 800397a:	1c9a      	adds	r2, r3, #2
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	621a      	str	r2, [r3, #32]
 8003980:	e008      	b.n	8003994 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	6a1b      	ldr	r3, [r3, #32]
 8003986:	1c59      	adds	r1, r3, #1
 8003988:	687a      	ldr	r2, [r7, #4]
 800398a:	6211      	str	r1, [r2, #32]
 800398c:	781a      	ldrb	r2, [r3, #0]
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003998:	b29b      	uxth	r3, r3
 800399a:	3b01      	subs	r3, #1
 800399c:	b29b      	uxth	r3, r3
 800399e:	687a      	ldr	r2, [r7, #4]
 80039a0:	4619      	mov	r1, r3
 80039a2:	84d1      	strh	r1, [r2, #38]	; 0x26
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d10f      	bne.n	80039c8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	68da      	ldr	r2, [r3, #12]
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80039b6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	68da      	ldr	r2, [r3, #12]
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80039c6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80039c8:	2300      	movs	r3, #0
 80039ca:	e000      	b.n	80039ce <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80039cc:	2302      	movs	r3, #2
  }
}
 80039ce:	4618      	mov	r0, r3
 80039d0:	3714      	adds	r7, #20
 80039d2:	46bd      	mov	sp, r7
 80039d4:	bc80      	pop	{r7}
 80039d6:	4770      	bx	lr

080039d8 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80039d8:	b580      	push	{r7, lr}
 80039da:	b082      	sub	sp, #8
 80039dc:	af00      	add	r7, sp, #0
 80039de:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	68da      	ldr	r2, [r3, #12]
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80039ee:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2220      	movs	r2, #32
 80039f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80039f8:	6878      	ldr	r0, [r7, #4]
 80039fa:	f7ff fd8f 	bl	800351c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80039fe:	2300      	movs	r3, #0
}
 8003a00:	4618      	mov	r0, r3
 8003a02:	3708      	adds	r7, #8
 8003a04:	46bd      	mov	sp, r7
 8003a06:	bd80      	pop	{r7, pc}

08003a08 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	b08c      	sub	sp, #48	; 0x30
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003a16:	b2db      	uxtb	r3, r3
 8003a18:	2b22      	cmp	r3, #34	; 0x22
 8003a1a:	f040 80ae 	bne.w	8003b7a <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	689b      	ldr	r3, [r3, #8]
 8003a22:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a26:	d117      	bne.n	8003a58 <UART_Receive_IT+0x50>
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	691b      	ldr	r3, [r3, #16]
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d113      	bne.n	8003a58 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003a30:	2300      	movs	r3, #0
 8003a32:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a38:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	685b      	ldr	r3, [r3, #4]
 8003a40:	b29b      	uxth	r3, r3
 8003a42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a46:	b29a      	uxth	r2, r3
 8003a48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a4a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a50:	1c9a      	adds	r2, r3, #2
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	629a      	str	r2, [r3, #40]	; 0x28
 8003a56:	e026      	b.n	8003aa6 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a5c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8003a5e:	2300      	movs	r3, #0
 8003a60:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	689b      	ldr	r3, [r3, #8]
 8003a66:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a6a:	d007      	beq.n	8003a7c <UART_Receive_IT+0x74>
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	689b      	ldr	r3, [r3, #8]
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d10a      	bne.n	8003a8a <UART_Receive_IT+0x82>
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	691b      	ldr	r3, [r3, #16]
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d106      	bne.n	8003a8a <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	685b      	ldr	r3, [r3, #4]
 8003a82:	b2da      	uxtb	r2, r3
 8003a84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a86:	701a      	strb	r2, [r3, #0]
 8003a88:	e008      	b.n	8003a9c <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	685b      	ldr	r3, [r3, #4]
 8003a90:	b2db      	uxtb	r3, r3
 8003a92:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003a96:	b2da      	uxtb	r2, r3
 8003a98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a9a:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003aa0:	1c5a      	adds	r2, r3, #1
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003aaa:	b29b      	uxth	r3, r3
 8003aac:	3b01      	subs	r3, #1
 8003aae:	b29b      	uxth	r3, r3
 8003ab0:	687a      	ldr	r2, [r7, #4]
 8003ab2:	4619      	mov	r1, r3
 8003ab4:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d15d      	bne.n	8003b76 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	68da      	ldr	r2, [r3, #12]
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f022 0220 	bic.w	r2, r2, #32
 8003ac8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	68da      	ldr	r2, [r3, #12]
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003ad8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	695a      	ldr	r2, [r3, #20]
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f022 0201 	bic.w	r2, r2, #1
 8003ae8:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	2220      	movs	r2, #32
 8003aee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	2200      	movs	r2, #0
 8003af6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003afc:	2b01      	cmp	r3, #1
 8003afe:	d135      	bne.n	8003b6c <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	2200      	movs	r2, #0
 8003b04:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	330c      	adds	r3, #12
 8003b0c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b0e:	697b      	ldr	r3, [r7, #20]
 8003b10:	e853 3f00 	ldrex	r3, [r3]
 8003b14:	613b      	str	r3, [r7, #16]
   return(result);
 8003b16:	693b      	ldr	r3, [r7, #16]
 8003b18:	f023 0310 	bic.w	r3, r3, #16
 8003b1c:	627b      	str	r3, [r7, #36]	; 0x24
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	330c      	adds	r3, #12
 8003b24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b26:	623a      	str	r2, [r7, #32]
 8003b28:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b2a:	69f9      	ldr	r1, [r7, #28]
 8003b2c:	6a3a      	ldr	r2, [r7, #32]
 8003b2e:	e841 2300 	strex	r3, r2, [r1]
 8003b32:	61bb      	str	r3, [r7, #24]
   return(result);
 8003b34:	69bb      	ldr	r3, [r7, #24]
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d1e5      	bne.n	8003b06 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f003 0310 	and.w	r3, r3, #16
 8003b44:	2b10      	cmp	r3, #16
 8003b46:	d10a      	bne.n	8003b5e <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003b48:	2300      	movs	r3, #0
 8003b4a:	60fb      	str	r3, [r7, #12]
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	60fb      	str	r3, [r7, #12]
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	685b      	ldr	r3, [r3, #4]
 8003b5a:	60fb      	str	r3, [r7, #12]
 8003b5c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003b62:	4619      	mov	r1, r3
 8003b64:	6878      	ldr	r0, [r7, #4]
 8003b66:	f7ff fcf4 	bl	8003552 <HAL_UARTEx_RxEventCallback>
 8003b6a:	e002      	b.n	8003b72 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003b6c:	6878      	ldr	r0, [r7, #4]
 8003b6e:	f7fd f913 	bl	8000d98 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003b72:	2300      	movs	r3, #0
 8003b74:	e002      	b.n	8003b7c <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8003b76:	2300      	movs	r3, #0
 8003b78:	e000      	b.n	8003b7c <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8003b7a:	2302      	movs	r3, #2
  }
}
 8003b7c:	4618      	mov	r0, r3
 8003b7e:	3730      	adds	r7, #48	; 0x30
 8003b80:	46bd      	mov	sp, r7
 8003b82:	bd80      	pop	{r7, pc}

08003b84 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003b84:	b580      	push	{r7, lr}
 8003b86:	b084      	sub	sp, #16
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	691b      	ldr	r3, [r3, #16]
 8003b92:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	68da      	ldr	r2, [r3, #12]
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	430a      	orrs	r2, r1
 8003ba0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	689a      	ldr	r2, [r3, #8]
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	691b      	ldr	r3, [r3, #16]
 8003baa:	431a      	orrs	r2, r3
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	695b      	ldr	r3, [r3, #20]
 8003bb0:	4313      	orrs	r3, r2
 8003bb2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	68db      	ldr	r3, [r3, #12]
 8003bba:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003bbe:	f023 030c 	bic.w	r3, r3, #12
 8003bc2:	687a      	ldr	r2, [r7, #4]
 8003bc4:	6812      	ldr	r2, [r2, #0]
 8003bc6:	68b9      	ldr	r1, [r7, #8]
 8003bc8:	430b      	orrs	r3, r1
 8003bca:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	695b      	ldr	r3, [r3, #20]
 8003bd2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	699a      	ldr	r2, [r3, #24]
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	430a      	orrs	r2, r1
 8003be0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	4a2c      	ldr	r2, [pc, #176]	; (8003c98 <UART_SetConfig+0x114>)
 8003be8:	4293      	cmp	r3, r2
 8003bea:	d103      	bne.n	8003bf4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003bec:	f7ff f86a 	bl	8002cc4 <HAL_RCC_GetPCLK2Freq>
 8003bf0:	60f8      	str	r0, [r7, #12]
 8003bf2:	e002      	b.n	8003bfa <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003bf4:	f7ff f852 	bl	8002c9c <HAL_RCC_GetPCLK1Freq>
 8003bf8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003bfa:	68fa      	ldr	r2, [r7, #12]
 8003bfc:	4613      	mov	r3, r2
 8003bfe:	009b      	lsls	r3, r3, #2
 8003c00:	4413      	add	r3, r2
 8003c02:	009a      	lsls	r2, r3, #2
 8003c04:	441a      	add	r2, r3
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	685b      	ldr	r3, [r3, #4]
 8003c0a:	009b      	lsls	r3, r3, #2
 8003c0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c10:	4a22      	ldr	r2, [pc, #136]	; (8003c9c <UART_SetConfig+0x118>)
 8003c12:	fba2 2303 	umull	r2, r3, r2, r3
 8003c16:	095b      	lsrs	r3, r3, #5
 8003c18:	0119      	lsls	r1, r3, #4
 8003c1a:	68fa      	ldr	r2, [r7, #12]
 8003c1c:	4613      	mov	r3, r2
 8003c1e:	009b      	lsls	r3, r3, #2
 8003c20:	4413      	add	r3, r2
 8003c22:	009a      	lsls	r2, r3, #2
 8003c24:	441a      	add	r2, r3
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	685b      	ldr	r3, [r3, #4]
 8003c2a:	009b      	lsls	r3, r3, #2
 8003c2c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003c30:	4b1a      	ldr	r3, [pc, #104]	; (8003c9c <UART_SetConfig+0x118>)
 8003c32:	fba3 0302 	umull	r0, r3, r3, r2
 8003c36:	095b      	lsrs	r3, r3, #5
 8003c38:	2064      	movs	r0, #100	; 0x64
 8003c3a:	fb00 f303 	mul.w	r3, r0, r3
 8003c3e:	1ad3      	subs	r3, r2, r3
 8003c40:	011b      	lsls	r3, r3, #4
 8003c42:	3332      	adds	r3, #50	; 0x32
 8003c44:	4a15      	ldr	r2, [pc, #84]	; (8003c9c <UART_SetConfig+0x118>)
 8003c46:	fba2 2303 	umull	r2, r3, r2, r3
 8003c4a:	095b      	lsrs	r3, r3, #5
 8003c4c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003c50:	4419      	add	r1, r3
 8003c52:	68fa      	ldr	r2, [r7, #12]
 8003c54:	4613      	mov	r3, r2
 8003c56:	009b      	lsls	r3, r3, #2
 8003c58:	4413      	add	r3, r2
 8003c5a:	009a      	lsls	r2, r3, #2
 8003c5c:	441a      	add	r2, r3
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	685b      	ldr	r3, [r3, #4]
 8003c62:	009b      	lsls	r3, r3, #2
 8003c64:	fbb2 f2f3 	udiv	r2, r2, r3
 8003c68:	4b0c      	ldr	r3, [pc, #48]	; (8003c9c <UART_SetConfig+0x118>)
 8003c6a:	fba3 0302 	umull	r0, r3, r3, r2
 8003c6e:	095b      	lsrs	r3, r3, #5
 8003c70:	2064      	movs	r0, #100	; 0x64
 8003c72:	fb00 f303 	mul.w	r3, r0, r3
 8003c76:	1ad3      	subs	r3, r2, r3
 8003c78:	011b      	lsls	r3, r3, #4
 8003c7a:	3332      	adds	r3, #50	; 0x32
 8003c7c:	4a07      	ldr	r2, [pc, #28]	; (8003c9c <UART_SetConfig+0x118>)
 8003c7e:	fba2 2303 	umull	r2, r3, r2, r3
 8003c82:	095b      	lsrs	r3, r3, #5
 8003c84:	f003 020f 	and.w	r2, r3, #15
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	440a      	add	r2, r1
 8003c8e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003c90:	bf00      	nop
 8003c92:	3710      	adds	r7, #16
 8003c94:	46bd      	mov	sp, r7
 8003c96:	bd80      	pop	{r7, pc}
 8003c98:	40013800 	.word	0x40013800
 8003c9c:	51eb851f 	.word	0x51eb851f

08003ca0 <__errno>:
 8003ca0:	4b01      	ldr	r3, [pc, #4]	; (8003ca8 <__errno+0x8>)
 8003ca2:	6818      	ldr	r0, [r3, #0]
 8003ca4:	4770      	bx	lr
 8003ca6:	bf00      	nop
 8003ca8:	20000058 	.word	0x20000058

08003cac <__libc_init_array>:
 8003cac:	b570      	push	{r4, r5, r6, lr}
 8003cae:	2600      	movs	r6, #0
 8003cb0:	4d0c      	ldr	r5, [pc, #48]	; (8003ce4 <__libc_init_array+0x38>)
 8003cb2:	4c0d      	ldr	r4, [pc, #52]	; (8003ce8 <__libc_init_array+0x3c>)
 8003cb4:	1b64      	subs	r4, r4, r5
 8003cb6:	10a4      	asrs	r4, r4, #2
 8003cb8:	42a6      	cmp	r6, r4
 8003cba:	d109      	bne.n	8003cd0 <__libc_init_array+0x24>
 8003cbc:	f000 fcfa 	bl	80046b4 <_init>
 8003cc0:	2600      	movs	r6, #0
 8003cc2:	4d0a      	ldr	r5, [pc, #40]	; (8003cec <__libc_init_array+0x40>)
 8003cc4:	4c0a      	ldr	r4, [pc, #40]	; (8003cf0 <__libc_init_array+0x44>)
 8003cc6:	1b64      	subs	r4, r4, r5
 8003cc8:	10a4      	asrs	r4, r4, #2
 8003cca:	42a6      	cmp	r6, r4
 8003ccc:	d105      	bne.n	8003cda <__libc_init_array+0x2e>
 8003cce:	bd70      	pop	{r4, r5, r6, pc}
 8003cd0:	f855 3b04 	ldr.w	r3, [r5], #4
 8003cd4:	4798      	blx	r3
 8003cd6:	3601      	adds	r6, #1
 8003cd8:	e7ee      	b.n	8003cb8 <__libc_init_array+0xc>
 8003cda:	f855 3b04 	ldr.w	r3, [r5], #4
 8003cde:	4798      	blx	r3
 8003ce0:	3601      	adds	r6, #1
 8003ce2:	e7f2      	b.n	8003cca <__libc_init_array+0x1e>
 8003ce4:	08004a98 	.word	0x08004a98
 8003ce8:	08004a98 	.word	0x08004a98
 8003cec:	08004a98 	.word	0x08004a98
 8003cf0:	08004a9c 	.word	0x08004a9c

08003cf4 <memcpy>:
 8003cf4:	440a      	add	r2, r1
 8003cf6:	4291      	cmp	r1, r2
 8003cf8:	f100 33ff 	add.w	r3, r0, #4294967295
 8003cfc:	d100      	bne.n	8003d00 <memcpy+0xc>
 8003cfe:	4770      	bx	lr
 8003d00:	b510      	push	{r4, lr}
 8003d02:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003d06:	4291      	cmp	r1, r2
 8003d08:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003d0c:	d1f9      	bne.n	8003d02 <memcpy+0xe>
 8003d0e:	bd10      	pop	{r4, pc}

08003d10 <memset>:
 8003d10:	4603      	mov	r3, r0
 8003d12:	4402      	add	r2, r0
 8003d14:	4293      	cmp	r3, r2
 8003d16:	d100      	bne.n	8003d1a <memset+0xa>
 8003d18:	4770      	bx	lr
 8003d1a:	f803 1b01 	strb.w	r1, [r3], #1
 8003d1e:	e7f9      	b.n	8003d14 <memset+0x4>

08003d20 <_free_r>:
 8003d20:	b538      	push	{r3, r4, r5, lr}
 8003d22:	4605      	mov	r5, r0
 8003d24:	2900      	cmp	r1, #0
 8003d26:	d040      	beq.n	8003daa <_free_r+0x8a>
 8003d28:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003d2c:	1f0c      	subs	r4, r1, #4
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	bfb8      	it	lt
 8003d32:	18e4      	addlt	r4, r4, r3
 8003d34:	f000 f960 	bl	8003ff8 <__malloc_lock>
 8003d38:	4a1c      	ldr	r2, [pc, #112]	; (8003dac <_free_r+0x8c>)
 8003d3a:	6813      	ldr	r3, [r2, #0]
 8003d3c:	b933      	cbnz	r3, 8003d4c <_free_r+0x2c>
 8003d3e:	6063      	str	r3, [r4, #4]
 8003d40:	6014      	str	r4, [r2, #0]
 8003d42:	4628      	mov	r0, r5
 8003d44:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003d48:	f000 b95c 	b.w	8004004 <__malloc_unlock>
 8003d4c:	42a3      	cmp	r3, r4
 8003d4e:	d908      	bls.n	8003d62 <_free_r+0x42>
 8003d50:	6820      	ldr	r0, [r4, #0]
 8003d52:	1821      	adds	r1, r4, r0
 8003d54:	428b      	cmp	r3, r1
 8003d56:	bf01      	itttt	eq
 8003d58:	6819      	ldreq	r1, [r3, #0]
 8003d5a:	685b      	ldreq	r3, [r3, #4]
 8003d5c:	1809      	addeq	r1, r1, r0
 8003d5e:	6021      	streq	r1, [r4, #0]
 8003d60:	e7ed      	b.n	8003d3e <_free_r+0x1e>
 8003d62:	461a      	mov	r2, r3
 8003d64:	685b      	ldr	r3, [r3, #4]
 8003d66:	b10b      	cbz	r3, 8003d6c <_free_r+0x4c>
 8003d68:	42a3      	cmp	r3, r4
 8003d6a:	d9fa      	bls.n	8003d62 <_free_r+0x42>
 8003d6c:	6811      	ldr	r1, [r2, #0]
 8003d6e:	1850      	adds	r0, r2, r1
 8003d70:	42a0      	cmp	r0, r4
 8003d72:	d10b      	bne.n	8003d8c <_free_r+0x6c>
 8003d74:	6820      	ldr	r0, [r4, #0]
 8003d76:	4401      	add	r1, r0
 8003d78:	1850      	adds	r0, r2, r1
 8003d7a:	4283      	cmp	r3, r0
 8003d7c:	6011      	str	r1, [r2, #0]
 8003d7e:	d1e0      	bne.n	8003d42 <_free_r+0x22>
 8003d80:	6818      	ldr	r0, [r3, #0]
 8003d82:	685b      	ldr	r3, [r3, #4]
 8003d84:	4401      	add	r1, r0
 8003d86:	6011      	str	r1, [r2, #0]
 8003d88:	6053      	str	r3, [r2, #4]
 8003d8a:	e7da      	b.n	8003d42 <_free_r+0x22>
 8003d8c:	d902      	bls.n	8003d94 <_free_r+0x74>
 8003d8e:	230c      	movs	r3, #12
 8003d90:	602b      	str	r3, [r5, #0]
 8003d92:	e7d6      	b.n	8003d42 <_free_r+0x22>
 8003d94:	6820      	ldr	r0, [r4, #0]
 8003d96:	1821      	adds	r1, r4, r0
 8003d98:	428b      	cmp	r3, r1
 8003d9a:	bf01      	itttt	eq
 8003d9c:	6819      	ldreq	r1, [r3, #0]
 8003d9e:	685b      	ldreq	r3, [r3, #4]
 8003da0:	1809      	addeq	r1, r1, r0
 8003da2:	6021      	streq	r1, [r4, #0]
 8003da4:	6063      	str	r3, [r4, #4]
 8003da6:	6054      	str	r4, [r2, #4]
 8003da8:	e7cb      	b.n	8003d42 <_free_r+0x22>
 8003daa:	bd38      	pop	{r3, r4, r5, pc}
 8003dac:	200008d4 	.word	0x200008d4

08003db0 <sbrk_aligned>:
 8003db0:	b570      	push	{r4, r5, r6, lr}
 8003db2:	4e0e      	ldr	r6, [pc, #56]	; (8003dec <sbrk_aligned+0x3c>)
 8003db4:	460c      	mov	r4, r1
 8003db6:	6831      	ldr	r1, [r6, #0]
 8003db8:	4605      	mov	r5, r0
 8003dba:	b911      	cbnz	r1, 8003dc2 <sbrk_aligned+0x12>
 8003dbc:	f000 f88c 	bl	8003ed8 <_sbrk_r>
 8003dc0:	6030      	str	r0, [r6, #0]
 8003dc2:	4621      	mov	r1, r4
 8003dc4:	4628      	mov	r0, r5
 8003dc6:	f000 f887 	bl	8003ed8 <_sbrk_r>
 8003dca:	1c43      	adds	r3, r0, #1
 8003dcc:	d00a      	beq.n	8003de4 <sbrk_aligned+0x34>
 8003dce:	1cc4      	adds	r4, r0, #3
 8003dd0:	f024 0403 	bic.w	r4, r4, #3
 8003dd4:	42a0      	cmp	r0, r4
 8003dd6:	d007      	beq.n	8003de8 <sbrk_aligned+0x38>
 8003dd8:	1a21      	subs	r1, r4, r0
 8003dda:	4628      	mov	r0, r5
 8003ddc:	f000 f87c 	bl	8003ed8 <_sbrk_r>
 8003de0:	3001      	adds	r0, #1
 8003de2:	d101      	bne.n	8003de8 <sbrk_aligned+0x38>
 8003de4:	f04f 34ff 	mov.w	r4, #4294967295
 8003de8:	4620      	mov	r0, r4
 8003dea:	bd70      	pop	{r4, r5, r6, pc}
 8003dec:	200008d8 	.word	0x200008d8

08003df0 <_malloc_r>:
 8003df0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003df4:	1ccd      	adds	r5, r1, #3
 8003df6:	f025 0503 	bic.w	r5, r5, #3
 8003dfa:	3508      	adds	r5, #8
 8003dfc:	2d0c      	cmp	r5, #12
 8003dfe:	bf38      	it	cc
 8003e00:	250c      	movcc	r5, #12
 8003e02:	2d00      	cmp	r5, #0
 8003e04:	4607      	mov	r7, r0
 8003e06:	db01      	blt.n	8003e0c <_malloc_r+0x1c>
 8003e08:	42a9      	cmp	r1, r5
 8003e0a:	d905      	bls.n	8003e18 <_malloc_r+0x28>
 8003e0c:	230c      	movs	r3, #12
 8003e0e:	2600      	movs	r6, #0
 8003e10:	603b      	str	r3, [r7, #0]
 8003e12:	4630      	mov	r0, r6
 8003e14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003e18:	4e2e      	ldr	r6, [pc, #184]	; (8003ed4 <_malloc_r+0xe4>)
 8003e1a:	f000 f8ed 	bl	8003ff8 <__malloc_lock>
 8003e1e:	6833      	ldr	r3, [r6, #0]
 8003e20:	461c      	mov	r4, r3
 8003e22:	bb34      	cbnz	r4, 8003e72 <_malloc_r+0x82>
 8003e24:	4629      	mov	r1, r5
 8003e26:	4638      	mov	r0, r7
 8003e28:	f7ff ffc2 	bl	8003db0 <sbrk_aligned>
 8003e2c:	1c43      	adds	r3, r0, #1
 8003e2e:	4604      	mov	r4, r0
 8003e30:	d14d      	bne.n	8003ece <_malloc_r+0xde>
 8003e32:	6834      	ldr	r4, [r6, #0]
 8003e34:	4626      	mov	r6, r4
 8003e36:	2e00      	cmp	r6, #0
 8003e38:	d140      	bne.n	8003ebc <_malloc_r+0xcc>
 8003e3a:	6823      	ldr	r3, [r4, #0]
 8003e3c:	4631      	mov	r1, r6
 8003e3e:	4638      	mov	r0, r7
 8003e40:	eb04 0803 	add.w	r8, r4, r3
 8003e44:	f000 f848 	bl	8003ed8 <_sbrk_r>
 8003e48:	4580      	cmp	r8, r0
 8003e4a:	d13a      	bne.n	8003ec2 <_malloc_r+0xd2>
 8003e4c:	6821      	ldr	r1, [r4, #0]
 8003e4e:	3503      	adds	r5, #3
 8003e50:	1a6d      	subs	r5, r5, r1
 8003e52:	f025 0503 	bic.w	r5, r5, #3
 8003e56:	3508      	adds	r5, #8
 8003e58:	2d0c      	cmp	r5, #12
 8003e5a:	bf38      	it	cc
 8003e5c:	250c      	movcc	r5, #12
 8003e5e:	4638      	mov	r0, r7
 8003e60:	4629      	mov	r1, r5
 8003e62:	f7ff ffa5 	bl	8003db0 <sbrk_aligned>
 8003e66:	3001      	adds	r0, #1
 8003e68:	d02b      	beq.n	8003ec2 <_malloc_r+0xd2>
 8003e6a:	6823      	ldr	r3, [r4, #0]
 8003e6c:	442b      	add	r3, r5
 8003e6e:	6023      	str	r3, [r4, #0]
 8003e70:	e00e      	b.n	8003e90 <_malloc_r+0xa0>
 8003e72:	6822      	ldr	r2, [r4, #0]
 8003e74:	1b52      	subs	r2, r2, r5
 8003e76:	d41e      	bmi.n	8003eb6 <_malloc_r+0xc6>
 8003e78:	2a0b      	cmp	r2, #11
 8003e7a:	d916      	bls.n	8003eaa <_malloc_r+0xba>
 8003e7c:	1961      	adds	r1, r4, r5
 8003e7e:	42a3      	cmp	r3, r4
 8003e80:	6025      	str	r5, [r4, #0]
 8003e82:	bf18      	it	ne
 8003e84:	6059      	strne	r1, [r3, #4]
 8003e86:	6863      	ldr	r3, [r4, #4]
 8003e88:	bf08      	it	eq
 8003e8a:	6031      	streq	r1, [r6, #0]
 8003e8c:	5162      	str	r2, [r4, r5]
 8003e8e:	604b      	str	r3, [r1, #4]
 8003e90:	4638      	mov	r0, r7
 8003e92:	f104 060b 	add.w	r6, r4, #11
 8003e96:	f000 f8b5 	bl	8004004 <__malloc_unlock>
 8003e9a:	f026 0607 	bic.w	r6, r6, #7
 8003e9e:	1d23      	adds	r3, r4, #4
 8003ea0:	1af2      	subs	r2, r6, r3
 8003ea2:	d0b6      	beq.n	8003e12 <_malloc_r+0x22>
 8003ea4:	1b9b      	subs	r3, r3, r6
 8003ea6:	50a3      	str	r3, [r4, r2]
 8003ea8:	e7b3      	b.n	8003e12 <_malloc_r+0x22>
 8003eaa:	6862      	ldr	r2, [r4, #4]
 8003eac:	42a3      	cmp	r3, r4
 8003eae:	bf0c      	ite	eq
 8003eb0:	6032      	streq	r2, [r6, #0]
 8003eb2:	605a      	strne	r2, [r3, #4]
 8003eb4:	e7ec      	b.n	8003e90 <_malloc_r+0xa0>
 8003eb6:	4623      	mov	r3, r4
 8003eb8:	6864      	ldr	r4, [r4, #4]
 8003eba:	e7b2      	b.n	8003e22 <_malloc_r+0x32>
 8003ebc:	4634      	mov	r4, r6
 8003ebe:	6876      	ldr	r6, [r6, #4]
 8003ec0:	e7b9      	b.n	8003e36 <_malloc_r+0x46>
 8003ec2:	230c      	movs	r3, #12
 8003ec4:	4638      	mov	r0, r7
 8003ec6:	603b      	str	r3, [r7, #0]
 8003ec8:	f000 f89c 	bl	8004004 <__malloc_unlock>
 8003ecc:	e7a1      	b.n	8003e12 <_malloc_r+0x22>
 8003ece:	6025      	str	r5, [r4, #0]
 8003ed0:	e7de      	b.n	8003e90 <_malloc_r+0xa0>
 8003ed2:	bf00      	nop
 8003ed4:	200008d4 	.word	0x200008d4

08003ed8 <_sbrk_r>:
 8003ed8:	b538      	push	{r3, r4, r5, lr}
 8003eda:	2300      	movs	r3, #0
 8003edc:	4d05      	ldr	r5, [pc, #20]	; (8003ef4 <_sbrk_r+0x1c>)
 8003ede:	4604      	mov	r4, r0
 8003ee0:	4608      	mov	r0, r1
 8003ee2:	602b      	str	r3, [r5, #0]
 8003ee4:	f7fd fcca 	bl	800187c <_sbrk>
 8003ee8:	1c43      	adds	r3, r0, #1
 8003eea:	d102      	bne.n	8003ef2 <_sbrk_r+0x1a>
 8003eec:	682b      	ldr	r3, [r5, #0]
 8003eee:	b103      	cbz	r3, 8003ef2 <_sbrk_r+0x1a>
 8003ef0:	6023      	str	r3, [r4, #0]
 8003ef2:	bd38      	pop	{r3, r4, r5, pc}
 8003ef4:	200008dc 	.word	0x200008dc

08003ef8 <sniprintf>:
 8003ef8:	b40c      	push	{r2, r3}
 8003efa:	b530      	push	{r4, r5, lr}
 8003efc:	4b17      	ldr	r3, [pc, #92]	; (8003f5c <sniprintf+0x64>)
 8003efe:	1e0c      	subs	r4, r1, #0
 8003f00:	681d      	ldr	r5, [r3, #0]
 8003f02:	b09d      	sub	sp, #116	; 0x74
 8003f04:	da08      	bge.n	8003f18 <sniprintf+0x20>
 8003f06:	238b      	movs	r3, #139	; 0x8b
 8003f08:	f04f 30ff 	mov.w	r0, #4294967295
 8003f0c:	602b      	str	r3, [r5, #0]
 8003f0e:	b01d      	add	sp, #116	; 0x74
 8003f10:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003f14:	b002      	add	sp, #8
 8003f16:	4770      	bx	lr
 8003f18:	f44f 7302 	mov.w	r3, #520	; 0x208
 8003f1c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8003f20:	bf0c      	ite	eq
 8003f22:	4623      	moveq	r3, r4
 8003f24:	f104 33ff 	addne.w	r3, r4, #4294967295
 8003f28:	9304      	str	r3, [sp, #16]
 8003f2a:	9307      	str	r3, [sp, #28]
 8003f2c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003f30:	9002      	str	r0, [sp, #8]
 8003f32:	9006      	str	r0, [sp, #24]
 8003f34:	f8ad 3016 	strh.w	r3, [sp, #22]
 8003f38:	4628      	mov	r0, r5
 8003f3a:	ab21      	add	r3, sp, #132	; 0x84
 8003f3c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8003f3e:	a902      	add	r1, sp, #8
 8003f40:	9301      	str	r3, [sp, #4]
 8003f42:	f000 f8ef 	bl	8004124 <_svfiprintf_r>
 8003f46:	1c43      	adds	r3, r0, #1
 8003f48:	bfbc      	itt	lt
 8003f4a:	238b      	movlt	r3, #139	; 0x8b
 8003f4c:	602b      	strlt	r3, [r5, #0]
 8003f4e:	2c00      	cmp	r4, #0
 8003f50:	d0dd      	beq.n	8003f0e <sniprintf+0x16>
 8003f52:	2200      	movs	r2, #0
 8003f54:	9b02      	ldr	r3, [sp, #8]
 8003f56:	701a      	strb	r2, [r3, #0]
 8003f58:	e7d9      	b.n	8003f0e <sniprintf+0x16>
 8003f5a:	bf00      	nop
 8003f5c:	20000058 	.word	0x20000058

08003f60 <siprintf>:
 8003f60:	b40e      	push	{r1, r2, r3}
 8003f62:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003f66:	b500      	push	{lr}
 8003f68:	b09c      	sub	sp, #112	; 0x70
 8003f6a:	ab1d      	add	r3, sp, #116	; 0x74
 8003f6c:	9002      	str	r0, [sp, #8]
 8003f6e:	9006      	str	r0, [sp, #24]
 8003f70:	9107      	str	r1, [sp, #28]
 8003f72:	9104      	str	r1, [sp, #16]
 8003f74:	4808      	ldr	r0, [pc, #32]	; (8003f98 <siprintf+0x38>)
 8003f76:	4909      	ldr	r1, [pc, #36]	; (8003f9c <siprintf+0x3c>)
 8003f78:	f853 2b04 	ldr.w	r2, [r3], #4
 8003f7c:	9105      	str	r1, [sp, #20]
 8003f7e:	6800      	ldr	r0, [r0, #0]
 8003f80:	a902      	add	r1, sp, #8
 8003f82:	9301      	str	r3, [sp, #4]
 8003f84:	f000 f8ce 	bl	8004124 <_svfiprintf_r>
 8003f88:	2200      	movs	r2, #0
 8003f8a:	9b02      	ldr	r3, [sp, #8]
 8003f8c:	701a      	strb	r2, [r3, #0]
 8003f8e:	b01c      	add	sp, #112	; 0x70
 8003f90:	f85d eb04 	ldr.w	lr, [sp], #4
 8003f94:	b003      	add	sp, #12
 8003f96:	4770      	bx	lr
 8003f98:	20000058 	.word	0x20000058
 8003f9c:	ffff0208 	.word	0xffff0208

08003fa0 <strchr>:
 8003fa0:	4603      	mov	r3, r0
 8003fa2:	b2c9      	uxtb	r1, r1
 8003fa4:	4618      	mov	r0, r3
 8003fa6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003faa:	b112      	cbz	r2, 8003fb2 <strchr+0x12>
 8003fac:	428a      	cmp	r2, r1
 8003fae:	d1f9      	bne.n	8003fa4 <strchr+0x4>
 8003fb0:	4770      	bx	lr
 8003fb2:	2900      	cmp	r1, #0
 8003fb4:	bf18      	it	ne
 8003fb6:	2000      	movne	r0, #0
 8003fb8:	4770      	bx	lr

08003fba <strcpy>:
 8003fba:	4603      	mov	r3, r0
 8003fbc:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003fc0:	f803 2b01 	strb.w	r2, [r3], #1
 8003fc4:	2a00      	cmp	r2, #0
 8003fc6:	d1f9      	bne.n	8003fbc <strcpy+0x2>
 8003fc8:	4770      	bx	lr

08003fca <strstr>:
 8003fca:	780a      	ldrb	r2, [r1, #0]
 8003fcc:	b570      	push	{r4, r5, r6, lr}
 8003fce:	b96a      	cbnz	r2, 8003fec <strstr+0x22>
 8003fd0:	bd70      	pop	{r4, r5, r6, pc}
 8003fd2:	429a      	cmp	r2, r3
 8003fd4:	d109      	bne.n	8003fea <strstr+0x20>
 8003fd6:	460c      	mov	r4, r1
 8003fd8:	4605      	mov	r5, r0
 8003fda:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d0f6      	beq.n	8003fd0 <strstr+0x6>
 8003fe2:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8003fe6:	429e      	cmp	r6, r3
 8003fe8:	d0f7      	beq.n	8003fda <strstr+0x10>
 8003fea:	3001      	adds	r0, #1
 8003fec:	7803      	ldrb	r3, [r0, #0]
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d1ef      	bne.n	8003fd2 <strstr+0x8>
 8003ff2:	4618      	mov	r0, r3
 8003ff4:	e7ec      	b.n	8003fd0 <strstr+0x6>
	...

08003ff8 <__malloc_lock>:
 8003ff8:	4801      	ldr	r0, [pc, #4]	; (8004000 <__malloc_lock+0x8>)
 8003ffa:	f000 bb29 	b.w	8004650 <__retarget_lock_acquire_recursive>
 8003ffe:	bf00      	nop
 8004000:	200008e0 	.word	0x200008e0

08004004 <__malloc_unlock>:
 8004004:	4801      	ldr	r0, [pc, #4]	; (800400c <__malloc_unlock+0x8>)
 8004006:	f000 bb24 	b.w	8004652 <__retarget_lock_release_recursive>
 800400a:	bf00      	nop
 800400c:	200008e0 	.word	0x200008e0

08004010 <_realloc_r>:
 8004010:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004014:	4680      	mov	r8, r0
 8004016:	4614      	mov	r4, r2
 8004018:	460e      	mov	r6, r1
 800401a:	b921      	cbnz	r1, 8004026 <_realloc_r+0x16>
 800401c:	4611      	mov	r1, r2
 800401e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004022:	f7ff bee5 	b.w	8003df0 <_malloc_r>
 8004026:	b92a      	cbnz	r2, 8004034 <_realloc_r+0x24>
 8004028:	f7ff fe7a 	bl	8003d20 <_free_r>
 800402c:	4625      	mov	r5, r4
 800402e:	4628      	mov	r0, r5
 8004030:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004034:	f000 fb36 	bl	80046a4 <_malloc_usable_size_r>
 8004038:	4284      	cmp	r4, r0
 800403a:	4607      	mov	r7, r0
 800403c:	d802      	bhi.n	8004044 <_realloc_r+0x34>
 800403e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004042:	d812      	bhi.n	800406a <_realloc_r+0x5a>
 8004044:	4621      	mov	r1, r4
 8004046:	4640      	mov	r0, r8
 8004048:	f7ff fed2 	bl	8003df0 <_malloc_r>
 800404c:	4605      	mov	r5, r0
 800404e:	2800      	cmp	r0, #0
 8004050:	d0ed      	beq.n	800402e <_realloc_r+0x1e>
 8004052:	42bc      	cmp	r4, r7
 8004054:	4622      	mov	r2, r4
 8004056:	4631      	mov	r1, r6
 8004058:	bf28      	it	cs
 800405a:	463a      	movcs	r2, r7
 800405c:	f7ff fe4a 	bl	8003cf4 <memcpy>
 8004060:	4631      	mov	r1, r6
 8004062:	4640      	mov	r0, r8
 8004064:	f7ff fe5c 	bl	8003d20 <_free_r>
 8004068:	e7e1      	b.n	800402e <_realloc_r+0x1e>
 800406a:	4635      	mov	r5, r6
 800406c:	e7df      	b.n	800402e <_realloc_r+0x1e>

0800406e <__ssputs_r>:
 800406e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004072:	688e      	ldr	r6, [r1, #8]
 8004074:	4682      	mov	sl, r0
 8004076:	429e      	cmp	r6, r3
 8004078:	460c      	mov	r4, r1
 800407a:	4690      	mov	r8, r2
 800407c:	461f      	mov	r7, r3
 800407e:	d838      	bhi.n	80040f2 <__ssputs_r+0x84>
 8004080:	898a      	ldrh	r2, [r1, #12]
 8004082:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004086:	d032      	beq.n	80040ee <__ssputs_r+0x80>
 8004088:	6825      	ldr	r5, [r4, #0]
 800408a:	6909      	ldr	r1, [r1, #16]
 800408c:	3301      	adds	r3, #1
 800408e:	eba5 0901 	sub.w	r9, r5, r1
 8004092:	6965      	ldr	r5, [r4, #20]
 8004094:	444b      	add	r3, r9
 8004096:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800409a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800409e:	106d      	asrs	r5, r5, #1
 80040a0:	429d      	cmp	r5, r3
 80040a2:	bf38      	it	cc
 80040a4:	461d      	movcc	r5, r3
 80040a6:	0553      	lsls	r3, r2, #21
 80040a8:	d531      	bpl.n	800410e <__ssputs_r+0xa0>
 80040aa:	4629      	mov	r1, r5
 80040ac:	f7ff fea0 	bl	8003df0 <_malloc_r>
 80040b0:	4606      	mov	r6, r0
 80040b2:	b950      	cbnz	r0, 80040ca <__ssputs_r+0x5c>
 80040b4:	230c      	movs	r3, #12
 80040b6:	f04f 30ff 	mov.w	r0, #4294967295
 80040ba:	f8ca 3000 	str.w	r3, [sl]
 80040be:	89a3      	ldrh	r3, [r4, #12]
 80040c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80040c4:	81a3      	strh	r3, [r4, #12]
 80040c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80040ca:	464a      	mov	r2, r9
 80040cc:	6921      	ldr	r1, [r4, #16]
 80040ce:	f7ff fe11 	bl	8003cf4 <memcpy>
 80040d2:	89a3      	ldrh	r3, [r4, #12]
 80040d4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80040d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80040dc:	81a3      	strh	r3, [r4, #12]
 80040de:	6126      	str	r6, [r4, #16]
 80040e0:	444e      	add	r6, r9
 80040e2:	6026      	str	r6, [r4, #0]
 80040e4:	463e      	mov	r6, r7
 80040e6:	6165      	str	r5, [r4, #20]
 80040e8:	eba5 0509 	sub.w	r5, r5, r9
 80040ec:	60a5      	str	r5, [r4, #8]
 80040ee:	42be      	cmp	r6, r7
 80040f0:	d900      	bls.n	80040f4 <__ssputs_r+0x86>
 80040f2:	463e      	mov	r6, r7
 80040f4:	4632      	mov	r2, r6
 80040f6:	4641      	mov	r1, r8
 80040f8:	6820      	ldr	r0, [r4, #0]
 80040fa:	f000 fab9 	bl	8004670 <memmove>
 80040fe:	68a3      	ldr	r3, [r4, #8]
 8004100:	2000      	movs	r0, #0
 8004102:	1b9b      	subs	r3, r3, r6
 8004104:	60a3      	str	r3, [r4, #8]
 8004106:	6823      	ldr	r3, [r4, #0]
 8004108:	4433      	add	r3, r6
 800410a:	6023      	str	r3, [r4, #0]
 800410c:	e7db      	b.n	80040c6 <__ssputs_r+0x58>
 800410e:	462a      	mov	r2, r5
 8004110:	f7ff ff7e 	bl	8004010 <_realloc_r>
 8004114:	4606      	mov	r6, r0
 8004116:	2800      	cmp	r0, #0
 8004118:	d1e1      	bne.n	80040de <__ssputs_r+0x70>
 800411a:	4650      	mov	r0, sl
 800411c:	6921      	ldr	r1, [r4, #16]
 800411e:	f7ff fdff 	bl	8003d20 <_free_r>
 8004122:	e7c7      	b.n	80040b4 <__ssputs_r+0x46>

08004124 <_svfiprintf_r>:
 8004124:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004128:	4698      	mov	r8, r3
 800412a:	898b      	ldrh	r3, [r1, #12]
 800412c:	4607      	mov	r7, r0
 800412e:	061b      	lsls	r3, r3, #24
 8004130:	460d      	mov	r5, r1
 8004132:	4614      	mov	r4, r2
 8004134:	b09d      	sub	sp, #116	; 0x74
 8004136:	d50e      	bpl.n	8004156 <_svfiprintf_r+0x32>
 8004138:	690b      	ldr	r3, [r1, #16]
 800413a:	b963      	cbnz	r3, 8004156 <_svfiprintf_r+0x32>
 800413c:	2140      	movs	r1, #64	; 0x40
 800413e:	f7ff fe57 	bl	8003df0 <_malloc_r>
 8004142:	6028      	str	r0, [r5, #0]
 8004144:	6128      	str	r0, [r5, #16]
 8004146:	b920      	cbnz	r0, 8004152 <_svfiprintf_r+0x2e>
 8004148:	230c      	movs	r3, #12
 800414a:	603b      	str	r3, [r7, #0]
 800414c:	f04f 30ff 	mov.w	r0, #4294967295
 8004150:	e0d1      	b.n	80042f6 <_svfiprintf_r+0x1d2>
 8004152:	2340      	movs	r3, #64	; 0x40
 8004154:	616b      	str	r3, [r5, #20]
 8004156:	2300      	movs	r3, #0
 8004158:	9309      	str	r3, [sp, #36]	; 0x24
 800415a:	2320      	movs	r3, #32
 800415c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004160:	2330      	movs	r3, #48	; 0x30
 8004162:	f04f 0901 	mov.w	r9, #1
 8004166:	f8cd 800c 	str.w	r8, [sp, #12]
 800416a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8004310 <_svfiprintf_r+0x1ec>
 800416e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004172:	4623      	mov	r3, r4
 8004174:	469a      	mov	sl, r3
 8004176:	f813 2b01 	ldrb.w	r2, [r3], #1
 800417a:	b10a      	cbz	r2, 8004180 <_svfiprintf_r+0x5c>
 800417c:	2a25      	cmp	r2, #37	; 0x25
 800417e:	d1f9      	bne.n	8004174 <_svfiprintf_r+0x50>
 8004180:	ebba 0b04 	subs.w	fp, sl, r4
 8004184:	d00b      	beq.n	800419e <_svfiprintf_r+0x7a>
 8004186:	465b      	mov	r3, fp
 8004188:	4622      	mov	r2, r4
 800418a:	4629      	mov	r1, r5
 800418c:	4638      	mov	r0, r7
 800418e:	f7ff ff6e 	bl	800406e <__ssputs_r>
 8004192:	3001      	adds	r0, #1
 8004194:	f000 80aa 	beq.w	80042ec <_svfiprintf_r+0x1c8>
 8004198:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800419a:	445a      	add	r2, fp
 800419c:	9209      	str	r2, [sp, #36]	; 0x24
 800419e:	f89a 3000 	ldrb.w	r3, [sl]
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	f000 80a2 	beq.w	80042ec <_svfiprintf_r+0x1c8>
 80041a8:	2300      	movs	r3, #0
 80041aa:	f04f 32ff 	mov.w	r2, #4294967295
 80041ae:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80041b2:	f10a 0a01 	add.w	sl, sl, #1
 80041b6:	9304      	str	r3, [sp, #16]
 80041b8:	9307      	str	r3, [sp, #28]
 80041ba:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80041be:	931a      	str	r3, [sp, #104]	; 0x68
 80041c0:	4654      	mov	r4, sl
 80041c2:	2205      	movs	r2, #5
 80041c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80041c8:	4851      	ldr	r0, [pc, #324]	; (8004310 <_svfiprintf_r+0x1ec>)
 80041ca:	f000 fa43 	bl	8004654 <memchr>
 80041ce:	9a04      	ldr	r2, [sp, #16]
 80041d0:	b9d8      	cbnz	r0, 800420a <_svfiprintf_r+0xe6>
 80041d2:	06d0      	lsls	r0, r2, #27
 80041d4:	bf44      	itt	mi
 80041d6:	2320      	movmi	r3, #32
 80041d8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80041dc:	0711      	lsls	r1, r2, #28
 80041de:	bf44      	itt	mi
 80041e0:	232b      	movmi	r3, #43	; 0x2b
 80041e2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80041e6:	f89a 3000 	ldrb.w	r3, [sl]
 80041ea:	2b2a      	cmp	r3, #42	; 0x2a
 80041ec:	d015      	beq.n	800421a <_svfiprintf_r+0xf6>
 80041ee:	4654      	mov	r4, sl
 80041f0:	2000      	movs	r0, #0
 80041f2:	f04f 0c0a 	mov.w	ip, #10
 80041f6:	9a07      	ldr	r2, [sp, #28]
 80041f8:	4621      	mov	r1, r4
 80041fa:	f811 3b01 	ldrb.w	r3, [r1], #1
 80041fe:	3b30      	subs	r3, #48	; 0x30
 8004200:	2b09      	cmp	r3, #9
 8004202:	d94e      	bls.n	80042a2 <_svfiprintf_r+0x17e>
 8004204:	b1b0      	cbz	r0, 8004234 <_svfiprintf_r+0x110>
 8004206:	9207      	str	r2, [sp, #28]
 8004208:	e014      	b.n	8004234 <_svfiprintf_r+0x110>
 800420a:	eba0 0308 	sub.w	r3, r0, r8
 800420e:	fa09 f303 	lsl.w	r3, r9, r3
 8004212:	4313      	orrs	r3, r2
 8004214:	46a2      	mov	sl, r4
 8004216:	9304      	str	r3, [sp, #16]
 8004218:	e7d2      	b.n	80041c0 <_svfiprintf_r+0x9c>
 800421a:	9b03      	ldr	r3, [sp, #12]
 800421c:	1d19      	adds	r1, r3, #4
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	9103      	str	r1, [sp, #12]
 8004222:	2b00      	cmp	r3, #0
 8004224:	bfbb      	ittet	lt
 8004226:	425b      	neglt	r3, r3
 8004228:	f042 0202 	orrlt.w	r2, r2, #2
 800422c:	9307      	strge	r3, [sp, #28]
 800422e:	9307      	strlt	r3, [sp, #28]
 8004230:	bfb8      	it	lt
 8004232:	9204      	strlt	r2, [sp, #16]
 8004234:	7823      	ldrb	r3, [r4, #0]
 8004236:	2b2e      	cmp	r3, #46	; 0x2e
 8004238:	d10c      	bne.n	8004254 <_svfiprintf_r+0x130>
 800423a:	7863      	ldrb	r3, [r4, #1]
 800423c:	2b2a      	cmp	r3, #42	; 0x2a
 800423e:	d135      	bne.n	80042ac <_svfiprintf_r+0x188>
 8004240:	9b03      	ldr	r3, [sp, #12]
 8004242:	3402      	adds	r4, #2
 8004244:	1d1a      	adds	r2, r3, #4
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	9203      	str	r2, [sp, #12]
 800424a:	2b00      	cmp	r3, #0
 800424c:	bfb8      	it	lt
 800424e:	f04f 33ff 	movlt.w	r3, #4294967295
 8004252:	9305      	str	r3, [sp, #20]
 8004254:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8004314 <_svfiprintf_r+0x1f0>
 8004258:	2203      	movs	r2, #3
 800425a:	4650      	mov	r0, sl
 800425c:	7821      	ldrb	r1, [r4, #0]
 800425e:	f000 f9f9 	bl	8004654 <memchr>
 8004262:	b140      	cbz	r0, 8004276 <_svfiprintf_r+0x152>
 8004264:	2340      	movs	r3, #64	; 0x40
 8004266:	eba0 000a 	sub.w	r0, r0, sl
 800426a:	fa03 f000 	lsl.w	r0, r3, r0
 800426e:	9b04      	ldr	r3, [sp, #16]
 8004270:	3401      	adds	r4, #1
 8004272:	4303      	orrs	r3, r0
 8004274:	9304      	str	r3, [sp, #16]
 8004276:	f814 1b01 	ldrb.w	r1, [r4], #1
 800427a:	2206      	movs	r2, #6
 800427c:	4826      	ldr	r0, [pc, #152]	; (8004318 <_svfiprintf_r+0x1f4>)
 800427e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004282:	f000 f9e7 	bl	8004654 <memchr>
 8004286:	2800      	cmp	r0, #0
 8004288:	d038      	beq.n	80042fc <_svfiprintf_r+0x1d8>
 800428a:	4b24      	ldr	r3, [pc, #144]	; (800431c <_svfiprintf_r+0x1f8>)
 800428c:	bb1b      	cbnz	r3, 80042d6 <_svfiprintf_r+0x1b2>
 800428e:	9b03      	ldr	r3, [sp, #12]
 8004290:	3307      	adds	r3, #7
 8004292:	f023 0307 	bic.w	r3, r3, #7
 8004296:	3308      	adds	r3, #8
 8004298:	9303      	str	r3, [sp, #12]
 800429a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800429c:	4433      	add	r3, r6
 800429e:	9309      	str	r3, [sp, #36]	; 0x24
 80042a0:	e767      	b.n	8004172 <_svfiprintf_r+0x4e>
 80042a2:	460c      	mov	r4, r1
 80042a4:	2001      	movs	r0, #1
 80042a6:	fb0c 3202 	mla	r2, ip, r2, r3
 80042aa:	e7a5      	b.n	80041f8 <_svfiprintf_r+0xd4>
 80042ac:	2300      	movs	r3, #0
 80042ae:	f04f 0c0a 	mov.w	ip, #10
 80042b2:	4619      	mov	r1, r3
 80042b4:	3401      	adds	r4, #1
 80042b6:	9305      	str	r3, [sp, #20]
 80042b8:	4620      	mov	r0, r4
 80042ba:	f810 2b01 	ldrb.w	r2, [r0], #1
 80042be:	3a30      	subs	r2, #48	; 0x30
 80042c0:	2a09      	cmp	r2, #9
 80042c2:	d903      	bls.n	80042cc <_svfiprintf_r+0x1a8>
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d0c5      	beq.n	8004254 <_svfiprintf_r+0x130>
 80042c8:	9105      	str	r1, [sp, #20]
 80042ca:	e7c3      	b.n	8004254 <_svfiprintf_r+0x130>
 80042cc:	4604      	mov	r4, r0
 80042ce:	2301      	movs	r3, #1
 80042d0:	fb0c 2101 	mla	r1, ip, r1, r2
 80042d4:	e7f0      	b.n	80042b8 <_svfiprintf_r+0x194>
 80042d6:	ab03      	add	r3, sp, #12
 80042d8:	9300      	str	r3, [sp, #0]
 80042da:	462a      	mov	r2, r5
 80042dc:	4638      	mov	r0, r7
 80042de:	4b10      	ldr	r3, [pc, #64]	; (8004320 <_svfiprintf_r+0x1fc>)
 80042e0:	a904      	add	r1, sp, #16
 80042e2:	f3af 8000 	nop.w
 80042e6:	1c42      	adds	r2, r0, #1
 80042e8:	4606      	mov	r6, r0
 80042ea:	d1d6      	bne.n	800429a <_svfiprintf_r+0x176>
 80042ec:	89ab      	ldrh	r3, [r5, #12]
 80042ee:	065b      	lsls	r3, r3, #25
 80042f0:	f53f af2c 	bmi.w	800414c <_svfiprintf_r+0x28>
 80042f4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80042f6:	b01d      	add	sp, #116	; 0x74
 80042f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80042fc:	ab03      	add	r3, sp, #12
 80042fe:	9300      	str	r3, [sp, #0]
 8004300:	462a      	mov	r2, r5
 8004302:	4638      	mov	r0, r7
 8004304:	4b06      	ldr	r3, [pc, #24]	; (8004320 <_svfiprintf_r+0x1fc>)
 8004306:	a904      	add	r1, sp, #16
 8004308:	f000 f87c 	bl	8004404 <_printf_i>
 800430c:	e7eb      	b.n	80042e6 <_svfiprintf_r+0x1c2>
 800430e:	bf00      	nop
 8004310:	08004a02 	.word	0x08004a02
 8004314:	08004a08 	.word	0x08004a08
 8004318:	08004a0c 	.word	0x08004a0c
 800431c:	00000000 	.word	0x00000000
 8004320:	0800406f 	.word	0x0800406f

08004324 <_printf_common>:
 8004324:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004328:	4616      	mov	r6, r2
 800432a:	4699      	mov	r9, r3
 800432c:	688a      	ldr	r2, [r1, #8]
 800432e:	690b      	ldr	r3, [r1, #16]
 8004330:	4607      	mov	r7, r0
 8004332:	4293      	cmp	r3, r2
 8004334:	bfb8      	it	lt
 8004336:	4613      	movlt	r3, r2
 8004338:	6033      	str	r3, [r6, #0]
 800433a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800433e:	460c      	mov	r4, r1
 8004340:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004344:	b10a      	cbz	r2, 800434a <_printf_common+0x26>
 8004346:	3301      	adds	r3, #1
 8004348:	6033      	str	r3, [r6, #0]
 800434a:	6823      	ldr	r3, [r4, #0]
 800434c:	0699      	lsls	r1, r3, #26
 800434e:	bf42      	ittt	mi
 8004350:	6833      	ldrmi	r3, [r6, #0]
 8004352:	3302      	addmi	r3, #2
 8004354:	6033      	strmi	r3, [r6, #0]
 8004356:	6825      	ldr	r5, [r4, #0]
 8004358:	f015 0506 	ands.w	r5, r5, #6
 800435c:	d106      	bne.n	800436c <_printf_common+0x48>
 800435e:	f104 0a19 	add.w	sl, r4, #25
 8004362:	68e3      	ldr	r3, [r4, #12]
 8004364:	6832      	ldr	r2, [r6, #0]
 8004366:	1a9b      	subs	r3, r3, r2
 8004368:	42ab      	cmp	r3, r5
 800436a:	dc28      	bgt.n	80043be <_printf_common+0x9a>
 800436c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004370:	1e13      	subs	r3, r2, #0
 8004372:	6822      	ldr	r2, [r4, #0]
 8004374:	bf18      	it	ne
 8004376:	2301      	movne	r3, #1
 8004378:	0692      	lsls	r2, r2, #26
 800437a:	d42d      	bmi.n	80043d8 <_printf_common+0xb4>
 800437c:	4649      	mov	r1, r9
 800437e:	4638      	mov	r0, r7
 8004380:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004384:	47c0      	blx	r8
 8004386:	3001      	adds	r0, #1
 8004388:	d020      	beq.n	80043cc <_printf_common+0xa8>
 800438a:	6823      	ldr	r3, [r4, #0]
 800438c:	68e5      	ldr	r5, [r4, #12]
 800438e:	f003 0306 	and.w	r3, r3, #6
 8004392:	2b04      	cmp	r3, #4
 8004394:	bf18      	it	ne
 8004396:	2500      	movne	r5, #0
 8004398:	6832      	ldr	r2, [r6, #0]
 800439a:	f04f 0600 	mov.w	r6, #0
 800439e:	68a3      	ldr	r3, [r4, #8]
 80043a0:	bf08      	it	eq
 80043a2:	1aad      	subeq	r5, r5, r2
 80043a4:	6922      	ldr	r2, [r4, #16]
 80043a6:	bf08      	it	eq
 80043a8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80043ac:	4293      	cmp	r3, r2
 80043ae:	bfc4      	itt	gt
 80043b0:	1a9b      	subgt	r3, r3, r2
 80043b2:	18ed      	addgt	r5, r5, r3
 80043b4:	341a      	adds	r4, #26
 80043b6:	42b5      	cmp	r5, r6
 80043b8:	d11a      	bne.n	80043f0 <_printf_common+0xcc>
 80043ba:	2000      	movs	r0, #0
 80043bc:	e008      	b.n	80043d0 <_printf_common+0xac>
 80043be:	2301      	movs	r3, #1
 80043c0:	4652      	mov	r2, sl
 80043c2:	4649      	mov	r1, r9
 80043c4:	4638      	mov	r0, r7
 80043c6:	47c0      	blx	r8
 80043c8:	3001      	adds	r0, #1
 80043ca:	d103      	bne.n	80043d4 <_printf_common+0xb0>
 80043cc:	f04f 30ff 	mov.w	r0, #4294967295
 80043d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80043d4:	3501      	adds	r5, #1
 80043d6:	e7c4      	b.n	8004362 <_printf_common+0x3e>
 80043d8:	2030      	movs	r0, #48	; 0x30
 80043da:	18e1      	adds	r1, r4, r3
 80043dc:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80043e0:	1c5a      	adds	r2, r3, #1
 80043e2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80043e6:	4422      	add	r2, r4
 80043e8:	3302      	adds	r3, #2
 80043ea:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80043ee:	e7c5      	b.n	800437c <_printf_common+0x58>
 80043f0:	2301      	movs	r3, #1
 80043f2:	4622      	mov	r2, r4
 80043f4:	4649      	mov	r1, r9
 80043f6:	4638      	mov	r0, r7
 80043f8:	47c0      	blx	r8
 80043fa:	3001      	adds	r0, #1
 80043fc:	d0e6      	beq.n	80043cc <_printf_common+0xa8>
 80043fe:	3601      	adds	r6, #1
 8004400:	e7d9      	b.n	80043b6 <_printf_common+0x92>
	...

08004404 <_printf_i>:
 8004404:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004408:	7e0f      	ldrb	r7, [r1, #24]
 800440a:	4691      	mov	r9, r2
 800440c:	2f78      	cmp	r7, #120	; 0x78
 800440e:	4680      	mov	r8, r0
 8004410:	460c      	mov	r4, r1
 8004412:	469a      	mov	sl, r3
 8004414:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004416:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800441a:	d807      	bhi.n	800442c <_printf_i+0x28>
 800441c:	2f62      	cmp	r7, #98	; 0x62
 800441e:	d80a      	bhi.n	8004436 <_printf_i+0x32>
 8004420:	2f00      	cmp	r7, #0
 8004422:	f000 80d9 	beq.w	80045d8 <_printf_i+0x1d4>
 8004426:	2f58      	cmp	r7, #88	; 0x58
 8004428:	f000 80a4 	beq.w	8004574 <_printf_i+0x170>
 800442c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004430:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004434:	e03a      	b.n	80044ac <_printf_i+0xa8>
 8004436:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800443a:	2b15      	cmp	r3, #21
 800443c:	d8f6      	bhi.n	800442c <_printf_i+0x28>
 800443e:	a101      	add	r1, pc, #4	; (adr r1, 8004444 <_printf_i+0x40>)
 8004440:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004444:	0800449d 	.word	0x0800449d
 8004448:	080044b1 	.word	0x080044b1
 800444c:	0800442d 	.word	0x0800442d
 8004450:	0800442d 	.word	0x0800442d
 8004454:	0800442d 	.word	0x0800442d
 8004458:	0800442d 	.word	0x0800442d
 800445c:	080044b1 	.word	0x080044b1
 8004460:	0800442d 	.word	0x0800442d
 8004464:	0800442d 	.word	0x0800442d
 8004468:	0800442d 	.word	0x0800442d
 800446c:	0800442d 	.word	0x0800442d
 8004470:	080045bf 	.word	0x080045bf
 8004474:	080044e1 	.word	0x080044e1
 8004478:	080045a1 	.word	0x080045a1
 800447c:	0800442d 	.word	0x0800442d
 8004480:	0800442d 	.word	0x0800442d
 8004484:	080045e1 	.word	0x080045e1
 8004488:	0800442d 	.word	0x0800442d
 800448c:	080044e1 	.word	0x080044e1
 8004490:	0800442d 	.word	0x0800442d
 8004494:	0800442d 	.word	0x0800442d
 8004498:	080045a9 	.word	0x080045a9
 800449c:	682b      	ldr	r3, [r5, #0]
 800449e:	1d1a      	adds	r2, r3, #4
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	602a      	str	r2, [r5, #0]
 80044a4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80044a8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80044ac:	2301      	movs	r3, #1
 80044ae:	e0a4      	b.n	80045fa <_printf_i+0x1f6>
 80044b0:	6820      	ldr	r0, [r4, #0]
 80044b2:	6829      	ldr	r1, [r5, #0]
 80044b4:	0606      	lsls	r6, r0, #24
 80044b6:	f101 0304 	add.w	r3, r1, #4
 80044ba:	d50a      	bpl.n	80044d2 <_printf_i+0xce>
 80044bc:	680e      	ldr	r6, [r1, #0]
 80044be:	602b      	str	r3, [r5, #0]
 80044c0:	2e00      	cmp	r6, #0
 80044c2:	da03      	bge.n	80044cc <_printf_i+0xc8>
 80044c4:	232d      	movs	r3, #45	; 0x2d
 80044c6:	4276      	negs	r6, r6
 80044c8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80044cc:	230a      	movs	r3, #10
 80044ce:	485e      	ldr	r0, [pc, #376]	; (8004648 <_printf_i+0x244>)
 80044d0:	e019      	b.n	8004506 <_printf_i+0x102>
 80044d2:	680e      	ldr	r6, [r1, #0]
 80044d4:	f010 0f40 	tst.w	r0, #64	; 0x40
 80044d8:	602b      	str	r3, [r5, #0]
 80044da:	bf18      	it	ne
 80044dc:	b236      	sxthne	r6, r6
 80044de:	e7ef      	b.n	80044c0 <_printf_i+0xbc>
 80044e0:	682b      	ldr	r3, [r5, #0]
 80044e2:	6820      	ldr	r0, [r4, #0]
 80044e4:	1d19      	adds	r1, r3, #4
 80044e6:	6029      	str	r1, [r5, #0]
 80044e8:	0601      	lsls	r1, r0, #24
 80044ea:	d501      	bpl.n	80044f0 <_printf_i+0xec>
 80044ec:	681e      	ldr	r6, [r3, #0]
 80044ee:	e002      	b.n	80044f6 <_printf_i+0xf2>
 80044f0:	0646      	lsls	r6, r0, #25
 80044f2:	d5fb      	bpl.n	80044ec <_printf_i+0xe8>
 80044f4:	881e      	ldrh	r6, [r3, #0]
 80044f6:	2f6f      	cmp	r7, #111	; 0x6f
 80044f8:	bf0c      	ite	eq
 80044fa:	2308      	moveq	r3, #8
 80044fc:	230a      	movne	r3, #10
 80044fe:	4852      	ldr	r0, [pc, #328]	; (8004648 <_printf_i+0x244>)
 8004500:	2100      	movs	r1, #0
 8004502:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004506:	6865      	ldr	r5, [r4, #4]
 8004508:	2d00      	cmp	r5, #0
 800450a:	bfa8      	it	ge
 800450c:	6821      	ldrge	r1, [r4, #0]
 800450e:	60a5      	str	r5, [r4, #8]
 8004510:	bfa4      	itt	ge
 8004512:	f021 0104 	bicge.w	r1, r1, #4
 8004516:	6021      	strge	r1, [r4, #0]
 8004518:	b90e      	cbnz	r6, 800451e <_printf_i+0x11a>
 800451a:	2d00      	cmp	r5, #0
 800451c:	d04d      	beq.n	80045ba <_printf_i+0x1b6>
 800451e:	4615      	mov	r5, r2
 8004520:	fbb6 f1f3 	udiv	r1, r6, r3
 8004524:	fb03 6711 	mls	r7, r3, r1, r6
 8004528:	5dc7      	ldrb	r7, [r0, r7]
 800452a:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800452e:	4637      	mov	r7, r6
 8004530:	42bb      	cmp	r3, r7
 8004532:	460e      	mov	r6, r1
 8004534:	d9f4      	bls.n	8004520 <_printf_i+0x11c>
 8004536:	2b08      	cmp	r3, #8
 8004538:	d10b      	bne.n	8004552 <_printf_i+0x14e>
 800453a:	6823      	ldr	r3, [r4, #0]
 800453c:	07de      	lsls	r6, r3, #31
 800453e:	d508      	bpl.n	8004552 <_printf_i+0x14e>
 8004540:	6923      	ldr	r3, [r4, #16]
 8004542:	6861      	ldr	r1, [r4, #4]
 8004544:	4299      	cmp	r1, r3
 8004546:	bfde      	ittt	le
 8004548:	2330      	movle	r3, #48	; 0x30
 800454a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800454e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004552:	1b52      	subs	r2, r2, r5
 8004554:	6122      	str	r2, [r4, #16]
 8004556:	464b      	mov	r3, r9
 8004558:	4621      	mov	r1, r4
 800455a:	4640      	mov	r0, r8
 800455c:	f8cd a000 	str.w	sl, [sp]
 8004560:	aa03      	add	r2, sp, #12
 8004562:	f7ff fedf 	bl	8004324 <_printf_common>
 8004566:	3001      	adds	r0, #1
 8004568:	d14c      	bne.n	8004604 <_printf_i+0x200>
 800456a:	f04f 30ff 	mov.w	r0, #4294967295
 800456e:	b004      	add	sp, #16
 8004570:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004574:	4834      	ldr	r0, [pc, #208]	; (8004648 <_printf_i+0x244>)
 8004576:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800457a:	6829      	ldr	r1, [r5, #0]
 800457c:	6823      	ldr	r3, [r4, #0]
 800457e:	f851 6b04 	ldr.w	r6, [r1], #4
 8004582:	6029      	str	r1, [r5, #0]
 8004584:	061d      	lsls	r5, r3, #24
 8004586:	d514      	bpl.n	80045b2 <_printf_i+0x1ae>
 8004588:	07df      	lsls	r7, r3, #31
 800458a:	bf44      	itt	mi
 800458c:	f043 0320 	orrmi.w	r3, r3, #32
 8004590:	6023      	strmi	r3, [r4, #0]
 8004592:	b91e      	cbnz	r6, 800459c <_printf_i+0x198>
 8004594:	6823      	ldr	r3, [r4, #0]
 8004596:	f023 0320 	bic.w	r3, r3, #32
 800459a:	6023      	str	r3, [r4, #0]
 800459c:	2310      	movs	r3, #16
 800459e:	e7af      	b.n	8004500 <_printf_i+0xfc>
 80045a0:	6823      	ldr	r3, [r4, #0]
 80045a2:	f043 0320 	orr.w	r3, r3, #32
 80045a6:	6023      	str	r3, [r4, #0]
 80045a8:	2378      	movs	r3, #120	; 0x78
 80045aa:	4828      	ldr	r0, [pc, #160]	; (800464c <_printf_i+0x248>)
 80045ac:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80045b0:	e7e3      	b.n	800457a <_printf_i+0x176>
 80045b2:	0659      	lsls	r1, r3, #25
 80045b4:	bf48      	it	mi
 80045b6:	b2b6      	uxthmi	r6, r6
 80045b8:	e7e6      	b.n	8004588 <_printf_i+0x184>
 80045ba:	4615      	mov	r5, r2
 80045bc:	e7bb      	b.n	8004536 <_printf_i+0x132>
 80045be:	682b      	ldr	r3, [r5, #0]
 80045c0:	6826      	ldr	r6, [r4, #0]
 80045c2:	1d18      	adds	r0, r3, #4
 80045c4:	6961      	ldr	r1, [r4, #20]
 80045c6:	6028      	str	r0, [r5, #0]
 80045c8:	0635      	lsls	r5, r6, #24
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	d501      	bpl.n	80045d2 <_printf_i+0x1ce>
 80045ce:	6019      	str	r1, [r3, #0]
 80045d0:	e002      	b.n	80045d8 <_printf_i+0x1d4>
 80045d2:	0670      	lsls	r0, r6, #25
 80045d4:	d5fb      	bpl.n	80045ce <_printf_i+0x1ca>
 80045d6:	8019      	strh	r1, [r3, #0]
 80045d8:	2300      	movs	r3, #0
 80045da:	4615      	mov	r5, r2
 80045dc:	6123      	str	r3, [r4, #16]
 80045de:	e7ba      	b.n	8004556 <_printf_i+0x152>
 80045e0:	682b      	ldr	r3, [r5, #0]
 80045e2:	2100      	movs	r1, #0
 80045e4:	1d1a      	adds	r2, r3, #4
 80045e6:	602a      	str	r2, [r5, #0]
 80045e8:	681d      	ldr	r5, [r3, #0]
 80045ea:	6862      	ldr	r2, [r4, #4]
 80045ec:	4628      	mov	r0, r5
 80045ee:	f000 f831 	bl	8004654 <memchr>
 80045f2:	b108      	cbz	r0, 80045f8 <_printf_i+0x1f4>
 80045f4:	1b40      	subs	r0, r0, r5
 80045f6:	6060      	str	r0, [r4, #4]
 80045f8:	6863      	ldr	r3, [r4, #4]
 80045fa:	6123      	str	r3, [r4, #16]
 80045fc:	2300      	movs	r3, #0
 80045fe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004602:	e7a8      	b.n	8004556 <_printf_i+0x152>
 8004604:	462a      	mov	r2, r5
 8004606:	4649      	mov	r1, r9
 8004608:	4640      	mov	r0, r8
 800460a:	6923      	ldr	r3, [r4, #16]
 800460c:	47d0      	blx	sl
 800460e:	3001      	adds	r0, #1
 8004610:	d0ab      	beq.n	800456a <_printf_i+0x166>
 8004612:	6823      	ldr	r3, [r4, #0]
 8004614:	079b      	lsls	r3, r3, #30
 8004616:	d413      	bmi.n	8004640 <_printf_i+0x23c>
 8004618:	68e0      	ldr	r0, [r4, #12]
 800461a:	9b03      	ldr	r3, [sp, #12]
 800461c:	4298      	cmp	r0, r3
 800461e:	bfb8      	it	lt
 8004620:	4618      	movlt	r0, r3
 8004622:	e7a4      	b.n	800456e <_printf_i+0x16a>
 8004624:	2301      	movs	r3, #1
 8004626:	4632      	mov	r2, r6
 8004628:	4649      	mov	r1, r9
 800462a:	4640      	mov	r0, r8
 800462c:	47d0      	blx	sl
 800462e:	3001      	adds	r0, #1
 8004630:	d09b      	beq.n	800456a <_printf_i+0x166>
 8004632:	3501      	adds	r5, #1
 8004634:	68e3      	ldr	r3, [r4, #12]
 8004636:	9903      	ldr	r1, [sp, #12]
 8004638:	1a5b      	subs	r3, r3, r1
 800463a:	42ab      	cmp	r3, r5
 800463c:	dcf2      	bgt.n	8004624 <_printf_i+0x220>
 800463e:	e7eb      	b.n	8004618 <_printf_i+0x214>
 8004640:	2500      	movs	r5, #0
 8004642:	f104 0619 	add.w	r6, r4, #25
 8004646:	e7f5      	b.n	8004634 <_printf_i+0x230>
 8004648:	08004a13 	.word	0x08004a13
 800464c:	08004a24 	.word	0x08004a24

08004650 <__retarget_lock_acquire_recursive>:
 8004650:	4770      	bx	lr

08004652 <__retarget_lock_release_recursive>:
 8004652:	4770      	bx	lr

08004654 <memchr>:
 8004654:	4603      	mov	r3, r0
 8004656:	b510      	push	{r4, lr}
 8004658:	b2c9      	uxtb	r1, r1
 800465a:	4402      	add	r2, r0
 800465c:	4293      	cmp	r3, r2
 800465e:	4618      	mov	r0, r3
 8004660:	d101      	bne.n	8004666 <memchr+0x12>
 8004662:	2000      	movs	r0, #0
 8004664:	e003      	b.n	800466e <memchr+0x1a>
 8004666:	7804      	ldrb	r4, [r0, #0]
 8004668:	3301      	adds	r3, #1
 800466a:	428c      	cmp	r4, r1
 800466c:	d1f6      	bne.n	800465c <memchr+0x8>
 800466e:	bd10      	pop	{r4, pc}

08004670 <memmove>:
 8004670:	4288      	cmp	r0, r1
 8004672:	b510      	push	{r4, lr}
 8004674:	eb01 0402 	add.w	r4, r1, r2
 8004678:	d902      	bls.n	8004680 <memmove+0x10>
 800467a:	4284      	cmp	r4, r0
 800467c:	4623      	mov	r3, r4
 800467e:	d807      	bhi.n	8004690 <memmove+0x20>
 8004680:	1e43      	subs	r3, r0, #1
 8004682:	42a1      	cmp	r1, r4
 8004684:	d008      	beq.n	8004698 <memmove+0x28>
 8004686:	f811 2b01 	ldrb.w	r2, [r1], #1
 800468a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800468e:	e7f8      	b.n	8004682 <memmove+0x12>
 8004690:	4601      	mov	r1, r0
 8004692:	4402      	add	r2, r0
 8004694:	428a      	cmp	r2, r1
 8004696:	d100      	bne.n	800469a <memmove+0x2a>
 8004698:	bd10      	pop	{r4, pc}
 800469a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800469e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80046a2:	e7f7      	b.n	8004694 <memmove+0x24>

080046a4 <_malloc_usable_size_r>:
 80046a4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80046a8:	1f18      	subs	r0, r3, #4
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	bfbc      	itt	lt
 80046ae:	580b      	ldrlt	r3, [r1, r0]
 80046b0:	18c0      	addlt	r0, r0, r3
 80046b2:	4770      	bx	lr

080046b4 <_init>:
 80046b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046b6:	bf00      	nop
 80046b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80046ba:	bc08      	pop	{r3}
 80046bc:	469e      	mov	lr, r3
 80046be:	4770      	bx	lr

080046c0 <_fini>:
 80046c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046c2:	bf00      	nop
 80046c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80046c6:	bc08      	pop	{r3}
 80046c8:	469e      	mov	lr, r3
 80046ca:	4770      	bx	lr
