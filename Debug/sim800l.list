
sim800l.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004940  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000374  08004a4c  08004a4c  00005a4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004dc0  08004dc0  000060b4  2**0
                  CONTENTS
  4 .ARM          00000008  08004dc0  08004dc0  00005dc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004dc8  08004dc8  000060b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004dc8  08004dc8  00005dc8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004dcc  08004dcc  00005dcc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000b4  20000000  08004dd0  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000960  200000b4  08004e84  000060b4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000a14  08004e84  00006a14  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000060b4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007c94  00000000  00000000  000060dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001785  00000000  00000000  0000dd71  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000710  00000000  00000000  0000f4f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000564  00000000  00000000  0000fc08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000014f2  00000000  00000000  0001016c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009242  00000000  00000000  0001165e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007ff3e  00000000  00000000  0001a8a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0009a7de  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002170  00000000  00000000  0009a824  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000055  00000000  00000000  0009c994  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200000b4 	.word	0x200000b4
 8000128:	00000000 	.word	0x00000000
 800012c:	08004a34 	.word	0x08004a34

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200000b8 	.word	0x200000b8
 8000148:	08004a34 	.word	0x08004a34

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <s800LSend>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void s800LSend(uint8_t *text, int nums) {
 800015c:	b580      	push	{r7, lr}
 800015e:	b082      	sub	sp, #8
 8000160:	af00      	add	r7, sp, #0
 8000162:	6078      	str	r0, [r7, #4]
 8000164:	6039      	str	r1, [r7, #0]
	HAL_UART_Transmit(&huart2, text, nums, 0xFFFF);
 8000166:	683b      	ldr	r3, [r7, #0]
 8000168:	b29a      	uxth	r2, r3
 800016a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800016e:	6879      	ldr	r1, [r7, #4]
 8000170:	4810      	ldr	r0, [pc, #64]	@ (80001b4 <s800LSend+0x58>)
 8000172:	f002 ffe3 	bl	800313c <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, (uint8_t*)"\r\n", 2, 0xFFFF);
 8000176:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800017a:	2202      	movs	r2, #2
 800017c:	490e      	ldr	r1, [pc, #56]	@ (80001b8 <s800LSend+0x5c>)
 800017e:	480d      	ldr	r0, [pc, #52]	@ (80001b4 <s800LSend+0x58>)
 8000180:	f002 ffdc 	bl	800313c <HAL_UART_Transmit>
	if (echoMode) {
 8000184:	4b0d      	ldr	r3, [pc, #52]	@ (80001bc <s800LSend+0x60>)
 8000186:	781b      	ldrb	r3, [r3, #0]
 8000188:	2b00      	cmp	r3, #0
 800018a:	d00f      	beq.n	80001ac <s800LSend+0x50>
		HAL_UART_Transmit(&huart1, text, nums, 0xFFFF);
 800018c:	683b      	ldr	r3, [r7, #0]
 800018e:	b29a      	uxth	r2, r3
 8000190:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000194:	6879      	ldr	r1, [r7, #4]
 8000196:	480a      	ldr	r0, [pc, #40]	@ (80001c0 <s800LSend+0x64>)
 8000198:	f002 ffd0 	bl	800313c <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart1, (uint8_t*)"\r\n", 2, 0xFFFF);
 800019c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80001a0:	2202      	movs	r2, #2
 80001a2:	4905      	ldr	r1, [pc, #20]	@ (80001b8 <s800LSend+0x5c>)
 80001a4:	4806      	ldr	r0, [pc, #24]	@ (80001c0 <s800LSend+0x64>)
 80001a6:	f002 ffc9 	bl	800313c <HAL_UART_Transmit>
	}
	return;
 80001aa:	bf00      	nop
 80001ac:	bf00      	nop
}
 80001ae:	3708      	adds	r7, #8
 80001b0:	46bd      	mov	sp, r7
 80001b2:	bd80      	pop	{r7, pc}
 80001b4:	20000120 	.word	0x20000120
 80001b8:	08004a4c 	.word	0x08004a4c
 80001bc:	20000055 	.word	0x20000055
 80001c0:	200000d8 	.word	0x200000d8

080001c4 <s800lMessAdd>:

int s800lMessAdd(uint8_t* text) {
 80001c4:	b480      	push	{r7}
 80001c6:	b085      	sub	sp, #20
 80001c8:	af00      	add	r7, sp, #0
 80001ca:	6078      	str	r0, [r7, #4]
	int i = 0;
 80001cc:	2300      	movs	r3, #0
 80001ce:	60fb      	str	r3, [r7, #12]
	for (i; i<250; i++) {
 80001d0:	e00a      	b.n	80001e8 <s800lMessAdd+0x24>
		if (text[i]=='!') return i;
 80001d2:	68fb      	ldr	r3, [r7, #12]
 80001d4:	687a      	ldr	r2, [r7, #4]
 80001d6:	4413      	add	r3, r2
 80001d8:	781b      	ldrb	r3, [r3, #0]
 80001da:	2b21      	cmp	r3, #33	@ 0x21
 80001dc:	d101      	bne.n	80001e2 <s800lMessAdd+0x1e>
 80001de:	68fb      	ldr	r3, [r7, #12]
 80001e0:	e005      	b.n	80001ee <s800lMessAdd+0x2a>
	for (i; i<250; i++) {
 80001e2:	68fb      	ldr	r3, [r7, #12]
 80001e4:	3301      	adds	r3, #1
 80001e6:	60fb      	str	r3, [r7, #12]
 80001e8:	68fb      	ldr	r3, [r7, #12]
 80001ea:	2bf9      	cmp	r3, #249	@ 0xf9
 80001ec:	ddf1      	ble.n	80001d2 <s800lMessAdd+0xe>
	}
}
 80001ee:	4618      	mov	r0, r3
 80001f0:	3714      	adds	r7, #20
 80001f2:	46bd      	mov	sp, r7
 80001f4:	bc80      	pop	{r7}
 80001f6:	4770      	bx	lr

080001f8 <buttStart>:

void buttStart() {
 80001f8:	b580      	push	{r7, lr}
 80001fa:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 0);
 80001fc:	2200      	movs	r2, #0
 80001fe:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000202:	480d      	ldr	r0, [pc, #52]	@ (8000238 <buttStart+0x40>)
 8000204:	f002 fb08 	bl	8002818 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0);
 8000208:	2200      	movs	r2, #0
 800020a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800020e:	480b      	ldr	r0, [pc, #44]	@ (800023c <buttStart+0x44>)
 8000210:	f002 fb02 	bl	8002818 <HAL_GPIO_WritePin>
	HAL_Delay(3000);
 8000214:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8000218:	f001 fdae 	bl	8001d78 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 1);
 800021c:	2201      	movs	r2, #1
 800021e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000222:	4805      	ldr	r0, [pc, #20]	@ (8000238 <buttStart+0x40>)
 8000224:	f002 faf8 	bl	8002818 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);
 8000228:	2201      	movs	r2, #1
 800022a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800022e:	4803      	ldr	r0, [pc, #12]	@ (800023c <buttStart+0x44>)
 8000230:	f002 faf2 	bl	8002818 <HAL_GPIO_WritePin>
}
 8000234:	bf00      	nop
 8000236:	bd80      	pop	{r7, pc}
 8000238:	40011000 	.word	0x40011000
 800023c:	40010c00 	.word	0x40010c00

08000240 <buttOpen>:

void buttOpen() {
 8000240:	b580      	push	{r7, lr}
 8000242:	b082      	sub	sp, #8
 8000244:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 0);
 8000246:	2200      	movs	r2, #0
 8000248:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800024c:	4816      	ldr	r0, [pc, #88]	@ (80002a8 <buttOpen+0x68>)
 800024e:	f002 fae3 	bl	8002818 <HAL_GPIO_WritePin>
	for (int i = 0; i<5; i++) {
 8000252:	2300      	movs	r3, #0
 8000254:	607b      	str	r3, [r7, #4]
 8000256:	e014      	b.n	8000282 <buttOpen+0x42>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 0);
 8000258:	2200      	movs	r2, #0
 800025a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800025e:	4812      	ldr	r0, [pc, #72]	@ (80002a8 <buttOpen+0x68>)
 8000260:	f002 fada 	bl	8002818 <HAL_GPIO_WritePin>
		HAL_Delay(100);
 8000264:	2064      	movs	r0, #100	@ 0x64
 8000266:	f001 fd87 	bl	8001d78 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 1);
 800026a:	2201      	movs	r2, #1
 800026c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000270:	480d      	ldr	r0, [pc, #52]	@ (80002a8 <buttOpen+0x68>)
 8000272:	f002 fad1 	bl	8002818 <HAL_GPIO_WritePin>
		HAL_Delay(100);
 8000276:	2064      	movs	r0, #100	@ 0x64
 8000278:	f001 fd7e 	bl	8001d78 <HAL_Delay>
	for (int i = 0; i<5; i++) {
 800027c:	687b      	ldr	r3, [r7, #4]
 800027e:	3301      	adds	r3, #1
 8000280:	607b      	str	r3, [r7, #4]
 8000282:	687b      	ldr	r3, [r7, #4]
 8000284:	2b04      	cmp	r3, #4
 8000286:	dde7      	ble.n	8000258 <buttOpen+0x18>
	}
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 1);
 8000288:	2201      	movs	r2, #1
 800028a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800028e:	4806      	ldr	r0, [pc, #24]	@ (80002a8 <buttOpen+0x68>)
 8000290:	f002 fac2 	bl	8002818 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);
 8000294:	2201      	movs	r2, #1
 8000296:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800029a:	4804      	ldr	r0, [pc, #16]	@ (80002ac <buttOpen+0x6c>)
 800029c:	f002 fabc 	bl	8002818 <HAL_GPIO_WritePin>
}
 80002a0:	bf00      	nop
 80002a2:	3708      	adds	r7, #8
 80002a4:	46bd      	mov	sp, r7
 80002a6:	bd80      	pop	{r7, pc}
 80002a8:	40011000 	.word	0x40011000
 80002ac:	40010c00 	.word	0x40010c00

080002b0 <buttClose>:

void buttClose() {
 80002b0:	b580      	push	{r7, lr}
 80002b2:	b082      	sub	sp, #8
 80002b4:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, 0);
 80002b6:	2200      	movs	r2, #0
 80002b8:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80002bc:	4816      	ldr	r0, [pc, #88]	@ (8000318 <buttClose+0x68>)
 80002be:	f002 faab 	bl	8002818 <HAL_GPIO_WritePin>
	for (int i = 0; i<3; i++) {
 80002c2:	2300      	movs	r3, #0
 80002c4:	607b      	str	r3, [r7, #4]
 80002c6:	e014      	b.n	80002f2 <buttClose+0x42>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 0);
 80002c8:	2200      	movs	r2, #0
 80002ca:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80002ce:	4812      	ldr	r0, [pc, #72]	@ (8000318 <buttClose+0x68>)
 80002d0:	f002 faa2 	bl	8002818 <HAL_GPIO_WritePin>
		HAL_Delay(250);
 80002d4:	20fa      	movs	r0, #250	@ 0xfa
 80002d6:	f001 fd4f 	bl	8001d78 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 1);
 80002da:	2201      	movs	r2, #1
 80002dc:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80002e0:	480d      	ldr	r0, [pc, #52]	@ (8000318 <buttClose+0x68>)
 80002e2:	f002 fa99 	bl	8002818 <HAL_GPIO_WritePin>
		HAL_Delay(250);
 80002e6:	20fa      	movs	r0, #250	@ 0xfa
 80002e8:	f001 fd46 	bl	8001d78 <HAL_Delay>
	for (int i = 0; i<3; i++) {
 80002ec:	687b      	ldr	r3, [r7, #4]
 80002ee:	3301      	adds	r3, #1
 80002f0:	607b      	str	r3, [r7, #4]
 80002f2:	687b      	ldr	r3, [r7, #4]
 80002f4:	2b02      	cmp	r3, #2
 80002f6:	dde7      	ble.n	80002c8 <buttClose+0x18>
	}
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 1);
 80002f8:	2201      	movs	r2, #1
 80002fa:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80002fe:	4806      	ldr	r0, [pc, #24]	@ (8000318 <buttClose+0x68>)
 8000300:	f002 fa8a 	bl	8002818 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, 1);
 8000304:	2201      	movs	r2, #1
 8000306:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800030a:	4804      	ldr	r0, [pc, #16]	@ (800031c <buttClose+0x6c>)
 800030c:	f002 fa84 	bl	8002818 <HAL_GPIO_WritePin>
}
 8000310:	bf00      	nop
 8000312:	3708      	adds	r7, #8
 8000314:	46bd      	mov	sp, r7
 8000316:	bd80      	pop	{r7, pc}
 8000318:	40011000 	.word	0x40011000
 800031c:	40010c00 	.word	0x40010c00

08000320 <txATcommand>:

void txATcommand() {
 8000320:	b580      	push	{r7, lr}
 8000322:	b0d4      	sub	sp, #336	@ 0x150
 8000324:	af02      	add	r7, sp, #8
	//HAL_Delay(500);
	switch (step) {
 8000326:	4bca      	ldr	r3, [pc, #808]	@ (8000650 <txATcommand+0x330>)
 8000328:	681b      	ldr	r3, [r3, #0]
 800032a:	2b63      	cmp	r3, #99	@ 0x63
 800032c:	f200 820a 	bhi.w	8000744 <txATcommand+0x424>
 8000330:	a201      	add	r2, pc, #4	@ (adr r2, 8000338 <txATcommand+0x18>)
 8000332:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000336:	bf00      	nop
 8000338:	080004c9 	.word	0x080004c9
 800033c:	080004d9 	.word	0x080004d9
 8000340:	080004e9 	.word	0x080004e9
 8000344:	080004f9 	.word	0x080004f9
 8000348:	08000509 	.word	0x08000509
 800034c:	08000521 	.word	0x08000521
 8000350:	08000531 	.word	0x08000531
 8000354:	08000541 	.word	0x08000541
 8000358:	080005af 	.word	0x080005af
 800035c:	080005bf 	.word	0x080005bf
 8000360:	080005cf 	.word	0x080005cf
 8000364:	080005df 	.word	0x080005df
 8000368:	08000745 	.word	0x08000745
 800036c:	08000745 	.word	0x08000745
 8000370:	08000745 	.word	0x08000745
 8000374:	08000745 	.word	0x08000745
 8000378:	08000745 	.word	0x08000745
 800037c:	08000745 	.word	0x08000745
 8000380:	08000745 	.word	0x08000745
 8000384:	08000745 	.word	0x08000745
 8000388:	080005ef 	.word	0x080005ef
 800038c:	080005ff 	.word	0x080005ff
 8000390:	0800063f 	.word	0x0800063f
 8000394:	080006bd 	.word	0x080006bd
 8000398:	080006fd 	.word	0x080006fd
 800039c:	08000745 	.word	0x08000745
 80003a0:	08000745 	.word	0x08000745
 80003a4:	08000745 	.word	0x08000745
 80003a8:	08000745 	.word	0x08000745
 80003ac:	08000745 	.word	0x08000745
 80003b0:	08000745 	.word	0x08000745
 80003b4:	08000745 	.word	0x08000745
 80003b8:	08000745 	.word	0x08000745
 80003bc:	08000745 	.word	0x08000745
 80003c0:	08000745 	.word	0x08000745
 80003c4:	08000745 	.word	0x08000745
 80003c8:	08000745 	.word	0x08000745
 80003cc:	08000745 	.word	0x08000745
 80003d0:	08000745 	.word	0x08000745
 80003d4:	08000745 	.word	0x08000745
 80003d8:	08000745 	.word	0x08000745
 80003dc:	08000745 	.word	0x08000745
 80003e0:	08000745 	.word	0x08000745
 80003e4:	08000745 	.word	0x08000745
 80003e8:	08000745 	.word	0x08000745
 80003ec:	08000745 	.word	0x08000745
 80003f0:	08000745 	.word	0x08000745
 80003f4:	08000745 	.word	0x08000745
 80003f8:	08000745 	.word	0x08000745
 80003fc:	08000745 	.word	0x08000745
 8000400:	08000745 	.word	0x08000745
 8000404:	08000745 	.word	0x08000745
 8000408:	08000745 	.word	0x08000745
 800040c:	08000745 	.word	0x08000745
 8000410:	08000745 	.word	0x08000745
 8000414:	08000745 	.word	0x08000745
 8000418:	08000745 	.word	0x08000745
 800041c:	08000745 	.word	0x08000745
 8000420:	08000745 	.word	0x08000745
 8000424:	08000745 	.word	0x08000745
 8000428:	08000745 	.word	0x08000745
 800042c:	08000745 	.word	0x08000745
 8000430:	08000745 	.word	0x08000745
 8000434:	08000745 	.word	0x08000745
 8000438:	08000745 	.word	0x08000745
 800043c:	08000745 	.word	0x08000745
 8000440:	08000745 	.word	0x08000745
 8000444:	08000745 	.word	0x08000745
 8000448:	08000745 	.word	0x08000745
 800044c:	08000745 	.word	0x08000745
 8000450:	08000745 	.word	0x08000745
 8000454:	08000745 	.word	0x08000745
 8000458:	08000745 	.word	0x08000745
 800045c:	08000745 	.word	0x08000745
 8000460:	08000745 	.word	0x08000745
 8000464:	08000745 	.word	0x08000745
 8000468:	08000745 	.word	0x08000745
 800046c:	08000745 	.word	0x08000745
 8000470:	08000745 	.word	0x08000745
 8000474:	08000745 	.word	0x08000745
 8000478:	08000745 	.word	0x08000745
 800047c:	08000745 	.word	0x08000745
 8000480:	08000745 	.word	0x08000745
 8000484:	08000745 	.word	0x08000745
 8000488:	08000745 	.word	0x08000745
 800048c:	08000745 	.word	0x08000745
 8000490:	08000745 	.word	0x08000745
 8000494:	08000745 	.word	0x08000745
 8000498:	08000745 	.word	0x08000745
 800049c:	08000745 	.word	0x08000745
 80004a0:	08000745 	.word	0x08000745
 80004a4:	08000745 	.word	0x08000745
 80004a8:	08000745 	.word	0x08000745
 80004ac:	08000745 	.word	0x08000745
 80004b0:	08000745 	.word	0x08000745
 80004b4:	08000745 	.word	0x08000745
 80004b8:	08000745 	.word	0x08000745
 80004bc:	08000745 	.word	0x08000745
 80004c0:	08000745 	.word	0x08000745
 80004c4:	08000733 	.word	0x08000733
		case 0: {
			ready=false;
 80004c8:	4b62      	ldr	r3, [pc, #392]	@ (8000654 <txATcommand+0x334>)
 80004ca:	2200      	movs	r2, #0
 80004cc:	701a      	strb	r2, [r3, #0]
			s800LSend((uint8_t*)"ATE0", 4);
 80004ce:	2104      	movs	r1, #4
 80004d0:	4861      	ldr	r0, [pc, #388]	@ (8000658 <txATcommand+0x338>)
 80004d2:	f7ff fe43 	bl	800015c <s800LSend>
			break;
 80004d6:	e134      	b.n	8000742 <txATcommand+0x422>
		}
		case 1: {
			ready=false;
 80004d8:	4b5e      	ldr	r3, [pc, #376]	@ (8000654 <txATcommand+0x334>)
 80004da:	2200      	movs	r2, #0
 80004dc:	701a      	strb	r2, [r3, #0]
			s800LSend((uint8_t*)"AT+CSQ", 6);
 80004de:	2106      	movs	r1, #6
 80004e0:	485e      	ldr	r0, [pc, #376]	@ (800065c <txATcommand+0x33c>)
 80004e2:	f7ff fe3b 	bl	800015c <s800LSend>
			break;
 80004e6:	e12c      	b.n	8000742 <txATcommand+0x422>
		}
		case 2: {
			ready=false;
 80004e8:	4b5a      	ldr	r3, [pc, #360]	@ (8000654 <txATcommand+0x334>)
 80004ea:	2200      	movs	r2, #0
 80004ec:	701a      	strb	r2, [r3, #0]
			s800LSend((uint8_t*)"AT+CBC", 6);
 80004ee:	2106      	movs	r1, #6
 80004f0:	485b      	ldr	r0, [pc, #364]	@ (8000660 <txATcommand+0x340>)
 80004f2:	f7ff fe33 	bl	800015c <s800LSend>
			break;
 80004f6:	e124      	b.n	8000742 <txATcommand+0x422>
		}
		case 3: {
			ready=false;
 80004f8:	4b56      	ldr	r3, [pc, #344]	@ (8000654 <txATcommand+0x334>)
 80004fa:	2200      	movs	r2, #0
 80004fc:	701a      	strb	r2, [r3, #0]
			s800LSend((uint8_t*)"AT+CREG?", 8);
 80004fe:	2108      	movs	r1, #8
 8000500:	4858      	ldr	r0, [pc, #352]	@ (8000664 <txATcommand+0x344>)
 8000502:	f7ff fe2b 	bl	800015c <s800LSend>
			break;
 8000506:	e11c      	b.n	8000742 <txATcommand+0x422>
		}
		case 4: {
			ready=false;
 8000508:	4b52      	ldr	r3, [pc, #328]	@ (8000654 <txATcommand+0x334>)
 800050a:	2200      	movs	r2, #0
 800050c:	701a      	strb	r2, [r3, #0]
			s800LSend((uint8_t*)"AT+SAPBR=1,1", 12);
 800050e:	210c      	movs	r1, #12
 8000510:	4855      	ldr	r0, [pc, #340]	@ (8000668 <txATcommand+0x348>)
 8000512:	f7ff fe23 	bl	800015c <s800LSend>
			HAL_Delay(2000);
 8000516:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800051a:	f001 fc2d 	bl	8001d78 <HAL_Delay>
			break;
 800051e:	e110      	b.n	8000742 <txATcommand+0x422>
		}
		case 5: {
			ready=false;
 8000520:	4b4c      	ldr	r3, [pc, #304]	@ (8000654 <txATcommand+0x334>)
 8000522:	2200      	movs	r2, #0
 8000524:	701a      	strb	r2, [r3, #0]
			s800LSend((uint8_t*)"AT+HTTPINIT", 11);
 8000526:	210b      	movs	r1, #11
 8000528:	4850      	ldr	r0, [pc, #320]	@ (800066c <txATcommand+0x34c>)
 800052a:	f7ff fe17 	bl	800015c <s800LSend>
			break;
 800052e:	e108      	b.n	8000742 <txATcommand+0x422>
		}
		case 6: {
			ready=false;
 8000530:	4b48      	ldr	r3, [pc, #288]	@ (8000654 <txATcommand+0x334>)
 8000532:	2200      	movs	r2, #0
 8000534:	701a      	strb	r2, [r3, #0]
			s800LSend((uint8_t*)"AT+HTTPPARA=\"CID\",1",19);
 8000536:	2113      	movs	r1, #19
 8000538:	484d      	ldr	r0, [pc, #308]	@ (8000670 <txATcommand+0x350>)
 800053a:	f7ff fe0f 	bl	800015c <s800LSend>
			break;
 800053e:	e100      	b.n	8000742 <txATcommand+0x422>
		}
		case 7: {
			ready=false;
 8000540:	4b44      	ldr	r3, [pc, #272]	@ (8000654 <txATcommand+0x334>)
 8000542:	2200      	movs	r2, #0
 8000544:	701a      	strb	r2, [r3, #0]
			bat[7]=0;
 8000546:	4b4b      	ldr	r3, [pc, #300]	@ (8000674 <txATcommand+0x354>)
 8000548:	2200      	movs	r2, #0
 800054a:	71da      	strb	r2, [r3, #7]
			uint8_t ext[250];
			if (answ)
 800054c:	4b4a      	ldr	r3, [pc, #296]	@ (8000678 <txATcommand+0x358>)
 800054e:	781b      	ldrb	r3, [r3, #0]
 8000550:	2b00      	cmp	r3, #0
 8000552:	d00a      	beq.n	800056a <txATcommand+0x24a>
				sprintf(ext, "AT+HTTPPARA=\"URL\",\"http://simple.spamigor.ru/api/gst?csq=%s&bat=%s&mes=%s&id=%s\"", csqlvl, bat, smsText, unicID);
 8000554:	1d38      	adds	r0, r7, #4
 8000556:	4b49      	ldr	r3, [pc, #292]	@ (800067c <txATcommand+0x35c>)
 8000558:	9301      	str	r3, [sp, #4]
 800055a:	4b49      	ldr	r3, [pc, #292]	@ (8000680 <txATcommand+0x360>)
 800055c:	9300      	str	r3, [sp, #0]
 800055e:	4b45      	ldr	r3, [pc, #276]	@ (8000674 <txATcommand+0x354>)
 8000560:	4a48      	ldr	r2, [pc, #288]	@ (8000684 <txATcommand+0x364>)
 8000562:	4949      	ldr	r1, [pc, #292]	@ (8000688 <txATcommand+0x368>)
 8000564:	f003 fe66 	bl	8004234 <siprintf>
 8000568:	e015      	b.n	8000596 <txATcommand+0x276>
			else if (!checkPhones)
 800056a:	4b48      	ldr	r3, [pc, #288]	@ (800068c <txATcommand+0x36c>)
 800056c:	781b      	ldrb	r3, [r3, #0]
 800056e:	f083 0301 	eor.w	r3, r3, #1
 8000572:	b2db      	uxtb	r3, r3
 8000574:	2b00      	cmp	r3, #0
 8000576:	d008      	beq.n	800058a <txATcommand+0x26a>
				sprintf(ext, "AT+HTTPPARA=\"URL\",\"http://simple.spamigor.ru/api/gst?csq=%s&bat=%s&id=%s\"", csqlvl, bat, unicID);
 8000578:	1d38      	adds	r0, r7, #4
 800057a:	4b40      	ldr	r3, [pc, #256]	@ (800067c <txATcommand+0x35c>)
 800057c:	9300      	str	r3, [sp, #0]
 800057e:	4b3d      	ldr	r3, [pc, #244]	@ (8000674 <txATcommand+0x354>)
 8000580:	4a40      	ldr	r2, [pc, #256]	@ (8000684 <txATcommand+0x364>)
 8000582:	4943      	ldr	r1, [pc, #268]	@ (8000690 <txATcommand+0x370>)
 8000584:	f003 fe56 	bl	8004234 <siprintf>
 8000588:	e005      	b.n	8000596 <txATcommand+0x276>
			else sprintf(ext, "AT+HTTPPARA=\"URL\",\"http://simple.spamigor.ru/api/phn?id=%s\"", unicID);
 800058a:	1d3b      	adds	r3, r7, #4
 800058c:	4a3b      	ldr	r2, [pc, #236]	@ (800067c <txATcommand+0x35c>)
 800058e:	4941      	ldr	r1, [pc, #260]	@ (8000694 <txATcommand+0x374>)
 8000590:	4618      	mov	r0, r3
 8000592:	f003 fe4f 	bl	8004234 <siprintf>
			s800LSend(ext, strlen(ext));
 8000596:	1d3b      	adds	r3, r7, #4
 8000598:	4618      	mov	r0, r3
 800059a:	f7ff fdd7 	bl	800014c <strlen>
 800059e:	4603      	mov	r3, r0
 80005a0:	461a      	mov	r2, r3
 80005a2:	1d3b      	adds	r3, r7, #4
 80005a4:	4611      	mov	r1, r2
 80005a6:	4618      	mov	r0, r3
 80005a8:	f7ff fdd8 	bl	800015c <s800LSend>
			break;
 80005ac:	e0c9      	b.n	8000742 <txATcommand+0x422>
		}
		case 8: {
			ready=false;
 80005ae:	4b29      	ldr	r3, [pc, #164]	@ (8000654 <txATcommand+0x334>)
 80005b0:	2200      	movs	r2, #0
 80005b2:	701a      	strb	r2, [r3, #0]
			s800LSend((uint8_t*)"AT+HTTPACTION=0",15);
 80005b4:	210f      	movs	r1, #15
 80005b6:	4838      	ldr	r0, [pc, #224]	@ (8000698 <txATcommand+0x378>)
 80005b8:	f7ff fdd0 	bl	800015c <s800LSend>
			break;
 80005bc:	e0c1      	b.n	8000742 <txATcommand+0x422>
		}
		case 9: {
			ready=false;
 80005be:	4b25      	ldr	r3, [pc, #148]	@ (8000654 <txATcommand+0x334>)
 80005c0:	2200      	movs	r2, #0
 80005c2:	701a      	strb	r2, [r3, #0]
			s800LSend((uint8_t*)"AT+HTTPREAD",11);
 80005c4:	210b      	movs	r1, #11
 80005c6:	4835      	ldr	r0, [pc, #212]	@ (800069c <txATcommand+0x37c>)
 80005c8:	f7ff fdc8 	bl	800015c <s800LSend>
			break;
 80005cc:	e0b9      	b.n	8000742 <txATcommand+0x422>
		}
		case 10: {
			ready=false;
 80005ce:	4b21      	ldr	r3, [pc, #132]	@ (8000654 <txATcommand+0x334>)
 80005d0:	2200      	movs	r2, #0
 80005d2:	701a      	strb	r2, [r3, #0]
			s800LSend((uint8_t*)"AT+HTTPTERM",11);
 80005d4:	210b      	movs	r1, #11
 80005d6:	4832      	ldr	r0, [pc, #200]	@ (80006a0 <txATcommand+0x380>)
 80005d8:	f7ff fdc0 	bl	800015c <s800LSend>
			break;
 80005dc:	e0b1      	b.n	8000742 <txATcommand+0x422>
		}
		case 11: {
			ready=false;
 80005de:	4b1d      	ldr	r3, [pc, #116]	@ (8000654 <txATcommand+0x334>)
 80005e0:	2200      	movs	r2, #0
 80005e2:	701a      	strb	r2, [r3, #0]
			s800LSend((uint8_t*)"AT+SAPBR=0,1", 12);
 80005e4:	210c      	movs	r1, #12
 80005e6:	482f      	ldr	r0, [pc, #188]	@ (80006a4 <txATcommand+0x384>)
 80005e8:	f7ff fdb8 	bl	800015c <s800LSend>
			break;
 80005ec:	e0a9      	b.n	8000742 <txATcommand+0x422>
		}
		case 20: {
			ready = false;
 80005ee:	4b19      	ldr	r3, [pc, #100]	@ (8000654 <txATcommand+0x334>)
 80005f0:	2200      	movs	r2, #0
 80005f2:	701a      	strb	r2, [r3, #0]
			s800LSend((uint8_t*)"AT+CMGF=1", 9);
 80005f4:	2109      	movs	r1, #9
 80005f6:	482c      	ldr	r0, [pc, #176]	@ (80006a8 <txATcommand+0x388>)
 80005f8:	f7ff fdb0 	bl	800015c <s800LSend>
			break;
 80005fc:	e0a1      	b.n	8000742 <txATcommand+0x422>
		}
		case 21: {
			ready=false;
 80005fe:	4b15      	ldr	r3, [pc, #84]	@ (8000654 <txATcommand+0x334>)
 8000600:	2200      	movs	r2, #0
 8000602:	701a      	strb	r2, [r3, #0]
			uint8_t ext[15];
			uint8_t at[] = "AT+CMGR=";
 8000604:	4a29      	ldr	r2, [pc, #164]	@ (80006ac <txATcommand+0x38c>)
 8000606:	f507 7396 	add.w	r3, r7, #300	@ 0x12c
 800060a:	ca07      	ldmia	r2, {r0, r1, r2}
 800060c:	c303      	stmia	r3!, {r0, r1}
 800060e:	701a      	strb	r2, [r3, #0]
			snprintf(ext, 15, "%s%s", at, smsNum);
 8000610:	f507 7396 	add.w	r3, r7, #300	@ 0x12c
 8000614:	f507 709c 	add.w	r0, r7, #312	@ 0x138
 8000618:	4a25      	ldr	r2, [pc, #148]	@ (80006b0 <txATcommand+0x390>)
 800061a:	9200      	str	r2, [sp, #0]
 800061c:	4a25      	ldr	r2, [pc, #148]	@ (80006b4 <txATcommand+0x394>)
 800061e:	210f      	movs	r1, #15
 8000620:	f003 fdd4 	bl	80041cc <sniprintf>
			s800LSend(ext, s800lMessAdd(ext));
 8000624:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8000628:	4618      	mov	r0, r3
 800062a:	f7ff fdcb 	bl	80001c4 <s800lMessAdd>
 800062e:	4602      	mov	r2, r0
 8000630:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8000634:	4611      	mov	r1, r2
 8000636:	4618      	mov	r0, r3
 8000638:	f7ff fd90 	bl	800015c <s800LSend>
			break;
 800063c:	e081      	b.n	8000742 <txATcommand+0x422>
		}
		case 22: {
			ready = false;
 800063e:	4b05      	ldr	r3, [pc, #20]	@ (8000654 <txATcommand+0x334>)
 8000640:	2200      	movs	r2, #0
 8000642:	701a      	strb	r2, [r3, #0]
			s800LSend((uint8_t*)"AT+CMGDA=\"DEL ALL\"", 18);
 8000644:	2112      	movs	r1, #18
 8000646:	481c      	ldr	r0, [pc, #112]	@ (80006b8 <txATcommand+0x398>)
 8000648:	f7ff fd88 	bl	800015c <s800LSend>
			break;
 800064c:	e079      	b.n	8000742 <txATcommand+0x422>
 800064e:	bf00      	nop
 8000650:	200008b0 	.word	0x200008b0
 8000654:	200008b8 	.word	0x200008b8
 8000658:	08004a50 	.word	0x08004a50
 800065c:	08004a58 	.word	0x08004a58
 8000660:	08004a60 	.word	0x08004a60
 8000664:	08004a68 	.word	0x08004a68
 8000668:	08004a74 	.word	0x08004a74
 800066c:	08004a84 	.word	0x08004a84
 8000670:	08004a90 	.word	0x08004a90
 8000674:	200008bc 	.word	0x200008bc
 8000678:	200008b9 	.word	0x200008b9
 800067c:	20000870 	.word	0x20000870
 8000680:	20000008 	.word	0x20000008
 8000684:	20000010 	.word	0x20000010
 8000688:	08004aa4 	.word	0x08004aa4
 800068c:	20000054 	.word	0x20000054
 8000690:	08004af8 	.word	0x08004af8
 8000694:	08004b44 	.word	0x08004b44
 8000698:	08004b80 	.word	0x08004b80
 800069c:	08004b90 	.word	0x08004b90
 80006a0:	08004b9c 	.word	0x08004b9c
 80006a4:	08004ba8 	.word	0x08004ba8
 80006a8:	08004bb8 	.word	0x08004bb8
 80006ac:	08004c04 	.word	0x08004c04
 80006b0:	20000868 	.word	0x20000868
 80006b4:	08004bc4 	.word	0x08004bc4
 80006b8:	08004bcc 	.word	0x08004bcc
		}
		case 23: {
			step=24;
 80006bc:	4b24      	ldr	r3, [pc, #144]	@ (8000750 <txATcommand+0x430>)
 80006be:	2218      	movs	r2, #24
 80006c0:	601a      	str	r2, [r3, #0]
			ready = true;
 80006c2:	4b24      	ldr	r3, [pc, #144]	@ (8000754 <txATcommand+0x434>)
 80006c4:	2201      	movs	r2, #1
 80006c6:	701a      	strb	r2, [r3, #0]
			uint8_t ext[23] = {0};
 80006c8:	2300      	movs	r3, #0
 80006ca:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 80006ce:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80006d2:	2200      	movs	r2, #0
 80006d4:	601a      	str	r2, [r3, #0]
 80006d6:	605a      	str	r2, [r3, #4]
 80006d8:	609a      	str	r2, [r3, #8]
 80006da:	60da      	str	r2, [r3, #12]
 80006dc:	f8c3 200f 	str.w	r2, [r3, #15]
			sprintf(ext, "AT+CMGS=\"+%s\"", backNumber);
 80006e0:	f507 738a 	add.w	r3, r7, #276	@ 0x114
 80006e4:	4a1c      	ldr	r2, [pc, #112]	@ (8000758 <txATcommand+0x438>)
 80006e6:	491d      	ldr	r1, [pc, #116]	@ (800075c <txATcommand+0x43c>)
 80006e8:	4618      	mov	r0, r3
 80006ea:	f003 fda3 	bl	8004234 <siprintf>
			s800LSend(ext, 22);
 80006ee:	f507 738a 	add.w	r3, r7, #276	@ 0x114
 80006f2:	2116      	movs	r1, #22
 80006f4:	4618      	mov	r0, r3
 80006f6:	f7ff fd31 	bl	800015c <s800LSend>
			break;
 80006fa:	e022      	b.n	8000742 <txATcommand+0x422>
		}
		case 24: {
			ready = false;
 80006fc:	4b15      	ldr	r3, [pc, #84]	@ (8000754 <txATcommand+0x434>)
 80006fe:	2200      	movs	r2, #0
 8000700:	701a      	strb	r2, [r3, #0]
			step=24;
 8000702:	4b13      	ldr	r3, [pc, #76]	@ (8000750 <txATcommand+0x430>)
 8000704:	2218      	movs	r2, #24
 8000706:	601a      	str	r2, [r3, #0]
			uint8_t ggg[20];
			sprintf(ggg, "%s%c", smsText, (uint8_t)0x1A);
 8000708:	f507 7080 	add.w	r0, r7, #256	@ 0x100
 800070c:	231a      	movs	r3, #26
 800070e:	4a14      	ldr	r2, [pc, #80]	@ (8000760 <txATcommand+0x440>)
 8000710:	4914      	ldr	r1, [pc, #80]	@ (8000764 <txATcommand+0x444>)
 8000712:	f003 fd8f 	bl	8004234 <siprintf>
			s800LSend(ggg, strlen(ggg));
 8000716:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 800071a:	4618      	mov	r0, r3
 800071c:	f7ff fd16 	bl	800014c <strlen>
 8000720:	4603      	mov	r3, r0
 8000722:	461a      	mov	r2, r3
 8000724:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 8000728:	4611      	mov	r1, r2
 800072a:	4618      	mov	r0, r3
 800072c:	f7ff fd16 	bl	800015c <s800LSend>
			break;
 8000730:	e007      	b.n	8000742 <txATcommand+0x422>
		}
		case 99: {
			ready = true;
 8000732:	4b08      	ldr	r3, [pc, #32]	@ (8000754 <txATcommand+0x434>)
 8000734:	2201      	movs	r2, #1
 8000736:	701a      	strb	r2, [r3, #0]
			s800LSend((uint8_t*)"AT+CFUN=1,1", 22);
 8000738:	2116      	movs	r1, #22
 800073a:	480b      	ldr	r0, [pc, #44]	@ (8000768 <txATcommand+0x448>)
 800073c:	f7ff fd0e 	bl	800015c <s800LSend>
			break;
 8000740:	bf00      	nop
		}
	}
	return;
 8000742:	bf00      	nop
 8000744:	bf00      	nop
}
 8000746:	f507 77a4 	add.w	r7, r7, #328	@ 0x148
 800074a:	46bd      	mov	sp, r7
 800074c:	bd80      	pop	{r7, pc}
 800074e:	bf00      	nop
 8000750:	200008b0 	.word	0x200008b0
 8000754:	200008b8 	.word	0x200008b8
 8000758:	20000038 	.word	0x20000038
 800075c:	08004be0 	.word	0x08004be0
 8000760:	20000008 	.word	0x20000008
 8000764:	08004bf0 	.word	0x08004bf0
 8000768:	08004bf8 	.word	0x08004bf8

0800076c <rxATcommand>:

void rxATcommand(uint8_t* text) {
 800076c:	b580      	push	{r7, lr}
 800076e:	b08a      	sub	sp, #40	@ 0x28
 8000770:	af00      	add	r7, sp, #0
 8000772:	6078      	str	r0, [r7, #4]
	switch (step) {
 8000774:	4bc1      	ldr	r3, [pc, #772]	@ (8000a7c <rxATcommand+0x310>)
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	2b63      	cmp	r3, #99	@ 0x63
 800077a:	f200 8486 	bhi.w	800108a <rxATcommand+0x91e>
 800077e:	a201      	add	r2, pc, #4	@ (adr r2, 8000784 <rxATcommand+0x18>)
 8000780:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000784:	08000915 	.word	0x08000915
 8000788:	0800095f 	.word	0x0800095f
 800078c:	0800098f 	.word	0x0800098f
 8000790:	080009ef 	.word	0x080009ef
 8000794:	08000a0f 	.word	0x08000a0f
 8000798:	08000a45 	.word	0x08000a45
 800079c:	08000aa9 	.word	0x08000aa9
 80007a0:	08000ad1 	.word	0x08000ad1
 80007a4:	08000af9 	.word	0x08000af9
 80007a8:	08000b5b 	.word	0x08000b5b
 80007ac:	08000d93 	.word	0x08000d93
 80007b0:	08000dc5 	.word	0x08000dc5
 80007b4:	08000de9 	.word	0x08000de9
 80007b8:	0800108b 	.word	0x0800108b
 80007bc:	0800108b 	.word	0x0800108b
 80007c0:	0800108b 	.word	0x0800108b
 80007c4:	0800108b 	.word	0x0800108b
 80007c8:	0800108b 	.word	0x0800108b
 80007cc:	0800108b 	.word	0x0800108b
 80007d0:	0800108b 	.word	0x0800108b
 80007d4:	08000e87 	.word	0x08000e87
 80007d8:	08000eaf 	.word	0x08000eaf
 80007dc:	08000f95 	.word	0x08000f95
 80007e0:	08000fa7 	.word	0x08000fa7
 80007e4:	08000fb9 	.word	0x08000fb9
 80007e8:	0800108b 	.word	0x0800108b
 80007ec:	0800108b 	.word	0x0800108b
 80007f0:	0800108b 	.word	0x0800108b
 80007f4:	0800108b 	.word	0x0800108b
 80007f8:	0800108b 	.word	0x0800108b
 80007fc:	0800108b 	.word	0x0800108b
 8000800:	0800108b 	.word	0x0800108b
 8000804:	0800108b 	.word	0x0800108b
 8000808:	0800108b 	.word	0x0800108b
 800080c:	0800108b 	.word	0x0800108b
 8000810:	0800108b 	.word	0x0800108b
 8000814:	0800108b 	.word	0x0800108b
 8000818:	0800108b 	.word	0x0800108b
 800081c:	0800108b 	.word	0x0800108b
 8000820:	0800108b 	.word	0x0800108b
 8000824:	0800108b 	.word	0x0800108b
 8000828:	0800108b 	.word	0x0800108b
 800082c:	0800108b 	.word	0x0800108b
 8000830:	0800108b 	.word	0x0800108b
 8000834:	0800108b 	.word	0x0800108b
 8000838:	0800108b 	.word	0x0800108b
 800083c:	0800108b 	.word	0x0800108b
 8000840:	0800108b 	.word	0x0800108b
 8000844:	0800108b 	.word	0x0800108b
 8000848:	0800108b 	.word	0x0800108b
 800084c:	0800108b 	.word	0x0800108b
 8000850:	0800108b 	.word	0x0800108b
 8000854:	0800108b 	.word	0x0800108b
 8000858:	0800108b 	.word	0x0800108b
 800085c:	0800108b 	.word	0x0800108b
 8000860:	0800108b 	.word	0x0800108b
 8000864:	0800108b 	.word	0x0800108b
 8000868:	0800108b 	.word	0x0800108b
 800086c:	0800108b 	.word	0x0800108b
 8000870:	0800108b 	.word	0x0800108b
 8000874:	0800108b 	.word	0x0800108b
 8000878:	0800108b 	.word	0x0800108b
 800087c:	0800108b 	.word	0x0800108b
 8000880:	0800108b 	.word	0x0800108b
 8000884:	0800108b 	.word	0x0800108b
 8000888:	0800108b 	.word	0x0800108b
 800088c:	0800108b 	.word	0x0800108b
 8000890:	0800108b 	.word	0x0800108b
 8000894:	0800108b 	.word	0x0800108b
 8000898:	0800108b 	.word	0x0800108b
 800089c:	0800108b 	.word	0x0800108b
 80008a0:	0800108b 	.word	0x0800108b
 80008a4:	0800108b 	.word	0x0800108b
 80008a8:	0800108b 	.word	0x0800108b
 80008ac:	0800108b 	.word	0x0800108b
 80008b0:	0800108b 	.word	0x0800108b
 80008b4:	0800108b 	.word	0x0800108b
 80008b8:	0800108b 	.word	0x0800108b
 80008bc:	0800108b 	.word	0x0800108b
 80008c0:	0800108b 	.word	0x0800108b
 80008c4:	0800108b 	.word	0x0800108b
 80008c8:	0800108b 	.word	0x0800108b
 80008cc:	0800108b 	.word	0x0800108b
 80008d0:	0800108b 	.word	0x0800108b
 80008d4:	0800108b 	.word	0x0800108b
 80008d8:	0800108b 	.word	0x0800108b
 80008dc:	0800108b 	.word	0x0800108b
 80008e0:	0800108b 	.word	0x0800108b
 80008e4:	0800108b 	.word	0x0800108b
 80008e8:	0800108b 	.word	0x0800108b
 80008ec:	0800108b 	.word	0x0800108b
 80008f0:	0800108b 	.word	0x0800108b
 80008f4:	0800108b 	.word	0x0800108b
 80008f8:	0800108b 	.word	0x0800108b
 80008fc:	0800108b 	.word	0x0800108b
 8000900:	0800108b 	.word	0x0800108b
 8000904:	0800108b 	.word	0x0800108b
 8000908:	0800108b 	.word	0x0800108b
 800090c:	0800108b 	.word	0x0800108b
 8000910:	08001067 	.word	0x08001067
		case 0: {
			if (strstr((char*)text, (char*)"OK")) {
 8000914:	495a      	ldr	r1, [pc, #360]	@ (8000a80 <rxATcommand+0x314>)
 8000916:	6878      	ldr	r0, [r7, #4]
 8000918:	f003 fcc1 	bl	800429e <strstr>
 800091c:	4603      	mov	r3, r0
 800091e:	2b00      	cmp	r3, #0
 8000920:	d008      	beq.n	8000934 <rxATcommand+0x1c8>
				step++;
 8000922:	4b56      	ldr	r3, [pc, #344]	@ (8000a7c <rxATcommand+0x310>)
 8000924:	681b      	ldr	r3, [r3, #0]
 8000926:	3301      	adds	r3, #1
 8000928:	4a54      	ldr	r2, [pc, #336]	@ (8000a7c <rxATcommand+0x310>)
 800092a:	6013      	str	r3, [r2, #0]
				ready=true;
 800092c:	4b55      	ldr	r3, [pc, #340]	@ (8000a84 <rxATcommand+0x318>)
 800092e:	2201      	movs	r2, #1
 8000930:	701a      	strb	r2, [r3, #0]
			}
			else {
				step=0;
				ready=true;
			}
			break;
 8000932:	e3aa      	b.n	800108a <rxATcommand+0x91e>
			else if (strstr((char*)text, (char*)"CMTI")) {
 8000934:	4954      	ldr	r1, [pc, #336]	@ (8000a88 <rxATcommand+0x31c>)
 8000936:	6878      	ldr	r0, [r7, #4]
 8000938:	f003 fcb1 	bl	800429e <strstr>
 800093c:	4603      	mov	r3, r0
 800093e:	2b00      	cmp	r3, #0
 8000940:	d006      	beq.n	8000950 <rxATcommand+0x1e4>
				step=20;
 8000942:	4b4e      	ldr	r3, [pc, #312]	@ (8000a7c <rxATcommand+0x310>)
 8000944:	2214      	movs	r2, #20
 8000946:	601a      	str	r2, [r3, #0]
				ready=true;
 8000948:	4b4e      	ldr	r3, [pc, #312]	@ (8000a84 <rxATcommand+0x318>)
 800094a:	2201      	movs	r2, #1
 800094c:	701a      	strb	r2, [r3, #0]
			break;
 800094e:	e39c      	b.n	800108a <rxATcommand+0x91e>
				step=0;
 8000950:	4b4a      	ldr	r3, [pc, #296]	@ (8000a7c <rxATcommand+0x310>)
 8000952:	2200      	movs	r2, #0
 8000954:	601a      	str	r2, [r3, #0]
				ready=true;
 8000956:	4b4b      	ldr	r3, [pc, #300]	@ (8000a84 <rxATcommand+0x318>)
 8000958:	2201      	movs	r2, #1
 800095a:	701a      	strb	r2, [r3, #0]
			break;
 800095c:	e395      	b.n	800108a <rxATcommand+0x91e>
		}
		case 1: {
			if (strstr((char*)oldModem3, (char*)"CSQ")) {
 800095e:	494b      	ldr	r1, [pc, #300]	@ (8000a8c <rxATcommand+0x320>)
 8000960:	484b      	ldr	r0, [pc, #300]	@ (8000a90 <rxATcommand+0x324>)
 8000962:	f003 fc9c 	bl	800429e <strstr>
 8000966:	4603      	mov	r3, r0
 8000968:	2b00      	cmp	r3, #0
 800096a:	d00c      	beq.n	8000986 <rxATcommand+0x21a>
				csqlvl[0]=oldModem3[6];
 800096c:	4b48      	ldr	r3, [pc, #288]	@ (8000a90 <rxATcommand+0x324>)
 800096e:	799a      	ldrb	r2, [r3, #6]
 8000970:	4b48      	ldr	r3, [pc, #288]	@ (8000a94 <rxATcommand+0x328>)
 8000972:	701a      	strb	r2, [r3, #0]
				csqlvl[1]=oldModem3[7];
 8000974:	4b46      	ldr	r3, [pc, #280]	@ (8000a90 <rxATcommand+0x324>)
 8000976:	79da      	ldrb	r2, [r3, #7]
 8000978:	4b46      	ldr	r3, [pc, #280]	@ (8000a94 <rxATcommand+0x328>)
 800097a:	705a      	strb	r2, [r3, #1]
				step++;
 800097c:	4b3f      	ldr	r3, [pc, #252]	@ (8000a7c <rxATcommand+0x310>)
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	3301      	adds	r3, #1
 8000982:	4a3e      	ldr	r2, [pc, #248]	@ (8000a7c <rxATcommand+0x310>)
 8000984:	6013      	str	r3, [r2, #0]
			}
			ready=true;
 8000986:	4b3f      	ldr	r3, [pc, #252]	@ (8000a84 <rxATcommand+0x318>)
 8000988:	2201      	movs	r2, #1
 800098a:	701a      	strb	r2, [r3, #0]
			break;
 800098c:	e37d      	b.n	800108a <rxATcommand+0x91e>
		}
		case 2: {
			if (strstr((char*)oldModem3, (char*)"CBC")) {
 800098e:	4942      	ldr	r1, [pc, #264]	@ (8000a98 <rxATcommand+0x32c>)
 8000990:	483f      	ldr	r0, [pc, #252]	@ (8000a90 <rxATcommand+0x324>)
 8000992:	f003 fc84 	bl	800429e <strstr>
 8000996:	4603      	mov	r3, r0
 8000998:	2b00      	cmp	r3, #0
 800099a:	d024      	beq.n	80009e6 <rxATcommand+0x27a>
				bat[0]=oldModem3[8];
 800099c:	4b3c      	ldr	r3, [pc, #240]	@ (8000a90 <rxATcommand+0x324>)
 800099e:	7a1a      	ldrb	r2, [r3, #8]
 80009a0:	4b3e      	ldr	r3, [pc, #248]	@ (8000a9c <rxATcommand+0x330>)
 80009a2:	701a      	strb	r2, [r3, #0]
				bat[1]=oldModem3[9];
 80009a4:	4b3a      	ldr	r3, [pc, #232]	@ (8000a90 <rxATcommand+0x324>)
 80009a6:	7a5a      	ldrb	r2, [r3, #9]
 80009a8:	4b3c      	ldr	r3, [pc, #240]	@ (8000a9c <rxATcommand+0x330>)
 80009aa:	705a      	strb	r2, [r3, #1]
				bat[2]=oldModem3[10];
 80009ac:	4b38      	ldr	r3, [pc, #224]	@ (8000a90 <rxATcommand+0x324>)
 80009ae:	7a9a      	ldrb	r2, [r3, #10]
 80009b0:	4b3a      	ldr	r3, [pc, #232]	@ (8000a9c <rxATcommand+0x330>)
 80009b2:	709a      	strb	r2, [r3, #2]
				bat[3]=oldModem3[11];
 80009b4:	4b36      	ldr	r3, [pc, #216]	@ (8000a90 <rxATcommand+0x324>)
 80009b6:	7ada      	ldrb	r2, [r3, #11]
 80009b8:	4b38      	ldr	r3, [pc, #224]	@ (8000a9c <rxATcommand+0x330>)
 80009ba:	70da      	strb	r2, [r3, #3]
				bat[4]=oldModem3[12];
 80009bc:	4b34      	ldr	r3, [pc, #208]	@ (8000a90 <rxATcommand+0x324>)
 80009be:	7b1a      	ldrb	r2, [r3, #12]
 80009c0:	4b36      	ldr	r3, [pc, #216]	@ (8000a9c <rxATcommand+0x330>)
 80009c2:	711a      	strb	r2, [r3, #4]
				bat[5]=oldModem3[13];
 80009c4:	4b32      	ldr	r3, [pc, #200]	@ (8000a90 <rxATcommand+0x324>)
 80009c6:	7b5a      	ldrb	r2, [r3, #13]
 80009c8:	4b34      	ldr	r3, [pc, #208]	@ (8000a9c <rxATcommand+0x330>)
 80009ca:	715a      	strb	r2, [r3, #5]
				bat[6]=oldModem3[14];
 80009cc:	4b30      	ldr	r3, [pc, #192]	@ (8000a90 <rxATcommand+0x324>)
 80009ce:	7b9a      	ldrb	r2, [r3, #14]
 80009d0:	4b32      	ldr	r3, [pc, #200]	@ (8000a9c <rxATcommand+0x330>)
 80009d2:	719a      	strb	r2, [r3, #6]
				bat[7]=oldModem3[15];
 80009d4:	4b2e      	ldr	r3, [pc, #184]	@ (8000a90 <rxATcommand+0x324>)
 80009d6:	7bda      	ldrb	r2, [r3, #15]
 80009d8:	4b30      	ldr	r3, [pc, #192]	@ (8000a9c <rxATcommand+0x330>)
 80009da:	71da      	strb	r2, [r3, #7]
				step++;
 80009dc:	4b27      	ldr	r3, [pc, #156]	@ (8000a7c <rxATcommand+0x310>)
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	3301      	adds	r3, #1
 80009e2:	4a26      	ldr	r2, [pc, #152]	@ (8000a7c <rxATcommand+0x310>)
 80009e4:	6013      	str	r3, [r2, #0]
			}
			ready=true;
 80009e6:	4b27      	ldr	r3, [pc, #156]	@ (8000a84 <rxATcommand+0x318>)
 80009e8:	2201      	movs	r2, #1
 80009ea:	701a      	strb	r2, [r3, #0]
			break;
 80009ec:	e34d      	b.n	800108a <rxATcommand+0x91e>
		}
		case 3: {
			if (strstr((char*)oldModem3, (char*)"0,1")) step++;
 80009ee:	492c      	ldr	r1, [pc, #176]	@ (8000aa0 <rxATcommand+0x334>)
 80009f0:	4827      	ldr	r0, [pc, #156]	@ (8000a90 <rxATcommand+0x324>)
 80009f2:	f003 fc54 	bl	800429e <strstr>
 80009f6:	4603      	mov	r3, r0
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d004      	beq.n	8000a06 <rxATcommand+0x29a>
 80009fc:	4b1f      	ldr	r3, [pc, #124]	@ (8000a7c <rxATcommand+0x310>)
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	3301      	adds	r3, #1
 8000a02:	4a1e      	ldr	r2, [pc, #120]	@ (8000a7c <rxATcommand+0x310>)
 8000a04:	6013      	str	r3, [r2, #0]
			ready=true;
 8000a06:	4b1f      	ldr	r3, [pc, #124]	@ (8000a84 <rxATcommand+0x318>)
 8000a08:	2201      	movs	r2, #1
 8000a0a:	701a      	strb	r2, [r3, #0]
			break;
 8000a0c:	e33d      	b.n	800108a <rxATcommand+0x91e>
		}
		case 4: {
			if (strstr((char*)text, (char*)"OK")) step++;
 8000a0e:	491c      	ldr	r1, [pc, #112]	@ (8000a80 <rxATcommand+0x314>)
 8000a10:	6878      	ldr	r0, [r7, #4]
 8000a12:	f003 fc44 	bl	800429e <strstr>
 8000a16:	4603      	mov	r3, r0
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d005      	beq.n	8000a28 <rxATcommand+0x2bc>
 8000a1c:	4b17      	ldr	r3, [pc, #92]	@ (8000a7c <rxATcommand+0x310>)
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	3301      	adds	r3, #1
 8000a22:	4a16      	ldr	r2, [pc, #88]	@ (8000a7c <rxATcommand+0x310>)
 8000a24:	6013      	str	r3, [r2, #0]
 8000a26:	e009      	b.n	8000a3c <rxATcommand+0x2d0>
			else if (strstr((char*)text, (char*)"ERROR")) step=10;
 8000a28:	491e      	ldr	r1, [pc, #120]	@ (8000aa4 <rxATcommand+0x338>)
 8000a2a:	6878      	ldr	r0, [r7, #4]
 8000a2c:	f003 fc37 	bl	800429e <strstr>
 8000a30:	4603      	mov	r3, r0
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d002      	beq.n	8000a3c <rxATcommand+0x2d0>
 8000a36:	4b11      	ldr	r3, [pc, #68]	@ (8000a7c <rxATcommand+0x310>)
 8000a38:	220a      	movs	r2, #10
 8000a3a:	601a      	str	r2, [r3, #0]
			ready=true;
 8000a3c:	4b11      	ldr	r3, [pc, #68]	@ (8000a84 <rxATcommand+0x318>)
 8000a3e:	2201      	movs	r2, #1
 8000a40:	701a      	strb	r2, [r3, #0]
			break;
 8000a42:	e322      	b.n	800108a <rxATcommand+0x91e>
		}
		case 5: {
			if (strstr((char*)text, (char*)"OK")) step++;
 8000a44:	490e      	ldr	r1, [pc, #56]	@ (8000a80 <rxATcommand+0x314>)
 8000a46:	6878      	ldr	r0, [r7, #4]
 8000a48:	f003 fc29 	bl	800429e <strstr>
 8000a4c:	4603      	mov	r3, r0
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d005      	beq.n	8000a5e <rxATcommand+0x2f2>
 8000a52:	4b0a      	ldr	r3, [pc, #40]	@ (8000a7c <rxATcommand+0x310>)
 8000a54:	681b      	ldr	r3, [r3, #0]
 8000a56:	3301      	adds	r3, #1
 8000a58:	4a08      	ldr	r2, [pc, #32]	@ (8000a7c <rxATcommand+0x310>)
 8000a5a:	6013      	str	r3, [r2, #0]
 8000a5c:	e009      	b.n	8000a72 <rxATcommand+0x306>
			else if (strstr((char*)text, (char*)"ERROR")) step=10;
 8000a5e:	4911      	ldr	r1, [pc, #68]	@ (8000aa4 <rxATcommand+0x338>)
 8000a60:	6878      	ldr	r0, [r7, #4]
 8000a62:	f003 fc1c 	bl	800429e <strstr>
 8000a66:	4603      	mov	r3, r0
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d002      	beq.n	8000a72 <rxATcommand+0x306>
 8000a6c:	4b03      	ldr	r3, [pc, #12]	@ (8000a7c <rxATcommand+0x310>)
 8000a6e:	220a      	movs	r2, #10
 8000a70:	601a      	str	r2, [r3, #0]
			ready=true;
 8000a72:	4b04      	ldr	r3, [pc, #16]	@ (8000a84 <rxATcommand+0x318>)
 8000a74:	2201      	movs	r2, #1
 8000a76:	701a      	strb	r2, [r3, #0]
			break;
 8000a78:	e307      	b.n	800108a <rxATcommand+0x91e>
 8000a7a:	bf00      	nop
 8000a7c:	200008b0 	.word	0x200008b0
 8000a80:	08004c10 	.word	0x08004c10
 8000a84:	200008b8 	.word	0x200008b8
 8000a88:	08004c14 	.word	0x08004c14
 8000a8c:	08004c1c 	.word	0x08004c1c
 8000a90:	20000670 	.word	0x20000670
 8000a94:	20000010 	.word	0x20000010
 8000a98:	08004c20 	.word	0x08004c20
 8000a9c:	200008bc 	.word	0x200008bc
 8000aa0:	08004c24 	.word	0x08004c24
 8000aa4:	08004c28 	.word	0x08004c28
		}
		case 6: {
			if (strstr((char*)text, (char*)"OK")) step++;
 8000aa8:	499a      	ldr	r1, [pc, #616]	@ (8000d14 <rxATcommand+0x5a8>)
 8000aaa:	6878      	ldr	r0, [r7, #4]
 8000aac:	f003 fbf7 	bl	800429e <strstr>
 8000ab0:	4603      	mov	r3, r0
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d005      	beq.n	8000ac2 <rxATcommand+0x356>
 8000ab6:	4b98      	ldr	r3, [pc, #608]	@ (8000d18 <rxATcommand+0x5ac>)
 8000ab8:	681b      	ldr	r3, [r3, #0]
 8000aba:	3301      	adds	r3, #1
 8000abc:	4a96      	ldr	r2, [pc, #600]	@ (8000d18 <rxATcommand+0x5ac>)
 8000abe:	6013      	str	r3, [r2, #0]
 8000ac0:	e002      	b.n	8000ac8 <rxATcommand+0x35c>
			else step=10;
 8000ac2:	4b95      	ldr	r3, [pc, #596]	@ (8000d18 <rxATcommand+0x5ac>)
 8000ac4:	220a      	movs	r2, #10
 8000ac6:	601a      	str	r2, [r3, #0]
			ready=true;
 8000ac8:	4b94      	ldr	r3, [pc, #592]	@ (8000d1c <rxATcommand+0x5b0>)
 8000aca:	2201      	movs	r2, #1
 8000acc:	701a      	strb	r2, [r3, #0]
			break;
 8000ace:	e2dc      	b.n	800108a <rxATcommand+0x91e>
		}
		case 7: {
			if (strstr((char*)text, (char*)"OK")) step++;
 8000ad0:	4990      	ldr	r1, [pc, #576]	@ (8000d14 <rxATcommand+0x5a8>)
 8000ad2:	6878      	ldr	r0, [r7, #4]
 8000ad4:	f003 fbe3 	bl	800429e <strstr>
 8000ad8:	4603      	mov	r3, r0
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d005      	beq.n	8000aea <rxATcommand+0x37e>
 8000ade:	4b8e      	ldr	r3, [pc, #568]	@ (8000d18 <rxATcommand+0x5ac>)
 8000ae0:	681b      	ldr	r3, [r3, #0]
 8000ae2:	3301      	adds	r3, #1
 8000ae4:	4a8c      	ldr	r2, [pc, #560]	@ (8000d18 <rxATcommand+0x5ac>)
 8000ae6:	6013      	str	r3, [r2, #0]
 8000ae8:	e002      	b.n	8000af0 <rxATcommand+0x384>
			else step=10;
 8000aea:	4b8b      	ldr	r3, [pc, #556]	@ (8000d18 <rxATcommand+0x5ac>)
 8000aec:	220a      	movs	r2, #10
 8000aee:	601a      	str	r2, [r3, #0]
			ready=true;
 8000af0:	4b8a      	ldr	r3, [pc, #552]	@ (8000d1c <rxATcommand+0x5b0>)
 8000af2:	2201      	movs	r2, #1
 8000af4:	701a      	strb	r2, [r3, #0]
			break;
 8000af6:	e2c8      	b.n	800108a <rxATcommand+0x91e>
		}
		case 8: {
			ready=true;
 8000af8:	4b88      	ldr	r3, [pc, #544]	@ (8000d1c <rxATcommand+0x5b0>)
 8000afa:	2201      	movs	r2, #1
 8000afc:	701a      	strb	r2, [r3, #0]
			if (strstr((char*)text, (char*)"200")) step++;
 8000afe:	4988      	ldr	r1, [pc, #544]	@ (8000d20 <rxATcommand+0x5b4>)
 8000b00:	6878      	ldr	r0, [r7, #4]
 8000b02:	f003 fbcc 	bl	800429e <strstr>
 8000b06:	4603      	mov	r3, r0
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d005      	beq.n	8000b18 <rxATcommand+0x3ac>
 8000b0c:	4b82      	ldr	r3, [pc, #520]	@ (8000d18 <rxATcommand+0x5ac>)
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	3301      	adds	r3, #1
 8000b12:	4a81      	ldr	r2, [pc, #516]	@ (8000d18 <rxATcommand+0x5ac>)
 8000b14:	6013      	str	r3, [r2, #0]
			else if (strstr((char*)text, (char*)"0,60")) step=99;
			else if ((strstr((char*)text, (char*)"0,40"))||
					(strstr((char*)text, (char*)"0,50"))) step=10;
			else ready=false;
			break;
 8000b16:	e2b8      	b.n	800108a <rxATcommand+0x91e>
			else if (strstr((char*)text, (char*)"0,60")) step=99;
 8000b18:	4982      	ldr	r1, [pc, #520]	@ (8000d24 <rxATcommand+0x5b8>)
 8000b1a:	6878      	ldr	r0, [r7, #4]
 8000b1c:	f003 fbbf 	bl	800429e <strstr>
 8000b20:	4603      	mov	r3, r0
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d003      	beq.n	8000b2e <rxATcommand+0x3c2>
 8000b26:	4b7c      	ldr	r3, [pc, #496]	@ (8000d18 <rxATcommand+0x5ac>)
 8000b28:	2263      	movs	r2, #99	@ 0x63
 8000b2a:	601a      	str	r2, [r3, #0]
			break;
 8000b2c:	e2ad      	b.n	800108a <rxATcommand+0x91e>
			else if ((strstr((char*)text, (char*)"0,40"))||
 8000b2e:	497e      	ldr	r1, [pc, #504]	@ (8000d28 <rxATcommand+0x5bc>)
 8000b30:	6878      	ldr	r0, [r7, #4]
 8000b32:	f003 fbb4 	bl	800429e <strstr>
 8000b36:	4603      	mov	r3, r0
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d106      	bne.n	8000b4a <rxATcommand+0x3de>
					(strstr((char*)text, (char*)"0,50"))) step=10;
 8000b3c:	497b      	ldr	r1, [pc, #492]	@ (8000d2c <rxATcommand+0x5c0>)
 8000b3e:	6878      	ldr	r0, [r7, #4]
 8000b40:	f003 fbad 	bl	800429e <strstr>
 8000b44:	4603      	mov	r3, r0
			else if ((strstr((char*)text, (char*)"0,40"))||
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d003      	beq.n	8000b52 <rxATcommand+0x3e6>
					(strstr((char*)text, (char*)"0,50"))) step=10;
 8000b4a:	4b73      	ldr	r3, [pc, #460]	@ (8000d18 <rxATcommand+0x5ac>)
 8000b4c:	220a      	movs	r2, #10
 8000b4e:	601a      	str	r2, [r3, #0]
			break;
 8000b50:	e29b      	b.n	800108a <rxATcommand+0x91e>
			else ready=false;
 8000b52:	4b72      	ldr	r3, [pc, #456]	@ (8000d1c <rxATcommand+0x5b0>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	701a      	strb	r2, [r3, #0]
			break;
 8000b58:	e297      	b.n	800108a <rxATcommand+0x91e>
		}
		case 9: {
			if (!answ) {
 8000b5a:	4b75      	ldr	r3, [pc, #468]	@ (8000d30 <rxATcommand+0x5c4>)
 8000b5c:	781b      	ldrb	r3, [r3, #0]
 8000b5e:	f083 0301 	eor.w	r3, r3, #1
 8000b62:	b2db      	uxtb	r3, r3
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	f000 80c8 	beq.w	8000cfa <rxATcommand+0x58e>
				if (strstr((char*)text, (char*)"OK")) {
 8000b6a:	496a      	ldr	r1, [pc, #424]	@ (8000d14 <rxATcommand+0x5a8>)
 8000b6c:	6878      	ldr	r0, [r7, #4]
 8000b6e:	f003 fb96 	bl	800429e <strstr>
 8000b72:	4603      	mov	r3, r0
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	f000 80b6 	beq.w	8000ce6 <rxATcommand+0x57a>
					if (checkPhones) {
 8000b7a:	4b6e      	ldr	r3, [pc, #440]	@ (8000d34 <rxATcommand+0x5c8>)
 8000b7c:	781b      	ldrb	r3, [r3, #0]
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d04e      	beq.n	8000c20 <rxATcommand+0x4b4>
						if (strstr((char*)oldModem2, (char*)"t1"))
 8000b82:	496d      	ldr	r1, [pc, #436]	@ (8000d38 <rxATcommand+0x5cc>)
 8000b84:	486d      	ldr	r0, [pc, #436]	@ (8000d3c <rxATcommand+0x5d0>)
 8000b86:	f003 fb8a 	bl	800429e <strstr>
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d011      	beq.n	8000bb4 <rxATcommand+0x448>
							for (int i = 0; i<11; i++) tnumber1[i] = oldModem2[i+7];
 8000b90:	2300      	movs	r3, #0
 8000b92:	627b      	str	r3, [r7, #36]	@ 0x24
 8000b94:	e00b      	b.n	8000bae <rxATcommand+0x442>
 8000b96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b98:	3307      	adds	r3, #7
 8000b9a:	4a68      	ldr	r2, [pc, #416]	@ (8000d3c <rxATcommand+0x5d0>)
 8000b9c:	5cd1      	ldrb	r1, [r2, r3]
 8000b9e:	4a68      	ldr	r2, [pc, #416]	@ (8000d40 <rxATcommand+0x5d4>)
 8000ba0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ba2:	4413      	add	r3, r2
 8000ba4:	460a      	mov	r2, r1
 8000ba6:	701a      	strb	r2, [r3, #0]
 8000ba8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000baa:	3301      	adds	r3, #1
 8000bac:	627b      	str	r3, [r7, #36]	@ 0x24
 8000bae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000bb0:	2b0a      	cmp	r3, #10
 8000bb2:	ddf0      	ble.n	8000b96 <rxATcommand+0x42a>
						if (strstr((char*)oldModem2, (char*)"t2"))
 8000bb4:	4963      	ldr	r1, [pc, #396]	@ (8000d44 <rxATcommand+0x5d8>)
 8000bb6:	4861      	ldr	r0, [pc, #388]	@ (8000d3c <rxATcommand+0x5d0>)
 8000bb8:	f003 fb71 	bl	800429e <strstr>
 8000bbc:	4603      	mov	r3, r0
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d011      	beq.n	8000be6 <rxATcommand+0x47a>
							for (int i = 0; i<11; i++) tnumber2[i] = oldModem2[i+26];
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	623b      	str	r3, [r7, #32]
 8000bc6:	e00b      	b.n	8000be0 <rxATcommand+0x474>
 8000bc8:	6a3b      	ldr	r3, [r7, #32]
 8000bca:	331a      	adds	r3, #26
 8000bcc:	4a5b      	ldr	r2, [pc, #364]	@ (8000d3c <rxATcommand+0x5d0>)
 8000bce:	5cd1      	ldrb	r1, [r2, r3]
 8000bd0:	4a5d      	ldr	r2, [pc, #372]	@ (8000d48 <rxATcommand+0x5dc>)
 8000bd2:	6a3b      	ldr	r3, [r7, #32]
 8000bd4:	4413      	add	r3, r2
 8000bd6:	460a      	mov	r2, r1
 8000bd8:	701a      	strb	r2, [r3, #0]
 8000bda:	6a3b      	ldr	r3, [r7, #32]
 8000bdc:	3301      	adds	r3, #1
 8000bde:	623b      	str	r3, [r7, #32]
 8000be0:	6a3b      	ldr	r3, [r7, #32]
 8000be2:	2b0a      	cmp	r3, #10
 8000be4:	ddf0      	ble.n	8000bc8 <rxATcommand+0x45c>
						if (strstr((char*)oldModem2, (char*)"t3"))
 8000be6:	4959      	ldr	r1, [pc, #356]	@ (8000d4c <rxATcommand+0x5e0>)
 8000be8:	4854      	ldr	r0, [pc, #336]	@ (8000d3c <rxATcommand+0x5d0>)
 8000bea:	f003 fb58 	bl	800429e <strstr>
 8000bee:	4603      	mov	r3, r0
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d011      	beq.n	8000c18 <rxATcommand+0x4ac>
							for (int i = 0; i<11; i++) tnumber3[i] = oldModem2[i+45];
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	61fb      	str	r3, [r7, #28]
 8000bf8:	e00b      	b.n	8000c12 <rxATcommand+0x4a6>
 8000bfa:	69fb      	ldr	r3, [r7, #28]
 8000bfc:	332d      	adds	r3, #45	@ 0x2d
 8000bfe:	4a4f      	ldr	r2, [pc, #316]	@ (8000d3c <rxATcommand+0x5d0>)
 8000c00:	5cd1      	ldrb	r1, [r2, r3]
 8000c02:	4a53      	ldr	r2, [pc, #332]	@ (8000d50 <rxATcommand+0x5e4>)
 8000c04:	69fb      	ldr	r3, [r7, #28]
 8000c06:	4413      	add	r3, r2
 8000c08:	460a      	mov	r2, r1
 8000c0a:	701a      	strb	r2, [r3, #0]
 8000c0c:	69fb      	ldr	r3, [r7, #28]
 8000c0e:	3301      	adds	r3, #1
 8000c10:	61fb      	str	r3, [r7, #28]
 8000c12:	69fb      	ldr	r3, [r7, #28]
 8000c14:	2b0a      	cmp	r3, #10
 8000c16:	ddf0      	ble.n	8000bfa <rxATcommand+0x48e>
						checkPhones = false;
 8000c18:	4b46      	ldr	r3, [pc, #280]	@ (8000d34 <rxATcommand+0x5c8>)
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	701a      	strb	r2, [r3, #0]
 8000c1e:	e05e      	b.n	8000cde <rxATcommand+0x572>
					}
					else if (strstr((char*)oldModem2, "phones")) {
 8000c20:	494c      	ldr	r1, [pc, #304]	@ (8000d54 <rxATcommand+0x5e8>)
 8000c22:	4846      	ldr	r0, [pc, #280]	@ (8000d3c <rxATcommand+0x5d0>)
 8000c24:	f003 fb3b 	bl	800429e <strstr>
 8000c28:	4603      	mov	r3, r0
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d006      	beq.n	8000c3c <rxATcommand+0x4d0>
						checkPhones = true;
 8000c2e:	4b41      	ldr	r3, [pc, #260]	@ (8000d34 <rxATcommand+0x5c8>)
 8000c30:	2201      	movs	r2, #1
 8000c32:	701a      	strb	r2, [r3, #0]
						answ = false;
 8000c34:	4b3e      	ldr	r3, [pc, #248]	@ (8000d30 <rxATcommand+0x5c4>)
 8000c36:	2200      	movs	r2, #0
 8000c38:	701a      	strb	r2, [r3, #0]
 8000c3a:	e050      	b.n	8000cde <rxATcommand+0x572>
					}
					else if (strstr((char*)oldModem2, "res")) {
 8000c3c:	4946      	ldr	r1, [pc, #280]	@ (8000d58 <rxATcommand+0x5ec>)
 8000c3e:	483f      	ldr	r0, [pc, #252]	@ (8000d3c <rxATcommand+0x5d0>)
 8000c40:	f003 fb2d 	bl	800429e <strstr>
 8000c44:	4603      	mov	r3, r0
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d049      	beq.n	8000cde <rxATcommand+0x572>
						if (oldModem2[6]=='t') {
 8000c4a:	4b3c      	ldr	r3, [pc, #240]	@ (8000d3c <rxATcommand+0x5d0>)
 8000c4c:	799b      	ldrb	r3, [r3, #6]
 8000c4e:	2b74      	cmp	r3, #116	@ 0x74
 8000c50:	d112      	bne.n	8000c78 <rxATcommand+0x50c>
							memset(smsText, 0, strlen(smsText));
 8000c52:	4842      	ldr	r0, [pc, #264]	@ (8000d5c <rxATcommand+0x5f0>)
 8000c54:	f7ff fa7a 	bl	800014c <strlen>
 8000c58:	4603      	mov	r3, r0
 8000c5a:	461a      	mov	r2, r3
 8000c5c:	2100      	movs	r1, #0
 8000c5e:	483f      	ldr	r0, [pc, #252]	@ (8000d5c <rxATcommand+0x5f0>)
 8000c60:	f003 fb08 	bl	8004274 <memset>
							buttStart();
 8000c64:	f7ff fac8 	bl	80001f8 <buttStart>
							strcpy(smsText, (uint8_t*)"Start");
 8000c68:	4b3c      	ldr	r3, [pc, #240]	@ (8000d5c <rxATcommand+0x5f0>)
 8000c6a:	4a3d      	ldr	r2, [pc, #244]	@ (8000d60 <rxATcommand+0x5f4>)
 8000c6c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000c70:	6018      	str	r0, [r3, #0]
 8000c72:	3304      	adds	r3, #4
 8000c74:	8019      	strh	r1, [r3, #0]
 8000c76:	e02f      	b.n	8000cd8 <rxATcommand+0x56c>
						}
						else if (oldModem2[17]=='t') {
 8000c78:	4b30      	ldr	r3, [pc, #192]	@ (8000d3c <rxATcommand+0x5d0>)
 8000c7a:	7c5b      	ldrb	r3, [r3, #17]
 8000c7c:	2b74      	cmp	r3, #116	@ 0x74
 8000c7e:	d112      	bne.n	8000ca6 <rxATcommand+0x53a>
							memset(smsText, 0, strlen(smsText));
 8000c80:	4836      	ldr	r0, [pc, #216]	@ (8000d5c <rxATcommand+0x5f0>)
 8000c82:	f7ff fa63 	bl	800014c <strlen>
 8000c86:	4603      	mov	r3, r0
 8000c88:	461a      	mov	r2, r3
 8000c8a:	2100      	movs	r1, #0
 8000c8c:	4833      	ldr	r0, [pc, #204]	@ (8000d5c <rxATcommand+0x5f0>)
 8000c8e:	f003 faf1 	bl	8004274 <memset>
							buttOpen();
 8000c92:	f7ff fad5 	bl	8000240 <buttOpen>
							strcpy(smsText, (uint8_t*)"Open");
 8000c96:	4b31      	ldr	r3, [pc, #196]	@ (8000d5c <rxATcommand+0x5f0>)
 8000c98:	4a32      	ldr	r2, [pc, #200]	@ (8000d64 <rxATcommand+0x5f8>)
 8000c9a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000c9e:	6018      	str	r0, [r3, #0]
 8000ca0:	3304      	adds	r3, #4
 8000ca2:	7019      	strb	r1, [r3, #0]
 8000ca4:	e018      	b.n	8000cd8 <rxATcommand+0x56c>
						}
						else if (oldModem2[28]=='t') {
 8000ca6:	4b25      	ldr	r3, [pc, #148]	@ (8000d3c <rxATcommand+0x5d0>)
 8000ca8:	7f1b      	ldrb	r3, [r3, #28]
 8000caa:	2b74      	cmp	r3, #116	@ 0x74
 8000cac:	d114      	bne.n	8000cd8 <rxATcommand+0x56c>
							memset(smsText, 0, strlen(smsText));
 8000cae:	482b      	ldr	r0, [pc, #172]	@ (8000d5c <rxATcommand+0x5f0>)
 8000cb0:	f7ff fa4c 	bl	800014c <strlen>
 8000cb4:	4603      	mov	r3, r0
 8000cb6:	461a      	mov	r2, r3
 8000cb8:	2100      	movs	r1, #0
 8000cba:	4828      	ldr	r0, [pc, #160]	@ (8000d5c <rxATcommand+0x5f0>)
 8000cbc:	f003 fada 	bl	8004274 <memset>
							buttClose();
 8000cc0:	f7ff faf6 	bl	80002b0 <buttClose>
							strcpy(smsText, (uint8_t*)"Closed");
 8000cc4:	4b25      	ldr	r3, [pc, #148]	@ (8000d5c <rxATcommand+0x5f0>)
 8000cc6:	4a28      	ldr	r2, [pc, #160]	@ (8000d68 <rxATcommand+0x5fc>)
 8000cc8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000ccc:	6018      	str	r0, [r3, #0]
 8000cce:	3304      	adds	r3, #4
 8000cd0:	8019      	strh	r1, [r3, #0]
 8000cd2:	3302      	adds	r3, #2
 8000cd4:	0c0a      	lsrs	r2, r1, #16
 8000cd6:	701a      	strb	r2, [r3, #0]
						}
						answ = true;
 8000cd8:	4b15      	ldr	r3, [pc, #84]	@ (8000d30 <rxATcommand+0x5c4>)
 8000cda:	2201      	movs	r2, #1
 8000cdc:	701a      	strb	r2, [r3, #0]
					}
					step=7;
 8000cde:	4b0e      	ldr	r3, [pc, #56]	@ (8000d18 <rxATcommand+0x5ac>)
 8000ce0:	2207      	movs	r2, #7
 8000ce2:	601a      	str	r2, [r3, #0]
 8000ce4:	e005      	b.n	8000cf2 <rxATcommand+0x586>
				}
				else {
					step=10;
 8000ce6:	4b0c      	ldr	r3, [pc, #48]	@ (8000d18 <rxATcommand+0x5ac>)
 8000ce8:	220a      	movs	r2, #10
 8000cea:	601a      	str	r2, [r3, #0]
					answ = false;
 8000cec:	4b10      	ldr	r3, [pc, #64]	@ (8000d30 <rxATcommand+0x5c4>)
 8000cee:	2200      	movs	r2, #0
 8000cf0:	701a      	strb	r2, [r3, #0]
				}
				ready=true;
 8000cf2:	4b0a      	ldr	r3, [pc, #40]	@ (8000d1c <rxATcommand+0x5b0>)
 8000cf4:	2201      	movs	r2, #1
 8000cf6:	701a      	strb	r2, [r3, #0]
				else step=10;
				answ = false;
				ready=true;
				memset(smsText, 0, strlen(smsText));
			}
			break;
 8000cf8:	e1c7      	b.n	800108a <rxATcommand+0x91e>
				if (strstr((char*)text, (char*)"OK")) step++;
 8000cfa:	4906      	ldr	r1, [pc, #24]	@ (8000d14 <rxATcommand+0x5a8>)
 8000cfc:	6878      	ldr	r0, [r7, #4]
 8000cfe:	f003 face 	bl	800429e <strstr>
 8000d02:	4603      	mov	r3, r0
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d031      	beq.n	8000d6c <rxATcommand+0x600>
 8000d08:	4b03      	ldr	r3, [pc, #12]	@ (8000d18 <rxATcommand+0x5ac>)
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	3301      	adds	r3, #1
 8000d0e:	4a02      	ldr	r2, [pc, #8]	@ (8000d18 <rxATcommand+0x5ac>)
 8000d10:	6013      	str	r3, [r2, #0]
 8000d12:	e02e      	b.n	8000d72 <rxATcommand+0x606>
 8000d14:	08004c10 	.word	0x08004c10
 8000d18:	200008b0 	.word	0x200008b0
 8000d1c:	200008b8 	.word	0x200008b8
 8000d20:	08004c30 	.word	0x08004c30
 8000d24:	08004c34 	.word	0x08004c34
 8000d28:	08004c3c 	.word	0x08004c3c
 8000d2c:	08004c44 	.word	0x08004c44
 8000d30:	200008b9 	.word	0x200008b9
 8000d34:	20000054 	.word	0x20000054
 8000d38:	08004c4c 	.word	0x08004c4c
 8000d3c:	20000574 	.word	0x20000574
 8000d40:	20000014 	.word	0x20000014
 8000d44:	08004c50 	.word	0x08004c50
 8000d48:	20000020 	.word	0x20000020
 8000d4c:	08004c54 	.word	0x08004c54
 8000d50:	2000002c 	.word	0x2000002c
 8000d54:	08004c58 	.word	0x08004c58
 8000d58:	08004c60 	.word	0x08004c60
 8000d5c:	20000008 	.word	0x20000008
 8000d60:	08004c64 	.word	0x08004c64
 8000d64:	08004c6c 	.word	0x08004c6c
 8000d68:	08004c74 	.word	0x08004c74
				else step=10;
 8000d6c:	4b9c      	ldr	r3, [pc, #624]	@ (8000fe0 <rxATcommand+0x874>)
 8000d6e:	220a      	movs	r2, #10
 8000d70:	601a      	str	r2, [r3, #0]
				answ = false;
 8000d72:	4b9c      	ldr	r3, [pc, #624]	@ (8000fe4 <rxATcommand+0x878>)
 8000d74:	2200      	movs	r2, #0
 8000d76:	701a      	strb	r2, [r3, #0]
				ready=true;
 8000d78:	4b9b      	ldr	r3, [pc, #620]	@ (8000fe8 <rxATcommand+0x87c>)
 8000d7a:	2201      	movs	r2, #1
 8000d7c:	701a      	strb	r2, [r3, #0]
				memset(smsText, 0, strlen(smsText));
 8000d7e:	489b      	ldr	r0, [pc, #620]	@ (8000fec <rxATcommand+0x880>)
 8000d80:	f7ff f9e4 	bl	800014c <strlen>
 8000d84:	4603      	mov	r3, r0
 8000d86:	461a      	mov	r2, r3
 8000d88:	2100      	movs	r1, #0
 8000d8a:	4898      	ldr	r0, [pc, #608]	@ (8000fec <rxATcommand+0x880>)
 8000d8c:	f003 fa72 	bl	8004274 <memset>
			break;
 8000d90:	e17b      	b.n	800108a <rxATcommand+0x91e>
		}
		case 10: {
			if (strstr((char*)text, (char*)"OK")) step=11;
 8000d92:	4997      	ldr	r1, [pc, #604]	@ (8000ff0 <rxATcommand+0x884>)
 8000d94:	6878      	ldr	r0, [r7, #4]
 8000d96:	f003 fa82 	bl	800429e <strstr>
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d003      	beq.n	8000da8 <rxATcommand+0x63c>
 8000da0:	4b8f      	ldr	r3, [pc, #572]	@ (8000fe0 <rxATcommand+0x874>)
 8000da2:	220b      	movs	r2, #11
 8000da4:	601a      	str	r2, [r3, #0]
 8000da6:	e009      	b.n	8000dbc <rxATcommand+0x650>
			else if (strstr((char*)text, (char*)"ERROR")) step=11;
 8000da8:	4992      	ldr	r1, [pc, #584]	@ (8000ff4 <rxATcommand+0x888>)
 8000daa:	6878      	ldr	r0, [r7, #4]
 8000dac:	f003 fa77 	bl	800429e <strstr>
 8000db0:	4603      	mov	r3, r0
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d002      	beq.n	8000dbc <rxATcommand+0x650>
 8000db6:	4b8a      	ldr	r3, [pc, #552]	@ (8000fe0 <rxATcommand+0x874>)
 8000db8:	220b      	movs	r2, #11
 8000dba:	601a      	str	r2, [r3, #0]
			ready=true;
 8000dbc:	4b8a      	ldr	r3, [pc, #552]	@ (8000fe8 <rxATcommand+0x87c>)
 8000dbe:	2201      	movs	r2, #1
 8000dc0:	701a      	strb	r2, [r3, #0]
			break;
 8000dc2:	e162      	b.n	800108a <rxATcommand+0x91e>
		}
		case 11: {
			if (strstr((char*)text, (char*)"OK")) step=12;
 8000dc4:	498a      	ldr	r1, [pc, #552]	@ (8000ff0 <rxATcommand+0x884>)
 8000dc6:	6878      	ldr	r0, [r7, #4]
 8000dc8:	f003 fa69 	bl	800429e <strstr>
 8000dcc:	4603      	mov	r3, r0
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d003      	beq.n	8000dda <rxATcommand+0x66e>
 8000dd2:	4b83      	ldr	r3, [pc, #524]	@ (8000fe0 <rxATcommand+0x874>)
 8000dd4:	220c      	movs	r2, #12
 8000dd6:	601a      	str	r2, [r3, #0]
 8000dd8:	e002      	b.n	8000de0 <rxATcommand+0x674>
			else step=0;
 8000dda:	4b81      	ldr	r3, [pc, #516]	@ (8000fe0 <rxATcommand+0x874>)
 8000ddc:	2200      	movs	r2, #0
 8000dde:	601a      	str	r2, [r3, #0]
			ready=true;
 8000de0:	4b81      	ldr	r3, [pc, #516]	@ (8000fe8 <rxATcommand+0x87c>)
 8000de2:	2201      	movs	r2, #1
 8000de4:	701a      	strb	r2, [r3, #0]
			break;
 8000de6:	e150      	b.n	800108a <rxATcommand+0x91e>
		}
		case 12: {
			if (strstr((char*)text, (char*)"CMTI")) {
 8000de8:	4983      	ldr	r1, [pc, #524]	@ (8000ff8 <rxATcommand+0x88c>)
 8000dea:	6878      	ldr	r0, [r7, #4]
 8000dec:	f003 fa57 	bl	800429e <strstr>
 8000df0:	4603      	mov	r3, r0
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d040      	beq.n	8000e78 <rxATcommand+0x70c>
				bool start = false;
 8000df6:	2300      	movs	r3, #0
 8000df8:	76fb      	strb	r3, [r7, #27]
				int j = 0;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	617b      	str	r3, [r7, #20]
				for (int i = 0; i<250; i++) {
 8000dfe:	2300      	movs	r3, #0
 8000e00:	613b      	str	r3, [r7, #16]
 8000e02:	e032      	b.n	8000e6a <rxATcommand+0x6fe>
					if (start) {
 8000e04:	7efb      	ldrb	r3, [r7, #27]
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d024      	beq.n	8000e54 <rxATcommand+0x6e8>
						if ((text[i]=='\r')||(text[i]=='\n')||(text[i]=='\0')) {
 8000e0a:	693b      	ldr	r3, [r7, #16]
 8000e0c:	687a      	ldr	r2, [r7, #4]
 8000e0e:	4413      	add	r3, r2
 8000e10:	781b      	ldrb	r3, [r3, #0]
 8000e12:	2b0d      	cmp	r3, #13
 8000e14:	d00b      	beq.n	8000e2e <rxATcommand+0x6c2>
 8000e16:	693b      	ldr	r3, [r7, #16]
 8000e18:	687a      	ldr	r2, [r7, #4]
 8000e1a:	4413      	add	r3, r2
 8000e1c:	781b      	ldrb	r3, [r3, #0]
 8000e1e:	2b0a      	cmp	r3, #10
 8000e20:	d005      	beq.n	8000e2e <rxATcommand+0x6c2>
 8000e22:	693b      	ldr	r3, [r7, #16]
 8000e24:	687a      	ldr	r2, [r7, #4]
 8000e26:	4413      	add	r3, r2
 8000e28:	781b      	ldrb	r3, [r3, #0]
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d105      	bne.n	8000e3a <rxATcommand+0x6ce>
							smsNum[j]='!';  //стоп-символ
 8000e2e:	4a73      	ldr	r2, [pc, #460]	@ (8000ffc <rxATcommand+0x890>)
 8000e30:	697b      	ldr	r3, [r7, #20]
 8000e32:	4413      	add	r3, r2
 8000e34:	2221      	movs	r2, #33	@ 0x21
 8000e36:	701a      	strb	r2, [r3, #0]
							break;
 8000e38:	e01a      	b.n	8000e70 <rxATcommand+0x704>
						}
						else {
							smsNum[j]=text[i];
 8000e3a:	693b      	ldr	r3, [r7, #16]
 8000e3c:	687a      	ldr	r2, [r7, #4]
 8000e3e:	4413      	add	r3, r2
 8000e40:	7819      	ldrb	r1, [r3, #0]
 8000e42:	4a6e      	ldr	r2, [pc, #440]	@ (8000ffc <rxATcommand+0x890>)
 8000e44:	697b      	ldr	r3, [r7, #20]
 8000e46:	4413      	add	r3, r2
 8000e48:	460a      	mov	r2, r1
 8000e4a:	701a      	strb	r2, [r3, #0]
							j++;
 8000e4c:	697b      	ldr	r3, [r7, #20]
 8000e4e:	3301      	adds	r3, #1
 8000e50:	617b      	str	r3, [r7, #20]
 8000e52:	e007      	b.n	8000e64 <rxATcommand+0x6f8>
						}
					}
					else if (text[i]==',') start = true;
 8000e54:	693b      	ldr	r3, [r7, #16]
 8000e56:	687a      	ldr	r2, [r7, #4]
 8000e58:	4413      	add	r3, r2
 8000e5a:	781b      	ldrb	r3, [r3, #0]
 8000e5c:	2b2c      	cmp	r3, #44	@ 0x2c
 8000e5e:	d101      	bne.n	8000e64 <rxATcommand+0x6f8>
 8000e60:	2301      	movs	r3, #1
 8000e62:	76fb      	strb	r3, [r7, #27]
				for (int i = 0; i<250; i++) {
 8000e64:	693b      	ldr	r3, [r7, #16]
 8000e66:	3301      	adds	r3, #1
 8000e68:	613b      	str	r3, [r7, #16]
 8000e6a:	693b      	ldr	r3, [r7, #16]
 8000e6c:	2bf9      	cmp	r3, #249	@ 0xf9
 8000e6e:	ddc9      	ble.n	8000e04 <rxATcommand+0x698>
				}
				step=20;
 8000e70:	4b5b      	ldr	r3, [pc, #364]	@ (8000fe0 <rxATcommand+0x874>)
 8000e72:	2214      	movs	r2, #20
 8000e74:	601a      	str	r2, [r3, #0]
 8000e76:	e002      	b.n	8000e7e <rxATcommand+0x712>
			}
			else step=12;
 8000e78:	4b59      	ldr	r3, [pc, #356]	@ (8000fe0 <rxATcommand+0x874>)
 8000e7a:	220c      	movs	r2, #12
 8000e7c:	601a      	str	r2, [r3, #0]
			ready=true;
 8000e7e:	4b5a      	ldr	r3, [pc, #360]	@ (8000fe8 <rxATcommand+0x87c>)
 8000e80:	2201      	movs	r2, #1
 8000e82:	701a      	strb	r2, [r3, #0]
			break;
 8000e84:	e101      	b.n	800108a <rxATcommand+0x91e>
		}
		case 20: {
			if (strstr((char*)text, (char*)"OK")) step++;
 8000e86:	495a      	ldr	r1, [pc, #360]	@ (8000ff0 <rxATcommand+0x884>)
 8000e88:	6878      	ldr	r0, [r7, #4]
 8000e8a:	f003 fa08 	bl	800429e <strstr>
 8000e8e:	4603      	mov	r3, r0
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d005      	beq.n	8000ea0 <rxATcommand+0x734>
 8000e94:	4b52      	ldr	r3, [pc, #328]	@ (8000fe0 <rxATcommand+0x874>)
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	3301      	adds	r3, #1
 8000e9a:	4a51      	ldr	r2, [pc, #324]	@ (8000fe0 <rxATcommand+0x874>)
 8000e9c:	6013      	str	r3, [r2, #0]
 8000e9e:	e002      	b.n	8000ea6 <rxATcommand+0x73a>
			else step=12;
 8000ea0:	4b4f      	ldr	r3, [pc, #316]	@ (8000fe0 <rxATcommand+0x874>)
 8000ea2:	220c      	movs	r2, #12
 8000ea4:	601a      	str	r2, [r3, #0]
			ready=true;
 8000ea6:	4b50      	ldr	r3, [pc, #320]	@ (8000fe8 <rxATcommand+0x87c>)
 8000ea8:	2201      	movs	r2, #1
 8000eaa:	701a      	strb	r2, [r3, #0]
			break;
 8000eac:	e0ed      	b.n	800108a <rxATcommand+0x91e>
		}
		case 21: {
			memset(smsText, 0, sizeof(smsText));
 8000eae:	2206      	movs	r2, #6
 8000eb0:	2100      	movs	r1, #0
 8000eb2:	484e      	ldr	r0, [pc, #312]	@ (8000fec <rxATcommand+0x880>)
 8000eb4:	f003 f9de 	bl	8004274 <memset>
			strcpy(smsText, oldModem3);
 8000eb8:	4951      	ldr	r1, [pc, #324]	@ (8001000 <rxATcommand+0x894>)
 8000eba:	484c      	ldr	r0, [pc, #304]	@ (8000fec <rxATcommand+0x880>)
 8000ebc:	f003 fa42 	bl	8004344 <strcpy>
			bool numberCorrect = false;
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	73fb      	strb	r3, [r7, #15]
			if (strstr((char*)oldModem4, (char*)tnumber1)) {
 8000ec4:	494f      	ldr	r1, [pc, #316]	@ (8001004 <rxATcommand+0x898>)
 8000ec6:	4850      	ldr	r0, [pc, #320]	@ (8001008 <rxATcommand+0x89c>)
 8000ec8:	f003 f9e9 	bl	800429e <strstr>
 8000ecc:	4603      	mov	r3, r0
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d007      	beq.n	8000ee2 <rxATcommand+0x776>
				numberCorrect=true;
 8000ed2:	2301      	movs	r3, #1
 8000ed4:	73fb      	strb	r3, [r7, #15]
				sprintf(backNumber, "%s", tnumber1);
 8000ed6:	4a4b      	ldr	r2, [pc, #300]	@ (8001004 <rxATcommand+0x898>)
 8000ed8:	494c      	ldr	r1, [pc, #304]	@ (800100c <rxATcommand+0x8a0>)
 8000eda:	484d      	ldr	r0, [pc, #308]	@ (8001010 <rxATcommand+0x8a4>)
 8000edc:	f003 f9aa 	bl	8004234 <siprintf>
 8000ee0:	e01c      	b.n	8000f1c <rxATcommand+0x7b0>
			}
			else if (strstr((char*)oldModem4, (char*)tnumber2)) {
 8000ee2:	494c      	ldr	r1, [pc, #304]	@ (8001014 <rxATcommand+0x8a8>)
 8000ee4:	4848      	ldr	r0, [pc, #288]	@ (8001008 <rxATcommand+0x89c>)
 8000ee6:	f003 f9da 	bl	800429e <strstr>
 8000eea:	4603      	mov	r3, r0
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d007      	beq.n	8000f00 <rxATcommand+0x794>
				numberCorrect=true;
 8000ef0:	2301      	movs	r3, #1
 8000ef2:	73fb      	strb	r3, [r7, #15]
				sprintf(backNumber, "%s", tnumber2);
 8000ef4:	4a47      	ldr	r2, [pc, #284]	@ (8001014 <rxATcommand+0x8a8>)
 8000ef6:	4945      	ldr	r1, [pc, #276]	@ (800100c <rxATcommand+0x8a0>)
 8000ef8:	4845      	ldr	r0, [pc, #276]	@ (8001010 <rxATcommand+0x8a4>)
 8000efa:	f003 f99b 	bl	8004234 <siprintf>
 8000efe:	e00d      	b.n	8000f1c <rxATcommand+0x7b0>
			}
			else if (strstr((char*)oldModem4, (char*)tnumber3)) {
 8000f00:	4945      	ldr	r1, [pc, #276]	@ (8001018 <rxATcommand+0x8ac>)
 8000f02:	4841      	ldr	r0, [pc, #260]	@ (8001008 <rxATcommand+0x89c>)
 8000f04:	f003 f9cb 	bl	800429e <strstr>
 8000f08:	4603      	mov	r3, r0
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d006      	beq.n	8000f1c <rxATcommand+0x7b0>
				numberCorrect=true;
 8000f0e:	2301      	movs	r3, #1
 8000f10:	73fb      	strb	r3, [r7, #15]
				sprintf(backNumber, "%s", tnumber3);
 8000f12:	4a41      	ldr	r2, [pc, #260]	@ (8001018 <rxATcommand+0x8ac>)
 8000f14:	493d      	ldr	r1, [pc, #244]	@ (800100c <rxATcommand+0x8a0>)
 8000f16:	483e      	ldr	r0, [pc, #248]	@ (8001010 <rxATcommand+0x8a4>)
 8000f18:	f003 f98c 	bl	8004234 <siprintf>
			}
			if (numberCorrect) {
 8000f1c:	7bfb      	ldrb	r3, [r7, #15]
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d022      	beq.n	8000f68 <rxATcommand+0x7fc>
				if (strstr(oldModem3, "tart")) {
 8000f22:	493e      	ldr	r1, [pc, #248]	@ (800101c <rxATcommand+0x8b0>)
 8000f24:	4836      	ldr	r0, [pc, #216]	@ (8001000 <rxATcommand+0x894>)
 8000f26:	f003 f9ba 	bl	800429e <strstr>
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d002      	beq.n	8000f36 <rxATcommand+0x7ca>
					buttStart();
 8000f30:	f7ff f962 	bl	80001f8 <buttStart>
 8000f34:	e012      	b.n	8000f5c <rxATcommand+0x7f0>
				}
				else if (strstr(oldModem3, "pen")) {
 8000f36:	493a      	ldr	r1, [pc, #232]	@ (8001020 <rxATcommand+0x8b4>)
 8000f38:	4831      	ldr	r0, [pc, #196]	@ (8001000 <rxATcommand+0x894>)
 8000f3a:	f003 f9b0 	bl	800429e <strstr>
 8000f3e:	4603      	mov	r3, r0
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d002      	beq.n	8000f4a <rxATcommand+0x7de>
					buttOpen();
 8000f44:	f7ff f97c 	bl	8000240 <buttOpen>
 8000f48:	e008      	b.n	8000f5c <rxATcommand+0x7f0>
				}
				else if (strstr(oldModem3, "lose")) {
 8000f4a:	4936      	ldr	r1, [pc, #216]	@ (8001024 <rxATcommand+0x8b8>)
 8000f4c:	482c      	ldr	r0, [pc, #176]	@ (8001000 <rxATcommand+0x894>)
 8000f4e:	f003 f9a6 	bl	800429e <strstr>
 8000f52:	4603      	mov	r3, r0
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d001      	beq.n	8000f5c <rxATcommand+0x7f0>
					buttClose();
 8000f58:	f7ff f9aa 	bl	80002b0 <buttClose>
				}
				step++;
 8000f5c:	4b20      	ldr	r3, [pc, #128]	@ (8000fe0 <rxATcommand+0x874>)
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	3301      	adds	r3, #1
 8000f62:	4a1f      	ldr	r2, [pc, #124]	@ (8000fe0 <rxATcommand+0x874>)
 8000f64:	6013      	str	r3, [r2, #0]
 8000f66:	e011      	b.n	8000f8c <rxATcommand+0x820>
			}
			else {
				step = 0;
 8000f68:	4b1d      	ldr	r3, [pc, #116]	@ (8000fe0 <rxATcommand+0x874>)
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	601a      	str	r2, [r3, #0]
				strncat(smsText, (uint8_t*)"-stranger", 9);
 8000f6e:	481f      	ldr	r0, [pc, #124]	@ (8000fec <rxATcommand+0x880>)
 8000f70:	f7ff f8ec 	bl	800014c <strlen>
 8000f74:	4603      	mov	r3, r0
 8000f76:	461a      	mov	r2, r3
 8000f78:	4b1c      	ldr	r3, [pc, #112]	@ (8000fec <rxATcommand+0x880>)
 8000f7a:	4413      	add	r3, r2
 8000f7c:	492a      	ldr	r1, [pc, #168]	@ (8001028 <rxATcommand+0x8bc>)
 8000f7e:	461a      	mov	r2, r3
 8000f80:	460b      	mov	r3, r1
 8000f82:	cb03      	ldmia	r3!, {r0, r1}
 8000f84:	6010      	str	r0, [r2, #0]
 8000f86:	6051      	str	r1, [r2, #4]
 8000f88:	881b      	ldrh	r3, [r3, #0]
 8000f8a:	8113      	strh	r3, [r2, #8]
			}
			ready=true;
 8000f8c:	4b16      	ldr	r3, [pc, #88]	@ (8000fe8 <rxATcommand+0x87c>)
 8000f8e:	2201      	movs	r2, #1
 8000f90:	701a      	strb	r2, [r3, #0]
			break;
 8000f92:	e07a      	b.n	800108a <rxATcommand+0x91e>
		}
		case 22: {
			step++;
 8000f94:	4b12      	ldr	r3, [pc, #72]	@ (8000fe0 <rxATcommand+0x874>)
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	3301      	adds	r3, #1
 8000f9a:	4a11      	ldr	r2, [pc, #68]	@ (8000fe0 <rxATcommand+0x874>)
 8000f9c:	6013      	str	r3, [r2, #0]
			ready=true;
 8000f9e:	4b12      	ldr	r3, [pc, #72]	@ (8000fe8 <rxATcommand+0x87c>)
 8000fa0:	2201      	movs	r2, #1
 8000fa2:	701a      	strb	r2, [r3, #0]
			break;
 8000fa4:	e071      	b.n	800108a <rxATcommand+0x91e>
		}
		case 23: {
			step++;
 8000fa6:	4b0e      	ldr	r3, [pc, #56]	@ (8000fe0 <rxATcommand+0x874>)
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	3301      	adds	r3, #1
 8000fac:	4a0c      	ldr	r2, [pc, #48]	@ (8000fe0 <rxATcommand+0x874>)
 8000fae:	6013      	str	r3, [r2, #0]
			ready=true;
 8000fb0:	4b0d      	ldr	r3, [pc, #52]	@ (8000fe8 <rxATcommand+0x87c>)
 8000fb2:	2201      	movs	r2, #1
 8000fb4:	701a      	strb	r2, [r3, #0]
			break;
 8000fb6:	e068      	b.n	800108a <rxATcommand+0x91e>
		}
		case 24: {
			if (strstr((char*)text, (char*)"OK")) {
 8000fb8:	490d      	ldr	r1, [pc, #52]	@ (8000ff0 <rxATcommand+0x884>)
 8000fba:	6878      	ldr	r0, [r7, #4]
 8000fbc:	f003 f96f 	bl	800429e <strstr>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d034      	beq.n	8001030 <rxATcommand+0x8c4>
				if (stopStep==12) step=0;
 8000fc6:	4b19      	ldr	r3, [pc, #100]	@ (800102c <rxATcommand+0x8c0>)
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	2b0c      	cmp	r3, #12
 8000fcc:	d103      	bne.n	8000fd6 <rxATcommand+0x86a>
 8000fce:	4b04      	ldr	r3, [pc, #16]	@ (8000fe0 <rxATcommand+0x874>)
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	601a      	str	r2, [r3, #0]
 8000fd4:	e043      	b.n	800105e <rxATcommand+0x8f2>
				else step=stopStep;
 8000fd6:	4b15      	ldr	r3, [pc, #84]	@ (800102c <rxATcommand+0x8c0>)
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	4a01      	ldr	r2, [pc, #4]	@ (8000fe0 <rxATcommand+0x874>)
 8000fdc:	6013      	str	r3, [r2, #0]
 8000fde:	e03e      	b.n	800105e <rxATcommand+0x8f2>
 8000fe0:	200008b0 	.word	0x200008b0
 8000fe4:	200008b9 	.word	0x200008b9
 8000fe8:	200008b8 	.word	0x200008b8
 8000fec:	20000008 	.word	0x20000008
 8000ff0:	08004c10 	.word	0x08004c10
 8000ff4:	08004c28 	.word	0x08004c28
 8000ff8:	08004c14 	.word	0x08004c14
 8000ffc:	20000868 	.word	0x20000868
 8001000:	20000670 	.word	0x20000670
 8001004:	20000014 	.word	0x20000014
 8001008:	2000076c 	.word	0x2000076c
 800100c:	08004c7c 	.word	0x08004c7c
 8001010:	20000038 	.word	0x20000038
 8001014:	20000020 	.word	0x20000020
 8001018:	2000002c 	.word	0x2000002c
 800101c:	08004c80 	.word	0x08004c80
 8001020:	08004c88 	.word	0x08004c88
 8001024:	08004c8c 	.word	0x08004c8c
 8001028:	08004c94 	.word	0x08004c94
 800102c:	200000d4 	.word	0x200000d4
			}
			else if (strstr((char*)text, (char*)">")) {
 8001030:	213e      	movs	r1, #62	@ 0x3e
 8001032:	6878      	ldr	r0, [r7, #4]
 8001034:	f003 f926 	bl	8004284 <strchr>
 8001038:	4603      	mov	r3, r0
 800103a:	2b00      	cmp	r3, #0
 800103c:	d00c      	beq.n	8001058 <rxATcommand+0x8ec>
				if (stopStep==12) step=0;
 800103e:	4b15      	ldr	r3, [pc, #84]	@ (8001094 <rxATcommand+0x928>)
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	2b0c      	cmp	r3, #12
 8001044:	d103      	bne.n	800104e <rxATcommand+0x8e2>
 8001046:	4b14      	ldr	r3, [pc, #80]	@ (8001098 <rxATcommand+0x92c>)
 8001048:	2200      	movs	r2, #0
 800104a:	601a      	str	r2, [r3, #0]
 800104c:	e007      	b.n	800105e <rxATcommand+0x8f2>
				else step=stopStep;
 800104e:	4b11      	ldr	r3, [pc, #68]	@ (8001094 <rxATcommand+0x928>)
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	4a11      	ldr	r2, [pc, #68]	@ (8001098 <rxATcommand+0x92c>)
 8001054:	6013      	str	r3, [r2, #0]
 8001056:	e002      	b.n	800105e <rxATcommand+0x8f2>
			}
			else {
				step=12;
 8001058:	4b0f      	ldr	r3, [pc, #60]	@ (8001098 <rxATcommand+0x92c>)
 800105a:	220c      	movs	r2, #12
 800105c:	601a      	str	r2, [r3, #0]
			}
			ready=true;
 800105e:	4b0f      	ldr	r3, [pc, #60]	@ (800109c <rxATcommand+0x930>)
 8001060:	2201      	movs	r2, #1
 8001062:	701a      	strb	r2, [r3, #0]
			break;
 8001064:	e011      	b.n	800108a <rxATcommand+0x91e>
		}
		case 99: {
			if (strstr((char*)text, (char*)"OK")) {
 8001066:	490e      	ldr	r1, [pc, #56]	@ (80010a0 <rxATcommand+0x934>)
 8001068:	6878      	ldr	r0, [r7, #4]
 800106a:	f003 f918 	bl	800429e <strstr>
 800106e:	4603      	mov	r3, r0
 8001070:	2b00      	cmp	r3, #0
 8001072:	d006      	beq.n	8001082 <rxATcommand+0x916>
				step=0;
 8001074:	4b08      	ldr	r3, [pc, #32]	@ (8001098 <rxATcommand+0x92c>)
 8001076:	2200      	movs	r2, #0
 8001078:	601a      	str	r2, [r3, #0]
				ready=true;
 800107a:	4b08      	ldr	r3, [pc, #32]	@ (800109c <rxATcommand+0x930>)
 800107c:	2201      	movs	r2, #1
 800107e:	701a      	strb	r2, [r3, #0]
			}
			else ready = true;
			break;
 8001080:	e002      	b.n	8001088 <rxATcommand+0x91c>
			else ready = true;
 8001082:	4b06      	ldr	r3, [pc, #24]	@ (800109c <rxATcommand+0x930>)
 8001084:	2201      	movs	r2, #1
 8001086:	701a      	strb	r2, [r3, #0]
			break;
 8001088:	bf00      	nop
		}
	}
}
 800108a:	bf00      	nop
 800108c:	3728      	adds	r7, #40	@ 0x28
 800108e:	46bd      	mov	sp, r7
 8001090:	bd80      	pop	{r7, pc}
 8001092:	bf00      	nop
 8001094:	200000d4 	.word	0x200000d4
 8001098:	200008b0 	.word	0x200008b0
 800109c:	200008b8 	.word	0x200008b8
 80010a0:	08004c10 	.word	0x08004c10

080010a4 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b088      	sub	sp, #32
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
	if (huart == &huart2) {
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	4a80      	ldr	r2, [pc, #512]	@ (80012b0 <HAL_UART_RxCpltCallback+0x20c>)
 80010b0:	4293      	cmp	r3, r2
 80010b2:	f040 809a 	bne.w	80011ea <HAL_UART_RxCpltCallback+0x146>
		if (str[0]!='\n') {
 80010b6:	4b7f      	ldr	r3, [pc, #508]	@ (80012b4 <HAL_UART_RxCpltCallback+0x210>)
 80010b8:	781b      	ldrb	r3, [r3, #0]
 80010ba:	2b0a      	cmp	r3, #10
 80010bc:	d00b      	beq.n	80010d6 <HAL_UART_RxCpltCallback+0x32>
			modemString2[modemStringLength2] = str[0];
 80010be:	4b7e      	ldr	r3, [pc, #504]	@ (80012b8 <HAL_UART_RxCpltCallback+0x214>)
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	4a7c      	ldr	r2, [pc, #496]	@ (80012b4 <HAL_UART_RxCpltCallback+0x210>)
 80010c4:	7811      	ldrb	r1, [r2, #0]
 80010c6:	4a7d      	ldr	r2, [pc, #500]	@ (80012bc <HAL_UART_RxCpltCallback+0x218>)
 80010c8:	54d1      	strb	r1, [r2, r3]
			modemStringLength2++;
 80010ca:	4b7b      	ldr	r3, [pc, #492]	@ (80012b8 <HAL_UART_RxCpltCallback+0x214>)
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	3301      	adds	r3, #1
 80010d0:	4a79      	ldr	r2, [pc, #484]	@ (80012b8 <HAL_UART_RxCpltCallback+0x214>)
 80010d2:	6013      	str	r3, [r2, #0]
 80010d4:	e083      	b.n	80011de <HAL_UART_RxCpltCallback+0x13a>
		}
		else {
			modemString2[modemStringLength2] = str[0];
 80010d6:	4b78      	ldr	r3, [pc, #480]	@ (80012b8 <HAL_UART_RxCpltCallback+0x214>)
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	4a76      	ldr	r2, [pc, #472]	@ (80012b4 <HAL_UART_RxCpltCallback+0x210>)
 80010dc:	7811      	ldrb	r1, [r2, #0]
 80010de:	4a77      	ldr	r2, [pc, #476]	@ (80012bc <HAL_UART_RxCpltCallback+0x218>)
 80010e0:	54d1      	strb	r1, [r2, r3]
			modemStringLength2++;
 80010e2:	4b75      	ldr	r3, [pc, #468]	@ (80012b8 <HAL_UART_RxCpltCallback+0x214>)
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	3301      	adds	r3, #1
 80010e8:	4a73      	ldr	r2, [pc, #460]	@ (80012b8 <HAL_UART_RxCpltCallback+0x214>)
 80010ea:	6013      	str	r3, [r2, #0]
			if (echoMode) HAL_UART_Transmit_DMA(&huart1, modemString2, modemStringLength2);
 80010ec:	4b74      	ldr	r3, [pc, #464]	@ (80012c0 <HAL_UART_RxCpltCallback+0x21c>)
 80010ee:	781b      	ldrb	r3, [r3, #0]
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d007      	beq.n	8001104 <HAL_UART_RxCpltCallback+0x60>
 80010f4:	4b70      	ldr	r3, [pc, #448]	@ (80012b8 <HAL_UART_RxCpltCallback+0x214>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	b29b      	uxth	r3, r3
 80010fa:	461a      	mov	r2, r3
 80010fc:	496f      	ldr	r1, [pc, #444]	@ (80012bc <HAL_UART_RxCpltCallback+0x218>)
 80010fe:	4871      	ldr	r0, [pc, #452]	@ (80012c4 <HAL_UART_RxCpltCallback+0x220>)
 8001100:	f002 f8c4 	bl	800328c <HAL_UART_Transmit_DMA>
			for (int i = modemStringLength2; i<250; i++)modemString2[i]=(uint8_t)0x00;
 8001104:	4b6c      	ldr	r3, [pc, #432]	@ (80012b8 <HAL_UART_RxCpltCallback+0x214>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	61fb      	str	r3, [r7, #28]
 800110a:	e007      	b.n	800111c <HAL_UART_RxCpltCallback+0x78>
 800110c:	4a6b      	ldr	r2, [pc, #428]	@ (80012bc <HAL_UART_RxCpltCallback+0x218>)
 800110e:	69fb      	ldr	r3, [r7, #28]
 8001110:	4413      	add	r3, r2
 8001112:	2200      	movs	r2, #0
 8001114:	701a      	strb	r2, [r3, #0]
 8001116:	69fb      	ldr	r3, [r7, #28]
 8001118:	3301      	adds	r3, #1
 800111a:	61fb      	str	r3, [r7, #28]
 800111c:	69fb      	ldr	r3, [r7, #28]
 800111e:	2bf9      	cmp	r3, #249	@ 0xf9
 8001120:	ddf4      	ble.n	800110c <HAL_UART_RxCpltCallback+0x68>
			for (int i = 0; i<250; i++) oldModem4[i] = oldModem3[i];
 8001122:	2300      	movs	r3, #0
 8001124:	61bb      	str	r3, [r7, #24]
 8001126:	e00b      	b.n	8001140 <HAL_UART_RxCpltCallback+0x9c>
 8001128:	4a67      	ldr	r2, [pc, #412]	@ (80012c8 <HAL_UART_RxCpltCallback+0x224>)
 800112a:	69bb      	ldr	r3, [r7, #24]
 800112c:	4413      	add	r3, r2
 800112e:	7819      	ldrb	r1, [r3, #0]
 8001130:	4a66      	ldr	r2, [pc, #408]	@ (80012cc <HAL_UART_RxCpltCallback+0x228>)
 8001132:	69bb      	ldr	r3, [r7, #24]
 8001134:	4413      	add	r3, r2
 8001136:	460a      	mov	r2, r1
 8001138:	701a      	strb	r2, [r3, #0]
 800113a:	69bb      	ldr	r3, [r7, #24]
 800113c:	3301      	adds	r3, #1
 800113e:	61bb      	str	r3, [r7, #24]
 8001140:	69bb      	ldr	r3, [r7, #24]
 8001142:	2bf9      	cmp	r3, #249	@ 0xf9
 8001144:	ddf0      	ble.n	8001128 <HAL_UART_RxCpltCallback+0x84>
			for (int i = 0; i<250; i++) oldModem3[i] = oldModem2[i];
 8001146:	2300      	movs	r3, #0
 8001148:	617b      	str	r3, [r7, #20]
 800114a:	e00b      	b.n	8001164 <HAL_UART_RxCpltCallback+0xc0>
 800114c:	4a60      	ldr	r2, [pc, #384]	@ (80012d0 <HAL_UART_RxCpltCallback+0x22c>)
 800114e:	697b      	ldr	r3, [r7, #20]
 8001150:	4413      	add	r3, r2
 8001152:	7819      	ldrb	r1, [r3, #0]
 8001154:	4a5c      	ldr	r2, [pc, #368]	@ (80012c8 <HAL_UART_RxCpltCallback+0x224>)
 8001156:	697b      	ldr	r3, [r7, #20]
 8001158:	4413      	add	r3, r2
 800115a:	460a      	mov	r2, r1
 800115c:	701a      	strb	r2, [r3, #0]
 800115e:	697b      	ldr	r3, [r7, #20]
 8001160:	3301      	adds	r3, #1
 8001162:	617b      	str	r3, [r7, #20]
 8001164:	697b      	ldr	r3, [r7, #20]
 8001166:	2bf9      	cmp	r3, #249	@ 0xf9
 8001168:	ddf0      	ble.n	800114c <HAL_UART_RxCpltCallback+0xa8>
			for (int i = 0; i<250; i++) oldModem2[i] = oldModem[i];
 800116a:	2300      	movs	r3, #0
 800116c:	613b      	str	r3, [r7, #16]
 800116e:	e00b      	b.n	8001188 <HAL_UART_RxCpltCallback+0xe4>
 8001170:	4a58      	ldr	r2, [pc, #352]	@ (80012d4 <HAL_UART_RxCpltCallback+0x230>)
 8001172:	693b      	ldr	r3, [r7, #16]
 8001174:	4413      	add	r3, r2
 8001176:	7819      	ldrb	r1, [r3, #0]
 8001178:	4a55      	ldr	r2, [pc, #340]	@ (80012d0 <HAL_UART_RxCpltCallback+0x22c>)
 800117a:	693b      	ldr	r3, [r7, #16]
 800117c:	4413      	add	r3, r2
 800117e:	460a      	mov	r2, r1
 8001180:	701a      	strb	r2, [r3, #0]
 8001182:	693b      	ldr	r3, [r7, #16]
 8001184:	3301      	adds	r3, #1
 8001186:	613b      	str	r3, [r7, #16]
 8001188:	693b      	ldr	r3, [r7, #16]
 800118a:	2bf9      	cmp	r3, #249	@ 0xf9
 800118c:	ddf0      	ble.n	8001170 <HAL_UART_RxCpltCallback+0xcc>
			for (int i = 0; i<250; i++) oldModem[i] = modemString2[i];
 800118e:	2300      	movs	r3, #0
 8001190:	60fb      	str	r3, [r7, #12]
 8001192:	e00b      	b.n	80011ac <HAL_UART_RxCpltCallback+0x108>
 8001194:	4a49      	ldr	r2, [pc, #292]	@ (80012bc <HAL_UART_RxCpltCallback+0x218>)
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	4413      	add	r3, r2
 800119a:	7819      	ldrb	r1, [r3, #0]
 800119c:	4a4d      	ldr	r2, [pc, #308]	@ (80012d4 <HAL_UART_RxCpltCallback+0x230>)
 800119e:	68fb      	ldr	r3, [r7, #12]
 80011a0:	4413      	add	r3, r2
 80011a2:	460a      	mov	r2, r1
 80011a4:	701a      	strb	r2, [r3, #0]
 80011a6:	68fb      	ldr	r3, [r7, #12]
 80011a8:	3301      	adds	r3, #1
 80011aa:	60fb      	str	r3, [r7, #12]
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	2bf9      	cmp	r3, #249	@ 0xf9
 80011b0:	ddf0      	ble.n	8001194 <HAL_UART_RxCpltCallback+0xf0>
			modemStringLength2 = 0;
 80011b2:	4b41      	ldr	r3, [pc, #260]	@ (80012b8 <HAL_UART_RxCpltCallback+0x214>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	601a      	str	r2, [r3, #0]
			oldModem[strlen(oldModem)-1]=0;
 80011b8:	4846      	ldr	r0, [pc, #280]	@ (80012d4 <HAL_UART_RxCpltCallback+0x230>)
 80011ba:	f7fe ffc7 	bl	800014c <strlen>
 80011be:	4603      	mov	r3, r0
 80011c0:	3b01      	subs	r3, #1
 80011c2:	4a44      	ldr	r2, [pc, #272]	@ (80012d4 <HAL_UART_RxCpltCallback+0x230>)
 80011c4:	2100      	movs	r1, #0
 80011c6:	54d1      	strb	r1, [r2, r3]
			oldModem[strlen(oldModem)-1]=0;
 80011c8:	4842      	ldr	r0, [pc, #264]	@ (80012d4 <HAL_UART_RxCpltCallback+0x230>)
 80011ca:	f7fe ffbf 	bl	800014c <strlen>
 80011ce:	4603      	mov	r3, r0
 80011d0:	3b01      	subs	r3, #1
 80011d2:	4a40      	ldr	r2, [pc, #256]	@ (80012d4 <HAL_UART_RxCpltCallback+0x230>)
 80011d4:	2100      	movs	r1, #0
 80011d6:	54d1      	strb	r1, [r2, r3]
			rxNew=true;
 80011d8:	4b3f      	ldr	r3, [pc, #252]	@ (80012d8 <HAL_UART_RxCpltCallback+0x234>)
 80011da:	2201      	movs	r2, #1
 80011dc:	601a      	str	r2, [r3, #0]
		}
		HAL_UART_Receive_IT(&huart2,str,1);
 80011de:	2201      	movs	r2, #1
 80011e0:	4934      	ldr	r1, [pc, #208]	@ (80012b4 <HAL_UART_RxCpltCallback+0x210>)
 80011e2:	4833      	ldr	r0, [pc, #204]	@ (80012b0 <HAL_UART_RxCpltCallback+0x20c>)
 80011e4:	f002 f82d 	bl	8003242 <HAL_UART_Receive_IT>
			else if (echoMode) HAL_UART_Transmit_DMA(&huart2, modemString1, modemStringLength1);
			modemStringLength1 = 0;
		}
		HAL_UART_Receive_IT(&huart1,str2,1);
	}
}
 80011e8:	e05e      	b.n	80012a8 <HAL_UART_RxCpltCallback+0x204>
		if (str2[0]!='\n') {
 80011ea:	4b3c      	ldr	r3, [pc, #240]	@ (80012dc <HAL_UART_RxCpltCallback+0x238>)
 80011ec:	781b      	ldrb	r3, [r3, #0]
 80011ee:	2b0a      	cmp	r3, #10
 80011f0:	d00b      	beq.n	800120a <HAL_UART_RxCpltCallback+0x166>
			modemString1[modemStringLength1] = str2[0];
 80011f2:	4b3b      	ldr	r3, [pc, #236]	@ (80012e0 <HAL_UART_RxCpltCallback+0x23c>)
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	4a39      	ldr	r2, [pc, #228]	@ (80012dc <HAL_UART_RxCpltCallback+0x238>)
 80011f8:	7811      	ldrb	r1, [r2, #0]
 80011fa:	4a3a      	ldr	r2, [pc, #232]	@ (80012e4 <HAL_UART_RxCpltCallback+0x240>)
 80011fc:	54d1      	strb	r1, [r2, r3]
			modemStringLength1++;
 80011fe:	4b38      	ldr	r3, [pc, #224]	@ (80012e0 <HAL_UART_RxCpltCallback+0x23c>)
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	3301      	adds	r3, #1
 8001204:	4a36      	ldr	r2, [pc, #216]	@ (80012e0 <HAL_UART_RxCpltCallback+0x23c>)
 8001206:	6013      	str	r3, [r2, #0]
 8001208:	e049      	b.n	800129e <HAL_UART_RxCpltCallback+0x1fa>
			modemString1[modemStringLength1] = str2[0];
 800120a:	4b35      	ldr	r3, [pc, #212]	@ (80012e0 <HAL_UART_RxCpltCallback+0x23c>)
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	4a33      	ldr	r2, [pc, #204]	@ (80012dc <HAL_UART_RxCpltCallback+0x238>)
 8001210:	7811      	ldrb	r1, [r2, #0]
 8001212:	4a34      	ldr	r2, [pc, #208]	@ (80012e4 <HAL_UART_RxCpltCallback+0x240>)
 8001214:	54d1      	strb	r1, [r2, r3]
			modemStringLength1++;
 8001216:	4b32      	ldr	r3, [pc, #200]	@ (80012e0 <HAL_UART_RxCpltCallback+0x23c>)
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	3301      	adds	r3, #1
 800121c:	4a30      	ldr	r2, [pc, #192]	@ (80012e0 <HAL_UART_RxCpltCallback+0x23c>)
 800121e:	6013      	str	r3, [r2, #0]
			if (strstr((char*)modemString1, (char*)"echoON")) {
 8001220:	4931      	ldr	r1, [pc, #196]	@ (80012e8 <HAL_UART_RxCpltCallback+0x244>)
 8001222:	4830      	ldr	r0, [pc, #192]	@ (80012e4 <HAL_UART_RxCpltCallback+0x240>)
 8001224:	f003 f83b 	bl	800429e <strstr>
 8001228:	4603      	mov	r3, r0
 800122a:	2b00      	cmp	r3, #0
 800122c:	d008      	beq.n	8001240 <HAL_UART_RxCpltCallback+0x19c>
				echoMode = true;
 800122e:	4b24      	ldr	r3, [pc, #144]	@ (80012c0 <HAL_UART_RxCpltCallback+0x21c>)
 8001230:	2201      	movs	r2, #1
 8001232:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit_DMA(&huart1, (uint8_t*)"echo mode ON\r\n", 14);
 8001234:	220e      	movs	r2, #14
 8001236:	492d      	ldr	r1, [pc, #180]	@ (80012ec <HAL_UART_RxCpltCallback+0x248>)
 8001238:	4822      	ldr	r0, [pc, #136]	@ (80012c4 <HAL_UART_RxCpltCallback+0x220>)
 800123a:	f002 f827 	bl	800328c <HAL_UART_Transmit_DMA>
 800123e:	e02b      	b.n	8001298 <HAL_UART_RxCpltCallback+0x1f4>
			else if (strstr((char*)modemString1, (char*)"echoOFF")) {
 8001240:	492b      	ldr	r1, [pc, #172]	@ (80012f0 <HAL_UART_RxCpltCallback+0x24c>)
 8001242:	4828      	ldr	r0, [pc, #160]	@ (80012e4 <HAL_UART_RxCpltCallback+0x240>)
 8001244:	f003 f82b 	bl	800429e <strstr>
 8001248:	4603      	mov	r3, r0
 800124a:	2b00      	cmp	r3, #0
 800124c:	d008      	beq.n	8001260 <HAL_UART_RxCpltCallback+0x1bc>
				echoMode = false;
 800124e:	4b1c      	ldr	r3, [pc, #112]	@ (80012c0 <HAL_UART_RxCpltCallback+0x21c>)
 8001250:	2200      	movs	r2, #0
 8001252:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit_DMA(&huart1, (uint8_t*)"echo mode OFF\r\n", 14);
 8001254:	220e      	movs	r2, #14
 8001256:	4927      	ldr	r1, [pc, #156]	@ (80012f4 <HAL_UART_RxCpltCallback+0x250>)
 8001258:	481a      	ldr	r0, [pc, #104]	@ (80012c4 <HAL_UART_RxCpltCallback+0x220>)
 800125a:	f002 f817 	bl	800328c <HAL_UART_Transmit_DMA>
 800125e:	e01b      	b.n	8001298 <HAL_UART_RxCpltCallback+0x1f4>
			else if (strstr((char*)modemString1, (char*)"gprs")) {
 8001260:	4925      	ldr	r1, [pc, #148]	@ (80012f8 <HAL_UART_RxCpltCallback+0x254>)
 8001262:	4820      	ldr	r0, [pc, #128]	@ (80012e4 <HAL_UART_RxCpltCallback+0x240>)
 8001264:	f003 f81b 	bl	800429e <strstr>
 8001268:	4603      	mov	r3, r0
 800126a:	2b00      	cmp	r3, #0
 800126c:	d008      	beq.n	8001280 <HAL_UART_RxCpltCallback+0x1dc>
				timeRepeat = 0;
 800126e:	4b23      	ldr	r3, [pc, #140]	@ (80012fc <HAL_UART_RxCpltCallback+0x258>)
 8001270:	2200      	movs	r2, #0
 8001272:	601a      	str	r2, [r3, #0]
				HAL_UART_Transmit_DMA(&huart1, (uint8_t*)"update start\r\n", 14);
 8001274:	220e      	movs	r2, #14
 8001276:	4922      	ldr	r1, [pc, #136]	@ (8001300 <HAL_UART_RxCpltCallback+0x25c>)
 8001278:	4812      	ldr	r0, [pc, #72]	@ (80012c4 <HAL_UART_RxCpltCallback+0x220>)
 800127a:	f002 f807 	bl	800328c <HAL_UART_Transmit_DMA>
 800127e:	e00b      	b.n	8001298 <HAL_UART_RxCpltCallback+0x1f4>
			else if (echoMode) HAL_UART_Transmit_DMA(&huart2, modemString1, modemStringLength1);
 8001280:	4b0f      	ldr	r3, [pc, #60]	@ (80012c0 <HAL_UART_RxCpltCallback+0x21c>)
 8001282:	781b      	ldrb	r3, [r3, #0]
 8001284:	2b00      	cmp	r3, #0
 8001286:	d007      	beq.n	8001298 <HAL_UART_RxCpltCallback+0x1f4>
 8001288:	4b15      	ldr	r3, [pc, #84]	@ (80012e0 <HAL_UART_RxCpltCallback+0x23c>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	b29b      	uxth	r3, r3
 800128e:	461a      	mov	r2, r3
 8001290:	4914      	ldr	r1, [pc, #80]	@ (80012e4 <HAL_UART_RxCpltCallback+0x240>)
 8001292:	4807      	ldr	r0, [pc, #28]	@ (80012b0 <HAL_UART_RxCpltCallback+0x20c>)
 8001294:	f001 fffa 	bl	800328c <HAL_UART_Transmit_DMA>
			modemStringLength1 = 0;
 8001298:	4b11      	ldr	r3, [pc, #68]	@ (80012e0 <HAL_UART_RxCpltCallback+0x23c>)
 800129a:	2200      	movs	r2, #0
 800129c:	601a      	str	r2, [r3, #0]
		HAL_UART_Receive_IT(&huart1,str2,1);
 800129e:	2201      	movs	r2, #1
 80012a0:	490e      	ldr	r1, [pc, #56]	@ (80012dc <HAL_UART_RxCpltCallback+0x238>)
 80012a2:	4808      	ldr	r0, [pc, #32]	@ (80012c4 <HAL_UART_RxCpltCallback+0x220>)
 80012a4:	f001 ffcd 	bl	8003242 <HAL_UART_Receive_IT>
}
 80012a8:	bf00      	nop
 80012aa:	3720      	adds	r7, #32
 80012ac:	46bd      	mov	sp, r7
 80012ae:	bd80      	pop	{r7, pc}
 80012b0:	20000120 	.word	0x20000120
 80012b4:	20000000 	.word	0x20000000
 80012b8:	20000374 	.word	0x20000374
 80012bc:	20000278 	.word	0x20000278
 80012c0:	20000055 	.word	0x20000055
 80012c4:	200000d8 	.word	0x200000d8
 80012c8:	20000670 	.word	0x20000670
 80012cc:	2000076c 	.word	0x2000076c
 80012d0:	20000574 	.word	0x20000574
 80012d4:	20000478 	.word	0x20000478
 80012d8:	200008b4 	.word	0x200008b4
 80012dc:	20000004 	.word	0x20000004
 80012e0:	20000474 	.word	0x20000474
 80012e4:	20000378 	.word	0x20000378
 80012e8:	08004ca0 	.word	0x08004ca0
 80012ec:	08004ca8 	.word	0x08004ca8
 80012f0:	08004cb8 	.word	0x08004cb8
 80012f4:	08004cc0 	.word	0x08004cc0
 80012f8:	08004cd0 	.word	0x08004cd0
 80012fc:	200000d0 	.word	0x200000d0
 8001300:	08004cd8 	.word	0x08004cd8

08001304 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b084      	sub	sp, #16
 8001308:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800130a:	f000 fcd3 	bl	8001cb4 <HAL_Init>

  /* USER CODE BEGIN Init */

  sprintf(unicID, "%x-%x-%lx-%lx", *idBase0, *idBase1, *idBase2, *idBase3);
 800130e:	4b8e      	ldr	r3, [pc, #568]	@ (8001548 <main+0x244>)
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	881b      	ldrh	r3, [r3, #0]
 8001314:	4619      	mov	r1, r3
 8001316:	4b8d      	ldr	r3, [pc, #564]	@ (800154c <main+0x248>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	881b      	ldrh	r3, [r3, #0]
 800131c:	4618      	mov	r0, r3
 800131e:	4b8c      	ldr	r3, [pc, #560]	@ (8001550 <main+0x24c>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	4a8b      	ldr	r2, [pc, #556]	@ (8001554 <main+0x250>)
 8001326:	6812      	ldr	r2, [r2, #0]
 8001328:	6812      	ldr	r2, [r2, #0]
 800132a:	9201      	str	r2, [sp, #4]
 800132c:	9300      	str	r3, [sp, #0]
 800132e:	4603      	mov	r3, r0
 8001330:	460a      	mov	r2, r1
 8001332:	4989      	ldr	r1, [pc, #548]	@ (8001558 <main+0x254>)
 8001334:	4889      	ldr	r0, [pc, #548]	@ (800155c <main+0x258>)
 8001336:	f002 ff7d 	bl	8004234 <siprintf>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800133a:	f000 f93d 	bl	80015b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800133e:	f000 fa0b 	bl	8001758 <MX_GPIO_Init>
  MX_DMA_Init();
 8001342:	f000 f9d3 	bl	80016ec <MX_DMA_Init>
  MX_USART1_UART_Init();
 8001346:	f000 f97d 	bl	8001644 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 800134a:	f000 f9a5 	bl	8001698 <MX_USART2_UART_Init>
  /*SSD1306_Init();
  SSD1306_GotoXY(0, 44); //Устанавливаем курсор в позицию 0;44. Сначала по горизонтали, потом вертикали.
  SSD1306_Puts("Hello, habrahabr!!", &Font_7x10, SSD1306_COLOR_WHITE); //пишем надпись в выставленной позиции шрифтом "Font_7x10" белым цветом.
  SSD1306_DrawCircle(10, 33, 7, SSD1306_COLOR_WHITE);
  SSD1306_UpdateScreen();*/
  for (int i = 0; i<10; i++) {
 800134e:	2300      	movs	r3, #0
 8001350:	607b      	str	r3, [r7, #4]
 8001352:	e00a      	b.n	800136a <main+0x66>
	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8001354:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001358:	4881      	ldr	r0, [pc, #516]	@ (8001560 <main+0x25c>)
 800135a:	f001 fa75 	bl	8002848 <HAL_GPIO_TogglePin>
	  HAL_Delay(250);
 800135e:	20fa      	movs	r0, #250	@ 0xfa
 8001360:	f000 fd0a 	bl	8001d78 <HAL_Delay>
  for (int i = 0; i<10; i++) {
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	3301      	adds	r3, #1
 8001368:	607b      	str	r3, [r7, #4]
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	2b09      	cmp	r3, #9
 800136e:	ddf1      	ble.n	8001354 <main+0x50>
  }

  HAL_UART_Transmit(&huart1,(uint8_t*)"start\r\n",7,0xFFFF);
 8001370:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001374:	2207      	movs	r2, #7
 8001376:	497b      	ldr	r1, [pc, #492]	@ (8001564 <main+0x260>)
 8001378:	487b      	ldr	r0, [pc, #492]	@ (8001568 <main+0x264>)
 800137a:	f001 fedf 	bl	800313c <HAL_UART_Transmit>
  HAL_UART_Transmit(&huart1,(uint8_t*)"echoON - for echo mode\r\n",24,0xFFFF);
 800137e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001382:	2218      	movs	r2, #24
 8001384:	4979      	ldr	r1, [pc, #484]	@ (800156c <main+0x268>)
 8001386:	4878      	ldr	r0, [pc, #480]	@ (8001568 <main+0x264>)
 8001388:	f001 fed8 	bl	800313c <HAL_UART_Transmit>
  HAL_UART_Transmit(&huart1,(uint8_t*)"echoOFF - for normal mode\r\n",27,0xFFFF);
 800138c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001390:	221b      	movs	r2, #27
 8001392:	4977      	ldr	r1, [pc, #476]	@ (8001570 <main+0x26c>)
 8001394:	4874      	ldr	r0, [pc, #464]	@ (8001568 <main+0x264>)
 8001396:	f001 fed1 	bl	800313c <HAL_UART_Transmit>
  HAL_UART_Transmit(&huart1,(uint8_t*)"gprs - gprs update\r\n",20,0xFFFF);
 800139a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800139e:	2214      	movs	r2, #20
 80013a0:	4974      	ldr	r1, [pc, #464]	@ (8001574 <main+0x270>)
 80013a2:	4871      	ldr	r0, [pc, #452]	@ (8001568 <main+0x264>)
 80013a4:	f001 feca 	bl	800313c <HAL_UART_Transmit>
  HAL_UART_Transmit(&huart2,(uint8_t*)"AT\r\n",8,0xFFFF);
 80013a8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80013ac:	2208      	movs	r2, #8
 80013ae:	4972      	ldr	r1, [pc, #456]	@ (8001578 <main+0x274>)
 80013b0:	4872      	ldr	r0, [pc, #456]	@ (800157c <main+0x278>)
 80013b2:	f001 fec3 	bl	800313c <HAL_UART_Transmit>

  HAL_UART_Receive_IT(&huart2,str,1);
 80013b6:	2201      	movs	r2, #1
 80013b8:	4971      	ldr	r1, [pc, #452]	@ (8001580 <main+0x27c>)
 80013ba:	4870      	ldr	r0, [pc, #448]	@ (800157c <main+0x278>)
 80013bc:	f001 ff41 	bl	8003242 <HAL_UART_Receive_IT>

  HAL_Delay(2000);
 80013c0:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80013c4:	f000 fcd8 	bl	8001d78 <HAL_Delay>
  ready=true;
 80013c8:	4b6e      	ldr	r3, [pc, #440]	@ (8001584 <main+0x280>)
 80013ca:	2201      	movs	r2, #1
 80013cc:	701a      	strb	r2, [r3, #0]

  timeRepeat = HAL_GetTick();
 80013ce:	f000 fcc9 	bl	8001d64 <HAL_GetTick>
 80013d2:	4603      	mov	r3, r0
 80013d4:	461a      	mov	r2, r3
 80013d6:	4b6c      	ldr	r3, [pc, #432]	@ (8001588 <main+0x284>)
 80013d8:	601a      	str	r2, [r3, #0]
  int lightTime = 0;
 80013da:	2300      	movs	r3, #0
 80013dc:	603b      	str	r3, [r7, #0]
  HAL_UART_Receive_IT(&huart1,str2,1);
 80013de:	2201      	movs	r2, #1
 80013e0:	496a      	ldr	r1, [pc, #424]	@ (800158c <main+0x288>)
 80013e2:	4861      	ldr	r0, [pc, #388]	@ (8001568 <main+0x264>)
 80013e4:	f001 ff2d 	bl	8003242 <HAL_UART_Receive_IT>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 1);
 80013e8:	2201      	movs	r2, #1
 80013ea:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80013ee:	485c      	ldr	r0, [pc, #368]	@ (8001560 <main+0x25c>)
 80013f0:	f001 fa12 	bl	8002818 <HAL_GPIO_WritePin>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if (ready||
 80013f4:	4b63      	ldr	r3, [pc, #396]	@ (8001584 <main+0x280>)
 80013f6:	781b      	ldrb	r3, [r3, #0]
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d116      	bne.n	800142a <main+0x126>
			  ((HAL_GetTick()-timeRepeat)>(5*60*1000))||
 80013fc:	f000 fcb2 	bl	8001d64 <HAL_GetTick>
 8001400:	4603      	mov	r3, r0
 8001402:	4a61      	ldr	r2, [pc, #388]	@ (8001588 <main+0x284>)
 8001404:	6812      	ldr	r2, [r2, #0]
 8001406:	1a9b      	subs	r3, r3, r2
	  if (ready||
 8001408:	4a61      	ldr	r2, [pc, #388]	@ (8001590 <main+0x28c>)
 800140a:	4293      	cmp	r3, r2
 800140c:	d80d      	bhi.n	800142a <main+0x126>
			  (((HAL_GetTick()-timeRepeat)>(10*1000))&&(step==0))) {
 800140e:	f000 fca9 	bl	8001d64 <HAL_GetTick>
 8001412:	4603      	mov	r3, r0
 8001414:	4a5c      	ldr	r2, [pc, #368]	@ (8001588 <main+0x284>)
 8001416:	6812      	ldr	r2, [r2, #0]
 8001418:	1a9b      	subs	r3, r3, r2
			  ((HAL_GetTick()-timeRepeat)>(5*60*1000))||
 800141a:	f242 7210 	movw	r2, #10000	@ 0x2710
 800141e:	4293      	cmp	r3, r2
 8001420:	d959      	bls.n	80014d6 <main+0x1d2>
			  (((HAL_GetTick()-timeRepeat)>(10*1000))&&(step==0))) {
 8001422:	4b5c      	ldr	r3, [pc, #368]	@ (8001594 <main+0x290>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	2b00      	cmp	r3, #0
 8001428:	d155      	bne.n	80014d6 <main+0x1d2>
		  txATcommand();
 800142a:	f7fe ff79 	bl	8000320 <txATcommand>
		  if ((((HAL_GetTick()-timeRepeat)>(2*60*1000))&&(step==12))||
 800142e:	f000 fc99 	bl	8001d64 <HAL_GetTick>
 8001432:	4603      	mov	r3, r0
 8001434:	4a54      	ldr	r2, [pc, #336]	@ (8001588 <main+0x284>)
 8001436:	6812      	ldr	r2, [r2, #0]
 8001438:	1a9b      	subs	r3, r3, r2
 800143a:	4a57      	ldr	r2, [pc, #348]	@ (8001598 <main+0x294>)
 800143c:	4293      	cmp	r3, r2
 800143e:	d903      	bls.n	8001448 <main+0x144>
 8001440:	4b54      	ldr	r3, [pc, #336]	@ (8001594 <main+0x290>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	2b0c      	cmp	r3, #12
 8001446:	d016      	beq.n	8001476 <main+0x172>
				  ((HAL_GetTick()-timeRepeat)>(5*60*1000))||
 8001448:	f000 fc8c 	bl	8001d64 <HAL_GetTick>
 800144c:	4603      	mov	r3, r0
 800144e:	4a4e      	ldr	r2, [pc, #312]	@ (8001588 <main+0x284>)
 8001450:	6812      	ldr	r2, [r2, #0]
 8001452:	1a9b      	subs	r3, r3, r2
		  if ((((HAL_GetTick()-timeRepeat)>(2*60*1000))&&(step==12))||
 8001454:	4a4e      	ldr	r2, [pc, #312]	@ (8001590 <main+0x28c>)
 8001456:	4293      	cmp	r3, r2
 8001458:	d80d      	bhi.n	8001476 <main+0x172>
				  (((HAL_GetTick()-timeRepeat)>(10*1000))&&(step==0))){
 800145a:	f000 fc83 	bl	8001d64 <HAL_GetTick>
 800145e:	4603      	mov	r3, r0
 8001460:	4a49      	ldr	r2, [pc, #292]	@ (8001588 <main+0x284>)
 8001462:	6812      	ldr	r2, [r2, #0]
 8001464:	1a9b      	subs	r3, r3, r2
				  ((HAL_GetTick()-timeRepeat)>(5*60*1000))||
 8001466:	f242 7210 	movw	r2, #10000	@ 0x2710
 800146a:	4293      	cmp	r3, r2
 800146c:	d90f      	bls.n	800148e <main+0x18a>
				  (((HAL_GetTick()-timeRepeat)>(10*1000))&&(step==0))){
 800146e:	4b49      	ldr	r3, [pc, #292]	@ (8001594 <main+0x290>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	2b00      	cmp	r3, #0
 8001474:	d10b      	bne.n	800148e <main+0x18a>
			  step = 0;
 8001476:	4b47      	ldr	r3, [pc, #284]	@ (8001594 <main+0x290>)
 8001478:	2200      	movs	r2, #0
 800147a:	601a      	str	r2, [r3, #0]
			  timeRepeat = HAL_GetTick();
 800147c:	f000 fc72 	bl	8001d64 <HAL_GetTick>
 8001480:	4603      	mov	r3, r0
 8001482:	461a      	mov	r2, r3
 8001484:	4b40      	ldr	r3, [pc, #256]	@ (8001588 <main+0x284>)
 8001486:	601a      	str	r2, [r3, #0]
			  txATcommand();
 8001488:	f7fe ff4a 	bl	8000320 <txATcommand>
 800148c:	e009      	b.n	80014a2 <main+0x19e>
		  }
		  else if (step!=12) timeRepeat = HAL_GetTick();
 800148e:	4b41      	ldr	r3, [pc, #260]	@ (8001594 <main+0x290>)
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	2b0c      	cmp	r3, #12
 8001494:	d005      	beq.n	80014a2 <main+0x19e>
 8001496:	f000 fc65 	bl	8001d64 <HAL_GetTick>
 800149a:	4603      	mov	r3, r0
 800149c:	461a      	mov	r2, r3
 800149e:	4b3a      	ldr	r3, [pc, #232]	@ (8001588 <main+0x284>)
 80014a0:	601a      	str	r2, [r3, #0]
		  if ((HAL_GetTick()-lightTime)>(30*1000)) {
 80014a2:	f000 fc5f 	bl	8001d64 <HAL_GetTick>
 80014a6:	4602      	mov	r2, r0
 80014a8:	683b      	ldr	r3, [r7, #0]
 80014aa:	1ad3      	subs	r3, r2, r3
 80014ac:	f247 5230 	movw	r2, #30000	@ 0x7530
 80014b0:	4293      	cmp	r3, r2
 80014b2:	d910      	bls.n	80014d6 <main+0x1d2>
			  lightTime = HAL_GetTick();
 80014b4:	f000 fc56 	bl	8001d64 <HAL_GetTick>
 80014b8:	4603      	mov	r3, r0
 80014ba:	603b      	str	r3, [r7, #0]
			  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 80014bc:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80014c0:	4827      	ldr	r0, [pc, #156]	@ (8001560 <main+0x25c>)
 80014c2:	f001 f9c1 	bl	8002848 <HAL_GPIO_TogglePin>
			  HAL_Delay(100);
 80014c6:	2064      	movs	r0, #100	@ 0x64
 80014c8:	f000 fc56 	bl	8001d78 <HAL_Delay>
			  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 80014cc:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80014d0:	4823      	ldr	r0, [pc, #140]	@ (8001560 <main+0x25c>)
 80014d2:	f001 f9b9 	bl	8002848 <HAL_GPIO_TogglePin>
		  }
	  }
	  if (strstr(modemString2, "\r\n")) {
 80014d6:	4931      	ldr	r1, [pc, #196]	@ (800159c <main+0x298>)
 80014d8:	4831      	ldr	r0, [pc, #196]	@ (80015a0 <main+0x29c>)
 80014da:	f002 fee0 	bl	800429e <strstr>
 80014de:	4603      	mov	r3, r0
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d023      	beq.n	800152c <main+0x228>
			SSD1306_Puts(oldModem2, &Font_7x10, SSD1306_COLOR_WHITE);
			SSD1306_GotoXY(0, 40);
			SSD1306_Puts(oldModem, &Font_7x10, SSD1306_COLOR_WHITE);
			SSD1306_UpdateScreen();
		}*/
		if (rxNew) {
 80014e4:	4b2f      	ldr	r3, [pc, #188]	@ (80015a4 <main+0x2a0>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d01f      	beq.n	800152c <main+0x228>
			if (strstr(oldModem, "+CMTI")) {
 80014ec:	492e      	ldr	r1, [pc, #184]	@ (80015a8 <main+0x2a4>)
 80014ee:	482f      	ldr	r0, [pc, #188]	@ (80015ac <main+0x2a8>)
 80014f0:	f002 fed5 	bl	800429e <strstr>
 80014f4:	4603      	mov	r3, r0
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d00a      	beq.n	8001510 <main+0x20c>
				stopStep = step;
 80014fa:	4b26      	ldr	r3, [pc, #152]	@ (8001594 <main+0x290>)
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	4a2c      	ldr	r2, [pc, #176]	@ (80015b0 <main+0x2ac>)
 8001500:	6013      	str	r3, [r2, #0]
				step = 12;
 8001502:	4b24      	ldr	r3, [pc, #144]	@ (8001594 <main+0x290>)
 8001504:	220c      	movs	r2, #12
 8001506:	601a      	str	r2, [r3, #0]
				rxATcommand(oldModem);
 8001508:	4828      	ldr	r0, [pc, #160]	@ (80015ac <main+0x2a8>)
 800150a:	f7ff f92f 	bl	800076c <rxATcommand>
 800150e:	e00a      	b.n	8001526 <main+0x222>
			}
			else if ((step==1))
 8001510:	4b20      	ldr	r3, [pc, #128]	@ (8001594 <main+0x290>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	2b01      	cmp	r3, #1
 8001516:	d103      	bne.n	8001520 <main+0x21c>
				rxATcommand(oldModem3);
 8001518:	4826      	ldr	r0, [pc, #152]	@ (80015b4 <main+0x2b0>)
 800151a:	f7ff f927 	bl	800076c <rxATcommand>
 800151e:	e002      	b.n	8001526 <main+0x222>
			else rxATcommand(oldModem);
 8001520:	4822      	ldr	r0, [pc, #136]	@ (80015ac <main+0x2a8>)
 8001522:	f7ff f923 	bl	800076c <rxATcommand>
			rxNew = false;
 8001526:	4b1f      	ldr	r3, [pc, #124]	@ (80015a4 <main+0x2a0>)
 8001528:	2200      	movs	r2, #0
 800152a:	601a      	str	r2, [r3, #0]
		}
	  }
	 if (step==12) HAL_Delay(1000);
 800152c:	4b19      	ldr	r3, [pc, #100]	@ (8001594 <main+0x290>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	2b0c      	cmp	r3, #12
 8001532:	d104      	bne.n	800153e <main+0x23a>
 8001534:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001538:	f000 fc1e 	bl	8001d78 <HAL_Delay>
 800153c:	e75a      	b.n	80013f4 <main+0xf0>
	 else HAL_Delay(250);
 800153e:	20fa      	movs	r0, #250	@ 0xfa
 8001540:	f000 fc1a 	bl	8001d78 <HAL_Delay>
	  if (ready||
 8001544:	e756      	b.n	80013f4 <main+0xf0>
 8001546:	bf00      	nop
 8001548:	20000044 	.word	0x20000044
 800154c:	20000048 	.word	0x20000048
 8001550:	2000004c 	.word	0x2000004c
 8001554:	20000050 	.word	0x20000050
 8001558:	08004ce8 	.word	0x08004ce8
 800155c:	20000870 	.word	0x20000870
 8001560:	40011000 	.word	0x40011000
 8001564:	08004cf8 	.word	0x08004cf8
 8001568:	200000d8 	.word	0x200000d8
 800156c:	08004d00 	.word	0x08004d00
 8001570:	08004d1c 	.word	0x08004d1c
 8001574:	08004d38 	.word	0x08004d38
 8001578:	08004d50 	.word	0x08004d50
 800157c:	20000120 	.word	0x20000120
 8001580:	20000000 	.word	0x20000000
 8001584:	200008b8 	.word	0x200008b8
 8001588:	200000d0 	.word	0x200000d0
 800158c:	20000004 	.word	0x20000004
 8001590:	000493e0 	.word	0x000493e0
 8001594:	200008b0 	.word	0x200008b0
 8001598:	0001d4c0 	.word	0x0001d4c0
 800159c:	08004a4c 	.word	0x08004a4c
 80015a0:	20000278 	.word	0x20000278
 80015a4:	200008b4 	.word	0x200008b4
 80015a8:	08004d58 	.word	0x08004d58
 80015ac:	20000478 	.word	0x20000478
 80015b0:	200000d4 	.word	0x200000d4
 80015b4:	20000670 	.word	0x20000670

080015b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b090      	sub	sp, #64	@ 0x40
 80015bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80015be:	f107 0318 	add.w	r3, r7, #24
 80015c2:	2228      	movs	r2, #40	@ 0x28
 80015c4:	2100      	movs	r1, #0
 80015c6:	4618      	mov	r0, r3
 80015c8:	f002 fe54 	bl	8004274 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80015cc:	1d3b      	adds	r3, r7, #4
 80015ce:	2200      	movs	r2, #0
 80015d0:	601a      	str	r2, [r3, #0]
 80015d2:	605a      	str	r2, [r3, #4]
 80015d4:	609a      	str	r2, [r3, #8]
 80015d6:	60da      	str	r2, [r3, #12]
 80015d8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80015da:	2301      	movs	r3, #1
 80015dc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80015de:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80015e2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80015e4:	2300      	movs	r3, #0
 80015e6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80015e8:	2301      	movs	r3, #1
 80015ea:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80015ec:	2302      	movs	r3, #2
 80015ee:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80015f0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80015f4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80015f6:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 80015fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015fc:	f107 0318 	add.w	r3, r7, #24
 8001600:	4618      	mov	r0, r3
 8001602:	f001 f93b 	bl	800287c <HAL_RCC_OscConfig>
 8001606:	4603      	mov	r3, r0
 8001608:	2b00      	cmp	r3, #0
 800160a:	d001      	beq.n	8001610 <SystemClock_Config+0x58>
  {
    Error_Handler();
 800160c:	f000 f912 	bl	8001834 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001610:	230f      	movs	r3, #15
 8001612:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001614:	2302      	movs	r3, #2
 8001616:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001618:	2300      	movs	r3, #0
 800161a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800161c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001620:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001622:	2300      	movs	r3, #0
 8001624:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001626:	1d3b      	adds	r3, r7, #4
 8001628:	2102      	movs	r1, #2
 800162a:	4618      	mov	r0, r3
 800162c:	f001 fba8 	bl	8002d80 <HAL_RCC_ClockConfig>
 8001630:	4603      	mov	r3, r0
 8001632:	2b00      	cmp	r3, #0
 8001634:	d001      	beq.n	800163a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001636:	f000 f8fd 	bl	8001834 <Error_Handler>
  }
}
 800163a:	bf00      	nop
 800163c:	3740      	adds	r7, #64	@ 0x40
 800163e:	46bd      	mov	sp, r7
 8001640:	bd80      	pop	{r7, pc}
	...

08001644 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001648:	4b11      	ldr	r3, [pc, #68]	@ (8001690 <MX_USART1_UART_Init+0x4c>)
 800164a:	4a12      	ldr	r2, [pc, #72]	@ (8001694 <MX_USART1_UART_Init+0x50>)
 800164c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800164e:	4b10      	ldr	r3, [pc, #64]	@ (8001690 <MX_USART1_UART_Init+0x4c>)
 8001650:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001654:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001656:	4b0e      	ldr	r3, [pc, #56]	@ (8001690 <MX_USART1_UART_Init+0x4c>)
 8001658:	2200      	movs	r2, #0
 800165a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800165c:	4b0c      	ldr	r3, [pc, #48]	@ (8001690 <MX_USART1_UART_Init+0x4c>)
 800165e:	2200      	movs	r2, #0
 8001660:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001662:	4b0b      	ldr	r3, [pc, #44]	@ (8001690 <MX_USART1_UART_Init+0x4c>)
 8001664:	2200      	movs	r2, #0
 8001666:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001668:	4b09      	ldr	r3, [pc, #36]	@ (8001690 <MX_USART1_UART_Init+0x4c>)
 800166a:	220c      	movs	r2, #12
 800166c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800166e:	4b08      	ldr	r3, [pc, #32]	@ (8001690 <MX_USART1_UART_Init+0x4c>)
 8001670:	2200      	movs	r2, #0
 8001672:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001674:	4b06      	ldr	r3, [pc, #24]	@ (8001690 <MX_USART1_UART_Init+0x4c>)
 8001676:	2200      	movs	r2, #0
 8001678:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800167a:	4805      	ldr	r0, [pc, #20]	@ (8001690 <MX_USART1_UART_Init+0x4c>)
 800167c:	f001 fd0e 	bl	800309c <HAL_UART_Init>
 8001680:	4603      	mov	r3, r0
 8001682:	2b00      	cmp	r3, #0
 8001684:	d001      	beq.n	800168a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001686:	f000 f8d5 	bl	8001834 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800168a:	bf00      	nop
 800168c:	bd80      	pop	{r7, pc}
 800168e:	bf00      	nop
 8001690:	200000d8 	.word	0x200000d8
 8001694:	40013800 	.word	0x40013800

08001698 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800169c:	4b11      	ldr	r3, [pc, #68]	@ (80016e4 <MX_USART2_UART_Init+0x4c>)
 800169e:	4a12      	ldr	r2, [pc, #72]	@ (80016e8 <MX_USART2_UART_Init+0x50>)
 80016a0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80016a2:	4b10      	ldr	r3, [pc, #64]	@ (80016e4 <MX_USART2_UART_Init+0x4c>)
 80016a4:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80016a8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80016aa:	4b0e      	ldr	r3, [pc, #56]	@ (80016e4 <MX_USART2_UART_Init+0x4c>)
 80016ac:	2200      	movs	r2, #0
 80016ae:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80016b0:	4b0c      	ldr	r3, [pc, #48]	@ (80016e4 <MX_USART2_UART_Init+0x4c>)
 80016b2:	2200      	movs	r2, #0
 80016b4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80016b6:	4b0b      	ldr	r3, [pc, #44]	@ (80016e4 <MX_USART2_UART_Init+0x4c>)
 80016b8:	2200      	movs	r2, #0
 80016ba:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80016bc:	4b09      	ldr	r3, [pc, #36]	@ (80016e4 <MX_USART2_UART_Init+0x4c>)
 80016be:	220c      	movs	r2, #12
 80016c0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016c2:	4b08      	ldr	r3, [pc, #32]	@ (80016e4 <MX_USART2_UART_Init+0x4c>)
 80016c4:	2200      	movs	r2, #0
 80016c6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80016c8:	4b06      	ldr	r3, [pc, #24]	@ (80016e4 <MX_USART2_UART_Init+0x4c>)
 80016ca:	2200      	movs	r2, #0
 80016cc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80016ce:	4805      	ldr	r0, [pc, #20]	@ (80016e4 <MX_USART2_UART_Init+0x4c>)
 80016d0:	f001 fce4 	bl	800309c <HAL_UART_Init>
 80016d4:	4603      	mov	r3, r0
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d001      	beq.n	80016de <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80016da:	f000 f8ab 	bl	8001834 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80016de:	bf00      	nop
 80016e0:	bd80      	pop	{r7, pc}
 80016e2:	bf00      	nop
 80016e4:	20000120 	.word	0x20000120
 80016e8:	40004400 	.word	0x40004400

080016ec <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b082      	sub	sp, #8
 80016f0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80016f2:	4b18      	ldr	r3, [pc, #96]	@ (8001754 <MX_DMA_Init+0x68>)
 80016f4:	695b      	ldr	r3, [r3, #20]
 80016f6:	4a17      	ldr	r2, [pc, #92]	@ (8001754 <MX_DMA_Init+0x68>)
 80016f8:	f043 0301 	orr.w	r3, r3, #1
 80016fc:	6153      	str	r3, [r2, #20]
 80016fe:	4b15      	ldr	r3, [pc, #84]	@ (8001754 <MX_DMA_Init+0x68>)
 8001700:	695b      	ldr	r3, [r3, #20]
 8001702:	f003 0301 	and.w	r3, r3, #1
 8001706:	607b      	str	r3, [r7, #4]
 8001708:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 800170a:	2200      	movs	r2, #0
 800170c:	2100      	movs	r1, #0
 800170e:	200e      	movs	r0, #14
 8001710:	f000 fc2d 	bl	8001f6e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8001714:	200e      	movs	r0, #14
 8001716:	f000 fc46 	bl	8001fa6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 800171a:	2200      	movs	r2, #0
 800171c:	2100      	movs	r1, #0
 800171e:	200f      	movs	r0, #15
 8001720:	f000 fc25 	bl	8001f6e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8001724:	200f      	movs	r0, #15
 8001726:	f000 fc3e 	bl	8001fa6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 800172a:	2200      	movs	r2, #0
 800172c:	2100      	movs	r1, #0
 800172e:	2010      	movs	r0, #16
 8001730:	f000 fc1d 	bl	8001f6e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8001734:	2010      	movs	r0, #16
 8001736:	f000 fc36 	bl	8001fa6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 800173a:	2200      	movs	r2, #0
 800173c:	2100      	movs	r1, #0
 800173e:	2011      	movs	r0, #17
 8001740:	f000 fc15 	bl	8001f6e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8001744:	2011      	movs	r0, #17
 8001746:	f000 fc2e 	bl	8001fa6 <HAL_NVIC_EnableIRQ>

}
 800174a:	bf00      	nop
 800174c:	3708      	adds	r7, #8
 800174e:	46bd      	mov	sp, r7
 8001750:	bd80      	pop	{r7, pc}
 8001752:	bf00      	nop
 8001754:	40021000 	.word	0x40021000

08001758 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b088      	sub	sp, #32
 800175c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800175e:	f107 0310 	add.w	r3, r7, #16
 8001762:	2200      	movs	r2, #0
 8001764:	601a      	str	r2, [r3, #0]
 8001766:	605a      	str	r2, [r3, #4]
 8001768:	609a      	str	r2, [r3, #8]
 800176a:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800176c:	4b2e      	ldr	r3, [pc, #184]	@ (8001828 <MX_GPIO_Init+0xd0>)
 800176e:	699b      	ldr	r3, [r3, #24]
 8001770:	4a2d      	ldr	r2, [pc, #180]	@ (8001828 <MX_GPIO_Init+0xd0>)
 8001772:	f043 0310 	orr.w	r3, r3, #16
 8001776:	6193      	str	r3, [r2, #24]
 8001778:	4b2b      	ldr	r3, [pc, #172]	@ (8001828 <MX_GPIO_Init+0xd0>)
 800177a:	699b      	ldr	r3, [r3, #24]
 800177c:	f003 0310 	and.w	r3, r3, #16
 8001780:	60fb      	str	r3, [r7, #12]
 8001782:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001784:	4b28      	ldr	r3, [pc, #160]	@ (8001828 <MX_GPIO_Init+0xd0>)
 8001786:	699b      	ldr	r3, [r3, #24]
 8001788:	4a27      	ldr	r2, [pc, #156]	@ (8001828 <MX_GPIO_Init+0xd0>)
 800178a:	f043 0320 	orr.w	r3, r3, #32
 800178e:	6193      	str	r3, [r2, #24]
 8001790:	4b25      	ldr	r3, [pc, #148]	@ (8001828 <MX_GPIO_Init+0xd0>)
 8001792:	699b      	ldr	r3, [r3, #24]
 8001794:	f003 0320 	and.w	r3, r3, #32
 8001798:	60bb      	str	r3, [r7, #8]
 800179a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800179c:	4b22      	ldr	r3, [pc, #136]	@ (8001828 <MX_GPIO_Init+0xd0>)
 800179e:	699b      	ldr	r3, [r3, #24]
 80017a0:	4a21      	ldr	r2, [pc, #132]	@ (8001828 <MX_GPIO_Init+0xd0>)
 80017a2:	f043 0304 	orr.w	r3, r3, #4
 80017a6:	6193      	str	r3, [r2, #24]
 80017a8:	4b1f      	ldr	r3, [pc, #124]	@ (8001828 <MX_GPIO_Init+0xd0>)
 80017aa:	699b      	ldr	r3, [r3, #24]
 80017ac:	f003 0304 	and.w	r3, r3, #4
 80017b0:	607b      	str	r3, [r7, #4]
 80017b2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80017b4:	4b1c      	ldr	r3, [pc, #112]	@ (8001828 <MX_GPIO_Init+0xd0>)
 80017b6:	699b      	ldr	r3, [r3, #24]
 80017b8:	4a1b      	ldr	r2, [pc, #108]	@ (8001828 <MX_GPIO_Init+0xd0>)
 80017ba:	f043 0308 	orr.w	r3, r3, #8
 80017be:	6193      	str	r3, [r2, #24]
 80017c0:	4b19      	ldr	r3, [pc, #100]	@ (8001828 <MX_GPIO_Init+0xd0>)
 80017c2:	699b      	ldr	r3, [r3, #24]
 80017c4:	f003 0308 	and.w	r3, r3, #8
 80017c8:	603b      	str	r3, [r7, #0]
 80017ca:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80017cc:	2200      	movs	r2, #0
 80017ce:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80017d2:	4816      	ldr	r0, [pc, #88]	@ (800182c <MX_GPIO_Init+0xd4>)
 80017d4:	f001 f820 	bl	8002818 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_13, GPIO_PIN_RESET);
 80017d8:	2200      	movs	r2, #0
 80017da:	f44f 5140 	mov.w	r1, #12288	@ 0x3000
 80017de:	4814      	ldr	r0, [pc, #80]	@ (8001830 <MX_GPIO_Init+0xd8>)
 80017e0:	f001 f81a 	bl	8002818 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80017e4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80017e8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017ea:	2301      	movs	r3, #1
 80017ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80017ee:	2302      	movs	r3, #2
 80017f0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80017f2:	2303      	movs	r3, #3
 80017f4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017f6:	f107 0310 	add.w	r3, r7, #16
 80017fa:	4619      	mov	r1, r3
 80017fc:	480b      	ldr	r0, [pc, #44]	@ (800182c <MX_GPIO_Init+0xd4>)
 80017fe:	f000 fe8f 	bl	8002520 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8001802:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8001806:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001808:	2301      	movs	r3, #1
 800180a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800180c:	2302      	movs	r3, #2
 800180e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001810:	2303      	movs	r3, #3
 8001812:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001814:	f107 0310 	add.w	r3, r7, #16
 8001818:	4619      	mov	r1, r3
 800181a:	4805      	ldr	r0, [pc, #20]	@ (8001830 <MX_GPIO_Init+0xd8>)
 800181c:	f000 fe80 	bl	8002520 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001820:	bf00      	nop
 8001822:	3720      	adds	r7, #32
 8001824:	46bd      	mov	sp, r7
 8001826:	bd80      	pop	{r7, pc}
 8001828:	40021000 	.word	0x40021000
 800182c:	40011000 	.word	0x40011000
 8001830:	40010c00 	.word	0x40010c00

08001834 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001834:	b480      	push	{r7}
 8001836:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001838:	b672      	cpsid	i
}
 800183a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800183c:	bf00      	nop
 800183e:	e7fd      	b.n	800183c <Error_Handler+0x8>

08001840 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001840:	b480      	push	{r7}
 8001842:	b085      	sub	sp, #20
 8001844:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001846:	4b15      	ldr	r3, [pc, #84]	@ (800189c <HAL_MspInit+0x5c>)
 8001848:	699b      	ldr	r3, [r3, #24]
 800184a:	4a14      	ldr	r2, [pc, #80]	@ (800189c <HAL_MspInit+0x5c>)
 800184c:	f043 0301 	orr.w	r3, r3, #1
 8001850:	6193      	str	r3, [r2, #24]
 8001852:	4b12      	ldr	r3, [pc, #72]	@ (800189c <HAL_MspInit+0x5c>)
 8001854:	699b      	ldr	r3, [r3, #24]
 8001856:	f003 0301 	and.w	r3, r3, #1
 800185a:	60bb      	str	r3, [r7, #8]
 800185c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800185e:	4b0f      	ldr	r3, [pc, #60]	@ (800189c <HAL_MspInit+0x5c>)
 8001860:	69db      	ldr	r3, [r3, #28]
 8001862:	4a0e      	ldr	r2, [pc, #56]	@ (800189c <HAL_MspInit+0x5c>)
 8001864:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001868:	61d3      	str	r3, [r2, #28]
 800186a:	4b0c      	ldr	r3, [pc, #48]	@ (800189c <HAL_MspInit+0x5c>)
 800186c:	69db      	ldr	r3, [r3, #28]
 800186e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001872:	607b      	str	r3, [r7, #4]
 8001874:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001876:	4b0a      	ldr	r3, [pc, #40]	@ (80018a0 <HAL_MspInit+0x60>)
 8001878:	685b      	ldr	r3, [r3, #4]
 800187a:	60fb      	str	r3, [r7, #12]
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001882:	60fb      	str	r3, [r7, #12]
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800188a:	60fb      	str	r3, [r7, #12]
 800188c:	4a04      	ldr	r2, [pc, #16]	@ (80018a0 <HAL_MspInit+0x60>)
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001892:	bf00      	nop
 8001894:	3714      	adds	r7, #20
 8001896:	46bd      	mov	sp, r7
 8001898:	bc80      	pop	{r7}
 800189a:	4770      	bx	lr
 800189c:	40021000 	.word	0x40021000
 80018a0:	40010000 	.word	0x40010000

080018a4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b08a      	sub	sp, #40	@ 0x28
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018ac:	f107 0318 	add.w	r3, r7, #24
 80018b0:	2200      	movs	r2, #0
 80018b2:	601a      	str	r2, [r3, #0]
 80018b4:	605a      	str	r2, [r3, #4]
 80018b6:	609a      	str	r2, [r3, #8]
 80018b8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	4a8c      	ldr	r2, [pc, #560]	@ (8001af0 <HAL_UART_MspInit+0x24c>)
 80018c0:	4293      	cmp	r3, r2
 80018c2:	f040 8087 	bne.w	80019d4 <HAL_UART_MspInit+0x130>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80018c6:	4b8b      	ldr	r3, [pc, #556]	@ (8001af4 <HAL_UART_MspInit+0x250>)
 80018c8:	699b      	ldr	r3, [r3, #24]
 80018ca:	4a8a      	ldr	r2, [pc, #552]	@ (8001af4 <HAL_UART_MspInit+0x250>)
 80018cc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80018d0:	6193      	str	r3, [r2, #24]
 80018d2:	4b88      	ldr	r3, [pc, #544]	@ (8001af4 <HAL_UART_MspInit+0x250>)
 80018d4:	699b      	ldr	r3, [r3, #24]
 80018d6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80018da:	617b      	str	r3, [r7, #20]
 80018dc:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018de:	4b85      	ldr	r3, [pc, #532]	@ (8001af4 <HAL_UART_MspInit+0x250>)
 80018e0:	699b      	ldr	r3, [r3, #24]
 80018e2:	4a84      	ldr	r2, [pc, #528]	@ (8001af4 <HAL_UART_MspInit+0x250>)
 80018e4:	f043 0304 	orr.w	r3, r3, #4
 80018e8:	6193      	str	r3, [r2, #24]
 80018ea:	4b82      	ldr	r3, [pc, #520]	@ (8001af4 <HAL_UART_MspInit+0x250>)
 80018ec:	699b      	ldr	r3, [r3, #24]
 80018ee:	f003 0304 	and.w	r3, r3, #4
 80018f2:	613b      	str	r3, [r7, #16]
 80018f4:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80018f6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80018fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018fc:	2302      	movs	r3, #2
 80018fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001900:	2303      	movs	r3, #3
 8001902:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001904:	f107 0318 	add.w	r3, r7, #24
 8001908:	4619      	mov	r1, r3
 800190a:	487b      	ldr	r0, [pc, #492]	@ (8001af8 <HAL_UART_MspInit+0x254>)
 800190c:	f000 fe08 	bl	8002520 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001910:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001914:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001916:	2300      	movs	r3, #0
 8001918:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800191a:	2300      	movs	r3, #0
 800191c:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800191e:	f107 0318 	add.w	r3, r7, #24
 8001922:	4619      	mov	r1, r3
 8001924:	4874      	ldr	r0, [pc, #464]	@ (8001af8 <HAL_UART_MspInit+0x254>)
 8001926:	f000 fdfb 	bl	8002520 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 800192a:	4b74      	ldr	r3, [pc, #464]	@ (8001afc <HAL_UART_MspInit+0x258>)
 800192c:	4a74      	ldr	r2, [pc, #464]	@ (8001b00 <HAL_UART_MspInit+0x25c>)
 800192e:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001930:	4b72      	ldr	r3, [pc, #456]	@ (8001afc <HAL_UART_MspInit+0x258>)
 8001932:	2200      	movs	r2, #0
 8001934:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001936:	4b71      	ldr	r3, [pc, #452]	@ (8001afc <HAL_UART_MspInit+0x258>)
 8001938:	2200      	movs	r2, #0
 800193a:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800193c:	4b6f      	ldr	r3, [pc, #444]	@ (8001afc <HAL_UART_MspInit+0x258>)
 800193e:	2280      	movs	r2, #128	@ 0x80
 8001940:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001942:	4b6e      	ldr	r3, [pc, #440]	@ (8001afc <HAL_UART_MspInit+0x258>)
 8001944:	2200      	movs	r2, #0
 8001946:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001948:	4b6c      	ldr	r3, [pc, #432]	@ (8001afc <HAL_UART_MspInit+0x258>)
 800194a:	2200      	movs	r2, #0
 800194c:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 800194e:	4b6b      	ldr	r3, [pc, #428]	@ (8001afc <HAL_UART_MspInit+0x258>)
 8001950:	2200      	movs	r2, #0
 8001952:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001954:	4b69      	ldr	r3, [pc, #420]	@ (8001afc <HAL_UART_MspInit+0x258>)
 8001956:	2200      	movs	r2, #0
 8001958:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800195a:	4868      	ldr	r0, [pc, #416]	@ (8001afc <HAL_UART_MspInit+0x258>)
 800195c:	f000 fb3e 	bl	8001fdc <HAL_DMA_Init>
 8001960:	4603      	mov	r3, r0
 8001962:	2b00      	cmp	r3, #0
 8001964:	d001      	beq.n	800196a <HAL_UART_MspInit+0xc6>
    {
      Error_Handler();
 8001966:	f7ff ff65 	bl	8001834 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	4a63      	ldr	r2, [pc, #396]	@ (8001afc <HAL_UART_MspInit+0x258>)
 800196e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001970:	4a62      	ldr	r2, [pc, #392]	@ (8001afc <HAL_UART_MspInit+0x258>)
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	6253      	str	r3, [r2, #36]	@ 0x24

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8001976:	4b63      	ldr	r3, [pc, #396]	@ (8001b04 <HAL_UART_MspInit+0x260>)
 8001978:	4a63      	ldr	r2, [pc, #396]	@ (8001b08 <HAL_UART_MspInit+0x264>)
 800197a:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800197c:	4b61      	ldr	r3, [pc, #388]	@ (8001b04 <HAL_UART_MspInit+0x260>)
 800197e:	2210      	movs	r2, #16
 8001980:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001982:	4b60      	ldr	r3, [pc, #384]	@ (8001b04 <HAL_UART_MspInit+0x260>)
 8001984:	2200      	movs	r2, #0
 8001986:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001988:	4b5e      	ldr	r3, [pc, #376]	@ (8001b04 <HAL_UART_MspInit+0x260>)
 800198a:	2280      	movs	r2, #128	@ 0x80
 800198c:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800198e:	4b5d      	ldr	r3, [pc, #372]	@ (8001b04 <HAL_UART_MspInit+0x260>)
 8001990:	2200      	movs	r2, #0
 8001992:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001994:	4b5b      	ldr	r3, [pc, #364]	@ (8001b04 <HAL_UART_MspInit+0x260>)
 8001996:	2200      	movs	r2, #0
 8001998:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 800199a:	4b5a      	ldr	r3, [pc, #360]	@ (8001b04 <HAL_UART_MspInit+0x260>)
 800199c:	2200      	movs	r2, #0
 800199e:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80019a0:	4b58      	ldr	r3, [pc, #352]	@ (8001b04 <HAL_UART_MspInit+0x260>)
 80019a2:	2200      	movs	r2, #0
 80019a4:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80019a6:	4857      	ldr	r0, [pc, #348]	@ (8001b04 <HAL_UART_MspInit+0x260>)
 80019a8:	f000 fb18 	bl	8001fdc <HAL_DMA_Init>
 80019ac:	4603      	mov	r3, r0
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d001      	beq.n	80019b6 <HAL_UART_MspInit+0x112>
    {
      Error_Handler();
 80019b2:	f7ff ff3f 	bl	8001834 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	4a52      	ldr	r2, [pc, #328]	@ (8001b04 <HAL_UART_MspInit+0x260>)
 80019ba:	639a      	str	r2, [r3, #56]	@ 0x38
 80019bc:	4a51      	ldr	r2, [pc, #324]	@ (8001b04 <HAL_UART_MspInit+0x260>)
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	6253      	str	r3, [r2, #36]	@ 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80019c2:	2200      	movs	r2, #0
 80019c4:	2100      	movs	r1, #0
 80019c6:	2025      	movs	r0, #37	@ 0x25
 80019c8:	f000 fad1 	bl	8001f6e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80019cc:	2025      	movs	r0, #37	@ 0x25
 80019ce:	f000 faea 	bl	8001fa6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80019d2:	e089      	b.n	8001ae8 <HAL_UART_MspInit+0x244>
  else if(huart->Instance==USART2)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	4a4c      	ldr	r2, [pc, #304]	@ (8001b0c <HAL_UART_MspInit+0x268>)
 80019da:	4293      	cmp	r3, r2
 80019dc:	f040 8084 	bne.w	8001ae8 <HAL_UART_MspInit+0x244>
    __HAL_RCC_USART2_CLK_ENABLE();
 80019e0:	4b44      	ldr	r3, [pc, #272]	@ (8001af4 <HAL_UART_MspInit+0x250>)
 80019e2:	69db      	ldr	r3, [r3, #28]
 80019e4:	4a43      	ldr	r2, [pc, #268]	@ (8001af4 <HAL_UART_MspInit+0x250>)
 80019e6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80019ea:	61d3      	str	r3, [r2, #28]
 80019ec:	4b41      	ldr	r3, [pc, #260]	@ (8001af4 <HAL_UART_MspInit+0x250>)
 80019ee:	69db      	ldr	r3, [r3, #28]
 80019f0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019f4:	60fb      	str	r3, [r7, #12]
 80019f6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019f8:	4b3e      	ldr	r3, [pc, #248]	@ (8001af4 <HAL_UART_MspInit+0x250>)
 80019fa:	699b      	ldr	r3, [r3, #24]
 80019fc:	4a3d      	ldr	r2, [pc, #244]	@ (8001af4 <HAL_UART_MspInit+0x250>)
 80019fe:	f043 0304 	orr.w	r3, r3, #4
 8001a02:	6193      	str	r3, [r2, #24]
 8001a04:	4b3b      	ldr	r3, [pc, #236]	@ (8001af4 <HAL_UART_MspInit+0x250>)
 8001a06:	699b      	ldr	r3, [r3, #24]
 8001a08:	f003 0304 	and.w	r3, r3, #4
 8001a0c:	60bb      	str	r3, [r7, #8]
 8001a0e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001a10:	2304      	movs	r3, #4
 8001a12:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a14:	2302      	movs	r3, #2
 8001a16:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001a18:	2303      	movs	r3, #3
 8001a1a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a1c:	f107 0318 	add.w	r3, r7, #24
 8001a20:	4619      	mov	r1, r3
 8001a22:	4835      	ldr	r0, [pc, #212]	@ (8001af8 <HAL_UART_MspInit+0x254>)
 8001a24:	f000 fd7c 	bl	8002520 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001a28:	2308      	movs	r3, #8
 8001a2a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a30:	2300      	movs	r3, #0
 8001a32:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a34:	f107 0318 	add.w	r3, r7, #24
 8001a38:	4619      	mov	r1, r3
 8001a3a:	482f      	ldr	r0, [pc, #188]	@ (8001af8 <HAL_UART_MspInit+0x254>)
 8001a3c:	f000 fd70 	bl	8002520 <HAL_GPIO_Init>
    hdma_usart2_tx.Instance = DMA1_Channel7;
 8001a40:	4b33      	ldr	r3, [pc, #204]	@ (8001b10 <HAL_UART_MspInit+0x26c>)
 8001a42:	4a34      	ldr	r2, [pc, #208]	@ (8001b14 <HAL_UART_MspInit+0x270>)
 8001a44:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001a46:	4b32      	ldr	r3, [pc, #200]	@ (8001b10 <HAL_UART_MspInit+0x26c>)
 8001a48:	2210      	movs	r2, #16
 8001a4a:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001a4c:	4b30      	ldr	r3, [pc, #192]	@ (8001b10 <HAL_UART_MspInit+0x26c>)
 8001a4e:	2200      	movs	r2, #0
 8001a50:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001a52:	4b2f      	ldr	r3, [pc, #188]	@ (8001b10 <HAL_UART_MspInit+0x26c>)
 8001a54:	2280      	movs	r2, #128	@ 0x80
 8001a56:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001a58:	4b2d      	ldr	r3, [pc, #180]	@ (8001b10 <HAL_UART_MspInit+0x26c>)
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001a5e:	4b2c      	ldr	r3, [pc, #176]	@ (8001b10 <HAL_UART_MspInit+0x26c>)
 8001a60:	2200      	movs	r2, #0
 8001a62:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8001a64:	4b2a      	ldr	r3, [pc, #168]	@ (8001b10 <HAL_UART_MspInit+0x26c>)
 8001a66:	2200      	movs	r2, #0
 8001a68:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001a6a:	4b29      	ldr	r3, [pc, #164]	@ (8001b10 <HAL_UART_MspInit+0x26c>)
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8001a70:	4827      	ldr	r0, [pc, #156]	@ (8001b10 <HAL_UART_MspInit+0x26c>)
 8001a72:	f000 fab3 	bl	8001fdc <HAL_DMA_Init>
 8001a76:	4603      	mov	r3, r0
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d001      	beq.n	8001a80 <HAL_UART_MspInit+0x1dc>
      Error_Handler();
 8001a7c:	f7ff feda 	bl	8001834 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	4a23      	ldr	r2, [pc, #140]	@ (8001b10 <HAL_UART_MspInit+0x26c>)
 8001a84:	639a      	str	r2, [r3, #56]	@ 0x38
 8001a86:	4a22      	ldr	r2, [pc, #136]	@ (8001b10 <HAL_UART_MspInit+0x26c>)
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	6253      	str	r3, [r2, #36]	@ 0x24
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8001a8c:	4b22      	ldr	r3, [pc, #136]	@ (8001b18 <HAL_UART_MspInit+0x274>)
 8001a8e:	4a23      	ldr	r2, [pc, #140]	@ (8001b1c <HAL_UART_MspInit+0x278>)
 8001a90:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001a92:	4b21      	ldr	r3, [pc, #132]	@ (8001b18 <HAL_UART_MspInit+0x274>)
 8001a94:	2200      	movs	r2, #0
 8001a96:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001a98:	4b1f      	ldr	r3, [pc, #124]	@ (8001b18 <HAL_UART_MspInit+0x274>)
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001a9e:	4b1e      	ldr	r3, [pc, #120]	@ (8001b18 <HAL_UART_MspInit+0x274>)
 8001aa0:	2280      	movs	r2, #128	@ 0x80
 8001aa2:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001aa4:	4b1c      	ldr	r3, [pc, #112]	@ (8001b18 <HAL_UART_MspInit+0x274>)
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001aaa:	4b1b      	ldr	r3, [pc, #108]	@ (8001b18 <HAL_UART_MspInit+0x274>)
 8001aac:	2200      	movs	r2, #0
 8001aae:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8001ab0:	4b19      	ldr	r3, [pc, #100]	@ (8001b18 <HAL_UART_MspInit+0x274>)
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001ab6:	4b18      	ldr	r3, [pc, #96]	@ (8001b18 <HAL_UART_MspInit+0x274>)
 8001ab8:	2200      	movs	r2, #0
 8001aba:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8001abc:	4816      	ldr	r0, [pc, #88]	@ (8001b18 <HAL_UART_MspInit+0x274>)
 8001abe:	f000 fa8d 	bl	8001fdc <HAL_DMA_Init>
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d001      	beq.n	8001acc <HAL_UART_MspInit+0x228>
      Error_Handler();
 8001ac8:	f7ff feb4 	bl	8001834 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	4a12      	ldr	r2, [pc, #72]	@ (8001b18 <HAL_UART_MspInit+0x274>)
 8001ad0:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001ad2:	4a11      	ldr	r2, [pc, #68]	@ (8001b18 <HAL_UART_MspInit+0x274>)
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	6253      	str	r3, [r2, #36]	@ 0x24
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001ad8:	2200      	movs	r2, #0
 8001ada:	2100      	movs	r1, #0
 8001adc:	2026      	movs	r0, #38	@ 0x26
 8001ade:	f000 fa46 	bl	8001f6e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001ae2:	2026      	movs	r0, #38	@ 0x26
 8001ae4:	f000 fa5f 	bl	8001fa6 <HAL_NVIC_EnableIRQ>
}
 8001ae8:	bf00      	nop
 8001aea:	3728      	adds	r7, #40	@ 0x28
 8001aec:	46bd      	mov	sp, r7
 8001aee:	bd80      	pop	{r7, pc}
 8001af0:	40013800 	.word	0x40013800
 8001af4:	40021000 	.word	0x40021000
 8001af8:	40010800 	.word	0x40010800
 8001afc:	20000168 	.word	0x20000168
 8001b00:	40020058 	.word	0x40020058
 8001b04:	200001ac 	.word	0x200001ac
 8001b08:	40020044 	.word	0x40020044
 8001b0c:	40004400 	.word	0x40004400
 8001b10:	200001f0 	.word	0x200001f0
 8001b14:	40020080 	.word	0x40020080
 8001b18:	20000234 	.word	0x20000234
 8001b1c:	4002006c 	.word	0x4002006c

08001b20 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b20:	b480      	push	{r7}
 8001b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001b24:	bf00      	nop
 8001b26:	e7fd      	b.n	8001b24 <NMI_Handler+0x4>

08001b28 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b2c:	bf00      	nop
 8001b2e:	e7fd      	b.n	8001b2c <HardFault_Handler+0x4>

08001b30 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b30:	b480      	push	{r7}
 8001b32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b34:	bf00      	nop
 8001b36:	e7fd      	b.n	8001b34 <MemManage_Handler+0x4>

08001b38 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b3c:	bf00      	nop
 8001b3e:	e7fd      	b.n	8001b3c <BusFault_Handler+0x4>

08001b40 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b40:	b480      	push	{r7}
 8001b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b44:	bf00      	nop
 8001b46:	e7fd      	b.n	8001b44 <UsageFault_Handler+0x4>

08001b48 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b4c:	bf00      	nop
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	bc80      	pop	{r7}
 8001b52:	4770      	bx	lr

08001b54 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b54:	b480      	push	{r7}
 8001b56:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b58:	bf00      	nop
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bc80      	pop	{r7}
 8001b5e:	4770      	bx	lr

08001b60 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b60:	b480      	push	{r7}
 8001b62:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b64:	bf00      	nop
 8001b66:	46bd      	mov	sp, r7
 8001b68:	bc80      	pop	{r7}
 8001b6a:	4770      	bx	lr

08001b6c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b70:	f000 f8e6 	bl	8001d40 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b74:	bf00      	nop
 8001b76:	bd80      	pop	{r7, pc}

08001b78 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8001b7c:	4802      	ldr	r0, [pc, #8]	@ (8001b88 <DMA1_Channel4_IRQHandler+0x10>)
 8001b7e:	f000 fb9b 	bl	80022b8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8001b82:	bf00      	nop
 8001b84:	bd80      	pop	{r7, pc}
 8001b86:	bf00      	nop
 8001b88:	200001ac 	.word	0x200001ac

08001b8c <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001b90:	4802      	ldr	r0, [pc, #8]	@ (8001b9c <DMA1_Channel5_IRQHandler+0x10>)
 8001b92:	f000 fb91 	bl	80022b8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8001b96:	bf00      	nop
 8001b98:	bd80      	pop	{r7, pc}
 8001b9a:	bf00      	nop
 8001b9c:	20000168 	.word	0x20000168

08001ba0 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001ba4:	4802      	ldr	r0, [pc, #8]	@ (8001bb0 <DMA1_Channel6_IRQHandler+0x10>)
 8001ba6:	f000 fb87 	bl	80022b8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8001baa:	bf00      	nop
 8001bac:	bd80      	pop	{r7, pc}
 8001bae:	bf00      	nop
 8001bb0:	20000234 	.word	0x20000234

08001bb4 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8001bb8:	4802      	ldr	r0, [pc, #8]	@ (8001bc4 <DMA1_Channel7_IRQHandler+0x10>)
 8001bba:	f000 fb7d 	bl	80022b8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8001bbe:	bf00      	nop
 8001bc0:	bd80      	pop	{r7, pc}
 8001bc2:	bf00      	nop
 8001bc4:	200001f0 	.word	0x200001f0

08001bc8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
	//HAL_UART_Transmit(&huart1,"USART Transmit\r\n",16,0xFFFF);
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001bcc:	4802      	ldr	r0, [pc, #8]	@ (8001bd8 <USART1_IRQHandler+0x10>)
 8001bce:	f001 fbcd 	bl	800336c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001bd2:	bf00      	nop
 8001bd4:	bd80      	pop	{r7, pc}
 8001bd6:	bf00      	nop
 8001bd8:	200000d8 	.word	0x200000d8

08001bdc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001be0:	4802      	ldr	r0, [pc, #8]	@ (8001bec <USART2_IRQHandler+0x10>)
 8001be2:	f001 fbc3 	bl	800336c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001be6:	bf00      	nop
 8001be8:	bd80      	pop	{r7, pc}
 8001bea:	bf00      	nop
 8001bec:	20000120 	.word	0x20000120

08001bf0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b086      	sub	sp, #24
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001bf8:	4a14      	ldr	r2, [pc, #80]	@ (8001c4c <_sbrk+0x5c>)
 8001bfa:	4b15      	ldr	r3, [pc, #84]	@ (8001c50 <_sbrk+0x60>)
 8001bfc:	1ad3      	subs	r3, r2, r3
 8001bfe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c00:	697b      	ldr	r3, [r7, #20]
 8001c02:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c04:	4b13      	ldr	r3, [pc, #76]	@ (8001c54 <_sbrk+0x64>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d102      	bne.n	8001c12 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c0c:	4b11      	ldr	r3, [pc, #68]	@ (8001c54 <_sbrk+0x64>)
 8001c0e:	4a12      	ldr	r2, [pc, #72]	@ (8001c58 <_sbrk+0x68>)
 8001c10:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c12:	4b10      	ldr	r3, [pc, #64]	@ (8001c54 <_sbrk+0x64>)
 8001c14:	681a      	ldr	r2, [r3, #0]
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	4413      	add	r3, r2
 8001c1a:	693a      	ldr	r2, [r7, #16]
 8001c1c:	429a      	cmp	r2, r3
 8001c1e:	d207      	bcs.n	8001c30 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c20:	f002 fb64 	bl	80042ec <__errno>
 8001c24:	4603      	mov	r3, r0
 8001c26:	220c      	movs	r2, #12
 8001c28:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001c2a:	f04f 33ff 	mov.w	r3, #4294967295
 8001c2e:	e009      	b.n	8001c44 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c30:	4b08      	ldr	r3, [pc, #32]	@ (8001c54 <_sbrk+0x64>)
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c36:	4b07      	ldr	r3, [pc, #28]	@ (8001c54 <_sbrk+0x64>)
 8001c38:	681a      	ldr	r2, [r3, #0]
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	4413      	add	r3, r2
 8001c3e:	4a05      	ldr	r2, [pc, #20]	@ (8001c54 <_sbrk+0x64>)
 8001c40:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c42:	68fb      	ldr	r3, [r7, #12]
}
 8001c44:	4618      	mov	r0, r3
 8001c46:	3718      	adds	r7, #24
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	bd80      	pop	{r7, pc}
 8001c4c:	20002800 	.word	0x20002800
 8001c50:	00000400 	.word	0x00000400
 8001c54:	200008c4 	.word	0x200008c4
 8001c58:	20000a18 	.word	0x20000a18

08001c5c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c60:	bf00      	nop
 8001c62:	46bd      	mov	sp, r7
 8001c64:	bc80      	pop	{r7}
 8001c66:	4770      	bx	lr

08001c68 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001c68:	f7ff fff8 	bl	8001c5c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001c6c:	480b      	ldr	r0, [pc, #44]	@ (8001c9c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001c6e:	490c      	ldr	r1, [pc, #48]	@ (8001ca0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001c70:	4a0c      	ldr	r2, [pc, #48]	@ (8001ca4 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001c72:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c74:	e002      	b.n	8001c7c <LoopCopyDataInit>

08001c76 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c76:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c78:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c7a:	3304      	adds	r3, #4

08001c7c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c7c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c7e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c80:	d3f9      	bcc.n	8001c76 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c82:	4a09      	ldr	r2, [pc, #36]	@ (8001ca8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001c84:	4c09      	ldr	r4, [pc, #36]	@ (8001cac <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001c86:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c88:	e001      	b.n	8001c8e <LoopFillZerobss>

08001c8a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c8a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c8c:	3204      	adds	r2, #4

08001c8e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c8e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c90:	d3fb      	bcc.n	8001c8a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001c92:	f002 fb31 	bl	80042f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001c96:	f7ff fb35 	bl	8001304 <main>
  bx lr
 8001c9a:	4770      	bx	lr
  ldr r0, =_sdata
 8001c9c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ca0:	200000b4 	.word	0x200000b4
  ldr r2, =_sidata
 8001ca4:	08004dd0 	.word	0x08004dd0
  ldr r2, =_sbss
 8001ca8:	200000b4 	.word	0x200000b4
  ldr r4, =_ebss
 8001cac:	20000a14 	.word	0x20000a14

08001cb0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001cb0:	e7fe      	b.n	8001cb0 <ADC1_2_IRQHandler>
	...

08001cb4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001cb8:	4b08      	ldr	r3, [pc, #32]	@ (8001cdc <HAL_Init+0x28>)
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	4a07      	ldr	r2, [pc, #28]	@ (8001cdc <HAL_Init+0x28>)
 8001cbe:	f043 0310 	orr.w	r3, r3, #16
 8001cc2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001cc4:	2003      	movs	r0, #3
 8001cc6:	f000 f947 	bl	8001f58 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001cca:	200f      	movs	r0, #15
 8001ccc:	f000 f808 	bl	8001ce0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001cd0:	f7ff fdb6 	bl	8001840 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001cd4:	2300      	movs	r3, #0
}
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	bd80      	pop	{r7, pc}
 8001cda:	bf00      	nop
 8001cdc:	40022000 	.word	0x40022000

08001ce0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b082      	sub	sp, #8
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001ce8:	4b12      	ldr	r3, [pc, #72]	@ (8001d34 <HAL_InitTick+0x54>)
 8001cea:	681a      	ldr	r2, [r3, #0]
 8001cec:	4b12      	ldr	r3, [pc, #72]	@ (8001d38 <HAL_InitTick+0x58>)
 8001cee:	781b      	ldrb	r3, [r3, #0]
 8001cf0:	4619      	mov	r1, r3
 8001cf2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001cf6:	fbb3 f3f1 	udiv	r3, r3, r1
 8001cfa:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cfe:	4618      	mov	r0, r3
 8001d00:	f000 f95f 	bl	8001fc2 <HAL_SYSTICK_Config>
 8001d04:	4603      	mov	r3, r0
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d001      	beq.n	8001d0e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001d0a:	2301      	movs	r3, #1
 8001d0c:	e00e      	b.n	8001d2c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	2b0f      	cmp	r3, #15
 8001d12:	d80a      	bhi.n	8001d2a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d14:	2200      	movs	r2, #0
 8001d16:	6879      	ldr	r1, [r7, #4]
 8001d18:	f04f 30ff 	mov.w	r0, #4294967295
 8001d1c:	f000 f927 	bl	8001f6e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001d20:	4a06      	ldr	r2, [pc, #24]	@ (8001d3c <HAL_InitTick+0x5c>)
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001d26:	2300      	movs	r3, #0
 8001d28:	e000      	b.n	8001d2c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001d2a:	2301      	movs	r3, #1
}
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	3708      	adds	r7, #8
 8001d30:	46bd      	mov	sp, r7
 8001d32:	bd80      	pop	{r7, pc}
 8001d34:	20000058 	.word	0x20000058
 8001d38:	20000060 	.word	0x20000060
 8001d3c:	2000005c 	.word	0x2000005c

08001d40 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d40:	b480      	push	{r7}
 8001d42:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d44:	4b05      	ldr	r3, [pc, #20]	@ (8001d5c <HAL_IncTick+0x1c>)
 8001d46:	781b      	ldrb	r3, [r3, #0]
 8001d48:	461a      	mov	r2, r3
 8001d4a:	4b05      	ldr	r3, [pc, #20]	@ (8001d60 <HAL_IncTick+0x20>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	4413      	add	r3, r2
 8001d50:	4a03      	ldr	r2, [pc, #12]	@ (8001d60 <HAL_IncTick+0x20>)
 8001d52:	6013      	str	r3, [r2, #0]
}
 8001d54:	bf00      	nop
 8001d56:	46bd      	mov	sp, r7
 8001d58:	bc80      	pop	{r7}
 8001d5a:	4770      	bx	lr
 8001d5c:	20000060 	.word	0x20000060
 8001d60:	200008c8 	.word	0x200008c8

08001d64 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d64:	b480      	push	{r7}
 8001d66:	af00      	add	r7, sp, #0
  return uwTick;
 8001d68:	4b02      	ldr	r3, [pc, #8]	@ (8001d74 <HAL_GetTick+0x10>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
}
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	bc80      	pop	{r7}
 8001d72:	4770      	bx	lr
 8001d74:	200008c8 	.word	0x200008c8

08001d78 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b084      	sub	sp, #16
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d80:	f7ff fff0 	bl	8001d64 <HAL_GetTick>
 8001d84:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d90:	d005      	beq.n	8001d9e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001d92:	4b0a      	ldr	r3, [pc, #40]	@ (8001dbc <HAL_Delay+0x44>)
 8001d94:	781b      	ldrb	r3, [r3, #0]
 8001d96:	461a      	mov	r2, r3
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	4413      	add	r3, r2
 8001d9c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001d9e:	bf00      	nop
 8001da0:	f7ff ffe0 	bl	8001d64 <HAL_GetTick>
 8001da4:	4602      	mov	r2, r0
 8001da6:	68bb      	ldr	r3, [r7, #8]
 8001da8:	1ad3      	subs	r3, r2, r3
 8001daa:	68fa      	ldr	r2, [r7, #12]
 8001dac:	429a      	cmp	r2, r3
 8001dae:	d8f7      	bhi.n	8001da0 <HAL_Delay+0x28>
  {
  }
}
 8001db0:	bf00      	nop
 8001db2:	bf00      	nop
 8001db4:	3710      	adds	r7, #16
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bd80      	pop	{r7, pc}
 8001dba:	bf00      	nop
 8001dbc:	20000060 	.word	0x20000060

08001dc0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001dc0:	b480      	push	{r7}
 8001dc2:	b085      	sub	sp, #20
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	f003 0307 	and.w	r3, r3, #7
 8001dce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001dd0:	4b0c      	ldr	r3, [pc, #48]	@ (8001e04 <__NVIC_SetPriorityGrouping+0x44>)
 8001dd2:	68db      	ldr	r3, [r3, #12]
 8001dd4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001dd6:	68ba      	ldr	r2, [r7, #8]
 8001dd8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001ddc:	4013      	ands	r3, r2
 8001dde:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001de4:	68bb      	ldr	r3, [r7, #8]
 8001de6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001de8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001dec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001df0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001df2:	4a04      	ldr	r2, [pc, #16]	@ (8001e04 <__NVIC_SetPriorityGrouping+0x44>)
 8001df4:	68bb      	ldr	r3, [r7, #8]
 8001df6:	60d3      	str	r3, [r2, #12]
}
 8001df8:	bf00      	nop
 8001dfa:	3714      	adds	r7, #20
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	bc80      	pop	{r7}
 8001e00:	4770      	bx	lr
 8001e02:	bf00      	nop
 8001e04:	e000ed00 	.word	0xe000ed00

08001e08 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e0c:	4b04      	ldr	r3, [pc, #16]	@ (8001e20 <__NVIC_GetPriorityGrouping+0x18>)
 8001e0e:	68db      	ldr	r3, [r3, #12]
 8001e10:	0a1b      	lsrs	r3, r3, #8
 8001e12:	f003 0307 	and.w	r3, r3, #7
}
 8001e16:	4618      	mov	r0, r3
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	bc80      	pop	{r7}
 8001e1c:	4770      	bx	lr
 8001e1e:	bf00      	nop
 8001e20:	e000ed00 	.word	0xe000ed00

08001e24 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e24:	b480      	push	{r7}
 8001e26:	b083      	sub	sp, #12
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	4603      	mov	r3, r0
 8001e2c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	db0b      	blt.n	8001e4e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e36:	79fb      	ldrb	r3, [r7, #7]
 8001e38:	f003 021f 	and.w	r2, r3, #31
 8001e3c:	4906      	ldr	r1, [pc, #24]	@ (8001e58 <__NVIC_EnableIRQ+0x34>)
 8001e3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e42:	095b      	lsrs	r3, r3, #5
 8001e44:	2001      	movs	r0, #1
 8001e46:	fa00 f202 	lsl.w	r2, r0, r2
 8001e4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001e4e:	bf00      	nop
 8001e50:	370c      	adds	r7, #12
 8001e52:	46bd      	mov	sp, r7
 8001e54:	bc80      	pop	{r7}
 8001e56:	4770      	bx	lr
 8001e58:	e000e100 	.word	0xe000e100

08001e5c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	b083      	sub	sp, #12
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	4603      	mov	r3, r0
 8001e64:	6039      	str	r1, [r7, #0]
 8001e66:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	db0a      	blt.n	8001e86 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e70:	683b      	ldr	r3, [r7, #0]
 8001e72:	b2da      	uxtb	r2, r3
 8001e74:	490c      	ldr	r1, [pc, #48]	@ (8001ea8 <__NVIC_SetPriority+0x4c>)
 8001e76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e7a:	0112      	lsls	r2, r2, #4
 8001e7c:	b2d2      	uxtb	r2, r2
 8001e7e:	440b      	add	r3, r1
 8001e80:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e84:	e00a      	b.n	8001e9c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e86:	683b      	ldr	r3, [r7, #0]
 8001e88:	b2da      	uxtb	r2, r3
 8001e8a:	4908      	ldr	r1, [pc, #32]	@ (8001eac <__NVIC_SetPriority+0x50>)
 8001e8c:	79fb      	ldrb	r3, [r7, #7]
 8001e8e:	f003 030f 	and.w	r3, r3, #15
 8001e92:	3b04      	subs	r3, #4
 8001e94:	0112      	lsls	r2, r2, #4
 8001e96:	b2d2      	uxtb	r2, r2
 8001e98:	440b      	add	r3, r1
 8001e9a:	761a      	strb	r2, [r3, #24]
}
 8001e9c:	bf00      	nop
 8001e9e:	370c      	adds	r7, #12
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	bc80      	pop	{r7}
 8001ea4:	4770      	bx	lr
 8001ea6:	bf00      	nop
 8001ea8:	e000e100 	.word	0xe000e100
 8001eac:	e000ed00 	.word	0xe000ed00

08001eb0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	b089      	sub	sp, #36	@ 0x24
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	60f8      	str	r0, [r7, #12]
 8001eb8:	60b9      	str	r1, [r7, #8]
 8001eba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	f003 0307 	and.w	r3, r3, #7
 8001ec2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ec4:	69fb      	ldr	r3, [r7, #28]
 8001ec6:	f1c3 0307 	rsb	r3, r3, #7
 8001eca:	2b04      	cmp	r3, #4
 8001ecc:	bf28      	it	cs
 8001ece:	2304      	movcs	r3, #4
 8001ed0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ed2:	69fb      	ldr	r3, [r7, #28]
 8001ed4:	3304      	adds	r3, #4
 8001ed6:	2b06      	cmp	r3, #6
 8001ed8:	d902      	bls.n	8001ee0 <NVIC_EncodePriority+0x30>
 8001eda:	69fb      	ldr	r3, [r7, #28]
 8001edc:	3b03      	subs	r3, #3
 8001ede:	e000      	b.n	8001ee2 <NVIC_EncodePriority+0x32>
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ee4:	f04f 32ff 	mov.w	r2, #4294967295
 8001ee8:	69bb      	ldr	r3, [r7, #24]
 8001eea:	fa02 f303 	lsl.w	r3, r2, r3
 8001eee:	43da      	mvns	r2, r3
 8001ef0:	68bb      	ldr	r3, [r7, #8]
 8001ef2:	401a      	ands	r2, r3
 8001ef4:	697b      	ldr	r3, [r7, #20]
 8001ef6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ef8:	f04f 31ff 	mov.w	r1, #4294967295
 8001efc:	697b      	ldr	r3, [r7, #20]
 8001efe:	fa01 f303 	lsl.w	r3, r1, r3
 8001f02:	43d9      	mvns	r1, r3
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f08:	4313      	orrs	r3, r2
         );
}
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	3724      	adds	r7, #36	@ 0x24
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bc80      	pop	{r7}
 8001f12:	4770      	bx	lr

08001f14 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b082      	sub	sp, #8
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	3b01      	subs	r3, #1
 8001f20:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001f24:	d301      	bcc.n	8001f2a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f26:	2301      	movs	r3, #1
 8001f28:	e00f      	b.n	8001f4a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f2a:	4a0a      	ldr	r2, [pc, #40]	@ (8001f54 <SysTick_Config+0x40>)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	3b01      	subs	r3, #1
 8001f30:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f32:	210f      	movs	r1, #15
 8001f34:	f04f 30ff 	mov.w	r0, #4294967295
 8001f38:	f7ff ff90 	bl	8001e5c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f3c:	4b05      	ldr	r3, [pc, #20]	@ (8001f54 <SysTick_Config+0x40>)
 8001f3e:	2200      	movs	r2, #0
 8001f40:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f42:	4b04      	ldr	r3, [pc, #16]	@ (8001f54 <SysTick_Config+0x40>)
 8001f44:	2207      	movs	r2, #7
 8001f46:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f48:	2300      	movs	r3, #0
}
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	3708      	adds	r7, #8
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	bd80      	pop	{r7, pc}
 8001f52:	bf00      	nop
 8001f54:	e000e010 	.word	0xe000e010

08001f58 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b082      	sub	sp, #8
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f60:	6878      	ldr	r0, [r7, #4]
 8001f62:	f7ff ff2d 	bl	8001dc0 <__NVIC_SetPriorityGrouping>
}
 8001f66:	bf00      	nop
 8001f68:	3708      	adds	r7, #8
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	bd80      	pop	{r7, pc}

08001f6e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001f6e:	b580      	push	{r7, lr}
 8001f70:	b086      	sub	sp, #24
 8001f72:	af00      	add	r7, sp, #0
 8001f74:	4603      	mov	r3, r0
 8001f76:	60b9      	str	r1, [r7, #8]
 8001f78:	607a      	str	r2, [r7, #4]
 8001f7a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001f80:	f7ff ff42 	bl	8001e08 <__NVIC_GetPriorityGrouping>
 8001f84:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f86:	687a      	ldr	r2, [r7, #4]
 8001f88:	68b9      	ldr	r1, [r7, #8]
 8001f8a:	6978      	ldr	r0, [r7, #20]
 8001f8c:	f7ff ff90 	bl	8001eb0 <NVIC_EncodePriority>
 8001f90:	4602      	mov	r2, r0
 8001f92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f96:	4611      	mov	r1, r2
 8001f98:	4618      	mov	r0, r3
 8001f9a:	f7ff ff5f 	bl	8001e5c <__NVIC_SetPriority>
}
 8001f9e:	bf00      	nop
 8001fa0:	3718      	adds	r7, #24
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	bd80      	pop	{r7, pc}

08001fa6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fa6:	b580      	push	{r7, lr}
 8001fa8:	b082      	sub	sp, #8
 8001faa:	af00      	add	r7, sp, #0
 8001fac:	4603      	mov	r3, r0
 8001fae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001fb0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	f7ff ff35 	bl	8001e24 <__NVIC_EnableIRQ>
}
 8001fba:	bf00      	nop
 8001fbc:	3708      	adds	r7, #8
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	bd80      	pop	{r7, pc}

08001fc2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001fc2:	b580      	push	{r7, lr}
 8001fc4:	b082      	sub	sp, #8
 8001fc6:	af00      	add	r7, sp, #0
 8001fc8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001fca:	6878      	ldr	r0, [r7, #4]
 8001fcc:	f7ff ffa2 	bl	8001f14 <SysTick_Config>
 8001fd0:	4603      	mov	r3, r0
}
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	3708      	adds	r7, #8
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	bd80      	pop	{r7, pc}
	...

08001fdc <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001fdc:	b480      	push	{r7}
 8001fde:	b085      	sub	sp, #20
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d101      	bne.n	8001ff2 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001fee:	2301      	movs	r3, #1
 8001ff0:	e043      	b.n	800207a <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	461a      	mov	r2, r3
 8001ff8:	4b22      	ldr	r3, [pc, #136]	@ (8002084 <HAL_DMA_Init+0xa8>)
 8001ffa:	4413      	add	r3, r2
 8001ffc:	4a22      	ldr	r2, [pc, #136]	@ (8002088 <HAL_DMA_Init+0xac>)
 8001ffe:	fba2 2303 	umull	r2, r3, r2, r3
 8002002:	091b      	lsrs	r3, r3, #4
 8002004:	009a      	lsls	r2, r3, #2
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	4a1f      	ldr	r2, [pc, #124]	@ (800208c <HAL_DMA_Init+0xb0>)
 800200e:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	2202      	movs	r2, #2
 8002014:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002026:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 800202a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002034:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	68db      	ldr	r3, [r3, #12]
 800203a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002040:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	695b      	ldr	r3, [r3, #20]
 8002046:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800204c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	69db      	ldr	r3, [r3, #28]
 8002052:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002054:	68fa      	ldr	r2, [r7, #12]
 8002056:	4313      	orrs	r3, r2
 8002058:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	68fa      	ldr	r2, [r7, #12]
 8002060:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	2200      	movs	r2, #0
 8002066:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	2201      	movs	r2, #1
 800206c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	2200      	movs	r2, #0
 8002074:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8002078:	2300      	movs	r3, #0
}
 800207a:	4618      	mov	r0, r3
 800207c:	3714      	adds	r7, #20
 800207e:	46bd      	mov	sp, r7
 8002080:	bc80      	pop	{r7}
 8002082:	4770      	bx	lr
 8002084:	bffdfff8 	.word	0xbffdfff8
 8002088:	cccccccd 	.word	0xcccccccd
 800208c:	40020000 	.word	0x40020000

08002090 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	b086      	sub	sp, #24
 8002094:	af00      	add	r7, sp, #0
 8002096:	60f8      	str	r0, [r7, #12]
 8002098:	60b9      	str	r1, [r7, #8]
 800209a:	607a      	str	r2, [r7, #4]
 800209c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800209e:	2300      	movs	r3, #0
 80020a0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80020a8:	2b01      	cmp	r3, #1
 80020aa:	d101      	bne.n	80020b0 <HAL_DMA_Start_IT+0x20>
 80020ac:	2302      	movs	r3, #2
 80020ae:	e04b      	b.n	8002148 <HAL_DMA_Start_IT+0xb8>
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	2201      	movs	r2, #1
 80020b4:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80020be:	b2db      	uxtb	r3, r3
 80020c0:	2b01      	cmp	r3, #1
 80020c2:	d13a      	bne.n	800213a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	2202      	movs	r2, #2
 80020c8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	2200      	movs	r2, #0
 80020d0:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	681a      	ldr	r2, [r3, #0]
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f022 0201 	bic.w	r2, r2, #1
 80020e0:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80020e2:	683b      	ldr	r3, [r7, #0]
 80020e4:	687a      	ldr	r2, [r7, #4]
 80020e6:	68b9      	ldr	r1, [r7, #8]
 80020e8:	68f8      	ldr	r0, [r7, #12]
 80020ea:	f000 f9eb 	bl	80024c4 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d008      	beq.n	8002108 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	681a      	ldr	r2, [r3, #0]
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f042 020e 	orr.w	r2, r2, #14
 8002104:	601a      	str	r2, [r3, #0]
 8002106:	e00f      	b.n	8002128 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	681a      	ldr	r2, [r3, #0]
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f022 0204 	bic.w	r2, r2, #4
 8002116:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	681a      	ldr	r2, [r3, #0]
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f042 020a 	orr.w	r2, r2, #10
 8002126:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	681a      	ldr	r2, [r3, #0]
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f042 0201 	orr.w	r2, r2, #1
 8002136:	601a      	str	r2, [r3, #0]
 8002138:	e005      	b.n	8002146 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	2200      	movs	r2, #0
 800213e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8002142:	2302      	movs	r3, #2
 8002144:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8002146:	7dfb      	ldrb	r3, [r7, #23]
}
 8002148:	4618      	mov	r0, r3
 800214a:	3718      	adds	r7, #24
 800214c:	46bd      	mov	sp, r7
 800214e:	bd80      	pop	{r7, pc}

08002150 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002150:	b480      	push	{r7}
 8002152:	b085      	sub	sp, #20
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002158:	2300      	movs	r3, #0
 800215a:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002162:	b2db      	uxtb	r3, r3
 8002164:	2b02      	cmp	r3, #2
 8002166:	d008      	beq.n	800217a <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	2204      	movs	r2, #4
 800216c:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	2200      	movs	r2, #0
 8002172:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002176:	2301      	movs	r3, #1
 8002178:	e020      	b.n	80021bc <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	681a      	ldr	r2, [r3, #0]
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f022 020e 	bic.w	r2, r2, #14
 8002188:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	681a      	ldr	r2, [r3, #0]
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f022 0201 	bic.w	r2, r2, #1
 8002198:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80021a2:	2101      	movs	r1, #1
 80021a4:	fa01 f202 	lsl.w	r2, r1, r2
 80021a8:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	2201      	movs	r2, #1
 80021ae:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	2200      	movs	r2, #0
 80021b6:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80021ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80021bc:	4618      	mov	r0, r3
 80021be:	3714      	adds	r7, #20
 80021c0:	46bd      	mov	sp, r7
 80021c2:	bc80      	pop	{r7}
 80021c4:	4770      	bx	lr
	...

080021c8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b084      	sub	sp, #16
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80021d0:	2300      	movs	r3, #0
 80021d2:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80021da:	b2db      	uxtb	r3, r3
 80021dc:	2b02      	cmp	r3, #2
 80021de:	d005      	beq.n	80021ec <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	2204      	movs	r2, #4
 80021e4:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 80021e6:	2301      	movs	r3, #1
 80021e8:	73fb      	strb	r3, [r7, #15]
 80021ea:	e051      	b.n	8002290 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	681a      	ldr	r2, [r3, #0]
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f022 020e 	bic.w	r2, r2, #14
 80021fa:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	681a      	ldr	r2, [r3, #0]
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f022 0201 	bic.w	r2, r2, #1
 800220a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	4a22      	ldr	r2, [pc, #136]	@ (800229c <HAL_DMA_Abort_IT+0xd4>)
 8002212:	4293      	cmp	r3, r2
 8002214:	d029      	beq.n	800226a <HAL_DMA_Abort_IT+0xa2>
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	4a21      	ldr	r2, [pc, #132]	@ (80022a0 <HAL_DMA_Abort_IT+0xd8>)
 800221c:	4293      	cmp	r3, r2
 800221e:	d022      	beq.n	8002266 <HAL_DMA_Abort_IT+0x9e>
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	4a1f      	ldr	r2, [pc, #124]	@ (80022a4 <HAL_DMA_Abort_IT+0xdc>)
 8002226:	4293      	cmp	r3, r2
 8002228:	d01a      	beq.n	8002260 <HAL_DMA_Abort_IT+0x98>
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	4a1e      	ldr	r2, [pc, #120]	@ (80022a8 <HAL_DMA_Abort_IT+0xe0>)
 8002230:	4293      	cmp	r3, r2
 8002232:	d012      	beq.n	800225a <HAL_DMA_Abort_IT+0x92>
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	4a1c      	ldr	r2, [pc, #112]	@ (80022ac <HAL_DMA_Abort_IT+0xe4>)
 800223a:	4293      	cmp	r3, r2
 800223c:	d00a      	beq.n	8002254 <HAL_DMA_Abort_IT+0x8c>
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	4a1b      	ldr	r2, [pc, #108]	@ (80022b0 <HAL_DMA_Abort_IT+0xe8>)
 8002244:	4293      	cmp	r3, r2
 8002246:	d102      	bne.n	800224e <HAL_DMA_Abort_IT+0x86>
 8002248:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800224c:	e00e      	b.n	800226c <HAL_DMA_Abort_IT+0xa4>
 800224e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002252:	e00b      	b.n	800226c <HAL_DMA_Abort_IT+0xa4>
 8002254:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002258:	e008      	b.n	800226c <HAL_DMA_Abort_IT+0xa4>
 800225a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800225e:	e005      	b.n	800226c <HAL_DMA_Abort_IT+0xa4>
 8002260:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002264:	e002      	b.n	800226c <HAL_DMA_Abort_IT+0xa4>
 8002266:	2310      	movs	r3, #16
 8002268:	e000      	b.n	800226c <HAL_DMA_Abort_IT+0xa4>
 800226a:	2301      	movs	r3, #1
 800226c:	4a11      	ldr	r2, [pc, #68]	@ (80022b4 <HAL_DMA_Abort_IT+0xec>)
 800226e:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	2201      	movs	r2, #1
 8002274:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	2200      	movs	r2, #0
 800227c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002284:	2b00      	cmp	r3, #0
 8002286:	d003      	beq.n	8002290 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800228c:	6878      	ldr	r0, [r7, #4]
 800228e:	4798      	blx	r3
    } 
  }
  return status;
 8002290:	7bfb      	ldrb	r3, [r7, #15]
}
 8002292:	4618      	mov	r0, r3
 8002294:	3710      	adds	r7, #16
 8002296:	46bd      	mov	sp, r7
 8002298:	bd80      	pop	{r7, pc}
 800229a:	bf00      	nop
 800229c:	40020008 	.word	0x40020008
 80022a0:	4002001c 	.word	0x4002001c
 80022a4:	40020030 	.word	0x40020030
 80022a8:	40020044 	.word	0x40020044
 80022ac:	40020058 	.word	0x40020058
 80022b0:	4002006c 	.word	0x4002006c
 80022b4:	40020000 	.word	0x40020000

080022b8 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b084      	sub	sp, #16
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022d4:	2204      	movs	r2, #4
 80022d6:	409a      	lsls	r2, r3
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	4013      	ands	r3, r2
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d04f      	beq.n	8002380 <HAL_DMA_IRQHandler+0xc8>
 80022e0:	68bb      	ldr	r3, [r7, #8]
 80022e2:	f003 0304 	and.w	r3, r3, #4
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d04a      	beq.n	8002380 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f003 0320 	and.w	r3, r3, #32
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d107      	bne.n	8002308 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	681a      	ldr	r2, [r3, #0]
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f022 0204 	bic.w	r2, r2, #4
 8002306:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	4a66      	ldr	r2, [pc, #408]	@ (80024a8 <HAL_DMA_IRQHandler+0x1f0>)
 800230e:	4293      	cmp	r3, r2
 8002310:	d029      	beq.n	8002366 <HAL_DMA_IRQHandler+0xae>
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	4a65      	ldr	r2, [pc, #404]	@ (80024ac <HAL_DMA_IRQHandler+0x1f4>)
 8002318:	4293      	cmp	r3, r2
 800231a:	d022      	beq.n	8002362 <HAL_DMA_IRQHandler+0xaa>
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	4a63      	ldr	r2, [pc, #396]	@ (80024b0 <HAL_DMA_IRQHandler+0x1f8>)
 8002322:	4293      	cmp	r3, r2
 8002324:	d01a      	beq.n	800235c <HAL_DMA_IRQHandler+0xa4>
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	4a62      	ldr	r2, [pc, #392]	@ (80024b4 <HAL_DMA_IRQHandler+0x1fc>)
 800232c:	4293      	cmp	r3, r2
 800232e:	d012      	beq.n	8002356 <HAL_DMA_IRQHandler+0x9e>
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	4a60      	ldr	r2, [pc, #384]	@ (80024b8 <HAL_DMA_IRQHandler+0x200>)
 8002336:	4293      	cmp	r3, r2
 8002338:	d00a      	beq.n	8002350 <HAL_DMA_IRQHandler+0x98>
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	4a5f      	ldr	r2, [pc, #380]	@ (80024bc <HAL_DMA_IRQHandler+0x204>)
 8002340:	4293      	cmp	r3, r2
 8002342:	d102      	bne.n	800234a <HAL_DMA_IRQHandler+0x92>
 8002344:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002348:	e00e      	b.n	8002368 <HAL_DMA_IRQHandler+0xb0>
 800234a:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 800234e:	e00b      	b.n	8002368 <HAL_DMA_IRQHandler+0xb0>
 8002350:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8002354:	e008      	b.n	8002368 <HAL_DMA_IRQHandler+0xb0>
 8002356:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800235a:	e005      	b.n	8002368 <HAL_DMA_IRQHandler+0xb0>
 800235c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002360:	e002      	b.n	8002368 <HAL_DMA_IRQHandler+0xb0>
 8002362:	2340      	movs	r3, #64	@ 0x40
 8002364:	e000      	b.n	8002368 <HAL_DMA_IRQHandler+0xb0>
 8002366:	2304      	movs	r3, #4
 8002368:	4a55      	ldr	r2, [pc, #340]	@ (80024c0 <HAL_DMA_IRQHandler+0x208>)
 800236a:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002370:	2b00      	cmp	r3, #0
 8002372:	f000 8094 	beq.w	800249e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800237a:	6878      	ldr	r0, [r7, #4]
 800237c:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 800237e:	e08e      	b.n	800249e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002384:	2202      	movs	r2, #2
 8002386:	409a      	lsls	r2, r3
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	4013      	ands	r3, r2
 800238c:	2b00      	cmp	r3, #0
 800238e:	d056      	beq.n	800243e <HAL_DMA_IRQHandler+0x186>
 8002390:	68bb      	ldr	r3, [r7, #8]
 8002392:	f003 0302 	and.w	r3, r3, #2
 8002396:	2b00      	cmp	r3, #0
 8002398:	d051      	beq.n	800243e <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f003 0320 	and.w	r3, r3, #32
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d10b      	bne.n	80023c0 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	681a      	ldr	r2, [r3, #0]
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f022 020a 	bic.w	r2, r2, #10
 80023b6:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	2201      	movs	r2, #1
 80023bc:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	4a38      	ldr	r2, [pc, #224]	@ (80024a8 <HAL_DMA_IRQHandler+0x1f0>)
 80023c6:	4293      	cmp	r3, r2
 80023c8:	d029      	beq.n	800241e <HAL_DMA_IRQHandler+0x166>
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	4a37      	ldr	r2, [pc, #220]	@ (80024ac <HAL_DMA_IRQHandler+0x1f4>)
 80023d0:	4293      	cmp	r3, r2
 80023d2:	d022      	beq.n	800241a <HAL_DMA_IRQHandler+0x162>
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	4a35      	ldr	r2, [pc, #212]	@ (80024b0 <HAL_DMA_IRQHandler+0x1f8>)
 80023da:	4293      	cmp	r3, r2
 80023dc:	d01a      	beq.n	8002414 <HAL_DMA_IRQHandler+0x15c>
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	4a34      	ldr	r2, [pc, #208]	@ (80024b4 <HAL_DMA_IRQHandler+0x1fc>)
 80023e4:	4293      	cmp	r3, r2
 80023e6:	d012      	beq.n	800240e <HAL_DMA_IRQHandler+0x156>
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	4a32      	ldr	r2, [pc, #200]	@ (80024b8 <HAL_DMA_IRQHandler+0x200>)
 80023ee:	4293      	cmp	r3, r2
 80023f0:	d00a      	beq.n	8002408 <HAL_DMA_IRQHandler+0x150>
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	4a31      	ldr	r2, [pc, #196]	@ (80024bc <HAL_DMA_IRQHandler+0x204>)
 80023f8:	4293      	cmp	r3, r2
 80023fa:	d102      	bne.n	8002402 <HAL_DMA_IRQHandler+0x14a>
 80023fc:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8002400:	e00e      	b.n	8002420 <HAL_DMA_IRQHandler+0x168>
 8002402:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002406:	e00b      	b.n	8002420 <HAL_DMA_IRQHandler+0x168>
 8002408:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800240c:	e008      	b.n	8002420 <HAL_DMA_IRQHandler+0x168>
 800240e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002412:	e005      	b.n	8002420 <HAL_DMA_IRQHandler+0x168>
 8002414:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002418:	e002      	b.n	8002420 <HAL_DMA_IRQHandler+0x168>
 800241a:	2320      	movs	r3, #32
 800241c:	e000      	b.n	8002420 <HAL_DMA_IRQHandler+0x168>
 800241e:	2302      	movs	r3, #2
 8002420:	4a27      	ldr	r2, [pc, #156]	@ (80024c0 <HAL_DMA_IRQHandler+0x208>)
 8002422:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	2200      	movs	r2, #0
 8002428:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002430:	2b00      	cmp	r3, #0
 8002432:	d034      	beq.n	800249e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002438:	6878      	ldr	r0, [r7, #4]
 800243a:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800243c:	e02f      	b.n	800249e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002442:	2208      	movs	r2, #8
 8002444:	409a      	lsls	r2, r3
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	4013      	ands	r3, r2
 800244a:	2b00      	cmp	r3, #0
 800244c:	d028      	beq.n	80024a0 <HAL_DMA_IRQHandler+0x1e8>
 800244e:	68bb      	ldr	r3, [r7, #8]
 8002450:	f003 0308 	and.w	r3, r3, #8
 8002454:	2b00      	cmp	r3, #0
 8002456:	d023      	beq.n	80024a0 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	681a      	ldr	r2, [r3, #0]
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f022 020e 	bic.w	r2, r2, #14
 8002466:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002470:	2101      	movs	r1, #1
 8002472:	fa01 f202 	lsl.w	r2, r1, r2
 8002476:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	2201      	movs	r2, #1
 800247c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	2201      	movs	r2, #1
 8002482:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	2200      	movs	r2, #0
 800248a:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002492:	2b00      	cmp	r3, #0
 8002494:	d004      	beq.n	80024a0 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800249a:	6878      	ldr	r0, [r7, #4]
 800249c:	4798      	blx	r3
    }
  }
  return;
 800249e:	bf00      	nop
 80024a0:	bf00      	nop
}
 80024a2:	3710      	adds	r7, #16
 80024a4:	46bd      	mov	sp, r7
 80024a6:	bd80      	pop	{r7, pc}
 80024a8:	40020008 	.word	0x40020008
 80024ac:	4002001c 	.word	0x4002001c
 80024b0:	40020030 	.word	0x40020030
 80024b4:	40020044 	.word	0x40020044
 80024b8:	40020058 	.word	0x40020058
 80024bc:	4002006c 	.word	0x4002006c
 80024c0:	40020000 	.word	0x40020000

080024c4 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80024c4:	b480      	push	{r7}
 80024c6:	b085      	sub	sp, #20
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	60f8      	str	r0, [r7, #12]
 80024cc:	60b9      	str	r1, [r7, #8]
 80024ce:	607a      	str	r2, [r7, #4]
 80024d0:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80024da:	2101      	movs	r1, #1
 80024dc:	fa01 f202 	lsl.w	r2, r1, r2
 80024e0:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	683a      	ldr	r2, [r7, #0]
 80024e8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	685b      	ldr	r3, [r3, #4]
 80024ee:	2b10      	cmp	r3, #16
 80024f0:	d108      	bne.n	8002504 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	687a      	ldr	r2, [r7, #4]
 80024f8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	68ba      	ldr	r2, [r7, #8]
 8002500:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002502:	e007      	b.n	8002514 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	68ba      	ldr	r2, [r7, #8]
 800250a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	687a      	ldr	r2, [r7, #4]
 8002512:	60da      	str	r2, [r3, #12]
}
 8002514:	bf00      	nop
 8002516:	3714      	adds	r7, #20
 8002518:	46bd      	mov	sp, r7
 800251a:	bc80      	pop	{r7}
 800251c:	4770      	bx	lr
	...

08002520 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002520:	b480      	push	{r7}
 8002522:	b08b      	sub	sp, #44	@ 0x2c
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
 8002528:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800252a:	2300      	movs	r3, #0
 800252c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800252e:	2300      	movs	r3, #0
 8002530:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002532:	e161      	b.n	80027f8 <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002534:	2201      	movs	r2, #1
 8002536:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002538:	fa02 f303 	lsl.w	r3, r2, r3
 800253c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800253e:	683b      	ldr	r3, [r7, #0]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	69fa      	ldr	r2, [r7, #28]
 8002544:	4013      	ands	r3, r2
 8002546:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002548:	69ba      	ldr	r2, [r7, #24]
 800254a:	69fb      	ldr	r3, [r7, #28]
 800254c:	429a      	cmp	r2, r3
 800254e:	f040 8150 	bne.w	80027f2 <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002552:	683b      	ldr	r3, [r7, #0]
 8002554:	685b      	ldr	r3, [r3, #4]
 8002556:	4a97      	ldr	r2, [pc, #604]	@ (80027b4 <HAL_GPIO_Init+0x294>)
 8002558:	4293      	cmp	r3, r2
 800255a:	d05e      	beq.n	800261a <HAL_GPIO_Init+0xfa>
 800255c:	4a95      	ldr	r2, [pc, #596]	@ (80027b4 <HAL_GPIO_Init+0x294>)
 800255e:	4293      	cmp	r3, r2
 8002560:	d875      	bhi.n	800264e <HAL_GPIO_Init+0x12e>
 8002562:	4a95      	ldr	r2, [pc, #596]	@ (80027b8 <HAL_GPIO_Init+0x298>)
 8002564:	4293      	cmp	r3, r2
 8002566:	d058      	beq.n	800261a <HAL_GPIO_Init+0xfa>
 8002568:	4a93      	ldr	r2, [pc, #588]	@ (80027b8 <HAL_GPIO_Init+0x298>)
 800256a:	4293      	cmp	r3, r2
 800256c:	d86f      	bhi.n	800264e <HAL_GPIO_Init+0x12e>
 800256e:	4a93      	ldr	r2, [pc, #588]	@ (80027bc <HAL_GPIO_Init+0x29c>)
 8002570:	4293      	cmp	r3, r2
 8002572:	d052      	beq.n	800261a <HAL_GPIO_Init+0xfa>
 8002574:	4a91      	ldr	r2, [pc, #580]	@ (80027bc <HAL_GPIO_Init+0x29c>)
 8002576:	4293      	cmp	r3, r2
 8002578:	d869      	bhi.n	800264e <HAL_GPIO_Init+0x12e>
 800257a:	4a91      	ldr	r2, [pc, #580]	@ (80027c0 <HAL_GPIO_Init+0x2a0>)
 800257c:	4293      	cmp	r3, r2
 800257e:	d04c      	beq.n	800261a <HAL_GPIO_Init+0xfa>
 8002580:	4a8f      	ldr	r2, [pc, #572]	@ (80027c0 <HAL_GPIO_Init+0x2a0>)
 8002582:	4293      	cmp	r3, r2
 8002584:	d863      	bhi.n	800264e <HAL_GPIO_Init+0x12e>
 8002586:	4a8f      	ldr	r2, [pc, #572]	@ (80027c4 <HAL_GPIO_Init+0x2a4>)
 8002588:	4293      	cmp	r3, r2
 800258a:	d046      	beq.n	800261a <HAL_GPIO_Init+0xfa>
 800258c:	4a8d      	ldr	r2, [pc, #564]	@ (80027c4 <HAL_GPIO_Init+0x2a4>)
 800258e:	4293      	cmp	r3, r2
 8002590:	d85d      	bhi.n	800264e <HAL_GPIO_Init+0x12e>
 8002592:	2b12      	cmp	r3, #18
 8002594:	d82a      	bhi.n	80025ec <HAL_GPIO_Init+0xcc>
 8002596:	2b12      	cmp	r3, #18
 8002598:	d859      	bhi.n	800264e <HAL_GPIO_Init+0x12e>
 800259a:	a201      	add	r2, pc, #4	@ (adr r2, 80025a0 <HAL_GPIO_Init+0x80>)
 800259c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025a0:	0800261b 	.word	0x0800261b
 80025a4:	080025f5 	.word	0x080025f5
 80025a8:	08002607 	.word	0x08002607
 80025ac:	08002649 	.word	0x08002649
 80025b0:	0800264f 	.word	0x0800264f
 80025b4:	0800264f 	.word	0x0800264f
 80025b8:	0800264f 	.word	0x0800264f
 80025bc:	0800264f 	.word	0x0800264f
 80025c0:	0800264f 	.word	0x0800264f
 80025c4:	0800264f 	.word	0x0800264f
 80025c8:	0800264f 	.word	0x0800264f
 80025cc:	0800264f 	.word	0x0800264f
 80025d0:	0800264f 	.word	0x0800264f
 80025d4:	0800264f 	.word	0x0800264f
 80025d8:	0800264f 	.word	0x0800264f
 80025dc:	0800264f 	.word	0x0800264f
 80025e0:	0800264f 	.word	0x0800264f
 80025e4:	080025fd 	.word	0x080025fd
 80025e8:	08002611 	.word	0x08002611
 80025ec:	4a76      	ldr	r2, [pc, #472]	@ (80027c8 <HAL_GPIO_Init+0x2a8>)
 80025ee:	4293      	cmp	r3, r2
 80025f0:	d013      	beq.n	800261a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80025f2:	e02c      	b.n	800264e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80025f4:	683b      	ldr	r3, [r7, #0]
 80025f6:	68db      	ldr	r3, [r3, #12]
 80025f8:	623b      	str	r3, [r7, #32]
          break;
 80025fa:	e029      	b.n	8002650 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80025fc:	683b      	ldr	r3, [r7, #0]
 80025fe:	68db      	ldr	r3, [r3, #12]
 8002600:	3304      	adds	r3, #4
 8002602:	623b      	str	r3, [r7, #32]
          break;
 8002604:	e024      	b.n	8002650 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002606:	683b      	ldr	r3, [r7, #0]
 8002608:	68db      	ldr	r3, [r3, #12]
 800260a:	3308      	adds	r3, #8
 800260c:	623b      	str	r3, [r7, #32]
          break;
 800260e:	e01f      	b.n	8002650 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002610:	683b      	ldr	r3, [r7, #0]
 8002612:	68db      	ldr	r3, [r3, #12]
 8002614:	330c      	adds	r3, #12
 8002616:	623b      	str	r3, [r7, #32]
          break;
 8002618:	e01a      	b.n	8002650 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800261a:	683b      	ldr	r3, [r7, #0]
 800261c:	689b      	ldr	r3, [r3, #8]
 800261e:	2b00      	cmp	r3, #0
 8002620:	d102      	bne.n	8002628 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002622:	2304      	movs	r3, #4
 8002624:	623b      	str	r3, [r7, #32]
          break;
 8002626:	e013      	b.n	8002650 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	689b      	ldr	r3, [r3, #8]
 800262c:	2b01      	cmp	r3, #1
 800262e:	d105      	bne.n	800263c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002630:	2308      	movs	r3, #8
 8002632:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	69fa      	ldr	r2, [r7, #28]
 8002638:	611a      	str	r2, [r3, #16]
          break;
 800263a:	e009      	b.n	8002650 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800263c:	2308      	movs	r3, #8
 800263e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	69fa      	ldr	r2, [r7, #28]
 8002644:	615a      	str	r2, [r3, #20]
          break;
 8002646:	e003      	b.n	8002650 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002648:	2300      	movs	r3, #0
 800264a:	623b      	str	r3, [r7, #32]
          break;
 800264c:	e000      	b.n	8002650 <HAL_GPIO_Init+0x130>
          break;
 800264e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002650:	69bb      	ldr	r3, [r7, #24]
 8002652:	2bff      	cmp	r3, #255	@ 0xff
 8002654:	d801      	bhi.n	800265a <HAL_GPIO_Init+0x13a>
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	e001      	b.n	800265e <HAL_GPIO_Init+0x13e>
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	3304      	adds	r3, #4
 800265e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002660:	69bb      	ldr	r3, [r7, #24]
 8002662:	2bff      	cmp	r3, #255	@ 0xff
 8002664:	d802      	bhi.n	800266c <HAL_GPIO_Init+0x14c>
 8002666:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002668:	009b      	lsls	r3, r3, #2
 800266a:	e002      	b.n	8002672 <HAL_GPIO_Init+0x152>
 800266c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800266e:	3b08      	subs	r3, #8
 8002670:	009b      	lsls	r3, r3, #2
 8002672:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002674:	697b      	ldr	r3, [r7, #20]
 8002676:	681a      	ldr	r2, [r3, #0]
 8002678:	210f      	movs	r1, #15
 800267a:	693b      	ldr	r3, [r7, #16]
 800267c:	fa01 f303 	lsl.w	r3, r1, r3
 8002680:	43db      	mvns	r3, r3
 8002682:	401a      	ands	r2, r3
 8002684:	6a39      	ldr	r1, [r7, #32]
 8002686:	693b      	ldr	r3, [r7, #16]
 8002688:	fa01 f303 	lsl.w	r3, r1, r3
 800268c:	431a      	orrs	r2, r3
 800268e:	697b      	ldr	r3, [r7, #20]
 8002690:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002692:	683b      	ldr	r3, [r7, #0]
 8002694:	685b      	ldr	r3, [r3, #4]
 8002696:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800269a:	2b00      	cmp	r3, #0
 800269c:	f000 80a9 	beq.w	80027f2 <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80026a0:	4b4a      	ldr	r3, [pc, #296]	@ (80027cc <HAL_GPIO_Init+0x2ac>)
 80026a2:	699b      	ldr	r3, [r3, #24]
 80026a4:	4a49      	ldr	r2, [pc, #292]	@ (80027cc <HAL_GPIO_Init+0x2ac>)
 80026a6:	f043 0301 	orr.w	r3, r3, #1
 80026aa:	6193      	str	r3, [r2, #24]
 80026ac:	4b47      	ldr	r3, [pc, #284]	@ (80027cc <HAL_GPIO_Init+0x2ac>)
 80026ae:	699b      	ldr	r3, [r3, #24]
 80026b0:	f003 0301 	and.w	r3, r3, #1
 80026b4:	60bb      	str	r3, [r7, #8]
 80026b6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80026b8:	4a45      	ldr	r2, [pc, #276]	@ (80027d0 <HAL_GPIO_Init+0x2b0>)
 80026ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026bc:	089b      	lsrs	r3, r3, #2
 80026be:	3302      	adds	r3, #2
 80026c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026c4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80026c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026c8:	f003 0303 	and.w	r3, r3, #3
 80026cc:	009b      	lsls	r3, r3, #2
 80026ce:	220f      	movs	r2, #15
 80026d0:	fa02 f303 	lsl.w	r3, r2, r3
 80026d4:	43db      	mvns	r3, r3
 80026d6:	68fa      	ldr	r2, [r7, #12]
 80026d8:	4013      	ands	r3, r2
 80026da:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	4a3d      	ldr	r2, [pc, #244]	@ (80027d4 <HAL_GPIO_Init+0x2b4>)
 80026e0:	4293      	cmp	r3, r2
 80026e2:	d00d      	beq.n	8002700 <HAL_GPIO_Init+0x1e0>
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	4a3c      	ldr	r2, [pc, #240]	@ (80027d8 <HAL_GPIO_Init+0x2b8>)
 80026e8:	4293      	cmp	r3, r2
 80026ea:	d007      	beq.n	80026fc <HAL_GPIO_Init+0x1dc>
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	4a3b      	ldr	r2, [pc, #236]	@ (80027dc <HAL_GPIO_Init+0x2bc>)
 80026f0:	4293      	cmp	r3, r2
 80026f2:	d101      	bne.n	80026f8 <HAL_GPIO_Init+0x1d8>
 80026f4:	2302      	movs	r3, #2
 80026f6:	e004      	b.n	8002702 <HAL_GPIO_Init+0x1e2>
 80026f8:	2303      	movs	r3, #3
 80026fa:	e002      	b.n	8002702 <HAL_GPIO_Init+0x1e2>
 80026fc:	2301      	movs	r3, #1
 80026fe:	e000      	b.n	8002702 <HAL_GPIO_Init+0x1e2>
 8002700:	2300      	movs	r3, #0
 8002702:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002704:	f002 0203 	and.w	r2, r2, #3
 8002708:	0092      	lsls	r2, r2, #2
 800270a:	4093      	lsls	r3, r2
 800270c:	68fa      	ldr	r2, [r7, #12]
 800270e:	4313      	orrs	r3, r2
 8002710:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002712:	492f      	ldr	r1, [pc, #188]	@ (80027d0 <HAL_GPIO_Init+0x2b0>)
 8002714:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002716:	089b      	lsrs	r3, r3, #2
 8002718:	3302      	adds	r3, #2
 800271a:	68fa      	ldr	r2, [r7, #12]
 800271c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	685b      	ldr	r3, [r3, #4]
 8002724:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002728:	2b00      	cmp	r3, #0
 800272a:	d006      	beq.n	800273a <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800272c:	4b2c      	ldr	r3, [pc, #176]	@ (80027e0 <HAL_GPIO_Init+0x2c0>)
 800272e:	689a      	ldr	r2, [r3, #8]
 8002730:	492b      	ldr	r1, [pc, #172]	@ (80027e0 <HAL_GPIO_Init+0x2c0>)
 8002732:	69bb      	ldr	r3, [r7, #24]
 8002734:	4313      	orrs	r3, r2
 8002736:	608b      	str	r3, [r1, #8]
 8002738:	e006      	b.n	8002748 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800273a:	4b29      	ldr	r3, [pc, #164]	@ (80027e0 <HAL_GPIO_Init+0x2c0>)
 800273c:	689a      	ldr	r2, [r3, #8]
 800273e:	69bb      	ldr	r3, [r7, #24]
 8002740:	43db      	mvns	r3, r3
 8002742:	4927      	ldr	r1, [pc, #156]	@ (80027e0 <HAL_GPIO_Init+0x2c0>)
 8002744:	4013      	ands	r3, r2
 8002746:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002748:	683b      	ldr	r3, [r7, #0]
 800274a:	685b      	ldr	r3, [r3, #4]
 800274c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002750:	2b00      	cmp	r3, #0
 8002752:	d006      	beq.n	8002762 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002754:	4b22      	ldr	r3, [pc, #136]	@ (80027e0 <HAL_GPIO_Init+0x2c0>)
 8002756:	68da      	ldr	r2, [r3, #12]
 8002758:	4921      	ldr	r1, [pc, #132]	@ (80027e0 <HAL_GPIO_Init+0x2c0>)
 800275a:	69bb      	ldr	r3, [r7, #24]
 800275c:	4313      	orrs	r3, r2
 800275e:	60cb      	str	r3, [r1, #12]
 8002760:	e006      	b.n	8002770 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002762:	4b1f      	ldr	r3, [pc, #124]	@ (80027e0 <HAL_GPIO_Init+0x2c0>)
 8002764:	68da      	ldr	r2, [r3, #12]
 8002766:	69bb      	ldr	r3, [r7, #24]
 8002768:	43db      	mvns	r3, r3
 800276a:	491d      	ldr	r1, [pc, #116]	@ (80027e0 <HAL_GPIO_Init+0x2c0>)
 800276c:	4013      	ands	r3, r2
 800276e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002770:	683b      	ldr	r3, [r7, #0]
 8002772:	685b      	ldr	r3, [r3, #4]
 8002774:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002778:	2b00      	cmp	r3, #0
 800277a:	d006      	beq.n	800278a <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800277c:	4b18      	ldr	r3, [pc, #96]	@ (80027e0 <HAL_GPIO_Init+0x2c0>)
 800277e:	685a      	ldr	r2, [r3, #4]
 8002780:	4917      	ldr	r1, [pc, #92]	@ (80027e0 <HAL_GPIO_Init+0x2c0>)
 8002782:	69bb      	ldr	r3, [r7, #24]
 8002784:	4313      	orrs	r3, r2
 8002786:	604b      	str	r3, [r1, #4]
 8002788:	e006      	b.n	8002798 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800278a:	4b15      	ldr	r3, [pc, #84]	@ (80027e0 <HAL_GPIO_Init+0x2c0>)
 800278c:	685a      	ldr	r2, [r3, #4]
 800278e:	69bb      	ldr	r3, [r7, #24]
 8002790:	43db      	mvns	r3, r3
 8002792:	4913      	ldr	r1, [pc, #76]	@ (80027e0 <HAL_GPIO_Init+0x2c0>)
 8002794:	4013      	ands	r3, r2
 8002796:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002798:	683b      	ldr	r3, [r7, #0]
 800279a:	685b      	ldr	r3, [r3, #4]
 800279c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d01f      	beq.n	80027e4 <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80027a4:	4b0e      	ldr	r3, [pc, #56]	@ (80027e0 <HAL_GPIO_Init+0x2c0>)
 80027a6:	681a      	ldr	r2, [r3, #0]
 80027a8:	490d      	ldr	r1, [pc, #52]	@ (80027e0 <HAL_GPIO_Init+0x2c0>)
 80027aa:	69bb      	ldr	r3, [r7, #24]
 80027ac:	4313      	orrs	r3, r2
 80027ae:	600b      	str	r3, [r1, #0]
 80027b0:	e01f      	b.n	80027f2 <HAL_GPIO_Init+0x2d2>
 80027b2:	bf00      	nop
 80027b4:	10320000 	.word	0x10320000
 80027b8:	10310000 	.word	0x10310000
 80027bc:	10220000 	.word	0x10220000
 80027c0:	10210000 	.word	0x10210000
 80027c4:	10120000 	.word	0x10120000
 80027c8:	10110000 	.word	0x10110000
 80027cc:	40021000 	.word	0x40021000
 80027d0:	40010000 	.word	0x40010000
 80027d4:	40010800 	.word	0x40010800
 80027d8:	40010c00 	.word	0x40010c00
 80027dc:	40011000 	.word	0x40011000
 80027e0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80027e4:	4b0b      	ldr	r3, [pc, #44]	@ (8002814 <HAL_GPIO_Init+0x2f4>)
 80027e6:	681a      	ldr	r2, [r3, #0]
 80027e8:	69bb      	ldr	r3, [r7, #24]
 80027ea:	43db      	mvns	r3, r3
 80027ec:	4909      	ldr	r1, [pc, #36]	@ (8002814 <HAL_GPIO_Init+0x2f4>)
 80027ee:	4013      	ands	r3, r2
 80027f0:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80027f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027f4:	3301      	adds	r3, #1
 80027f6:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	681a      	ldr	r2, [r3, #0]
 80027fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027fe:	fa22 f303 	lsr.w	r3, r2, r3
 8002802:	2b00      	cmp	r3, #0
 8002804:	f47f ae96 	bne.w	8002534 <HAL_GPIO_Init+0x14>
  }
}
 8002808:	bf00      	nop
 800280a:	bf00      	nop
 800280c:	372c      	adds	r7, #44	@ 0x2c
 800280e:	46bd      	mov	sp, r7
 8002810:	bc80      	pop	{r7}
 8002812:	4770      	bx	lr
 8002814:	40010400 	.word	0x40010400

08002818 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002818:	b480      	push	{r7}
 800281a:	b083      	sub	sp, #12
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
 8002820:	460b      	mov	r3, r1
 8002822:	807b      	strh	r3, [r7, #2]
 8002824:	4613      	mov	r3, r2
 8002826:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002828:	787b      	ldrb	r3, [r7, #1]
 800282a:	2b00      	cmp	r3, #0
 800282c:	d003      	beq.n	8002836 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800282e:	887a      	ldrh	r2, [r7, #2]
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002834:	e003      	b.n	800283e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002836:	887b      	ldrh	r3, [r7, #2]
 8002838:	041a      	lsls	r2, r3, #16
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	611a      	str	r2, [r3, #16]
}
 800283e:	bf00      	nop
 8002840:	370c      	adds	r7, #12
 8002842:	46bd      	mov	sp, r7
 8002844:	bc80      	pop	{r7}
 8002846:	4770      	bx	lr

08002848 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002848:	b480      	push	{r7}
 800284a:	b085      	sub	sp, #20
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
 8002850:	460b      	mov	r3, r1
 8002852:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	68db      	ldr	r3, [r3, #12]
 8002858:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800285a:	887a      	ldrh	r2, [r7, #2]
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	4013      	ands	r3, r2
 8002860:	041a      	lsls	r2, r3, #16
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	43d9      	mvns	r1, r3
 8002866:	887b      	ldrh	r3, [r7, #2]
 8002868:	400b      	ands	r3, r1
 800286a:	431a      	orrs	r2, r3
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	611a      	str	r2, [r3, #16]
}
 8002870:	bf00      	nop
 8002872:	3714      	adds	r7, #20
 8002874:	46bd      	mov	sp, r7
 8002876:	bc80      	pop	{r7}
 8002878:	4770      	bx	lr
	...

0800287c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800287c:	b580      	push	{r7, lr}
 800287e:	b086      	sub	sp, #24
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	2b00      	cmp	r3, #0
 8002888:	d101      	bne.n	800288e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800288a:	2301      	movs	r3, #1
 800288c:	e272      	b.n	8002d74 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f003 0301 	and.w	r3, r3, #1
 8002896:	2b00      	cmp	r3, #0
 8002898:	f000 8087 	beq.w	80029aa <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800289c:	4b92      	ldr	r3, [pc, #584]	@ (8002ae8 <HAL_RCC_OscConfig+0x26c>)
 800289e:	685b      	ldr	r3, [r3, #4]
 80028a0:	f003 030c 	and.w	r3, r3, #12
 80028a4:	2b04      	cmp	r3, #4
 80028a6:	d00c      	beq.n	80028c2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80028a8:	4b8f      	ldr	r3, [pc, #572]	@ (8002ae8 <HAL_RCC_OscConfig+0x26c>)
 80028aa:	685b      	ldr	r3, [r3, #4]
 80028ac:	f003 030c 	and.w	r3, r3, #12
 80028b0:	2b08      	cmp	r3, #8
 80028b2:	d112      	bne.n	80028da <HAL_RCC_OscConfig+0x5e>
 80028b4:	4b8c      	ldr	r3, [pc, #560]	@ (8002ae8 <HAL_RCC_OscConfig+0x26c>)
 80028b6:	685b      	ldr	r3, [r3, #4]
 80028b8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80028bc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80028c0:	d10b      	bne.n	80028da <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028c2:	4b89      	ldr	r3, [pc, #548]	@ (8002ae8 <HAL_RCC_OscConfig+0x26c>)
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d06c      	beq.n	80029a8 <HAL_RCC_OscConfig+0x12c>
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	685b      	ldr	r3, [r3, #4]
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d168      	bne.n	80029a8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80028d6:	2301      	movs	r3, #1
 80028d8:	e24c      	b.n	8002d74 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	685b      	ldr	r3, [r3, #4]
 80028de:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80028e2:	d106      	bne.n	80028f2 <HAL_RCC_OscConfig+0x76>
 80028e4:	4b80      	ldr	r3, [pc, #512]	@ (8002ae8 <HAL_RCC_OscConfig+0x26c>)
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	4a7f      	ldr	r2, [pc, #508]	@ (8002ae8 <HAL_RCC_OscConfig+0x26c>)
 80028ea:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80028ee:	6013      	str	r3, [r2, #0]
 80028f0:	e02e      	b.n	8002950 <HAL_RCC_OscConfig+0xd4>
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	685b      	ldr	r3, [r3, #4]
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d10c      	bne.n	8002914 <HAL_RCC_OscConfig+0x98>
 80028fa:	4b7b      	ldr	r3, [pc, #492]	@ (8002ae8 <HAL_RCC_OscConfig+0x26c>)
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	4a7a      	ldr	r2, [pc, #488]	@ (8002ae8 <HAL_RCC_OscConfig+0x26c>)
 8002900:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002904:	6013      	str	r3, [r2, #0]
 8002906:	4b78      	ldr	r3, [pc, #480]	@ (8002ae8 <HAL_RCC_OscConfig+0x26c>)
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	4a77      	ldr	r2, [pc, #476]	@ (8002ae8 <HAL_RCC_OscConfig+0x26c>)
 800290c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002910:	6013      	str	r3, [r2, #0]
 8002912:	e01d      	b.n	8002950 <HAL_RCC_OscConfig+0xd4>
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	685b      	ldr	r3, [r3, #4]
 8002918:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800291c:	d10c      	bne.n	8002938 <HAL_RCC_OscConfig+0xbc>
 800291e:	4b72      	ldr	r3, [pc, #456]	@ (8002ae8 <HAL_RCC_OscConfig+0x26c>)
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	4a71      	ldr	r2, [pc, #452]	@ (8002ae8 <HAL_RCC_OscConfig+0x26c>)
 8002924:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002928:	6013      	str	r3, [r2, #0]
 800292a:	4b6f      	ldr	r3, [pc, #444]	@ (8002ae8 <HAL_RCC_OscConfig+0x26c>)
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	4a6e      	ldr	r2, [pc, #440]	@ (8002ae8 <HAL_RCC_OscConfig+0x26c>)
 8002930:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002934:	6013      	str	r3, [r2, #0]
 8002936:	e00b      	b.n	8002950 <HAL_RCC_OscConfig+0xd4>
 8002938:	4b6b      	ldr	r3, [pc, #428]	@ (8002ae8 <HAL_RCC_OscConfig+0x26c>)
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	4a6a      	ldr	r2, [pc, #424]	@ (8002ae8 <HAL_RCC_OscConfig+0x26c>)
 800293e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002942:	6013      	str	r3, [r2, #0]
 8002944:	4b68      	ldr	r3, [pc, #416]	@ (8002ae8 <HAL_RCC_OscConfig+0x26c>)
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	4a67      	ldr	r2, [pc, #412]	@ (8002ae8 <HAL_RCC_OscConfig+0x26c>)
 800294a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800294e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	685b      	ldr	r3, [r3, #4]
 8002954:	2b00      	cmp	r3, #0
 8002956:	d013      	beq.n	8002980 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002958:	f7ff fa04 	bl	8001d64 <HAL_GetTick>
 800295c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800295e:	e008      	b.n	8002972 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002960:	f7ff fa00 	bl	8001d64 <HAL_GetTick>
 8002964:	4602      	mov	r2, r0
 8002966:	693b      	ldr	r3, [r7, #16]
 8002968:	1ad3      	subs	r3, r2, r3
 800296a:	2b64      	cmp	r3, #100	@ 0x64
 800296c:	d901      	bls.n	8002972 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800296e:	2303      	movs	r3, #3
 8002970:	e200      	b.n	8002d74 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002972:	4b5d      	ldr	r3, [pc, #372]	@ (8002ae8 <HAL_RCC_OscConfig+0x26c>)
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800297a:	2b00      	cmp	r3, #0
 800297c:	d0f0      	beq.n	8002960 <HAL_RCC_OscConfig+0xe4>
 800297e:	e014      	b.n	80029aa <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002980:	f7ff f9f0 	bl	8001d64 <HAL_GetTick>
 8002984:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002986:	e008      	b.n	800299a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002988:	f7ff f9ec 	bl	8001d64 <HAL_GetTick>
 800298c:	4602      	mov	r2, r0
 800298e:	693b      	ldr	r3, [r7, #16]
 8002990:	1ad3      	subs	r3, r2, r3
 8002992:	2b64      	cmp	r3, #100	@ 0x64
 8002994:	d901      	bls.n	800299a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002996:	2303      	movs	r3, #3
 8002998:	e1ec      	b.n	8002d74 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800299a:	4b53      	ldr	r3, [pc, #332]	@ (8002ae8 <HAL_RCC_OscConfig+0x26c>)
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d1f0      	bne.n	8002988 <HAL_RCC_OscConfig+0x10c>
 80029a6:	e000      	b.n	80029aa <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f003 0302 	and.w	r3, r3, #2
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d063      	beq.n	8002a7e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80029b6:	4b4c      	ldr	r3, [pc, #304]	@ (8002ae8 <HAL_RCC_OscConfig+0x26c>)
 80029b8:	685b      	ldr	r3, [r3, #4]
 80029ba:	f003 030c 	and.w	r3, r3, #12
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d00b      	beq.n	80029da <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80029c2:	4b49      	ldr	r3, [pc, #292]	@ (8002ae8 <HAL_RCC_OscConfig+0x26c>)
 80029c4:	685b      	ldr	r3, [r3, #4]
 80029c6:	f003 030c 	and.w	r3, r3, #12
 80029ca:	2b08      	cmp	r3, #8
 80029cc:	d11c      	bne.n	8002a08 <HAL_RCC_OscConfig+0x18c>
 80029ce:	4b46      	ldr	r3, [pc, #280]	@ (8002ae8 <HAL_RCC_OscConfig+0x26c>)
 80029d0:	685b      	ldr	r3, [r3, #4]
 80029d2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d116      	bne.n	8002a08 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029da:	4b43      	ldr	r3, [pc, #268]	@ (8002ae8 <HAL_RCC_OscConfig+0x26c>)
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f003 0302 	and.w	r3, r3, #2
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d005      	beq.n	80029f2 <HAL_RCC_OscConfig+0x176>
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	691b      	ldr	r3, [r3, #16]
 80029ea:	2b01      	cmp	r3, #1
 80029ec:	d001      	beq.n	80029f2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80029ee:	2301      	movs	r3, #1
 80029f0:	e1c0      	b.n	8002d74 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029f2:	4b3d      	ldr	r3, [pc, #244]	@ (8002ae8 <HAL_RCC_OscConfig+0x26c>)
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	695b      	ldr	r3, [r3, #20]
 80029fe:	00db      	lsls	r3, r3, #3
 8002a00:	4939      	ldr	r1, [pc, #228]	@ (8002ae8 <HAL_RCC_OscConfig+0x26c>)
 8002a02:	4313      	orrs	r3, r2
 8002a04:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a06:	e03a      	b.n	8002a7e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	691b      	ldr	r3, [r3, #16]
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d020      	beq.n	8002a52 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002a10:	4b36      	ldr	r3, [pc, #216]	@ (8002aec <HAL_RCC_OscConfig+0x270>)
 8002a12:	2201      	movs	r2, #1
 8002a14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a16:	f7ff f9a5 	bl	8001d64 <HAL_GetTick>
 8002a1a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a1c:	e008      	b.n	8002a30 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a1e:	f7ff f9a1 	bl	8001d64 <HAL_GetTick>
 8002a22:	4602      	mov	r2, r0
 8002a24:	693b      	ldr	r3, [r7, #16]
 8002a26:	1ad3      	subs	r3, r2, r3
 8002a28:	2b02      	cmp	r3, #2
 8002a2a:	d901      	bls.n	8002a30 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002a2c:	2303      	movs	r3, #3
 8002a2e:	e1a1      	b.n	8002d74 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a30:	4b2d      	ldr	r3, [pc, #180]	@ (8002ae8 <HAL_RCC_OscConfig+0x26c>)
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f003 0302 	and.w	r3, r3, #2
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d0f0      	beq.n	8002a1e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a3c:	4b2a      	ldr	r3, [pc, #168]	@ (8002ae8 <HAL_RCC_OscConfig+0x26c>)
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	695b      	ldr	r3, [r3, #20]
 8002a48:	00db      	lsls	r3, r3, #3
 8002a4a:	4927      	ldr	r1, [pc, #156]	@ (8002ae8 <HAL_RCC_OscConfig+0x26c>)
 8002a4c:	4313      	orrs	r3, r2
 8002a4e:	600b      	str	r3, [r1, #0]
 8002a50:	e015      	b.n	8002a7e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a52:	4b26      	ldr	r3, [pc, #152]	@ (8002aec <HAL_RCC_OscConfig+0x270>)
 8002a54:	2200      	movs	r2, #0
 8002a56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a58:	f7ff f984 	bl	8001d64 <HAL_GetTick>
 8002a5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a5e:	e008      	b.n	8002a72 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a60:	f7ff f980 	bl	8001d64 <HAL_GetTick>
 8002a64:	4602      	mov	r2, r0
 8002a66:	693b      	ldr	r3, [r7, #16]
 8002a68:	1ad3      	subs	r3, r2, r3
 8002a6a:	2b02      	cmp	r3, #2
 8002a6c:	d901      	bls.n	8002a72 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002a6e:	2303      	movs	r3, #3
 8002a70:	e180      	b.n	8002d74 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a72:	4b1d      	ldr	r3, [pc, #116]	@ (8002ae8 <HAL_RCC_OscConfig+0x26c>)
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f003 0302 	and.w	r3, r3, #2
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d1f0      	bne.n	8002a60 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f003 0308 	and.w	r3, r3, #8
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d03a      	beq.n	8002b00 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	699b      	ldr	r3, [r3, #24]
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d019      	beq.n	8002ac6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a92:	4b17      	ldr	r3, [pc, #92]	@ (8002af0 <HAL_RCC_OscConfig+0x274>)
 8002a94:	2201      	movs	r2, #1
 8002a96:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a98:	f7ff f964 	bl	8001d64 <HAL_GetTick>
 8002a9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a9e:	e008      	b.n	8002ab2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002aa0:	f7ff f960 	bl	8001d64 <HAL_GetTick>
 8002aa4:	4602      	mov	r2, r0
 8002aa6:	693b      	ldr	r3, [r7, #16]
 8002aa8:	1ad3      	subs	r3, r2, r3
 8002aaa:	2b02      	cmp	r3, #2
 8002aac:	d901      	bls.n	8002ab2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002aae:	2303      	movs	r3, #3
 8002ab0:	e160      	b.n	8002d74 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ab2:	4b0d      	ldr	r3, [pc, #52]	@ (8002ae8 <HAL_RCC_OscConfig+0x26c>)
 8002ab4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ab6:	f003 0302 	and.w	r3, r3, #2
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d0f0      	beq.n	8002aa0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002abe:	2001      	movs	r0, #1
 8002ac0:	f000 face 	bl	8003060 <RCC_Delay>
 8002ac4:	e01c      	b.n	8002b00 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ac6:	4b0a      	ldr	r3, [pc, #40]	@ (8002af0 <HAL_RCC_OscConfig+0x274>)
 8002ac8:	2200      	movs	r2, #0
 8002aca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002acc:	f7ff f94a 	bl	8001d64 <HAL_GetTick>
 8002ad0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ad2:	e00f      	b.n	8002af4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ad4:	f7ff f946 	bl	8001d64 <HAL_GetTick>
 8002ad8:	4602      	mov	r2, r0
 8002ada:	693b      	ldr	r3, [r7, #16]
 8002adc:	1ad3      	subs	r3, r2, r3
 8002ade:	2b02      	cmp	r3, #2
 8002ae0:	d908      	bls.n	8002af4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002ae2:	2303      	movs	r3, #3
 8002ae4:	e146      	b.n	8002d74 <HAL_RCC_OscConfig+0x4f8>
 8002ae6:	bf00      	nop
 8002ae8:	40021000 	.word	0x40021000
 8002aec:	42420000 	.word	0x42420000
 8002af0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002af4:	4b92      	ldr	r3, [pc, #584]	@ (8002d40 <HAL_RCC_OscConfig+0x4c4>)
 8002af6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002af8:	f003 0302 	and.w	r3, r3, #2
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d1e9      	bne.n	8002ad4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f003 0304 	and.w	r3, r3, #4
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	f000 80a6 	beq.w	8002c5a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b0e:	2300      	movs	r3, #0
 8002b10:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b12:	4b8b      	ldr	r3, [pc, #556]	@ (8002d40 <HAL_RCC_OscConfig+0x4c4>)
 8002b14:	69db      	ldr	r3, [r3, #28]
 8002b16:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d10d      	bne.n	8002b3a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b1e:	4b88      	ldr	r3, [pc, #544]	@ (8002d40 <HAL_RCC_OscConfig+0x4c4>)
 8002b20:	69db      	ldr	r3, [r3, #28]
 8002b22:	4a87      	ldr	r2, [pc, #540]	@ (8002d40 <HAL_RCC_OscConfig+0x4c4>)
 8002b24:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002b28:	61d3      	str	r3, [r2, #28]
 8002b2a:	4b85      	ldr	r3, [pc, #532]	@ (8002d40 <HAL_RCC_OscConfig+0x4c4>)
 8002b2c:	69db      	ldr	r3, [r3, #28]
 8002b2e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b32:	60bb      	str	r3, [r7, #8]
 8002b34:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b36:	2301      	movs	r3, #1
 8002b38:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b3a:	4b82      	ldr	r3, [pc, #520]	@ (8002d44 <HAL_RCC_OscConfig+0x4c8>)
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d118      	bne.n	8002b78 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002b46:	4b7f      	ldr	r3, [pc, #508]	@ (8002d44 <HAL_RCC_OscConfig+0x4c8>)
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	4a7e      	ldr	r2, [pc, #504]	@ (8002d44 <HAL_RCC_OscConfig+0x4c8>)
 8002b4c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002b50:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b52:	f7ff f907 	bl	8001d64 <HAL_GetTick>
 8002b56:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b58:	e008      	b.n	8002b6c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b5a:	f7ff f903 	bl	8001d64 <HAL_GetTick>
 8002b5e:	4602      	mov	r2, r0
 8002b60:	693b      	ldr	r3, [r7, #16]
 8002b62:	1ad3      	subs	r3, r2, r3
 8002b64:	2b64      	cmp	r3, #100	@ 0x64
 8002b66:	d901      	bls.n	8002b6c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002b68:	2303      	movs	r3, #3
 8002b6a:	e103      	b.n	8002d74 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b6c:	4b75      	ldr	r3, [pc, #468]	@ (8002d44 <HAL_RCC_OscConfig+0x4c8>)
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d0f0      	beq.n	8002b5a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	68db      	ldr	r3, [r3, #12]
 8002b7c:	2b01      	cmp	r3, #1
 8002b7e:	d106      	bne.n	8002b8e <HAL_RCC_OscConfig+0x312>
 8002b80:	4b6f      	ldr	r3, [pc, #444]	@ (8002d40 <HAL_RCC_OscConfig+0x4c4>)
 8002b82:	6a1b      	ldr	r3, [r3, #32]
 8002b84:	4a6e      	ldr	r2, [pc, #440]	@ (8002d40 <HAL_RCC_OscConfig+0x4c4>)
 8002b86:	f043 0301 	orr.w	r3, r3, #1
 8002b8a:	6213      	str	r3, [r2, #32]
 8002b8c:	e02d      	b.n	8002bea <HAL_RCC_OscConfig+0x36e>
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	68db      	ldr	r3, [r3, #12]
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d10c      	bne.n	8002bb0 <HAL_RCC_OscConfig+0x334>
 8002b96:	4b6a      	ldr	r3, [pc, #424]	@ (8002d40 <HAL_RCC_OscConfig+0x4c4>)
 8002b98:	6a1b      	ldr	r3, [r3, #32]
 8002b9a:	4a69      	ldr	r2, [pc, #420]	@ (8002d40 <HAL_RCC_OscConfig+0x4c4>)
 8002b9c:	f023 0301 	bic.w	r3, r3, #1
 8002ba0:	6213      	str	r3, [r2, #32]
 8002ba2:	4b67      	ldr	r3, [pc, #412]	@ (8002d40 <HAL_RCC_OscConfig+0x4c4>)
 8002ba4:	6a1b      	ldr	r3, [r3, #32]
 8002ba6:	4a66      	ldr	r2, [pc, #408]	@ (8002d40 <HAL_RCC_OscConfig+0x4c4>)
 8002ba8:	f023 0304 	bic.w	r3, r3, #4
 8002bac:	6213      	str	r3, [r2, #32]
 8002bae:	e01c      	b.n	8002bea <HAL_RCC_OscConfig+0x36e>
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	68db      	ldr	r3, [r3, #12]
 8002bb4:	2b05      	cmp	r3, #5
 8002bb6:	d10c      	bne.n	8002bd2 <HAL_RCC_OscConfig+0x356>
 8002bb8:	4b61      	ldr	r3, [pc, #388]	@ (8002d40 <HAL_RCC_OscConfig+0x4c4>)
 8002bba:	6a1b      	ldr	r3, [r3, #32]
 8002bbc:	4a60      	ldr	r2, [pc, #384]	@ (8002d40 <HAL_RCC_OscConfig+0x4c4>)
 8002bbe:	f043 0304 	orr.w	r3, r3, #4
 8002bc2:	6213      	str	r3, [r2, #32]
 8002bc4:	4b5e      	ldr	r3, [pc, #376]	@ (8002d40 <HAL_RCC_OscConfig+0x4c4>)
 8002bc6:	6a1b      	ldr	r3, [r3, #32]
 8002bc8:	4a5d      	ldr	r2, [pc, #372]	@ (8002d40 <HAL_RCC_OscConfig+0x4c4>)
 8002bca:	f043 0301 	orr.w	r3, r3, #1
 8002bce:	6213      	str	r3, [r2, #32]
 8002bd0:	e00b      	b.n	8002bea <HAL_RCC_OscConfig+0x36e>
 8002bd2:	4b5b      	ldr	r3, [pc, #364]	@ (8002d40 <HAL_RCC_OscConfig+0x4c4>)
 8002bd4:	6a1b      	ldr	r3, [r3, #32]
 8002bd6:	4a5a      	ldr	r2, [pc, #360]	@ (8002d40 <HAL_RCC_OscConfig+0x4c4>)
 8002bd8:	f023 0301 	bic.w	r3, r3, #1
 8002bdc:	6213      	str	r3, [r2, #32]
 8002bde:	4b58      	ldr	r3, [pc, #352]	@ (8002d40 <HAL_RCC_OscConfig+0x4c4>)
 8002be0:	6a1b      	ldr	r3, [r3, #32]
 8002be2:	4a57      	ldr	r2, [pc, #348]	@ (8002d40 <HAL_RCC_OscConfig+0x4c4>)
 8002be4:	f023 0304 	bic.w	r3, r3, #4
 8002be8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	68db      	ldr	r3, [r3, #12]
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d015      	beq.n	8002c1e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002bf2:	f7ff f8b7 	bl	8001d64 <HAL_GetTick>
 8002bf6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bf8:	e00a      	b.n	8002c10 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002bfa:	f7ff f8b3 	bl	8001d64 <HAL_GetTick>
 8002bfe:	4602      	mov	r2, r0
 8002c00:	693b      	ldr	r3, [r7, #16]
 8002c02:	1ad3      	subs	r3, r2, r3
 8002c04:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c08:	4293      	cmp	r3, r2
 8002c0a:	d901      	bls.n	8002c10 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002c0c:	2303      	movs	r3, #3
 8002c0e:	e0b1      	b.n	8002d74 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c10:	4b4b      	ldr	r3, [pc, #300]	@ (8002d40 <HAL_RCC_OscConfig+0x4c4>)
 8002c12:	6a1b      	ldr	r3, [r3, #32]
 8002c14:	f003 0302 	and.w	r3, r3, #2
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d0ee      	beq.n	8002bfa <HAL_RCC_OscConfig+0x37e>
 8002c1c:	e014      	b.n	8002c48 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c1e:	f7ff f8a1 	bl	8001d64 <HAL_GetTick>
 8002c22:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c24:	e00a      	b.n	8002c3c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c26:	f7ff f89d 	bl	8001d64 <HAL_GetTick>
 8002c2a:	4602      	mov	r2, r0
 8002c2c:	693b      	ldr	r3, [r7, #16]
 8002c2e:	1ad3      	subs	r3, r2, r3
 8002c30:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c34:	4293      	cmp	r3, r2
 8002c36:	d901      	bls.n	8002c3c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002c38:	2303      	movs	r3, #3
 8002c3a:	e09b      	b.n	8002d74 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c3c:	4b40      	ldr	r3, [pc, #256]	@ (8002d40 <HAL_RCC_OscConfig+0x4c4>)
 8002c3e:	6a1b      	ldr	r3, [r3, #32]
 8002c40:	f003 0302 	and.w	r3, r3, #2
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d1ee      	bne.n	8002c26 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002c48:	7dfb      	ldrb	r3, [r7, #23]
 8002c4a:	2b01      	cmp	r3, #1
 8002c4c:	d105      	bne.n	8002c5a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c4e:	4b3c      	ldr	r3, [pc, #240]	@ (8002d40 <HAL_RCC_OscConfig+0x4c4>)
 8002c50:	69db      	ldr	r3, [r3, #28]
 8002c52:	4a3b      	ldr	r2, [pc, #236]	@ (8002d40 <HAL_RCC_OscConfig+0x4c4>)
 8002c54:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002c58:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	69db      	ldr	r3, [r3, #28]
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	f000 8087 	beq.w	8002d72 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002c64:	4b36      	ldr	r3, [pc, #216]	@ (8002d40 <HAL_RCC_OscConfig+0x4c4>)
 8002c66:	685b      	ldr	r3, [r3, #4]
 8002c68:	f003 030c 	and.w	r3, r3, #12
 8002c6c:	2b08      	cmp	r3, #8
 8002c6e:	d061      	beq.n	8002d34 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	69db      	ldr	r3, [r3, #28]
 8002c74:	2b02      	cmp	r3, #2
 8002c76:	d146      	bne.n	8002d06 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c78:	4b33      	ldr	r3, [pc, #204]	@ (8002d48 <HAL_RCC_OscConfig+0x4cc>)
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c7e:	f7ff f871 	bl	8001d64 <HAL_GetTick>
 8002c82:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c84:	e008      	b.n	8002c98 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c86:	f7ff f86d 	bl	8001d64 <HAL_GetTick>
 8002c8a:	4602      	mov	r2, r0
 8002c8c:	693b      	ldr	r3, [r7, #16]
 8002c8e:	1ad3      	subs	r3, r2, r3
 8002c90:	2b02      	cmp	r3, #2
 8002c92:	d901      	bls.n	8002c98 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002c94:	2303      	movs	r3, #3
 8002c96:	e06d      	b.n	8002d74 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c98:	4b29      	ldr	r3, [pc, #164]	@ (8002d40 <HAL_RCC_OscConfig+0x4c4>)
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d1f0      	bne.n	8002c86 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	6a1b      	ldr	r3, [r3, #32]
 8002ca8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002cac:	d108      	bne.n	8002cc0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002cae:	4b24      	ldr	r3, [pc, #144]	@ (8002d40 <HAL_RCC_OscConfig+0x4c4>)
 8002cb0:	685b      	ldr	r3, [r3, #4]
 8002cb2:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	689b      	ldr	r3, [r3, #8]
 8002cba:	4921      	ldr	r1, [pc, #132]	@ (8002d40 <HAL_RCC_OscConfig+0x4c4>)
 8002cbc:	4313      	orrs	r3, r2
 8002cbe:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002cc0:	4b1f      	ldr	r3, [pc, #124]	@ (8002d40 <HAL_RCC_OscConfig+0x4c4>)
 8002cc2:	685b      	ldr	r3, [r3, #4]
 8002cc4:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	6a19      	ldr	r1, [r3, #32]
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cd0:	430b      	orrs	r3, r1
 8002cd2:	491b      	ldr	r1, [pc, #108]	@ (8002d40 <HAL_RCC_OscConfig+0x4c4>)
 8002cd4:	4313      	orrs	r3, r2
 8002cd6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002cd8:	4b1b      	ldr	r3, [pc, #108]	@ (8002d48 <HAL_RCC_OscConfig+0x4cc>)
 8002cda:	2201      	movs	r2, #1
 8002cdc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cde:	f7ff f841 	bl	8001d64 <HAL_GetTick>
 8002ce2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002ce4:	e008      	b.n	8002cf8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ce6:	f7ff f83d 	bl	8001d64 <HAL_GetTick>
 8002cea:	4602      	mov	r2, r0
 8002cec:	693b      	ldr	r3, [r7, #16]
 8002cee:	1ad3      	subs	r3, r2, r3
 8002cf0:	2b02      	cmp	r3, #2
 8002cf2:	d901      	bls.n	8002cf8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002cf4:	2303      	movs	r3, #3
 8002cf6:	e03d      	b.n	8002d74 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002cf8:	4b11      	ldr	r3, [pc, #68]	@ (8002d40 <HAL_RCC_OscConfig+0x4c4>)
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d0f0      	beq.n	8002ce6 <HAL_RCC_OscConfig+0x46a>
 8002d04:	e035      	b.n	8002d72 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d06:	4b10      	ldr	r3, [pc, #64]	@ (8002d48 <HAL_RCC_OscConfig+0x4cc>)
 8002d08:	2200      	movs	r2, #0
 8002d0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d0c:	f7ff f82a 	bl	8001d64 <HAL_GetTick>
 8002d10:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d12:	e008      	b.n	8002d26 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d14:	f7ff f826 	bl	8001d64 <HAL_GetTick>
 8002d18:	4602      	mov	r2, r0
 8002d1a:	693b      	ldr	r3, [r7, #16]
 8002d1c:	1ad3      	subs	r3, r2, r3
 8002d1e:	2b02      	cmp	r3, #2
 8002d20:	d901      	bls.n	8002d26 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002d22:	2303      	movs	r3, #3
 8002d24:	e026      	b.n	8002d74 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d26:	4b06      	ldr	r3, [pc, #24]	@ (8002d40 <HAL_RCC_OscConfig+0x4c4>)
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d1f0      	bne.n	8002d14 <HAL_RCC_OscConfig+0x498>
 8002d32:	e01e      	b.n	8002d72 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	69db      	ldr	r3, [r3, #28]
 8002d38:	2b01      	cmp	r3, #1
 8002d3a:	d107      	bne.n	8002d4c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002d3c:	2301      	movs	r3, #1
 8002d3e:	e019      	b.n	8002d74 <HAL_RCC_OscConfig+0x4f8>
 8002d40:	40021000 	.word	0x40021000
 8002d44:	40007000 	.word	0x40007000
 8002d48:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002d4c:	4b0b      	ldr	r3, [pc, #44]	@ (8002d7c <HAL_RCC_OscConfig+0x500>)
 8002d4e:	685b      	ldr	r3, [r3, #4]
 8002d50:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	6a1b      	ldr	r3, [r3, #32]
 8002d5c:	429a      	cmp	r2, r3
 8002d5e:	d106      	bne.n	8002d6e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d6a:	429a      	cmp	r2, r3
 8002d6c:	d001      	beq.n	8002d72 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002d6e:	2301      	movs	r3, #1
 8002d70:	e000      	b.n	8002d74 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002d72:	2300      	movs	r3, #0
}
 8002d74:	4618      	mov	r0, r3
 8002d76:	3718      	adds	r7, #24
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	bd80      	pop	{r7, pc}
 8002d7c:	40021000 	.word	0x40021000

08002d80 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	b084      	sub	sp, #16
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
 8002d88:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d101      	bne.n	8002d94 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002d90:	2301      	movs	r3, #1
 8002d92:	e0d0      	b.n	8002f36 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002d94:	4b6a      	ldr	r3, [pc, #424]	@ (8002f40 <HAL_RCC_ClockConfig+0x1c0>)
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f003 0307 	and.w	r3, r3, #7
 8002d9c:	683a      	ldr	r2, [r7, #0]
 8002d9e:	429a      	cmp	r2, r3
 8002da0:	d910      	bls.n	8002dc4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002da2:	4b67      	ldr	r3, [pc, #412]	@ (8002f40 <HAL_RCC_ClockConfig+0x1c0>)
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f023 0207 	bic.w	r2, r3, #7
 8002daa:	4965      	ldr	r1, [pc, #404]	@ (8002f40 <HAL_RCC_ClockConfig+0x1c0>)
 8002dac:	683b      	ldr	r3, [r7, #0]
 8002dae:	4313      	orrs	r3, r2
 8002db0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002db2:	4b63      	ldr	r3, [pc, #396]	@ (8002f40 <HAL_RCC_ClockConfig+0x1c0>)
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f003 0307 	and.w	r3, r3, #7
 8002dba:	683a      	ldr	r2, [r7, #0]
 8002dbc:	429a      	cmp	r2, r3
 8002dbe:	d001      	beq.n	8002dc4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002dc0:	2301      	movs	r3, #1
 8002dc2:	e0b8      	b.n	8002f36 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f003 0302 	and.w	r3, r3, #2
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d020      	beq.n	8002e12 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f003 0304 	and.w	r3, r3, #4
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d005      	beq.n	8002de8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002ddc:	4b59      	ldr	r3, [pc, #356]	@ (8002f44 <HAL_RCC_ClockConfig+0x1c4>)
 8002dde:	685b      	ldr	r3, [r3, #4]
 8002de0:	4a58      	ldr	r2, [pc, #352]	@ (8002f44 <HAL_RCC_ClockConfig+0x1c4>)
 8002de2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002de6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f003 0308 	and.w	r3, r3, #8
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d005      	beq.n	8002e00 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002df4:	4b53      	ldr	r3, [pc, #332]	@ (8002f44 <HAL_RCC_ClockConfig+0x1c4>)
 8002df6:	685b      	ldr	r3, [r3, #4]
 8002df8:	4a52      	ldr	r2, [pc, #328]	@ (8002f44 <HAL_RCC_ClockConfig+0x1c4>)
 8002dfa:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8002dfe:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e00:	4b50      	ldr	r3, [pc, #320]	@ (8002f44 <HAL_RCC_ClockConfig+0x1c4>)
 8002e02:	685b      	ldr	r3, [r3, #4]
 8002e04:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	689b      	ldr	r3, [r3, #8]
 8002e0c:	494d      	ldr	r1, [pc, #308]	@ (8002f44 <HAL_RCC_ClockConfig+0x1c4>)
 8002e0e:	4313      	orrs	r3, r2
 8002e10:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f003 0301 	and.w	r3, r3, #1
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d040      	beq.n	8002ea0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	685b      	ldr	r3, [r3, #4]
 8002e22:	2b01      	cmp	r3, #1
 8002e24:	d107      	bne.n	8002e36 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e26:	4b47      	ldr	r3, [pc, #284]	@ (8002f44 <HAL_RCC_ClockConfig+0x1c4>)
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d115      	bne.n	8002e5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e32:	2301      	movs	r3, #1
 8002e34:	e07f      	b.n	8002f36 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	685b      	ldr	r3, [r3, #4]
 8002e3a:	2b02      	cmp	r3, #2
 8002e3c:	d107      	bne.n	8002e4e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e3e:	4b41      	ldr	r3, [pc, #260]	@ (8002f44 <HAL_RCC_ClockConfig+0x1c4>)
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d109      	bne.n	8002e5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e4a:	2301      	movs	r3, #1
 8002e4c:	e073      	b.n	8002f36 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e4e:	4b3d      	ldr	r3, [pc, #244]	@ (8002f44 <HAL_RCC_ClockConfig+0x1c4>)
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f003 0302 	and.w	r3, r3, #2
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d101      	bne.n	8002e5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e5a:	2301      	movs	r3, #1
 8002e5c:	e06b      	b.n	8002f36 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002e5e:	4b39      	ldr	r3, [pc, #228]	@ (8002f44 <HAL_RCC_ClockConfig+0x1c4>)
 8002e60:	685b      	ldr	r3, [r3, #4]
 8002e62:	f023 0203 	bic.w	r2, r3, #3
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	685b      	ldr	r3, [r3, #4]
 8002e6a:	4936      	ldr	r1, [pc, #216]	@ (8002f44 <HAL_RCC_ClockConfig+0x1c4>)
 8002e6c:	4313      	orrs	r3, r2
 8002e6e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002e70:	f7fe ff78 	bl	8001d64 <HAL_GetTick>
 8002e74:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e76:	e00a      	b.n	8002e8e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e78:	f7fe ff74 	bl	8001d64 <HAL_GetTick>
 8002e7c:	4602      	mov	r2, r0
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	1ad3      	subs	r3, r2, r3
 8002e82:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e86:	4293      	cmp	r3, r2
 8002e88:	d901      	bls.n	8002e8e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002e8a:	2303      	movs	r3, #3
 8002e8c:	e053      	b.n	8002f36 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e8e:	4b2d      	ldr	r3, [pc, #180]	@ (8002f44 <HAL_RCC_ClockConfig+0x1c4>)
 8002e90:	685b      	ldr	r3, [r3, #4]
 8002e92:	f003 020c 	and.w	r2, r3, #12
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	685b      	ldr	r3, [r3, #4]
 8002e9a:	009b      	lsls	r3, r3, #2
 8002e9c:	429a      	cmp	r2, r3
 8002e9e:	d1eb      	bne.n	8002e78 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002ea0:	4b27      	ldr	r3, [pc, #156]	@ (8002f40 <HAL_RCC_ClockConfig+0x1c0>)
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f003 0307 	and.w	r3, r3, #7
 8002ea8:	683a      	ldr	r2, [r7, #0]
 8002eaa:	429a      	cmp	r2, r3
 8002eac:	d210      	bcs.n	8002ed0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002eae:	4b24      	ldr	r3, [pc, #144]	@ (8002f40 <HAL_RCC_ClockConfig+0x1c0>)
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f023 0207 	bic.w	r2, r3, #7
 8002eb6:	4922      	ldr	r1, [pc, #136]	@ (8002f40 <HAL_RCC_ClockConfig+0x1c0>)
 8002eb8:	683b      	ldr	r3, [r7, #0]
 8002eba:	4313      	orrs	r3, r2
 8002ebc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ebe:	4b20      	ldr	r3, [pc, #128]	@ (8002f40 <HAL_RCC_ClockConfig+0x1c0>)
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f003 0307 	and.w	r3, r3, #7
 8002ec6:	683a      	ldr	r2, [r7, #0]
 8002ec8:	429a      	cmp	r2, r3
 8002eca:	d001      	beq.n	8002ed0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002ecc:	2301      	movs	r3, #1
 8002ece:	e032      	b.n	8002f36 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f003 0304 	and.w	r3, r3, #4
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d008      	beq.n	8002eee <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002edc:	4b19      	ldr	r3, [pc, #100]	@ (8002f44 <HAL_RCC_ClockConfig+0x1c4>)
 8002ede:	685b      	ldr	r3, [r3, #4]
 8002ee0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	68db      	ldr	r3, [r3, #12]
 8002ee8:	4916      	ldr	r1, [pc, #88]	@ (8002f44 <HAL_RCC_ClockConfig+0x1c4>)
 8002eea:	4313      	orrs	r3, r2
 8002eec:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f003 0308 	and.w	r3, r3, #8
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d009      	beq.n	8002f0e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002efa:	4b12      	ldr	r3, [pc, #72]	@ (8002f44 <HAL_RCC_ClockConfig+0x1c4>)
 8002efc:	685b      	ldr	r3, [r3, #4]
 8002efe:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	691b      	ldr	r3, [r3, #16]
 8002f06:	00db      	lsls	r3, r3, #3
 8002f08:	490e      	ldr	r1, [pc, #56]	@ (8002f44 <HAL_RCC_ClockConfig+0x1c4>)
 8002f0a:	4313      	orrs	r3, r2
 8002f0c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002f0e:	f000 f821 	bl	8002f54 <HAL_RCC_GetSysClockFreq>
 8002f12:	4602      	mov	r2, r0
 8002f14:	4b0b      	ldr	r3, [pc, #44]	@ (8002f44 <HAL_RCC_ClockConfig+0x1c4>)
 8002f16:	685b      	ldr	r3, [r3, #4]
 8002f18:	091b      	lsrs	r3, r3, #4
 8002f1a:	f003 030f 	and.w	r3, r3, #15
 8002f1e:	490a      	ldr	r1, [pc, #40]	@ (8002f48 <HAL_RCC_ClockConfig+0x1c8>)
 8002f20:	5ccb      	ldrb	r3, [r1, r3]
 8002f22:	fa22 f303 	lsr.w	r3, r2, r3
 8002f26:	4a09      	ldr	r2, [pc, #36]	@ (8002f4c <HAL_RCC_ClockConfig+0x1cc>)
 8002f28:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002f2a:	4b09      	ldr	r3, [pc, #36]	@ (8002f50 <HAL_RCC_ClockConfig+0x1d0>)
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	4618      	mov	r0, r3
 8002f30:	f7fe fed6 	bl	8001ce0 <HAL_InitTick>

  return HAL_OK;
 8002f34:	2300      	movs	r3, #0
}
 8002f36:	4618      	mov	r0, r3
 8002f38:	3710      	adds	r7, #16
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	bd80      	pop	{r7, pc}
 8002f3e:	bf00      	nop
 8002f40:	40022000 	.word	0x40022000
 8002f44:	40021000 	.word	0x40021000
 8002f48:	08004d60 	.word	0x08004d60
 8002f4c:	20000058 	.word	0x20000058
 8002f50:	2000005c 	.word	0x2000005c

08002f54 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f54:	b480      	push	{r7}
 8002f56:	b087      	sub	sp, #28
 8002f58:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	60fb      	str	r3, [r7, #12]
 8002f5e:	2300      	movs	r3, #0
 8002f60:	60bb      	str	r3, [r7, #8]
 8002f62:	2300      	movs	r3, #0
 8002f64:	617b      	str	r3, [r7, #20]
 8002f66:	2300      	movs	r3, #0
 8002f68:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002f6e:	4b1e      	ldr	r3, [pc, #120]	@ (8002fe8 <HAL_RCC_GetSysClockFreq+0x94>)
 8002f70:	685b      	ldr	r3, [r3, #4]
 8002f72:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	f003 030c 	and.w	r3, r3, #12
 8002f7a:	2b04      	cmp	r3, #4
 8002f7c:	d002      	beq.n	8002f84 <HAL_RCC_GetSysClockFreq+0x30>
 8002f7e:	2b08      	cmp	r3, #8
 8002f80:	d003      	beq.n	8002f8a <HAL_RCC_GetSysClockFreq+0x36>
 8002f82:	e027      	b.n	8002fd4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002f84:	4b19      	ldr	r3, [pc, #100]	@ (8002fec <HAL_RCC_GetSysClockFreq+0x98>)
 8002f86:	613b      	str	r3, [r7, #16]
      break;
 8002f88:	e027      	b.n	8002fda <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	0c9b      	lsrs	r3, r3, #18
 8002f8e:	f003 030f 	and.w	r3, r3, #15
 8002f92:	4a17      	ldr	r2, [pc, #92]	@ (8002ff0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002f94:	5cd3      	ldrb	r3, [r2, r3]
 8002f96:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d010      	beq.n	8002fc4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002fa2:	4b11      	ldr	r3, [pc, #68]	@ (8002fe8 <HAL_RCC_GetSysClockFreq+0x94>)
 8002fa4:	685b      	ldr	r3, [r3, #4]
 8002fa6:	0c5b      	lsrs	r3, r3, #17
 8002fa8:	f003 0301 	and.w	r3, r3, #1
 8002fac:	4a11      	ldr	r2, [pc, #68]	@ (8002ff4 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002fae:	5cd3      	ldrb	r3, [r2, r3]
 8002fb0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	4a0d      	ldr	r2, [pc, #52]	@ (8002fec <HAL_RCC_GetSysClockFreq+0x98>)
 8002fb6:	fb03 f202 	mul.w	r2, r3, r2
 8002fba:	68bb      	ldr	r3, [r7, #8]
 8002fbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fc0:	617b      	str	r3, [r7, #20]
 8002fc2:	e004      	b.n	8002fce <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	4a0c      	ldr	r2, [pc, #48]	@ (8002ff8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002fc8:	fb02 f303 	mul.w	r3, r2, r3
 8002fcc:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002fce:	697b      	ldr	r3, [r7, #20]
 8002fd0:	613b      	str	r3, [r7, #16]
      break;
 8002fd2:	e002      	b.n	8002fda <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002fd4:	4b05      	ldr	r3, [pc, #20]	@ (8002fec <HAL_RCC_GetSysClockFreq+0x98>)
 8002fd6:	613b      	str	r3, [r7, #16]
      break;
 8002fd8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002fda:	693b      	ldr	r3, [r7, #16]
}
 8002fdc:	4618      	mov	r0, r3
 8002fde:	371c      	adds	r7, #28
 8002fe0:	46bd      	mov	sp, r7
 8002fe2:	bc80      	pop	{r7}
 8002fe4:	4770      	bx	lr
 8002fe6:	bf00      	nop
 8002fe8:	40021000 	.word	0x40021000
 8002fec:	007a1200 	.word	0x007a1200
 8002ff0:	08004d78 	.word	0x08004d78
 8002ff4:	08004d88 	.word	0x08004d88
 8002ff8:	003d0900 	.word	0x003d0900

08002ffc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ffc:	b480      	push	{r7}
 8002ffe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003000:	4b02      	ldr	r3, [pc, #8]	@ (800300c <HAL_RCC_GetHCLKFreq+0x10>)
 8003002:	681b      	ldr	r3, [r3, #0]
}
 8003004:	4618      	mov	r0, r3
 8003006:	46bd      	mov	sp, r7
 8003008:	bc80      	pop	{r7}
 800300a:	4770      	bx	lr
 800300c:	20000058 	.word	0x20000058

08003010 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003010:	b580      	push	{r7, lr}
 8003012:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003014:	f7ff fff2 	bl	8002ffc <HAL_RCC_GetHCLKFreq>
 8003018:	4602      	mov	r2, r0
 800301a:	4b05      	ldr	r3, [pc, #20]	@ (8003030 <HAL_RCC_GetPCLK1Freq+0x20>)
 800301c:	685b      	ldr	r3, [r3, #4]
 800301e:	0a1b      	lsrs	r3, r3, #8
 8003020:	f003 0307 	and.w	r3, r3, #7
 8003024:	4903      	ldr	r1, [pc, #12]	@ (8003034 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003026:	5ccb      	ldrb	r3, [r1, r3]
 8003028:	fa22 f303 	lsr.w	r3, r2, r3
}
 800302c:	4618      	mov	r0, r3
 800302e:	bd80      	pop	{r7, pc}
 8003030:	40021000 	.word	0x40021000
 8003034:	08004d70 	.word	0x08004d70

08003038 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003038:	b580      	push	{r7, lr}
 800303a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800303c:	f7ff ffde 	bl	8002ffc <HAL_RCC_GetHCLKFreq>
 8003040:	4602      	mov	r2, r0
 8003042:	4b05      	ldr	r3, [pc, #20]	@ (8003058 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003044:	685b      	ldr	r3, [r3, #4]
 8003046:	0adb      	lsrs	r3, r3, #11
 8003048:	f003 0307 	and.w	r3, r3, #7
 800304c:	4903      	ldr	r1, [pc, #12]	@ (800305c <HAL_RCC_GetPCLK2Freq+0x24>)
 800304e:	5ccb      	ldrb	r3, [r1, r3]
 8003050:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003054:	4618      	mov	r0, r3
 8003056:	bd80      	pop	{r7, pc}
 8003058:	40021000 	.word	0x40021000
 800305c:	08004d70 	.word	0x08004d70

08003060 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003060:	b480      	push	{r7}
 8003062:	b085      	sub	sp, #20
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003068:	4b0a      	ldr	r3, [pc, #40]	@ (8003094 <RCC_Delay+0x34>)
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	4a0a      	ldr	r2, [pc, #40]	@ (8003098 <RCC_Delay+0x38>)
 800306e:	fba2 2303 	umull	r2, r3, r2, r3
 8003072:	0a5b      	lsrs	r3, r3, #9
 8003074:	687a      	ldr	r2, [r7, #4]
 8003076:	fb02 f303 	mul.w	r3, r2, r3
 800307a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800307c:	bf00      	nop
  }
  while (Delay --);
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	1e5a      	subs	r2, r3, #1
 8003082:	60fa      	str	r2, [r7, #12]
 8003084:	2b00      	cmp	r3, #0
 8003086:	d1f9      	bne.n	800307c <RCC_Delay+0x1c>
}
 8003088:	bf00      	nop
 800308a:	bf00      	nop
 800308c:	3714      	adds	r7, #20
 800308e:	46bd      	mov	sp, r7
 8003090:	bc80      	pop	{r7}
 8003092:	4770      	bx	lr
 8003094:	20000058 	.word	0x20000058
 8003098:	10624dd3 	.word	0x10624dd3

0800309c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800309c:	b580      	push	{r7, lr}
 800309e:	b082      	sub	sp, #8
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d101      	bne.n	80030ae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80030aa:	2301      	movs	r3, #1
 80030ac:	e042      	b.n	8003134 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80030b4:	b2db      	uxtb	r3, r3
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d106      	bne.n	80030c8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	2200      	movs	r2, #0
 80030be:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80030c2:	6878      	ldr	r0, [r7, #4]
 80030c4:	f7fe fbee 	bl	80018a4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2224      	movs	r2, #36	@ 0x24
 80030cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	68da      	ldr	r2, [r3, #12]
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80030de:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80030e0:	6878      	ldr	r0, [r7, #4]
 80030e2:	f000 ff09 	bl	8003ef8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	691a      	ldr	r2, [r3, #16]
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80030f4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	695a      	ldr	r2, [r3, #20]
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003104:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	68da      	ldr	r2, [r3, #12]
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003114:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	2200      	movs	r2, #0
 800311a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	2220      	movs	r2, #32
 8003120:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	2220      	movs	r2, #32
 8003128:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	2200      	movs	r2, #0
 8003130:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003132:	2300      	movs	r3, #0
}
 8003134:	4618      	mov	r0, r3
 8003136:	3708      	adds	r7, #8
 8003138:	46bd      	mov	sp, r7
 800313a:	bd80      	pop	{r7, pc}

0800313c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800313c:	b580      	push	{r7, lr}
 800313e:	b08a      	sub	sp, #40	@ 0x28
 8003140:	af02      	add	r7, sp, #8
 8003142:	60f8      	str	r0, [r7, #12]
 8003144:	60b9      	str	r1, [r7, #8]
 8003146:	603b      	str	r3, [r7, #0]
 8003148:	4613      	mov	r3, r2
 800314a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800314c:	2300      	movs	r3, #0
 800314e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003156:	b2db      	uxtb	r3, r3
 8003158:	2b20      	cmp	r3, #32
 800315a:	d16d      	bne.n	8003238 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 800315c:	68bb      	ldr	r3, [r7, #8]
 800315e:	2b00      	cmp	r3, #0
 8003160:	d002      	beq.n	8003168 <HAL_UART_Transmit+0x2c>
 8003162:	88fb      	ldrh	r3, [r7, #6]
 8003164:	2b00      	cmp	r3, #0
 8003166:	d101      	bne.n	800316c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003168:	2301      	movs	r3, #1
 800316a:	e066      	b.n	800323a <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	2200      	movs	r2, #0
 8003170:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	2221      	movs	r2, #33	@ 0x21
 8003176:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800317a:	f7fe fdf3 	bl	8001d64 <HAL_GetTick>
 800317e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	88fa      	ldrh	r2, [r7, #6]
 8003184:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	88fa      	ldrh	r2, [r7, #6]
 800318a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	689b      	ldr	r3, [r3, #8]
 8003190:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003194:	d108      	bne.n	80031a8 <HAL_UART_Transmit+0x6c>
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	691b      	ldr	r3, [r3, #16]
 800319a:	2b00      	cmp	r3, #0
 800319c:	d104      	bne.n	80031a8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800319e:	2300      	movs	r3, #0
 80031a0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80031a2:	68bb      	ldr	r3, [r7, #8]
 80031a4:	61bb      	str	r3, [r7, #24]
 80031a6:	e003      	b.n	80031b0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80031a8:	68bb      	ldr	r3, [r7, #8]
 80031aa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80031ac:	2300      	movs	r3, #0
 80031ae:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80031b0:	e02a      	b.n	8003208 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80031b2:	683b      	ldr	r3, [r7, #0]
 80031b4:	9300      	str	r3, [sp, #0]
 80031b6:	697b      	ldr	r3, [r7, #20]
 80031b8:	2200      	movs	r2, #0
 80031ba:	2180      	movs	r1, #128	@ 0x80
 80031bc:	68f8      	ldr	r0, [r7, #12]
 80031be:	f000 fc32 	bl	8003a26 <UART_WaitOnFlagUntilTimeout>
 80031c2:	4603      	mov	r3, r0
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d001      	beq.n	80031cc <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 80031c8:	2303      	movs	r3, #3
 80031ca:	e036      	b.n	800323a <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 80031cc:	69fb      	ldr	r3, [r7, #28]
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d10b      	bne.n	80031ea <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80031d2:	69bb      	ldr	r3, [r7, #24]
 80031d4:	881b      	ldrh	r3, [r3, #0]
 80031d6:	461a      	mov	r2, r3
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80031e0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80031e2:	69bb      	ldr	r3, [r7, #24]
 80031e4:	3302      	adds	r3, #2
 80031e6:	61bb      	str	r3, [r7, #24]
 80031e8:	e007      	b.n	80031fa <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80031ea:	69fb      	ldr	r3, [r7, #28]
 80031ec:	781a      	ldrb	r2, [r3, #0]
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80031f4:	69fb      	ldr	r3, [r7, #28]
 80031f6:	3301      	adds	r3, #1
 80031f8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80031fe:	b29b      	uxth	r3, r3
 8003200:	3b01      	subs	r3, #1
 8003202:	b29a      	uxth	r2, r3
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800320c:	b29b      	uxth	r3, r3
 800320e:	2b00      	cmp	r3, #0
 8003210:	d1cf      	bne.n	80031b2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003212:	683b      	ldr	r3, [r7, #0]
 8003214:	9300      	str	r3, [sp, #0]
 8003216:	697b      	ldr	r3, [r7, #20]
 8003218:	2200      	movs	r2, #0
 800321a:	2140      	movs	r1, #64	@ 0x40
 800321c:	68f8      	ldr	r0, [r7, #12]
 800321e:	f000 fc02 	bl	8003a26 <UART_WaitOnFlagUntilTimeout>
 8003222:	4603      	mov	r3, r0
 8003224:	2b00      	cmp	r3, #0
 8003226:	d001      	beq.n	800322c <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8003228:	2303      	movs	r3, #3
 800322a:	e006      	b.n	800323a <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	2220      	movs	r2, #32
 8003230:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003234:	2300      	movs	r3, #0
 8003236:	e000      	b.n	800323a <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8003238:	2302      	movs	r3, #2
  }
}
 800323a:	4618      	mov	r0, r3
 800323c:	3720      	adds	r7, #32
 800323e:	46bd      	mov	sp, r7
 8003240:	bd80      	pop	{r7, pc}

08003242 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003242:	b580      	push	{r7, lr}
 8003244:	b084      	sub	sp, #16
 8003246:	af00      	add	r7, sp, #0
 8003248:	60f8      	str	r0, [r7, #12]
 800324a:	60b9      	str	r1, [r7, #8]
 800324c:	4613      	mov	r3, r2
 800324e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003256:	b2db      	uxtb	r3, r3
 8003258:	2b20      	cmp	r3, #32
 800325a:	d112      	bne.n	8003282 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800325c:	68bb      	ldr	r3, [r7, #8]
 800325e:	2b00      	cmp	r3, #0
 8003260:	d002      	beq.n	8003268 <HAL_UART_Receive_IT+0x26>
 8003262:	88fb      	ldrh	r3, [r7, #6]
 8003264:	2b00      	cmp	r3, #0
 8003266:	d101      	bne.n	800326c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003268:	2301      	movs	r3, #1
 800326a:	e00b      	b.n	8003284 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	2200      	movs	r2, #0
 8003270:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003272:	88fb      	ldrh	r3, [r7, #6]
 8003274:	461a      	mov	r2, r3
 8003276:	68b9      	ldr	r1, [r7, #8]
 8003278:	68f8      	ldr	r0, [r7, #12]
 800327a:	f000 fc42 	bl	8003b02 <UART_Start_Receive_IT>
 800327e:	4603      	mov	r3, r0
 8003280:	e000      	b.n	8003284 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8003282:	2302      	movs	r3, #2
  }
}
 8003284:	4618      	mov	r0, r3
 8003286:	3710      	adds	r7, #16
 8003288:	46bd      	mov	sp, r7
 800328a:	bd80      	pop	{r7, pc}

0800328c <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800328c:	b580      	push	{r7, lr}
 800328e:	b08c      	sub	sp, #48	@ 0x30
 8003290:	af00      	add	r7, sp, #0
 8003292:	60f8      	str	r0, [r7, #12]
 8003294:	60b9      	str	r1, [r7, #8]
 8003296:	4613      	mov	r3, r2
 8003298:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80032a0:	b2db      	uxtb	r3, r3
 80032a2:	2b20      	cmp	r3, #32
 80032a4:	d156      	bne.n	8003354 <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 80032a6:	68bb      	ldr	r3, [r7, #8]
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d002      	beq.n	80032b2 <HAL_UART_Transmit_DMA+0x26>
 80032ac:	88fb      	ldrh	r3, [r7, #6]
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d101      	bne.n	80032b6 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 80032b2:	2301      	movs	r3, #1
 80032b4:	e04f      	b.n	8003356 <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 80032b6:	68ba      	ldr	r2, [r7, #8]
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	88fa      	ldrh	r2, [r7, #6]
 80032c0:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	88fa      	ldrh	r2, [r7, #6]
 80032c6:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	2200      	movs	r2, #0
 80032cc:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	2221      	movs	r2, #33	@ 0x21
 80032d2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032da:	4a21      	ldr	r2, [pc, #132]	@ (8003360 <HAL_UART_Transmit_DMA+0xd4>)
 80032dc:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032e2:	4a20      	ldr	r2, [pc, #128]	@ (8003364 <HAL_UART_Transmit_DMA+0xd8>)
 80032e4:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032ea:	4a1f      	ldr	r2, [pc, #124]	@ (8003368 <HAL_UART_Transmit_DMA+0xdc>)
 80032ec:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032f2:	2200      	movs	r2, #0
 80032f4:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Enable the UART transmit DMA channel */
    tmp = (const uint32_t *)&pData;
 80032f6:	f107 0308 	add.w	r3, r7, #8
 80032fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8003300:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003302:	6819      	ldr	r1, [r3, #0]
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	3304      	adds	r3, #4
 800330a:	461a      	mov	r2, r3
 800330c:	88fb      	ldrh	r3, [r7, #6]
 800330e:	f7fe febf 	bl	8002090 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800331a:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	3314      	adds	r3, #20
 8003322:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003324:	69bb      	ldr	r3, [r7, #24]
 8003326:	e853 3f00 	ldrex	r3, [r3]
 800332a:	617b      	str	r3, [r7, #20]
   return(result);
 800332c:	697b      	ldr	r3, [r7, #20]
 800332e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003332:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	3314      	adds	r3, #20
 800333a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800333c:	627a      	str	r2, [r7, #36]	@ 0x24
 800333e:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003340:	6a39      	ldr	r1, [r7, #32]
 8003342:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003344:	e841 2300 	strex	r3, r2, [r1]
 8003348:	61fb      	str	r3, [r7, #28]
   return(result);
 800334a:	69fb      	ldr	r3, [r7, #28]
 800334c:	2b00      	cmp	r3, #0
 800334e:	d1e5      	bne.n	800331c <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 8003350:	2300      	movs	r3, #0
 8003352:	e000      	b.n	8003356 <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 8003354:	2302      	movs	r3, #2
  }
}
 8003356:	4618      	mov	r0, r3
 8003358:	3730      	adds	r7, #48	@ 0x30
 800335a:	46bd      	mov	sp, r7
 800335c:	bd80      	pop	{r7, pc}
 800335e:	bf00      	nop
 8003360:	080038dd 	.word	0x080038dd
 8003364:	08003977 	.word	0x08003977
 8003368:	08003993 	.word	0x08003993

0800336c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800336c:	b580      	push	{r7, lr}
 800336e:	b0ba      	sub	sp, #232	@ 0xe8
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	68db      	ldr	r3, [r3, #12]
 8003384:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	695b      	ldr	r3, [r3, #20]
 800338e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8003392:	2300      	movs	r3, #0
 8003394:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8003398:	2300      	movs	r3, #0
 800339a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800339e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80033a2:	f003 030f 	and.w	r3, r3, #15
 80033a6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80033aa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d10f      	bne.n	80033d2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80033b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80033b6:	f003 0320 	and.w	r3, r3, #32
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d009      	beq.n	80033d2 <HAL_UART_IRQHandler+0x66>
 80033be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80033c2:	f003 0320 	and.w	r3, r3, #32
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d003      	beq.n	80033d2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80033ca:	6878      	ldr	r0, [r7, #4]
 80033cc:	f000 fcd6 	bl	8003d7c <UART_Receive_IT>
      return;
 80033d0:	e25b      	b.n	800388a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80033d2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	f000 80de 	beq.w	8003598 <HAL_UART_IRQHandler+0x22c>
 80033dc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80033e0:	f003 0301 	and.w	r3, r3, #1
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d106      	bne.n	80033f6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80033e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80033ec:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	f000 80d1 	beq.w	8003598 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80033f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80033fa:	f003 0301 	and.w	r3, r3, #1
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d00b      	beq.n	800341a <HAL_UART_IRQHandler+0xae>
 8003402:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003406:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800340a:	2b00      	cmp	r3, #0
 800340c:	d005      	beq.n	800341a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003412:	f043 0201 	orr.w	r2, r3, #1
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800341a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800341e:	f003 0304 	and.w	r3, r3, #4
 8003422:	2b00      	cmp	r3, #0
 8003424:	d00b      	beq.n	800343e <HAL_UART_IRQHandler+0xd2>
 8003426:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800342a:	f003 0301 	and.w	r3, r3, #1
 800342e:	2b00      	cmp	r3, #0
 8003430:	d005      	beq.n	800343e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003436:	f043 0202 	orr.w	r2, r3, #2
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800343e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003442:	f003 0302 	and.w	r3, r3, #2
 8003446:	2b00      	cmp	r3, #0
 8003448:	d00b      	beq.n	8003462 <HAL_UART_IRQHandler+0xf6>
 800344a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800344e:	f003 0301 	and.w	r3, r3, #1
 8003452:	2b00      	cmp	r3, #0
 8003454:	d005      	beq.n	8003462 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800345a:	f043 0204 	orr.w	r2, r3, #4
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003462:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003466:	f003 0308 	and.w	r3, r3, #8
 800346a:	2b00      	cmp	r3, #0
 800346c:	d011      	beq.n	8003492 <HAL_UART_IRQHandler+0x126>
 800346e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003472:	f003 0320 	and.w	r3, r3, #32
 8003476:	2b00      	cmp	r3, #0
 8003478:	d105      	bne.n	8003486 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800347a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800347e:	f003 0301 	and.w	r3, r3, #1
 8003482:	2b00      	cmp	r3, #0
 8003484:	d005      	beq.n	8003492 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800348a:	f043 0208 	orr.w	r2, r3, #8
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003496:	2b00      	cmp	r3, #0
 8003498:	f000 81f2 	beq.w	8003880 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800349c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80034a0:	f003 0320 	and.w	r3, r3, #32
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d008      	beq.n	80034ba <HAL_UART_IRQHandler+0x14e>
 80034a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80034ac:	f003 0320 	and.w	r3, r3, #32
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d002      	beq.n	80034ba <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80034b4:	6878      	ldr	r0, [r7, #4]
 80034b6:	f000 fc61 	bl	8003d7c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	695b      	ldr	r3, [r3, #20]
 80034c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	bf14      	ite	ne
 80034c8:	2301      	movne	r3, #1
 80034ca:	2300      	moveq	r3, #0
 80034cc:	b2db      	uxtb	r3, r3
 80034ce:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034d6:	f003 0308 	and.w	r3, r3, #8
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d103      	bne.n	80034e6 <HAL_UART_IRQHandler+0x17a>
 80034de:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d04f      	beq.n	8003586 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80034e6:	6878      	ldr	r0, [r7, #4]
 80034e8:	f000 fb6b 	bl	8003bc2 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	695b      	ldr	r3, [r3, #20]
 80034f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d041      	beq.n	800357e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	3314      	adds	r3, #20
 8003500:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003504:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003508:	e853 3f00 	ldrex	r3, [r3]
 800350c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003510:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003514:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003518:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	3314      	adds	r3, #20
 8003522:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003526:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800352a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800352e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003532:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8003536:	e841 2300 	strex	r3, r2, [r1]
 800353a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800353e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003542:	2b00      	cmp	r3, #0
 8003544:	d1d9      	bne.n	80034fa <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800354a:	2b00      	cmp	r3, #0
 800354c:	d013      	beq.n	8003576 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003552:	4a7e      	ldr	r2, [pc, #504]	@ (800374c <HAL_UART_IRQHandler+0x3e0>)
 8003554:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800355a:	4618      	mov	r0, r3
 800355c:	f7fe fe34 	bl	80021c8 <HAL_DMA_Abort_IT>
 8003560:	4603      	mov	r3, r0
 8003562:	2b00      	cmp	r3, #0
 8003564:	d016      	beq.n	8003594 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800356a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800356c:	687a      	ldr	r2, [r7, #4]
 800356e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003570:	4610      	mov	r0, r2
 8003572:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003574:	e00e      	b.n	8003594 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003576:	6878      	ldr	r0, [r7, #4]
 8003578:	f000 f99c 	bl	80038b4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800357c:	e00a      	b.n	8003594 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800357e:	6878      	ldr	r0, [r7, #4]
 8003580:	f000 f998 	bl	80038b4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003584:	e006      	b.n	8003594 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003586:	6878      	ldr	r0, [r7, #4]
 8003588:	f000 f994 	bl	80038b4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	2200      	movs	r2, #0
 8003590:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8003592:	e175      	b.n	8003880 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003594:	bf00      	nop
    return;
 8003596:	e173      	b.n	8003880 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800359c:	2b01      	cmp	r3, #1
 800359e:	f040 814f 	bne.w	8003840 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80035a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80035a6:	f003 0310 	and.w	r3, r3, #16
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	f000 8148 	beq.w	8003840 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80035b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80035b4:	f003 0310 	and.w	r3, r3, #16
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	f000 8141 	beq.w	8003840 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80035be:	2300      	movs	r3, #0
 80035c0:	60bb      	str	r3, [r7, #8]
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	60bb      	str	r3, [r7, #8]
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	685b      	ldr	r3, [r3, #4]
 80035d0:	60bb      	str	r3, [r7, #8]
 80035d2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	695b      	ldr	r3, [r3, #20]
 80035da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80035de:	2b00      	cmp	r3, #0
 80035e0:	f000 80b6 	beq.w	8003750 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	685b      	ldr	r3, [r3, #4]
 80035ec:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80035f0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	f000 8145 	beq.w	8003884 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80035fe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003602:	429a      	cmp	r2, r3
 8003604:	f080 813e 	bcs.w	8003884 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800360e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003614:	699b      	ldr	r3, [r3, #24]
 8003616:	2b20      	cmp	r3, #32
 8003618:	f000 8088 	beq.w	800372c <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	330c      	adds	r3, #12
 8003622:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003626:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800362a:	e853 3f00 	ldrex	r3, [r3]
 800362e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003632:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003636:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800363a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	330c      	adds	r3, #12
 8003644:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8003648:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800364c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003650:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003654:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003658:	e841 2300 	strex	r3, r2, [r1]
 800365c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8003660:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003664:	2b00      	cmp	r3, #0
 8003666:	d1d9      	bne.n	800361c <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	3314      	adds	r3, #20
 800366e:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003670:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003672:	e853 3f00 	ldrex	r3, [r3]
 8003676:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003678:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800367a:	f023 0301 	bic.w	r3, r3, #1
 800367e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	3314      	adds	r3, #20
 8003688:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800368c:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003690:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003692:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003694:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003698:	e841 2300 	strex	r3, r2, [r1]
 800369c:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800369e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d1e1      	bne.n	8003668 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	3314      	adds	r3, #20
 80036aa:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036ac:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80036ae:	e853 3f00 	ldrex	r3, [r3]
 80036b2:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80036b4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80036b6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80036ba:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	3314      	adds	r3, #20
 80036c4:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80036c8:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80036ca:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036cc:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80036ce:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80036d0:	e841 2300 	strex	r3, r2, [r1]
 80036d4:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80036d6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d1e3      	bne.n	80036a4 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2220      	movs	r2, #32
 80036e0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2200      	movs	r2, #0
 80036e8:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	330c      	adds	r3, #12
 80036f0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036f2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80036f4:	e853 3f00 	ldrex	r3, [r3]
 80036f8:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80036fa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80036fc:	f023 0310 	bic.w	r3, r3, #16
 8003700:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	330c      	adds	r3, #12
 800370a:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800370e:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003710:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003712:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003714:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003716:	e841 2300 	strex	r3, r2, [r1]
 800371a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800371c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800371e:	2b00      	cmp	r3, #0
 8003720:	d1e3      	bne.n	80036ea <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003726:	4618      	mov	r0, r3
 8003728:	f7fe fd12 	bl	8002150 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	2202      	movs	r2, #2
 8003730:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800373a:	b29b      	uxth	r3, r3
 800373c:	1ad3      	subs	r3, r2, r3
 800373e:	b29b      	uxth	r3, r3
 8003740:	4619      	mov	r1, r3
 8003742:	6878      	ldr	r0, [r7, #4]
 8003744:	f000 f8bf 	bl	80038c6 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003748:	e09c      	b.n	8003884 <HAL_UART_IRQHandler+0x518>
 800374a:	bf00      	nop
 800374c:	08003c87 	.word	0x08003c87
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003758:	b29b      	uxth	r3, r3
 800375a:	1ad3      	subs	r3, r2, r3
 800375c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003764:	b29b      	uxth	r3, r3
 8003766:	2b00      	cmp	r3, #0
 8003768:	f000 808e 	beq.w	8003888 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800376c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003770:	2b00      	cmp	r3, #0
 8003772:	f000 8089 	beq.w	8003888 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	330c      	adds	r3, #12
 800377c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800377e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003780:	e853 3f00 	ldrex	r3, [r3]
 8003784:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003786:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003788:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800378c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	330c      	adds	r3, #12
 8003796:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800379a:	647a      	str	r2, [r7, #68]	@ 0x44
 800379c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800379e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80037a0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80037a2:	e841 2300 	strex	r3, r2, [r1]
 80037a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80037a8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d1e3      	bne.n	8003776 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	3314      	adds	r3, #20
 80037b4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037b8:	e853 3f00 	ldrex	r3, [r3]
 80037bc:	623b      	str	r3, [r7, #32]
   return(result);
 80037be:	6a3b      	ldr	r3, [r7, #32]
 80037c0:	f023 0301 	bic.w	r3, r3, #1
 80037c4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	3314      	adds	r3, #20
 80037ce:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80037d2:	633a      	str	r2, [r7, #48]	@ 0x30
 80037d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037d6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80037d8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80037da:	e841 2300 	strex	r3, r2, [r1]
 80037de:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80037e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d1e3      	bne.n	80037ae <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	2220      	movs	r2, #32
 80037ea:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	2200      	movs	r2, #0
 80037f2:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	330c      	adds	r3, #12
 80037fa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037fc:	693b      	ldr	r3, [r7, #16]
 80037fe:	e853 3f00 	ldrex	r3, [r3]
 8003802:	60fb      	str	r3, [r7, #12]
   return(result);
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	f023 0310 	bic.w	r3, r3, #16
 800380a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	330c      	adds	r3, #12
 8003814:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8003818:	61fa      	str	r2, [r7, #28]
 800381a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800381c:	69b9      	ldr	r1, [r7, #24]
 800381e:	69fa      	ldr	r2, [r7, #28]
 8003820:	e841 2300 	strex	r3, r2, [r1]
 8003824:	617b      	str	r3, [r7, #20]
   return(result);
 8003826:	697b      	ldr	r3, [r7, #20]
 8003828:	2b00      	cmp	r3, #0
 800382a:	d1e3      	bne.n	80037f4 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	2202      	movs	r2, #2
 8003830:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003832:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003836:	4619      	mov	r1, r3
 8003838:	6878      	ldr	r0, [r7, #4]
 800383a:	f000 f844 	bl	80038c6 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800383e:	e023      	b.n	8003888 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003840:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003844:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003848:	2b00      	cmp	r3, #0
 800384a:	d009      	beq.n	8003860 <HAL_UART_IRQHandler+0x4f4>
 800384c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003850:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003854:	2b00      	cmp	r3, #0
 8003856:	d003      	beq.n	8003860 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003858:	6878      	ldr	r0, [r7, #4]
 800385a:	f000 fa28 	bl	8003cae <UART_Transmit_IT>
    return;
 800385e:	e014      	b.n	800388a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003860:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003864:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003868:	2b00      	cmp	r3, #0
 800386a:	d00e      	beq.n	800388a <HAL_UART_IRQHandler+0x51e>
 800386c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003870:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003874:	2b00      	cmp	r3, #0
 8003876:	d008      	beq.n	800388a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003878:	6878      	ldr	r0, [r7, #4]
 800387a:	f000 fa67 	bl	8003d4c <UART_EndTransmit_IT>
    return;
 800387e:	e004      	b.n	800388a <HAL_UART_IRQHandler+0x51e>
    return;
 8003880:	bf00      	nop
 8003882:	e002      	b.n	800388a <HAL_UART_IRQHandler+0x51e>
      return;
 8003884:	bf00      	nop
 8003886:	e000      	b.n	800388a <HAL_UART_IRQHandler+0x51e>
      return;
 8003888:	bf00      	nop
  }
}
 800388a:	37e8      	adds	r7, #232	@ 0xe8
 800388c:	46bd      	mov	sp, r7
 800388e:	bd80      	pop	{r7, pc}

08003890 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003890:	b480      	push	{r7}
 8003892:	b083      	sub	sp, #12
 8003894:	af00      	add	r7, sp, #0
 8003896:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003898:	bf00      	nop
 800389a:	370c      	adds	r7, #12
 800389c:	46bd      	mov	sp, r7
 800389e:	bc80      	pop	{r7}
 80038a0:	4770      	bx	lr

080038a2 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80038a2:	b480      	push	{r7}
 80038a4:	b083      	sub	sp, #12
 80038a6:	af00      	add	r7, sp, #0
 80038a8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 80038aa:	bf00      	nop
 80038ac:	370c      	adds	r7, #12
 80038ae:	46bd      	mov	sp, r7
 80038b0:	bc80      	pop	{r7}
 80038b2:	4770      	bx	lr

080038b4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80038b4:	b480      	push	{r7}
 80038b6:	b083      	sub	sp, #12
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80038bc:	bf00      	nop
 80038be:	370c      	adds	r7, #12
 80038c0:	46bd      	mov	sp, r7
 80038c2:	bc80      	pop	{r7}
 80038c4:	4770      	bx	lr

080038c6 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80038c6:	b480      	push	{r7}
 80038c8:	b083      	sub	sp, #12
 80038ca:	af00      	add	r7, sp, #0
 80038cc:	6078      	str	r0, [r7, #4]
 80038ce:	460b      	mov	r3, r1
 80038d0:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80038d2:	bf00      	nop
 80038d4:	370c      	adds	r7, #12
 80038d6:	46bd      	mov	sp, r7
 80038d8:	bc80      	pop	{r7}
 80038da:	4770      	bx	lr

080038dc <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80038dc:	b580      	push	{r7, lr}
 80038de:	b090      	sub	sp, #64	@ 0x40
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f003 0320 	and.w	r3, r3, #32
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d137      	bne.n	8003968 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 80038f8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80038fa:	2200      	movs	r2, #0
 80038fc:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80038fe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	3314      	adds	r3, #20
 8003904:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003906:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003908:	e853 3f00 	ldrex	r3, [r3]
 800390c:	623b      	str	r3, [r7, #32]
   return(result);
 800390e:	6a3b      	ldr	r3, [r7, #32]
 8003910:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003914:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003916:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	3314      	adds	r3, #20
 800391c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800391e:	633a      	str	r2, [r7, #48]	@ 0x30
 8003920:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003922:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003924:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003926:	e841 2300 	strex	r3, r2, [r1]
 800392a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800392c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800392e:	2b00      	cmp	r3, #0
 8003930:	d1e5      	bne.n	80038fe <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003932:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	330c      	adds	r3, #12
 8003938:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800393a:	693b      	ldr	r3, [r7, #16]
 800393c:	e853 3f00 	ldrex	r3, [r3]
 8003940:	60fb      	str	r3, [r7, #12]
   return(result);
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003948:	637b      	str	r3, [r7, #52]	@ 0x34
 800394a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	330c      	adds	r3, #12
 8003950:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003952:	61fa      	str	r2, [r7, #28]
 8003954:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003956:	69b9      	ldr	r1, [r7, #24]
 8003958:	69fa      	ldr	r2, [r7, #28]
 800395a:	e841 2300 	strex	r3, r2, [r1]
 800395e:	617b      	str	r3, [r7, #20]
   return(result);
 8003960:	697b      	ldr	r3, [r7, #20]
 8003962:	2b00      	cmp	r3, #0
 8003964:	d1e5      	bne.n	8003932 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003966:	e002      	b.n	800396e <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8003968:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800396a:	f7ff ff91 	bl	8003890 <HAL_UART_TxCpltCallback>
}
 800396e:	bf00      	nop
 8003970:	3740      	adds	r7, #64	@ 0x40
 8003972:	46bd      	mov	sp, r7
 8003974:	bd80      	pop	{r7, pc}

08003976 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003976:	b580      	push	{r7, lr}
 8003978:	b084      	sub	sp, #16
 800397a:	af00      	add	r7, sp, #0
 800397c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003982:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8003984:	68f8      	ldr	r0, [r7, #12]
 8003986:	f7ff ff8c 	bl	80038a2 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800398a:	bf00      	nop
 800398c:	3710      	adds	r7, #16
 800398e:	46bd      	mov	sp, r7
 8003990:	bd80      	pop	{r7, pc}

08003992 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8003992:	b580      	push	{r7, lr}
 8003994:	b084      	sub	sp, #16
 8003996:	af00      	add	r7, sp, #0
 8003998:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800399a:	2300      	movs	r3, #0
 800399c:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039a2:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80039a4:	68bb      	ldr	r3, [r7, #8]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	695b      	ldr	r3, [r3, #20]
 80039aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	bf14      	ite	ne
 80039b2:	2301      	movne	r3, #1
 80039b4:	2300      	moveq	r3, #0
 80039b6:	b2db      	uxtb	r3, r3
 80039b8:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80039ba:	68bb      	ldr	r3, [r7, #8]
 80039bc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80039c0:	b2db      	uxtb	r3, r3
 80039c2:	2b21      	cmp	r3, #33	@ 0x21
 80039c4:	d108      	bne.n	80039d8 <UART_DMAError+0x46>
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d005      	beq.n	80039d8 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80039cc:	68bb      	ldr	r3, [r7, #8]
 80039ce:	2200      	movs	r2, #0
 80039d0:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 80039d2:	68b8      	ldr	r0, [r7, #8]
 80039d4:	f000 f8ce 	bl	8003b74 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80039d8:	68bb      	ldr	r3, [r7, #8]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	695b      	ldr	r3, [r3, #20]
 80039de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	bf14      	ite	ne
 80039e6:	2301      	movne	r3, #1
 80039e8:	2300      	moveq	r3, #0
 80039ea:	b2db      	uxtb	r3, r3
 80039ec:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80039ee:	68bb      	ldr	r3, [r7, #8]
 80039f0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80039f4:	b2db      	uxtb	r3, r3
 80039f6:	2b22      	cmp	r3, #34	@ 0x22
 80039f8:	d108      	bne.n	8003a0c <UART_DMAError+0x7a>
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d005      	beq.n	8003a0c <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8003a00:	68bb      	ldr	r3, [r7, #8]
 8003a02:	2200      	movs	r2, #0
 8003a04:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8003a06:	68b8      	ldr	r0, [r7, #8]
 8003a08:	f000 f8db 	bl	8003bc2 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8003a0c:	68bb      	ldr	r3, [r7, #8]
 8003a0e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a10:	f043 0210 	orr.w	r2, r3, #16
 8003a14:	68bb      	ldr	r3, [r7, #8]
 8003a16:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003a18:	68b8      	ldr	r0, [r7, #8]
 8003a1a:	f7ff ff4b 	bl	80038b4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003a1e:	bf00      	nop
 8003a20:	3710      	adds	r7, #16
 8003a22:	46bd      	mov	sp, r7
 8003a24:	bd80      	pop	{r7, pc}

08003a26 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003a26:	b580      	push	{r7, lr}
 8003a28:	b090      	sub	sp, #64	@ 0x40
 8003a2a:	af00      	add	r7, sp, #0
 8003a2c:	60f8      	str	r0, [r7, #12]
 8003a2e:	60b9      	str	r1, [r7, #8]
 8003a30:	603b      	str	r3, [r7, #0]
 8003a32:	4613      	mov	r3, r2
 8003a34:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003a36:	e050      	b.n	8003ada <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a38:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003a3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a3e:	d04c      	beq.n	8003ada <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003a40:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d007      	beq.n	8003a56 <UART_WaitOnFlagUntilTimeout+0x30>
 8003a46:	f7fe f98d 	bl	8001d64 <HAL_GetTick>
 8003a4a:	4602      	mov	r2, r0
 8003a4c:	683b      	ldr	r3, [r7, #0]
 8003a4e:	1ad3      	subs	r3, r2, r3
 8003a50:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003a52:	429a      	cmp	r2, r3
 8003a54:	d241      	bcs.n	8003ada <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	330c      	adds	r3, #12
 8003a5c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a60:	e853 3f00 	ldrex	r3, [r3]
 8003a64:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003a66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a68:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8003a6c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	330c      	adds	r3, #12
 8003a74:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003a76:	637a      	str	r2, [r7, #52]	@ 0x34
 8003a78:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a7a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003a7c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003a7e:	e841 2300 	strex	r3, r2, [r1]
 8003a82:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8003a84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d1e5      	bne.n	8003a56 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	3314      	adds	r3, #20
 8003a90:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a92:	697b      	ldr	r3, [r7, #20]
 8003a94:	e853 3f00 	ldrex	r3, [r3]
 8003a98:	613b      	str	r3, [r7, #16]
   return(result);
 8003a9a:	693b      	ldr	r3, [r7, #16]
 8003a9c:	f023 0301 	bic.w	r3, r3, #1
 8003aa0:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	3314      	adds	r3, #20
 8003aa8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003aaa:	623a      	str	r2, [r7, #32]
 8003aac:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003aae:	69f9      	ldr	r1, [r7, #28]
 8003ab0:	6a3a      	ldr	r2, [r7, #32]
 8003ab2:	e841 2300 	strex	r3, r2, [r1]
 8003ab6:	61bb      	str	r3, [r7, #24]
   return(result);
 8003ab8:	69bb      	ldr	r3, [r7, #24]
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d1e5      	bne.n	8003a8a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	2220      	movs	r2, #32
 8003ac2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	2220      	movs	r2, #32
 8003aca:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_TIMEOUT;
 8003ad6:	2303      	movs	r3, #3
 8003ad8:	e00f      	b.n	8003afa <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	681a      	ldr	r2, [r3, #0]
 8003ae0:	68bb      	ldr	r3, [r7, #8]
 8003ae2:	4013      	ands	r3, r2
 8003ae4:	68ba      	ldr	r2, [r7, #8]
 8003ae6:	429a      	cmp	r2, r3
 8003ae8:	bf0c      	ite	eq
 8003aea:	2301      	moveq	r3, #1
 8003aec:	2300      	movne	r3, #0
 8003aee:	b2db      	uxtb	r3, r3
 8003af0:	461a      	mov	r2, r3
 8003af2:	79fb      	ldrb	r3, [r7, #7]
 8003af4:	429a      	cmp	r2, r3
 8003af6:	d09f      	beq.n	8003a38 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003af8:	2300      	movs	r3, #0
}
 8003afa:	4618      	mov	r0, r3
 8003afc:	3740      	adds	r7, #64	@ 0x40
 8003afe:	46bd      	mov	sp, r7
 8003b00:	bd80      	pop	{r7, pc}

08003b02 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003b02:	b480      	push	{r7}
 8003b04:	b085      	sub	sp, #20
 8003b06:	af00      	add	r7, sp, #0
 8003b08:	60f8      	str	r0, [r7, #12]
 8003b0a:	60b9      	str	r1, [r7, #8]
 8003b0c:	4613      	mov	r3, r2
 8003b0e:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	68ba      	ldr	r2, [r7, #8]
 8003b14:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	88fa      	ldrh	r2, [r7, #6]
 8003b1a:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	88fa      	ldrh	r2, [r7, #6]
 8003b20:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	2200      	movs	r2, #0
 8003b26:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	2222      	movs	r2, #34	@ 0x22
 8003b2c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	691b      	ldr	r3, [r3, #16]
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d007      	beq.n	8003b48 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	68da      	ldr	r2, [r3, #12]
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003b46:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	695a      	ldr	r2, [r3, #20]
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f042 0201 	orr.w	r2, r2, #1
 8003b56:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	68da      	ldr	r2, [r3, #12]
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f042 0220 	orr.w	r2, r2, #32
 8003b66:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003b68:	2300      	movs	r3, #0
}
 8003b6a:	4618      	mov	r0, r3
 8003b6c:	3714      	adds	r7, #20
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	bc80      	pop	{r7}
 8003b72:	4770      	bx	lr

08003b74 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8003b74:	b480      	push	{r7}
 8003b76:	b089      	sub	sp, #36	@ 0x24
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	330c      	adds	r3, #12
 8003b82:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	e853 3f00 	ldrex	r3, [r3]
 8003b8a:	60bb      	str	r3, [r7, #8]
   return(result);
 8003b8c:	68bb      	ldr	r3, [r7, #8]
 8003b8e:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8003b92:	61fb      	str	r3, [r7, #28]
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	330c      	adds	r3, #12
 8003b9a:	69fa      	ldr	r2, [r7, #28]
 8003b9c:	61ba      	str	r2, [r7, #24]
 8003b9e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ba0:	6979      	ldr	r1, [r7, #20]
 8003ba2:	69ba      	ldr	r2, [r7, #24]
 8003ba4:	e841 2300 	strex	r3, r2, [r1]
 8003ba8:	613b      	str	r3, [r7, #16]
   return(result);
 8003baa:	693b      	ldr	r3, [r7, #16]
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d1e5      	bne.n	8003b7c <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	2220      	movs	r2, #32
 8003bb4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 8003bb8:	bf00      	nop
 8003bba:	3724      	adds	r7, #36	@ 0x24
 8003bbc:	46bd      	mov	sp, r7
 8003bbe:	bc80      	pop	{r7}
 8003bc0:	4770      	bx	lr

08003bc2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003bc2:	b480      	push	{r7}
 8003bc4:	b095      	sub	sp, #84	@ 0x54
 8003bc6:	af00      	add	r7, sp, #0
 8003bc8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	330c      	adds	r3, #12
 8003bd0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bd2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003bd4:	e853 3f00 	ldrex	r3, [r3]
 8003bd8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003bda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003bdc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003be0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	330c      	adds	r3, #12
 8003be8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003bea:	643a      	str	r2, [r7, #64]	@ 0x40
 8003bec:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bee:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003bf0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003bf2:	e841 2300 	strex	r3, r2, [r1]
 8003bf6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003bf8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d1e5      	bne.n	8003bca <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	3314      	adds	r3, #20
 8003c04:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c06:	6a3b      	ldr	r3, [r7, #32]
 8003c08:	e853 3f00 	ldrex	r3, [r3]
 8003c0c:	61fb      	str	r3, [r7, #28]
   return(result);
 8003c0e:	69fb      	ldr	r3, [r7, #28]
 8003c10:	f023 0301 	bic.w	r3, r3, #1
 8003c14:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	3314      	adds	r3, #20
 8003c1c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003c1e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003c20:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c22:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003c24:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003c26:	e841 2300 	strex	r3, r2, [r1]
 8003c2a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003c2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d1e5      	bne.n	8003bfe <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c36:	2b01      	cmp	r3, #1
 8003c38:	d119      	bne.n	8003c6e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	330c      	adds	r3, #12
 8003c40:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	e853 3f00 	ldrex	r3, [r3]
 8003c48:	60bb      	str	r3, [r7, #8]
   return(result);
 8003c4a:	68bb      	ldr	r3, [r7, #8]
 8003c4c:	f023 0310 	bic.w	r3, r3, #16
 8003c50:	647b      	str	r3, [r7, #68]	@ 0x44
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	330c      	adds	r3, #12
 8003c58:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003c5a:	61ba      	str	r2, [r7, #24]
 8003c5c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c5e:	6979      	ldr	r1, [r7, #20]
 8003c60:	69ba      	ldr	r2, [r7, #24]
 8003c62:	e841 2300 	strex	r3, r2, [r1]
 8003c66:	613b      	str	r3, [r7, #16]
   return(result);
 8003c68:	693b      	ldr	r3, [r7, #16]
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d1e5      	bne.n	8003c3a <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	2220      	movs	r2, #32
 8003c72:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	2200      	movs	r2, #0
 8003c7a:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003c7c:	bf00      	nop
 8003c7e:	3754      	adds	r7, #84	@ 0x54
 8003c80:	46bd      	mov	sp, r7
 8003c82:	bc80      	pop	{r7}
 8003c84:	4770      	bx	lr

08003c86 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003c86:	b580      	push	{r7, lr}
 8003c88:	b084      	sub	sp, #16
 8003c8a:	af00      	add	r7, sp, #0
 8003c8c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c92:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	2200      	movs	r2, #0
 8003c98:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	2200      	movs	r2, #0
 8003c9e:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003ca0:	68f8      	ldr	r0, [r7, #12]
 8003ca2:	f7ff fe07 	bl	80038b4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003ca6:	bf00      	nop
 8003ca8:	3710      	adds	r7, #16
 8003caa:	46bd      	mov	sp, r7
 8003cac:	bd80      	pop	{r7, pc}

08003cae <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003cae:	b480      	push	{r7}
 8003cb0:	b085      	sub	sp, #20
 8003cb2:	af00      	add	r7, sp, #0
 8003cb4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003cbc:	b2db      	uxtb	r3, r3
 8003cbe:	2b21      	cmp	r3, #33	@ 0x21
 8003cc0:	d13e      	bne.n	8003d40 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	689b      	ldr	r3, [r3, #8]
 8003cc6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003cca:	d114      	bne.n	8003cf6 <UART_Transmit_IT+0x48>
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	691b      	ldr	r3, [r3, #16]
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d110      	bne.n	8003cf6 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	6a1b      	ldr	r3, [r3, #32]
 8003cd8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	881b      	ldrh	r3, [r3, #0]
 8003cde:	461a      	mov	r2, r3
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003ce8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	6a1b      	ldr	r3, [r3, #32]
 8003cee:	1c9a      	adds	r2, r3, #2
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	621a      	str	r2, [r3, #32]
 8003cf4:	e008      	b.n	8003d08 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	6a1b      	ldr	r3, [r3, #32]
 8003cfa:	1c59      	adds	r1, r3, #1
 8003cfc:	687a      	ldr	r2, [r7, #4]
 8003cfe:	6211      	str	r1, [r2, #32]
 8003d00:	781a      	ldrb	r2, [r3, #0]
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003d0c:	b29b      	uxth	r3, r3
 8003d0e:	3b01      	subs	r3, #1
 8003d10:	b29b      	uxth	r3, r3
 8003d12:	687a      	ldr	r2, [r7, #4]
 8003d14:	4619      	mov	r1, r3
 8003d16:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d10f      	bne.n	8003d3c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	68da      	ldr	r2, [r3, #12]
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003d2a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	68da      	ldr	r2, [r3, #12]
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003d3a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003d3c:	2300      	movs	r3, #0
 8003d3e:	e000      	b.n	8003d42 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003d40:	2302      	movs	r3, #2
  }
}
 8003d42:	4618      	mov	r0, r3
 8003d44:	3714      	adds	r7, #20
 8003d46:	46bd      	mov	sp, r7
 8003d48:	bc80      	pop	{r7}
 8003d4a:	4770      	bx	lr

08003d4c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003d4c:	b580      	push	{r7, lr}
 8003d4e:	b082      	sub	sp, #8
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	68da      	ldr	r2, [r3, #12]
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003d62:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	2220      	movs	r2, #32
 8003d68:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003d6c:	6878      	ldr	r0, [r7, #4]
 8003d6e:	f7ff fd8f 	bl	8003890 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003d72:	2300      	movs	r3, #0
}
 8003d74:	4618      	mov	r0, r3
 8003d76:	3708      	adds	r7, #8
 8003d78:	46bd      	mov	sp, r7
 8003d7a:	bd80      	pop	{r7, pc}

08003d7c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003d7c:	b580      	push	{r7, lr}
 8003d7e:	b08c      	sub	sp, #48	@ 0x30
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003d8a:	b2db      	uxtb	r3, r3
 8003d8c:	2b22      	cmp	r3, #34	@ 0x22
 8003d8e:	f040 80ae 	bne.w	8003eee <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	689b      	ldr	r3, [r3, #8]
 8003d96:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003d9a:	d117      	bne.n	8003dcc <UART_Receive_IT+0x50>
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	691b      	ldr	r3, [r3, #16]
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d113      	bne.n	8003dcc <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003da4:	2300      	movs	r3, #0
 8003da6:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003dac:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	685b      	ldr	r3, [r3, #4]
 8003db4:	b29b      	uxth	r3, r3
 8003db6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003dba:	b29a      	uxth	r2, r3
 8003dbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003dbe:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003dc4:	1c9a      	adds	r2, r3, #2
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	629a      	str	r2, [r3, #40]	@ 0x28
 8003dca:	e026      	b.n	8003e1a <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003dd0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8003dd2:	2300      	movs	r3, #0
 8003dd4:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	689b      	ldr	r3, [r3, #8]
 8003dda:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003dde:	d007      	beq.n	8003df0 <UART_Receive_IT+0x74>
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	689b      	ldr	r3, [r3, #8]
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d10a      	bne.n	8003dfe <UART_Receive_IT+0x82>
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	691b      	ldr	r3, [r3, #16]
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d106      	bne.n	8003dfe <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	685b      	ldr	r3, [r3, #4]
 8003df6:	b2da      	uxtb	r2, r3
 8003df8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003dfa:	701a      	strb	r2, [r3, #0]
 8003dfc:	e008      	b.n	8003e10 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	685b      	ldr	r3, [r3, #4]
 8003e04:	b2db      	uxtb	r3, r3
 8003e06:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003e0a:	b2da      	uxtb	r2, r3
 8003e0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e0e:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e14:	1c5a      	adds	r2, r3, #1
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003e1e:	b29b      	uxth	r3, r3
 8003e20:	3b01      	subs	r3, #1
 8003e22:	b29b      	uxth	r3, r3
 8003e24:	687a      	ldr	r2, [r7, #4]
 8003e26:	4619      	mov	r1, r3
 8003e28:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d15d      	bne.n	8003eea <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	68da      	ldr	r2, [r3, #12]
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f022 0220 	bic.w	r2, r2, #32
 8003e3c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	68da      	ldr	r2, [r3, #12]
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003e4c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	695a      	ldr	r2, [r3, #20]
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f022 0201 	bic.w	r2, r2, #1
 8003e5c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	2220      	movs	r2, #32
 8003e62:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	2200      	movs	r2, #0
 8003e6a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e70:	2b01      	cmp	r3, #1
 8003e72:	d135      	bne.n	8003ee0 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	2200      	movs	r2, #0
 8003e78:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	330c      	adds	r3, #12
 8003e80:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e82:	697b      	ldr	r3, [r7, #20]
 8003e84:	e853 3f00 	ldrex	r3, [r3]
 8003e88:	613b      	str	r3, [r7, #16]
   return(result);
 8003e8a:	693b      	ldr	r3, [r7, #16]
 8003e8c:	f023 0310 	bic.w	r3, r3, #16
 8003e90:	627b      	str	r3, [r7, #36]	@ 0x24
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	330c      	adds	r3, #12
 8003e98:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003e9a:	623a      	str	r2, [r7, #32]
 8003e9c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e9e:	69f9      	ldr	r1, [r7, #28]
 8003ea0:	6a3a      	ldr	r2, [r7, #32]
 8003ea2:	e841 2300 	strex	r3, r2, [r1]
 8003ea6:	61bb      	str	r3, [r7, #24]
   return(result);
 8003ea8:	69bb      	ldr	r3, [r7, #24]
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d1e5      	bne.n	8003e7a <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f003 0310 	and.w	r3, r3, #16
 8003eb8:	2b10      	cmp	r3, #16
 8003eba:	d10a      	bne.n	8003ed2 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003ebc:	2300      	movs	r3, #0
 8003ebe:	60fb      	str	r3, [r7, #12]
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	60fb      	str	r3, [r7, #12]
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	685b      	ldr	r3, [r3, #4]
 8003ece:	60fb      	str	r3, [r7, #12]
 8003ed0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003ed6:	4619      	mov	r1, r3
 8003ed8:	6878      	ldr	r0, [r7, #4]
 8003eda:	f7ff fcf4 	bl	80038c6 <HAL_UARTEx_RxEventCallback>
 8003ede:	e002      	b.n	8003ee6 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003ee0:	6878      	ldr	r0, [r7, #4]
 8003ee2:	f7fd f8df 	bl	80010a4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003ee6:	2300      	movs	r3, #0
 8003ee8:	e002      	b.n	8003ef0 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8003eea:	2300      	movs	r3, #0
 8003eec:	e000      	b.n	8003ef0 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8003eee:	2302      	movs	r3, #2
  }
}
 8003ef0:	4618      	mov	r0, r3
 8003ef2:	3730      	adds	r7, #48	@ 0x30
 8003ef4:	46bd      	mov	sp, r7
 8003ef6:	bd80      	pop	{r7, pc}

08003ef8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003ef8:	b580      	push	{r7, lr}
 8003efa:	b084      	sub	sp, #16
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	691b      	ldr	r3, [r3, #16]
 8003f06:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	68da      	ldr	r2, [r3, #12]
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	430a      	orrs	r2, r1
 8003f14:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	689a      	ldr	r2, [r3, #8]
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	691b      	ldr	r3, [r3, #16]
 8003f1e:	431a      	orrs	r2, r3
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	695b      	ldr	r3, [r3, #20]
 8003f24:	4313      	orrs	r3, r2
 8003f26:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	68db      	ldr	r3, [r3, #12]
 8003f2e:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8003f32:	f023 030c 	bic.w	r3, r3, #12
 8003f36:	687a      	ldr	r2, [r7, #4]
 8003f38:	6812      	ldr	r2, [r2, #0]
 8003f3a:	68b9      	ldr	r1, [r7, #8]
 8003f3c:	430b      	orrs	r3, r1
 8003f3e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	695b      	ldr	r3, [r3, #20]
 8003f46:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	699a      	ldr	r2, [r3, #24]
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	430a      	orrs	r2, r1
 8003f54:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	4a2c      	ldr	r2, [pc, #176]	@ (800400c <UART_SetConfig+0x114>)
 8003f5c:	4293      	cmp	r3, r2
 8003f5e:	d103      	bne.n	8003f68 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003f60:	f7ff f86a 	bl	8003038 <HAL_RCC_GetPCLK2Freq>
 8003f64:	60f8      	str	r0, [r7, #12]
 8003f66:	e002      	b.n	8003f6e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003f68:	f7ff f852 	bl	8003010 <HAL_RCC_GetPCLK1Freq>
 8003f6c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003f6e:	68fa      	ldr	r2, [r7, #12]
 8003f70:	4613      	mov	r3, r2
 8003f72:	009b      	lsls	r3, r3, #2
 8003f74:	4413      	add	r3, r2
 8003f76:	009a      	lsls	r2, r3, #2
 8003f78:	441a      	add	r2, r3
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	685b      	ldr	r3, [r3, #4]
 8003f7e:	009b      	lsls	r3, r3, #2
 8003f80:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f84:	4a22      	ldr	r2, [pc, #136]	@ (8004010 <UART_SetConfig+0x118>)
 8003f86:	fba2 2303 	umull	r2, r3, r2, r3
 8003f8a:	095b      	lsrs	r3, r3, #5
 8003f8c:	0119      	lsls	r1, r3, #4
 8003f8e:	68fa      	ldr	r2, [r7, #12]
 8003f90:	4613      	mov	r3, r2
 8003f92:	009b      	lsls	r3, r3, #2
 8003f94:	4413      	add	r3, r2
 8003f96:	009a      	lsls	r2, r3, #2
 8003f98:	441a      	add	r2, r3
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	685b      	ldr	r3, [r3, #4]
 8003f9e:	009b      	lsls	r3, r3, #2
 8003fa0:	fbb2 f2f3 	udiv	r2, r2, r3
 8003fa4:	4b1a      	ldr	r3, [pc, #104]	@ (8004010 <UART_SetConfig+0x118>)
 8003fa6:	fba3 0302 	umull	r0, r3, r3, r2
 8003faa:	095b      	lsrs	r3, r3, #5
 8003fac:	2064      	movs	r0, #100	@ 0x64
 8003fae:	fb00 f303 	mul.w	r3, r0, r3
 8003fb2:	1ad3      	subs	r3, r2, r3
 8003fb4:	011b      	lsls	r3, r3, #4
 8003fb6:	3332      	adds	r3, #50	@ 0x32
 8003fb8:	4a15      	ldr	r2, [pc, #84]	@ (8004010 <UART_SetConfig+0x118>)
 8003fba:	fba2 2303 	umull	r2, r3, r2, r3
 8003fbe:	095b      	lsrs	r3, r3, #5
 8003fc0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003fc4:	4419      	add	r1, r3
 8003fc6:	68fa      	ldr	r2, [r7, #12]
 8003fc8:	4613      	mov	r3, r2
 8003fca:	009b      	lsls	r3, r3, #2
 8003fcc:	4413      	add	r3, r2
 8003fce:	009a      	lsls	r2, r3, #2
 8003fd0:	441a      	add	r2, r3
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	685b      	ldr	r3, [r3, #4]
 8003fd6:	009b      	lsls	r3, r3, #2
 8003fd8:	fbb2 f2f3 	udiv	r2, r2, r3
 8003fdc:	4b0c      	ldr	r3, [pc, #48]	@ (8004010 <UART_SetConfig+0x118>)
 8003fde:	fba3 0302 	umull	r0, r3, r3, r2
 8003fe2:	095b      	lsrs	r3, r3, #5
 8003fe4:	2064      	movs	r0, #100	@ 0x64
 8003fe6:	fb00 f303 	mul.w	r3, r0, r3
 8003fea:	1ad3      	subs	r3, r2, r3
 8003fec:	011b      	lsls	r3, r3, #4
 8003fee:	3332      	adds	r3, #50	@ 0x32
 8003ff0:	4a07      	ldr	r2, [pc, #28]	@ (8004010 <UART_SetConfig+0x118>)
 8003ff2:	fba2 2303 	umull	r2, r3, r2, r3
 8003ff6:	095b      	lsrs	r3, r3, #5
 8003ff8:	f003 020f 	and.w	r2, r3, #15
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	440a      	add	r2, r1
 8004002:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004004:	bf00      	nop
 8004006:	3710      	adds	r7, #16
 8004008:	46bd      	mov	sp, r7
 800400a:	bd80      	pop	{r7, pc}
 800400c:	40013800 	.word	0x40013800
 8004010:	51eb851f 	.word	0x51eb851f

08004014 <sbrk_aligned>:
 8004014:	b570      	push	{r4, r5, r6, lr}
 8004016:	4e0f      	ldr	r6, [pc, #60]	@ (8004054 <sbrk_aligned+0x40>)
 8004018:	460c      	mov	r4, r1
 800401a:	6831      	ldr	r1, [r6, #0]
 800401c:	4605      	mov	r5, r0
 800401e:	b911      	cbnz	r1, 8004026 <sbrk_aligned+0x12>
 8004020:	f000 f954 	bl	80042cc <_sbrk_r>
 8004024:	6030      	str	r0, [r6, #0]
 8004026:	4621      	mov	r1, r4
 8004028:	4628      	mov	r0, r5
 800402a:	f000 f94f 	bl	80042cc <_sbrk_r>
 800402e:	1c43      	adds	r3, r0, #1
 8004030:	d103      	bne.n	800403a <sbrk_aligned+0x26>
 8004032:	f04f 34ff 	mov.w	r4, #4294967295
 8004036:	4620      	mov	r0, r4
 8004038:	bd70      	pop	{r4, r5, r6, pc}
 800403a:	1cc4      	adds	r4, r0, #3
 800403c:	f024 0403 	bic.w	r4, r4, #3
 8004040:	42a0      	cmp	r0, r4
 8004042:	d0f8      	beq.n	8004036 <sbrk_aligned+0x22>
 8004044:	1a21      	subs	r1, r4, r0
 8004046:	4628      	mov	r0, r5
 8004048:	f000 f940 	bl	80042cc <_sbrk_r>
 800404c:	3001      	adds	r0, #1
 800404e:	d1f2      	bne.n	8004036 <sbrk_aligned+0x22>
 8004050:	e7ef      	b.n	8004032 <sbrk_aligned+0x1e>
 8004052:	bf00      	nop
 8004054:	200008cc 	.word	0x200008cc

08004058 <_malloc_r>:
 8004058:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800405c:	1ccd      	adds	r5, r1, #3
 800405e:	f025 0503 	bic.w	r5, r5, #3
 8004062:	3508      	adds	r5, #8
 8004064:	2d0c      	cmp	r5, #12
 8004066:	bf38      	it	cc
 8004068:	250c      	movcc	r5, #12
 800406a:	2d00      	cmp	r5, #0
 800406c:	4606      	mov	r6, r0
 800406e:	db01      	blt.n	8004074 <_malloc_r+0x1c>
 8004070:	42a9      	cmp	r1, r5
 8004072:	d904      	bls.n	800407e <_malloc_r+0x26>
 8004074:	230c      	movs	r3, #12
 8004076:	6033      	str	r3, [r6, #0]
 8004078:	2000      	movs	r0, #0
 800407a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800407e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004154 <_malloc_r+0xfc>
 8004082:	f000 f869 	bl	8004158 <__malloc_lock>
 8004086:	f8d8 3000 	ldr.w	r3, [r8]
 800408a:	461c      	mov	r4, r3
 800408c:	bb44      	cbnz	r4, 80040e0 <_malloc_r+0x88>
 800408e:	4629      	mov	r1, r5
 8004090:	4630      	mov	r0, r6
 8004092:	f7ff ffbf 	bl	8004014 <sbrk_aligned>
 8004096:	1c43      	adds	r3, r0, #1
 8004098:	4604      	mov	r4, r0
 800409a:	d158      	bne.n	800414e <_malloc_r+0xf6>
 800409c:	f8d8 4000 	ldr.w	r4, [r8]
 80040a0:	4627      	mov	r7, r4
 80040a2:	2f00      	cmp	r7, #0
 80040a4:	d143      	bne.n	800412e <_malloc_r+0xd6>
 80040a6:	2c00      	cmp	r4, #0
 80040a8:	d04b      	beq.n	8004142 <_malloc_r+0xea>
 80040aa:	6823      	ldr	r3, [r4, #0]
 80040ac:	4639      	mov	r1, r7
 80040ae:	4630      	mov	r0, r6
 80040b0:	eb04 0903 	add.w	r9, r4, r3
 80040b4:	f000 f90a 	bl	80042cc <_sbrk_r>
 80040b8:	4581      	cmp	r9, r0
 80040ba:	d142      	bne.n	8004142 <_malloc_r+0xea>
 80040bc:	6821      	ldr	r1, [r4, #0]
 80040be:	4630      	mov	r0, r6
 80040c0:	1a6d      	subs	r5, r5, r1
 80040c2:	4629      	mov	r1, r5
 80040c4:	f7ff ffa6 	bl	8004014 <sbrk_aligned>
 80040c8:	3001      	adds	r0, #1
 80040ca:	d03a      	beq.n	8004142 <_malloc_r+0xea>
 80040cc:	6823      	ldr	r3, [r4, #0]
 80040ce:	442b      	add	r3, r5
 80040d0:	6023      	str	r3, [r4, #0]
 80040d2:	f8d8 3000 	ldr.w	r3, [r8]
 80040d6:	685a      	ldr	r2, [r3, #4]
 80040d8:	bb62      	cbnz	r2, 8004134 <_malloc_r+0xdc>
 80040da:	f8c8 7000 	str.w	r7, [r8]
 80040de:	e00f      	b.n	8004100 <_malloc_r+0xa8>
 80040e0:	6822      	ldr	r2, [r4, #0]
 80040e2:	1b52      	subs	r2, r2, r5
 80040e4:	d420      	bmi.n	8004128 <_malloc_r+0xd0>
 80040e6:	2a0b      	cmp	r2, #11
 80040e8:	d917      	bls.n	800411a <_malloc_r+0xc2>
 80040ea:	1961      	adds	r1, r4, r5
 80040ec:	42a3      	cmp	r3, r4
 80040ee:	6025      	str	r5, [r4, #0]
 80040f0:	bf18      	it	ne
 80040f2:	6059      	strne	r1, [r3, #4]
 80040f4:	6863      	ldr	r3, [r4, #4]
 80040f6:	bf08      	it	eq
 80040f8:	f8c8 1000 	streq.w	r1, [r8]
 80040fc:	5162      	str	r2, [r4, r5]
 80040fe:	604b      	str	r3, [r1, #4]
 8004100:	4630      	mov	r0, r6
 8004102:	f000 f82f 	bl	8004164 <__malloc_unlock>
 8004106:	f104 000b 	add.w	r0, r4, #11
 800410a:	1d23      	adds	r3, r4, #4
 800410c:	f020 0007 	bic.w	r0, r0, #7
 8004110:	1ac2      	subs	r2, r0, r3
 8004112:	bf1c      	itt	ne
 8004114:	1a1b      	subne	r3, r3, r0
 8004116:	50a3      	strne	r3, [r4, r2]
 8004118:	e7af      	b.n	800407a <_malloc_r+0x22>
 800411a:	6862      	ldr	r2, [r4, #4]
 800411c:	42a3      	cmp	r3, r4
 800411e:	bf0c      	ite	eq
 8004120:	f8c8 2000 	streq.w	r2, [r8]
 8004124:	605a      	strne	r2, [r3, #4]
 8004126:	e7eb      	b.n	8004100 <_malloc_r+0xa8>
 8004128:	4623      	mov	r3, r4
 800412a:	6864      	ldr	r4, [r4, #4]
 800412c:	e7ae      	b.n	800408c <_malloc_r+0x34>
 800412e:	463c      	mov	r4, r7
 8004130:	687f      	ldr	r7, [r7, #4]
 8004132:	e7b6      	b.n	80040a2 <_malloc_r+0x4a>
 8004134:	461a      	mov	r2, r3
 8004136:	685b      	ldr	r3, [r3, #4]
 8004138:	42a3      	cmp	r3, r4
 800413a:	d1fb      	bne.n	8004134 <_malloc_r+0xdc>
 800413c:	2300      	movs	r3, #0
 800413e:	6053      	str	r3, [r2, #4]
 8004140:	e7de      	b.n	8004100 <_malloc_r+0xa8>
 8004142:	230c      	movs	r3, #12
 8004144:	4630      	mov	r0, r6
 8004146:	6033      	str	r3, [r6, #0]
 8004148:	f000 f80c 	bl	8004164 <__malloc_unlock>
 800414c:	e794      	b.n	8004078 <_malloc_r+0x20>
 800414e:	6005      	str	r5, [r0, #0]
 8004150:	e7d6      	b.n	8004100 <_malloc_r+0xa8>
 8004152:	bf00      	nop
 8004154:	200008d0 	.word	0x200008d0

08004158 <__malloc_lock>:
 8004158:	4801      	ldr	r0, [pc, #4]	@ (8004160 <__malloc_lock+0x8>)
 800415a:	f000 b8f1 	b.w	8004340 <__retarget_lock_acquire_recursive>
 800415e:	bf00      	nop
 8004160:	20000a10 	.word	0x20000a10

08004164 <__malloc_unlock>:
 8004164:	4801      	ldr	r0, [pc, #4]	@ (800416c <__malloc_unlock+0x8>)
 8004166:	f000 b8ec 	b.w	8004342 <__retarget_lock_release_recursive>
 800416a:	bf00      	nop
 800416c:	20000a10 	.word	0x20000a10

08004170 <_realloc_r>:
 8004170:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004174:	4680      	mov	r8, r0
 8004176:	4615      	mov	r5, r2
 8004178:	460c      	mov	r4, r1
 800417a:	b921      	cbnz	r1, 8004186 <_realloc_r+0x16>
 800417c:	4611      	mov	r1, r2
 800417e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004182:	f7ff bf69 	b.w	8004058 <_malloc_r>
 8004186:	b92a      	cbnz	r2, 8004194 <_realloc_r+0x24>
 8004188:	f000 f8f2 	bl	8004370 <_free_r>
 800418c:	2400      	movs	r4, #0
 800418e:	4620      	mov	r0, r4
 8004190:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004194:	f000 f934 	bl	8004400 <_malloc_usable_size_r>
 8004198:	4285      	cmp	r5, r0
 800419a:	4606      	mov	r6, r0
 800419c:	d802      	bhi.n	80041a4 <_realloc_r+0x34>
 800419e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80041a2:	d8f4      	bhi.n	800418e <_realloc_r+0x1e>
 80041a4:	4629      	mov	r1, r5
 80041a6:	4640      	mov	r0, r8
 80041a8:	f7ff ff56 	bl	8004058 <_malloc_r>
 80041ac:	4607      	mov	r7, r0
 80041ae:	2800      	cmp	r0, #0
 80041b0:	d0ec      	beq.n	800418c <_realloc_r+0x1c>
 80041b2:	42b5      	cmp	r5, r6
 80041b4:	462a      	mov	r2, r5
 80041b6:	4621      	mov	r1, r4
 80041b8:	bf28      	it	cs
 80041ba:	4632      	movcs	r2, r6
 80041bc:	f000 f8ca 	bl	8004354 <memcpy>
 80041c0:	4621      	mov	r1, r4
 80041c2:	4640      	mov	r0, r8
 80041c4:	f000 f8d4 	bl	8004370 <_free_r>
 80041c8:	463c      	mov	r4, r7
 80041ca:	e7e0      	b.n	800418e <_realloc_r+0x1e>

080041cc <sniprintf>:
 80041cc:	b40c      	push	{r2, r3}
 80041ce:	b530      	push	{r4, r5, lr}
 80041d0:	4b17      	ldr	r3, [pc, #92]	@ (8004230 <sniprintf+0x64>)
 80041d2:	1e0c      	subs	r4, r1, #0
 80041d4:	681d      	ldr	r5, [r3, #0]
 80041d6:	b09d      	sub	sp, #116	@ 0x74
 80041d8:	da08      	bge.n	80041ec <sniprintf+0x20>
 80041da:	238b      	movs	r3, #139	@ 0x8b
 80041dc:	f04f 30ff 	mov.w	r0, #4294967295
 80041e0:	602b      	str	r3, [r5, #0]
 80041e2:	b01d      	add	sp, #116	@ 0x74
 80041e4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80041e8:	b002      	add	sp, #8
 80041ea:	4770      	bx	lr
 80041ec:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80041f0:	f8ad 3014 	strh.w	r3, [sp, #20]
 80041f4:	bf0c      	ite	eq
 80041f6:	4623      	moveq	r3, r4
 80041f8:	f104 33ff 	addne.w	r3, r4, #4294967295
 80041fc:	9304      	str	r3, [sp, #16]
 80041fe:	9307      	str	r3, [sp, #28]
 8004200:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8004204:	9002      	str	r0, [sp, #8]
 8004206:	9006      	str	r0, [sp, #24]
 8004208:	f8ad 3016 	strh.w	r3, [sp, #22]
 800420c:	4628      	mov	r0, r5
 800420e:	ab21      	add	r3, sp, #132	@ 0x84
 8004210:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8004212:	a902      	add	r1, sp, #8
 8004214:	9301      	str	r3, [sp, #4]
 8004216:	f000 f957 	bl	80044c8 <_svfiprintf_r>
 800421a:	1c43      	adds	r3, r0, #1
 800421c:	bfbc      	itt	lt
 800421e:	238b      	movlt	r3, #139	@ 0x8b
 8004220:	602b      	strlt	r3, [r5, #0]
 8004222:	2c00      	cmp	r4, #0
 8004224:	d0dd      	beq.n	80041e2 <sniprintf+0x16>
 8004226:	2200      	movs	r2, #0
 8004228:	9b02      	ldr	r3, [sp, #8]
 800422a:	701a      	strb	r2, [r3, #0]
 800422c:	e7d9      	b.n	80041e2 <sniprintf+0x16>
 800422e:	bf00      	nop
 8004230:	20000064 	.word	0x20000064

08004234 <siprintf>:
 8004234:	b40e      	push	{r1, r2, r3}
 8004236:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800423a:	b500      	push	{lr}
 800423c:	b09c      	sub	sp, #112	@ 0x70
 800423e:	ab1d      	add	r3, sp, #116	@ 0x74
 8004240:	9002      	str	r0, [sp, #8]
 8004242:	9006      	str	r0, [sp, #24]
 8004244:	9107      	str	r1, [sp, #28]
 8004246:	9104      	str	r1, [sp, #16]
 8004248:	4808      	ldr	r0, [pc, #32]	@ (800426c <siprintf+0x38>)
 800424a:	4909      	ldr	r1, [pc, #36]	@ (8004270 <siprintf+0x3c>)
 800424c:	f853 2b04 	ldr.w	r2, [r3], #4
 8004250:	9105      	str	r1, [sp, #20]
 8004252:	6800      	ldr	r0, [r0, #0]
 8004254:	a902      	add	r1, sp, #8
 8004256:	9301      	str	r3, [sp, #4]
 8004258:	f000 f936 	bl	80044c8 <_svfiprintf_r>
 800425c:	2200      	movs	r2, #0
 800425e:	9b02      	ldr	r3, [sp, #8]
 8004260:	701a      	strb	r2, [r3, #0]
 8004262:	b01c      	add	sp, #112	@ 0x70
 8004264:	f85d eb04 	ldr.w	lr, [sp], #4
 8004268:	b003      	add	sp, #12
 800426a:	4770      	bx	lr
 800426c:	20000064 	.word	0x20000064
 8004270:	ffff0208 	.word	0xffff0208

08004274 <memset>:
 8004274:	4603      	mov	r3, r0
 8004276:	4402      	add	r2, r0
 8004278:	4293      	cmp	r3, r2
 800427a:	d100      	bne.n	800427e <memset+0xa>
 800427c:	4770      	bx	lr
 800427e:	f803 1b01 	strb.w	r1, [r3], #1
 8004282:	e7f9      	b.n	8004278 <memset+0x4>

08004284 <strchr>:
 8004284:	4603      	mov	r3, r0
 8004286:	b2c9      	uxtb	r1, r1
 8004288:	4618      	mov	r0, r3
 800428a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800428e:	b112      	cbz	r2, 8004296 <strchr+0x12>
 8004290:	428a      	cmp	r2, r1
 8004292:	d1f9      	bne.n	8004288 <strchr+0x4>
 8004294:	4770      	bx	lr
 8004296:	2900      	cmp	r1, #0
 8004298:	bf18      	it	ne
 800429a:	2000      	movne	r0, #0
 800429c:	4770      	bx	lr

0800429e <strstr>:
 800429e:	780a      	ldrb	r2, [r1, #0]
 80042a0:	b570      	push	{r4, r5, r6, lr}
 80042a2:	b96a      	cbnz	r2, 80042c0 <strstr+0x22>
 80042a4:	bd70      	pop	{r4, r5, r6, pc}
 80042a6:	429a      	cmp	r2, r3
 80042a8:	d109      	bne.n	80042be <strstr+0x20>
 80042aa:	460c      	mov	r4, r1
 80042ac:	4605      	mov	r5, r0
 80042ae:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d0f6      	beq.n	80042a4 <strstr+0x6>
 80042b6:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 80042ba:	429e      	cmp	r6, r3
 80042bc:	d0f7      	beq.n	80042ae <strstr+0x10>
 80042be:	3001      	adds	r0, #1
 80042c0:	7803      	ldrb	r3, [r0, #0]
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d1ef      	bne.n	80042a6 <strstr+0x8>
 80042c6:	4618      	mov	r0, r3
 80042c8:	e7ec      	b.n	80042a4 <strstr+0x6>
	...

080042cc <_sbrk_r>:
 80042cc:	b538      	push	{r3, r4, r5, lr}
 80042ce:	2300      	movs	r3, #0
 80042d0:	4d05      	ldr	r5, [pc, #20]	@ (80042e8 <_sbrk_r+0x1c>)
 80042d2:	4604      	mov	r4, r0
 80042d4:	4608      	mov	r0, r1
 80042d6:	602b      	str	r3, [r5, #0]
 80042d8:	f7fd fc8a 	bl	8001bf0 <_sbrk>
 80042dc:	1c43      	adds	r3, r0, #1
 80042de:	d102      	bne.n	80042e6 <_sbrk_r+0x1a>
 80042e0:	682b      	ldr	r3, [r5, #0]
 80042e2:	b103      	cbz	r3, 80042e6 <_sbrk_r+0x1a>
 80042e4:	6023      	str	r3, [r4, #0]
 80042e6:	bd38      	pop	{r3, r4, r5, pc}
 80042e8:	20000a0c 	.word	0x20000a0c

080042ec <__errno>:
 80042ec:	4b01      	ldr	r3, [pc, #4]	@ (80042f4 <__errno+0x8>)
 80042ee:	6818      	ldr	r0, [r3, #0]
 80042f0:	4770      	bx	lr
 80042f2:	bf00      	nop
 80042f4:	20000064 	.word	0x20000064

080042f8 <__libc_init_array>:
 80042f8:	b570      	push	{r4, r5, r6, lr}
 80042fa:	2600      	movs	r6, #0
 80042fc:	4d0c      	ldr	r5, [pc, #48]	@ (8004330 <__libc_init_array+0x38>)
 80042fe:	4c0d      	ldr	r4, [pc, #52]	@ (8004334 <__libc_init_array+0x3c>)
 8004300:	1b64      	subs	r4, r4, r5
 8004302:	10a4      	asrs	r4, r4, #2
 8004304:	42a6      	cmp	r6, r4
 8004306:	d109      	bne.n	800431c <__libc_init_array+0x24>
 8004308:	f000 fb94 	bl	8004a34 <_init>
 800430c:	2600      	movs	r6, #0
 800430e:	4d0a      	ldr	r5, [pc, #40]	@ (8004338 <__libc_init_array+0x40>)
 8004310:	4c0a      	ldr	r4, [pc, #40]	@ (800433c <__libc_init_array+0x44>)
 8004312:	1b64      	subs	r4, r4, r5
 8004314:	10a4      	asrs	r4, r4, #2
 8004316:	42a6      	cmp	r6, r4
 8004318:	d105      	bne.n	8004326 <__libc_init_array+0x2e>
 800431a:	bd70      	pop	{r4, r5, r6, pc}
 800431c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004320:	4798      	blx	r3
 8004322:	3601      	adds	r6, #1
 8004324:	e7ee      	b.n	8004304 <__libc_init_array+0xc>
 8004326:	f855 3b04 	ldr.w	r3, [r5], #4
 800432a:	4798      	blx	r3
 800432c:	3601      	adds	r6, #1
 800432e:	e7f2      	b.n	8004316 <__libc_init_array+0x1e>
 8004330:	08004dc8 	.word	0x08004dc8
 8004334:	08004dc8 	.word	0x08004dc8
 8004338:	08004dc8 	.word	0x08004dc8
 800433c:	08004dcc 	.word	0x08004dcc

08004340 <__retarget_lock_acquire_recursive>:
 8004340:	4770      	bx	lr

08004342 <__retarget_lock_release_recursive>:
 8004342:	4770      	bx	lr

08004344 <strcpy>:
 8004344:	4603      	mov	r3, r0
 8004346:	f811 2b01 	ldrb.w	r2, [r1], #1
 800434a:	f803 2b01 	strb.w	r2, [r3], #1
 800434e:	2a00      	cmp	r2, #0
 8004350:	d1f9      	bne.n	8004346 <strcpy+0x2>
 8004352:	4770      	bx	lr

08004354 <memcpy>:
 8004354:	440a      	add	r2, r1
 8004356:	4291      	cmp	r1, r2
 8004358:	f100 33ff 	add.w	r3, r0, #4294967295
 800435c:	d100      	bne.n	8004360 <memcpy+0xc>
 800435e:	4770      	bx	lr
 8004360:	b510      	push	{r4, lr}
 8004362:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004366:	4291      	cmp	r1, r2
 8004368:	f803 4f01 	strb.w	r4, [r3, #1]!
 800436c:	d1f9      	bne.n	8004362 <memcpy+0xe>
 800436e:	bd10      	pop	{r4, pc}

08004370 <_free_r>:
 8004370:	b538      	push	{r3, r4, r5, lr}
 8004372:	4605      	mov	r5, r0
 8004374:	2900      	cmp	r1, #0
 8004376:	d040      	beq.n	80043fa <_free_r+0x8a>
 8004378:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800437c:	1f0c      	subs	r4, r1, #4
 800437e:	2b00      	cmp	r3, #0
 8004380:	bfb8      	it	lt
 8004382:	18e4      	addlt	r4, r4, r3
 8004384:	f7ff fee8 	bl	8004158 <__malloc_lock>
 8004388:	4a1c      	ldr	r2, [pc, #112]	@ (80043fc <_free_r+0x8c>)
 800438a:	6813      	ldr	r3, [r2, #0]
 800438c:	b933      	cbnz	r3, 800439c <_free_r+0x2c>
 800438e:	6063      	str	r3, [r4, #4]
 8004390:	6014      	str	r4, [r2, #0]
 8004392:	4628      	mov	r0, r5
 8004394:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004398:	f7ff bee4 	b.w	8004164 <__malloc_unlock>
 800439c:	42a3      	cmp	r3, r4
 800439e:	d908      	bls.n	80043b2 <_free_r+0x42>
 80043a0:	6820      	ldr	r0, [r4, #0]
 80043a2:	1821      	adds	r1, r4, r0
 80043a4:	428b      	cmp	r3, r1
 80043a6:	bf01      	itttt	eq
 80043a8:	6819      	ldreq	r1, [r3, #0]
 80043aa:	685b      	ldreq	r3, [r3, #4]
 80043ac:	1809      	addeq	r1, r1, r0
 80043ae:	6021      	streq	r1, [r4, #0]
 80043b0:	e7ed      	b.n	800438e <_free_r+0x1e>
 80043b2:	461a      	mov	r2, r3
 80043b4:	685b      	ldr	r3, [r3, #4]
 80043b6:	b10b      	cbz	r3, 80043bc <_free_r+0x4c>
 80043b8:	42a3      	cmp	r3, r4
 80043ba:	d9fa      	bls.n	80043b2 <_free_r+0x42>
 80043bc:	6811      	ldr	r1, [r2, #0]
 80043be:	1850      	adds	r0, r2, r1
 80043c0:	42a0      	cmp	r0, r4
 80043c2:	d10b      	bne.n	80043dc <_free_r+0x6c>
 80043c4:	6820      	ldr	r0, [r4, #0]
 80043c6:	4401      	add	r1, r0
 80043c8:	1850      	adds	r0, r2, r1
 80043ca:	4283      	cmp	r3, r0
 80043cc:	6011      	str	r1, [r2, #0]
 80043ce:	d1e0      	bne.n	8004392 <_free_r+0x22>
 80043d0:	6818      	ldr	r0, [r3, #0]
 80043d2:	685b      	ldr	r3, [r3, #4]
 80043d4:	4408      	add	r0, r1
 80043d6:	6010      	str	r0, [r2, #0]
 80043d8:	6053      	str	r3, [r2, #4]
 80043da:	e7da      	b.n	8004392 <_free_r+0x22>
 80043dc:	d902      	bls.n	80043e4 <_free_r+0x74>
 80043de:	230c      	movs	r3, #12
 80043e0:	602b      	str	r3, [r5, #0]
 80043e2:	e7d6      	b.n	8004392 <_free_r+0x22>
 80043e4:	6820      	ldr	r0, [r4, #0]
 80043e6:	1821      	adds	r1, r4, r0
 80043e8:	428b      	cmp	r3, r1
 80043ea:	bf01      	itttt	eq
 80043ec:	6819      	ldreq	r1, [r3, #0]
 80043ee:	685b      	ldreq	r3, [r3, #4]
 80043f0:	1809      	addeq	r1, r1, r0
 80043f2:	6021      	streq	r1, [r4, #0]
 80043f4:	6063      	str	r3, [r4, #4]
 80043f6:	6054      	str	r4, [r2, #4]
 80043f8:	e7cb      	b.n	8004392 <_free_r+0x22>
 80043fa:	bd38      	pop	{r3, r4, r5, pc}
 80043fc:	200008d0 	.word	0x200008d0

08004400 <_malloc_usable_size_r>:
 8004400:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004404:	1f18      	subs	r0, r3, #4
 8004406:	2b00      	cmp	r3, #0
 8004408:	bfbc      	itt	lt
 800440a:	580b      	ldrlt	r3, [r1, r0]
 800440c:	18c0      	addlt	r0, r0, r3
 800440e:	4770      	bx	lr

08004410 <__ssputs_r>:
 8004410:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004414:	461f      	mov	r7, r3
 8004416:	688e      	ldr	r6, [r1, #8]
 8004418:	4682      	mov	sl, r0
 800441a:	42be      	cmp	r6, r7
 800441c:	460c      	mov	r4, r1
 800441e:	4690      	mov	r8, r2
 8004420:	680b      	ldr	r3, [r1, #0]
 8004422:	d82d      	bhi.n	8004480 <__ssputs_r+0x70>
 8004424:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004428:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800442c:	d026      	beq.n	800447c <__ssputs_r+0x6c>
 800442e:	6965      	ldr	r5, [r4, #20]
 8004430:	6909      	ldr	r1, [r1, #16]
 8004432:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004436:	eba3 0901 	sub.w	r9, r3, r1
 800443a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800443e:	1c7b      	adds	r3, r7, #1
 8004440:	444b      	add	r3, r9
 8004442:	106d      	asrs	r5, r5, #1
 8004444:	429d      	cmp	r5, r3
 8004446:	bf38      	it	cc
 8004448:	461d      	movcc	r5, r3
 800444a:	0553      	lsls	r3, r2, #21
 800444c:	d527      	bpl.n	800449e <__ssputs_r+0x8e>
 800444e:	4629      	mov	r1, r5
 8004450:	f7ff fe02 	bl	8004058 <_malloc_r>
 8004454:	4606      	mov	r6, r0
 8004456:	b360      	cbz	r0, 80044b2 <__ssputs_r+0xa2>
 8004458:	464a      	mov	r2, r9
 800445a:	6921      	ldr	r1, [r4, #16]
 800445c:	f7ff ff7a 	bl	8004354 <memcpy>
 8004460:	89a3      	ldrh	r3, [r4, #12]
 8004462:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8004466:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800446a:	81a3      	strh	r3, [r4, #12]
 800446c:	6126      	str	r6, [r4, #16]
 800446e:	444e      	add	r6, r9
 8004470:	6026      	str	r6, [r4, #0]
 8004472:	463e      	mov	r6, r7
 8004474:	6165      	str	r5, [r4, #20]
 8004476:	eba5 0509 	sub.w	r5, r5, r9
 800447a:	60a5      	str	r5, [r4, #8]
 800447c:	42be      	cmp	r6, r7
 800447e:	d900      	bls.n	8004482 <__ssputs_r+0x72>
 8004480:	463e      	mov	r6, r7
 8004482:	4632      	mov	r2, r6
 8004484:	4641      	mov	r1, r8
 8004486:	6820      	ldr	r0, [r4, #0]
 8004488:	f000 faac 	bl	80049e4 <memmove>
 800448c:	2000      	movs	r0, #0
 800448e:	68a3      	ldr	r3, [r4, #8]
 8004490:	1b9b      	subs	r3, r3, r6
 8004492:	60a3      	str	r3, [r4, #8]
 8004494:	6823      	ldr	r3, [r4, #0]
 8004496:	4433      	add	r3, r6
 8004498:	6023      	str	r3, [r4, #0]
 800449a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800449e:	462a      	mov	r2, r5
 80044a0:	f7ff fe66 	bl	8004170 <_realloc_r>
 80044a4:	4606      	mov	r6, r0
 80044a6:	2800      	cmp	r0, #0
 80044a8:	d1e0      	bne.n	800446c <__ssputs_r+0x5c>
 80044aa:	4650      	mov	r0, sl
 80044ac:	6921      	ldr	r1, [r4, #16]
 80044ae:	f7ff ff5f 	bl	8004370 <_free_r>
 80044b2:	230c      	movs	r3, #12
 80044b4:	f8ca 3000 	str.w	r3, [sl]
 80044b8:	89a3      	ldrh	r3, [r4, #12]
 80044ba:	f04f 30ff 	mov.w	r0, #4294967295
 80044be:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80044c2:	81a3      	strh	r3, [r4, #12]
 80044c4:	e7e9      	b.n	800449a <__ssputs_r+0x8a>
	...

080044c8 <_svfiprintf_r>:
 80044c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80044cc:	4698      	mov	r8, r3
 80044ce:	898b      	ldrh	r3, [r1, #12]
 80044d0:	4607      	mov	r7, r0
 80044d2:	061b      	lsls	r3, r3, #24
 80044d4:	460d      	mov	r5, r1
 80044d6:	4614      	mov	r4, r2
 80044d8:	b09d      	sub	sp, #116	@ 0x74
 80044da:	d510      	bpl.n	80044fe <_svfiprintf_r+0x36>
 80044dc:	690b      	ldr	r3, [r1, #16]
 80044de:	b973      	cbnz	r3, 80044fe <_svfiprintf_r+0x36>
 80044e0:	2140      	movs	r1, #64	@ 0x40
 80044e2:	f7ff fdb9 	bl	8004058 <_malloc_r>
 80044e6:	6028      	str	r0, [r5, #0]
 80044e8:	6128      	str	r0, [r5, #16]
 80044ea:	b930      	cbnz	r0, 80044fa <_svfiprintf_r+0x32>
 80044ec:	230c      	movs	r3, #12
 80044ee:	603b      	str	r3, [r7, #0]
 80044f0:	f04f 30ff 	mov.w	r0, #4294967295
 80044f4:	b01d      	add	sp, #116	@ 0x74
 80044f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80044fa:	2340      	movs	r3, #64	@ 0x40
 80044fc:	616b      	str	r3, [r5, #20]
 80044fe:	2300      	movs	r3, #0
 8004500:	9309      	str	r3, [sp, #36]	@ 0x24
 8004502:	2320      	movs	r3, #32
 8004504:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004508:	2330      	movs	r3, #48	@ 0x30
 800450a:	f04f 0901 	mov.w	r9, #1
 800450e:	f8cd 800c 	str.w	r8, [sp, #12]
 8004512:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 80046ac <_svfiprintf_r+0x1e4>
 8004516:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800451a:	4623      	mov	r3, r4
 800451c:	469a      	mov	sl, r3
 800451e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004522:	b10a      	cbz	r2, 8004528 <_svfiprintf_r+0x60>
 8004524:	2a25      	cmp	r2, #37	@ 0x25
 8004526:	d1f9      	bne.n	800451c <_svfiprintf_r+0x54>
 8004528:	ebba 0b04 	subs.w	fp, sl, r4
 800452c:	d00b      	beq.n	8004546 <_svfiprintf_r+0x7e>
 800452e:	465b      	mov	r3, fp
 8004530:	4622      	mov	r2, r4
 8004532:	4629      	mov	r1, r5
 8004534:	4638      	mov	r0, r7
 8004536:	f7ff ff6b 	bl	8004410 <__ssputs_r>
 800453a:	3001      	adds	r0, #1
 800453c:	f000 80a7 	beq.w	800468e <_svfiprintf_r+0x1c6>
 8004540:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004542:	445a      	add	r2, fp
 8004544:	9209      	str	r2, [sp, #36]	@ 0x24
 8004546:	f89a 3000 	ldrb.w	r3, [sl]
 800454a:	2b00      	cmp	r3, #0
 800454c:	f000 809f 	beq.w	800468e <_svfiprintf_r+0x1c6>
 8004550:	2300      	movs	r3, #0
 8004552:	f04f 32ff 	mov.w	r2, #4294967295
 8004556:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800455a:	f10a 0a01 	add.w	sl, sl, #1
 800455e:	9304      	str	r3, [sp, #16]
 8004560:	9307      	str	r3, [sp, #28]
 8004562:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004566:	931a      	str	r3, [sp, #104]	@ 0x68
 8004568:	4654      	mov	r4, sl
 800456a:	2205      	movs	r2, #5
 800456c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004570:	484e      	ldr	r0, [pc, #312]	@ (80046ac <_svfiprintf_r+0x1e4>)
 8004572:	f000 fa51 	bl	8004a18 <memchr>
 8004576:	9a04      	ldr	r2, [sp, #16]
 8004578:	b9d8      	cbnz	r0, 80045b2 <_svfiprintf_r+0xea>
 800457a:	06d0      	lsls	r0, r2, #27
 800457c:	bf44      	itt	mi
 800457e:	2320      	movmi	r3, #32
 8004580:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004584:	0711      	lsls	r1, r2, #28
 8004586:	bf44      	itt	mi
 8004588:	232b      	movmi	r3, #43	@ 0x2b
 800458a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800458e:	f89a 3000 	ldrb.w	r3, [sl]
 8004592:	2b2a      	cmp	r3, #42	@ 0x2a
 8004594:	d015      	beq.n	80045c2 <_svfiprintf_r+0xfa>
 8004596:	4654      	mov	r4, sl
 8004598:	2000      	movs	r0, #0
 800459a:	f04f 0c0a 	mov.w	ip, #10
 800459e:	9a07      	ldr	r2, [sp, #28]
 80045a0:	4621      	mov	r1, r4
 80045a2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80045a6:	3b30      	subs	r3, #48	@ 0x30
 80045a8:	2b09      	cmp	r3, #9
 80045aa:	d94b      	bls.n	8004644 <_svfiprintf_r+0x17c>
 80045ac:	b1b0      	cbz	r0, 80045dc <_svfiprintf_r+0x114>
 80045ae:	9207      	str	r2, [sp, #28]
 80045b0:	e014      	b.n	80045dc <_svfiprintf_r+0x114>
 80045b2:	eba0 0308 	sub.w	r3, r0, r8
 80045b6:	fa09 f303 	lsl.w	r3, r9, r3
 80045ba:	4313      	orrs	r3, r2
 80045bc:	46a2      	mov	sl, r4
 80045be:	9304      	str	r3, [sp, #16]
 80045c0:	e7d2      	b.n	8004568 <_svfiprintf_r+0xa0>
 80045c2:	9b03      	ldr	r3, [sp, #12]
 80045c4:	1d19      	adds	r1, r3, #4
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	9103      	str	r1, [sp, #12]
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	bfbb      	ittet	lt
 80045ce:	425b      	neglt	r3, r3
 80045d0:	f042 0202 	orrlt.w	r2, r2, #2
 80045d4:	9307      	strge	r3, [sp, #28]
 80045d6:	9307      	strlt	r3, [sp, #28]
 80045d8:	bfb8      	it	lt
 80045da:	9204      	strlt	r2, [sp, #16]
 80045dc:	7823      	ldrb	r3, [r4, #0]
 80045de:	2b2e      	cmp	r3, #46	@ 0x2e
 80045e0:	d10a      	bne.n	80045f8 <_svfiprintf_r+0x130>
 80045e2:	7863      	ldrb	r3, [r4, #1]
 80045e4:	2b2a      	cmp	r3, #42	@ 0x2a
 80045e6:	d132      	bne.n	800464e <_svfiprintf_r+0x186>
 80045e8:	9b03      	ldr	r3, [sp, #12]
 80045ea:	3402      	adds	r4, #2
 80045ec:	1d1a      	adds	r2, r3, #4
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	9203      	str	r2, [sp, #12]
 80045f2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80045f6:	9305      	str	r3, [sp, #20]
 80045f8:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 80046b0 <_svfiprintf_r+0x1e8>
 80045fc:	2203      	movs	r2, #3
 80045fe:	4650      	mov	r0, sl
 8004600:	7821      	ldrb	r1, [r4, #0]
 8004602:	f000 fa09 	bl	8004a18 <memchr>
 8004606:	b138      	cbz	r0, 8004618 <_svfiprintf_r+0x150>
 8004608:	2240      	movs	r2, #64	@ 0x40
 800460a:	9b04      	ldr	r3, [sp, #16]
 800460c:	eba0 000a 	sub.w	r0, r0, sl
 8004610:	4082      	lsls	r2, r0
 8004612:	4313      	orrs	r3, r2
 8004614:	3401      	adds	r4, #1
 8004616:	9304      	str	r3, [sp, #16]
 8004618:	f814 1b01 	ldrb.w	r1, [r4], #1
 800461c:	2206      	movs	r2, #6
 800461e:	4825      	ldr	r0, [pc, #148]	@ (80046b4 <_svfiprintf_r+0x1ec>)
 8004620:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004624:	f000 f9f8 	bl	8004a18 <memchr>
 8004628:	2800      	cmp	r0, #0
 800462a:	d036      	beq.n	800469a <_svfiprintf_r+0x1d2>
 800462c:	4b22      	ldr	r3, [pc, #136]	@ (80046b8 <_svfiprintf_r+0x1f0>)
 800462e:	bb1b      	cbnz	r3, 8004678 <_svfiprintf_r+0x1b0>
 8004630:	9b03      	ldr	r3, [sp, #12]
 8004632:	3307      	adds	r3, #7
 8004634:	f023 0307 	bic.w	r3, r3, #7
 8004638:	3308      	adds	r3, #8
 800463a:	9303      	str	r3, [sp, #12]
 800463c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800463e:	4433      	add	r3, r6
 8004640:	9309      	str	r3, [sp, #36]	@ 0x24
 8004642:	e76a      	b.n	800451a <_svfiprintf_r+0x52>
 8004644:	460c      	mov	r4, r1
 8004646:	2001      	movs	r0, #1
 8004648:	fb0c 3202 	mla	r2, ip, r2, r3
 800464c:	e7a8      	b.n	80045a0 <_svfiprintf_r+0xd8>
 800464e:	2300      	movs	r3, #0
 8004650:	f04f 0c0a 	mov.w	ip, #10
 8004654:	4619      	mov	r1, r3
 8004656:	3401      	adds	r4, #1
 8004658:	9305      	str	r3, [sp, #20]
 800465a:	4620      	mov	r0, r4
 800465c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004660:	3a30      	subs	r2, #48	@ 0x30
 8004662:	2a09      	cmp	r2, #9
 8004664:	d903      	bls.n	800466e <_svfiprintf_r+0x1a6>
 8004666:	2b00      	cmp	r3, #0
 8004668:	d0c6      	beq.n	80045f8 <_svfiprintf_r+0x130>
 800466a:	9105      	str	r1, [sp, #20]
 800466c:	e7c4      	b.n	80045f8 <_svfiprintf_r+0x130>
 800466e:	4604      	mov	r4, r0
 8004670:	2301      	movs	r3, #1
 8004672:	fb0c 2101 	mla	r1, ip, r1, r2
 8004676:	e7f0      	b.n	800465a <_svfiprintf_r+0x192>
 8004678:	ab03      	add	r3, sp, #12
 800467a:	9300      	str	r3, [sp, #0]
 800467c:	462a      	mov	r2, r5
 800467e:	4638      	mov	r0, r7
 8004680:	4b0e      	ldr	r3, [pc, #56]	@ (80046bc <_svfiprintf_r+0x1f4>)
 8004682:	a904      	add	r1, sp, #16
 8004684:	f3af 8000 	nop.w
 8004688:	1c42      	adds	r2, r0, #1
 800468a:	4606      	mov	r6, r0
 800468c:	d1d6      	bne.n	800463c <_svfiprintf_r+0x174>
 800468e:	89ab      	ldrh	r3, [r5, #12]
 8004690:	065b      	lsls	r3, r3, #25
 8004692:	f53f af2d 	bmi.w	80044f0 <_svfiprintf_r+0x28>
 8004696:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004698:	e72c      	b.n	80044f4 <_svfiprintf_r+0x2c>
 800469a:	ab03      	add	r3, sp, #12
 800469c:	9300      	str	r3, [sp, #0]
 800469e:	462a      	mov	r2, r5
 80046a0:	4638      	mov	r0, r7
 80046a2:	4b06      	ldr	r3, [pc, #24]	@ (80046bc <_svfiprintf_r+0x1f4>)
 80046a4:	a904      	add	r1, sp, #16
 80046a6:	f000 f87d 	bl	80047a4 <_printf_i>
 80046aa:	e7ed      	b.n	8004688 <_svfiprintf_r+0x1c0>
 80046ac:	08004d8a 	.word	0x08004d8a
 80046b0:	08004d90 	.word	0x08004d90
 80046b4:	08004d94 	.word	0x08004d94
 80046b8:	00000000 	.word	0x00000000
 80046bc:	08004411 	.word	0x08004411

080046c0 <_printf_common>:
 80046c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80046c4:	4616      	mov	r6, r2
 80046c6:	4698      	mov	r8, r3
 80046c8:	688a      	ldr	r2, [r1, #8]
 80046ca:	690b      	ldr	r3, [r1, #16]
 80046cc:	4607      	mov	r7, r0
 80046ce:	4293      	cmp	r3, r2
 80046d0:	bfb8      	it	lt
 80046d2:	4613      	movlt	r3, r2
 80046d4:	6033      	str	r3, [r6, #0]
 80046d6:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80046da:	460c      	mov	r4, r1
 80046dc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80046e0:	b10a      	cbz	r2, 80046e6 <_printf_common+0x26>
 80046e2:	3301      	adds	r3, #1
 80046e4:	6033      	str	r3, [r6, #0]
 80046e6:	6823      	ldr	r3, [r4, #0]
 80046e8:	0699      	lsls	r1, r3, #26
 80046ea:	bf42      	ittt	mi
 80046ec:	6833      	ldrmi	r3, [r6, #0]
 80046ee:	3302      	addmi	r3, #2
 80046f0:	6033      	strmi	r3, [r6, #0]
 80046f2:	6825      	ldr	r5, [r4, #0]
 80046f4:	f015 0506 	ands.w	r5, r5, #6
 80046f8:	d106      	bne.n	8004708 <_printf_common+0x48>
 80046fa:	f104 0a19 	add.w	sl, r4, #25
 80046fe:	68e3      	ldr	r3, [r4, #12]
 8004700:	6832      	ldr	r2, [r6, #0]
 8004702:	1a9b      	subs	r3, r3, r2
 8004704:	42ab      	cmp	r3, r5
 8004706:	dc2b      	bgt.n	8004760 <_printf_common+0xa0>
 8004708:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800470c:	6822      	ldr	r2, [r4, #0]
 800470e:	3b00      	subs	r3, #0
 8004710:	bf18      	it	ne
 8004712:	2301      	movne	r3, #1
 8004714:	0692      	lsls	r2, r2, #26
 8004716:	d430      	bmi.n	800477a <_printf_common+0xba>
 8004718:	4641      	mov	r1, r8
 800471a:	4638      	mov	r0, r7
 800471c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004720:	47c8      	blx	r9
 8004722:	3001      	adds	r0, #1
 8004724:	d023      	beq.n	800476e <_printf_common+0xae>
 8004726:	6823      	ldr	r3, [r4, #0]
 8004728:	6922      	ldr	r2, [r4, #16]
 800472a:	f003 0306 	and.w	r3, r3, #6
 800472e:	2b04      	cmp	r3, #4
 8004730:	bf14      	ite	ne
 8004732:	2500      	movne	r5, #0
 8004734:	6833      	ldreq	r3, [r6, #0]
 8004736:	f04f 0600 	mov.w	r6, #0
 800473a:	bf08      	it	eq
 800473c:	68e5      	ldreq	r5, [r4, #12]
 800473e:	f104 041a 	add.w	r4, r4, #26
 8004742:	bf08      	it	eq
 8004744:	1aed      	subeq	r5, r5, r3
 8004746:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800474a:	bf08      	it	eq
 800474c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004750:	4293      	cmp	r3, r2
 8004752:	bfc4      	itt	gt
 8004754:	1a9b      	subgt	r3, r3, r2
 8004756:	18ed      	addgt	r5, r5, r3
 8004758:	42b5      	cmp	r5, r6
 800475a:	d11a      	bne.n	8004792 <_printf_common+0xd2>
 800475c:	2000      	movs	r0, #0
 800475e:	e008      	b.n	8004772 <_printf_common+0xb2>
 8004760:	2301      	movs	r3, #1
 8004762:	4652      	mov	r2, sl
 8004764:	4641      	mov	r1, r8
 8004766:	4638      	mov	r0, r7
 8004768:	47c8      	blx	r9
 800476a:	3001      	adds	r0, #1
 800476c:	d103      	bne.n	8004776 <_printf_common+0xb6>
 800476e:	f04f 30ff 	mov.w	r0, #4294967295
 8004772:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004776:	3501      	adds	r5, #1
 8004778:	e7c1      	b.n	80046fe <_printf_common+0x3e>
 800477a:	2030      	movs	r0, #48	@ 0x30
 800477c:	18e1      	adds	r1, r4, r3
 800477e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004782:	1c5a      	adds	r2, r3, #1
 8004784:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004788:	4422      	add	r2, r4
 800478a:	3302      	adds	r3, #2
 800478c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004790:	e7c2      	b.n	8004718 <_printf_common+0x58>
 8004792:	2301      	movs	r3, #1
 8004794:	4622      	mov	r2, r4
 8004796:	4641      	mov	r1, r8
 8004798:	4638      	mov	r0, r7
 800479a:	47c8      	blx	r9
 800479c:	3001      	adds	r0, #1
 800479e:	d0e6      	beq.n	800476e <_printf_common+0xae>
 80047a0:	3601      	adds	r6, #1
 80047a2:	e7d9      	b.n	8004758 <_printf_common+0x98>

080047a4 <_printf_i>:
 80047a4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80047a8:	7e0f      	ldrb	r7, [r1, #24]
 80047aa:	4691      	mov	r9, r2
 80047ac:	2f78      	cmp	r7, #120	@ 0x78
 80047ae:	4680      	mov	r8, r0
 80047b0:	460c      	mov	r4, r1
 80047b2:	469a      	mov	sl, r3
 80047b4:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80047b6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80047ba:	d807      	bhi.n	80047cc <_printf_i+0x28>
 80047bc:	2f62      	cmp	r7, #98	@ 0x62
 80047be:	d80a      	bhi.n	80047d6 <_printf_i+0x32>
 80047c0:	2f00      	cmp	r7, #0
 80047c2:	f000 80d3 	beq.w	800496c <_printf_i+0x1c8>
 80047c6:	2f58      	cmp	r7, #88	@ 0x58
 80047c8:	f000 80ba 	beq.w	8004940 <_printf_i+0x19c>
 80047cc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80047d0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80047d4:	e03a      	b.n	800484c <_printf_i+0xa8>
 80047d6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80047da:	2b15      	cmp	r3, #21
 80047dc:	d8f6      	bhi.n	80047cc <_printf_i+0x28>
 80047de:	a101      	add	r1, pc, #4	@ (adr r1, 80047e4 <_printf_i+0x40>)
 80047e0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80047e4:	0800483d 	.word	0x0800483d
 80047e8:	08004851 	.word	0x08004851
 80047ec:	080047cd 	.word	0x080047cd
 80047f0:	080047cd 	.word	0x080047cd
 80047f4:	080047cd 	.word	0x080047cd
 80047f8:	080047cd 	.word	0x080047cd
 80047fc:	08004851 	.word	0x08004851
 8004800:	080047cd 	.word	0x080047cd
 8004804:	080047cd 	.word	0x080047cd
 8004808:	080047cd 	.word	0x080047cd
 800480c:	080047cd 	.word	0x080047cd
 8004810:	08004953 	.word	0x08004953
 8004814:	0800487b 	.word	0x0800487b
 8004818:	0800490d 	.word	0x0800490d
 800481c:	080047cd 	.word	0x080047cd
 8004820:	080047cd 	.word	0x080047cd
 8004824:	08004975 	.word	0x08004975
 8004828:	080047cd 	.word	0x080047cd
 800482c:	0800487b 	.word	0x0800487b
 8004830:	080047cd 	.word	0x080047cd
 8004834:	080047cd 	.word	0x080047cd
 8004838:	08004915 	.word	0x08004915
 800483c:	6833      	ldr	r3, [r6, #0]
 800483e:	1d1a      	adds	r2, r3, #4
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	6032      	str	r2, [r6, #0]
 8004844:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004848:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800484c:	2301      	movs	r3, #1
 800484e:	e09e      	b.n	800498e <_printf_i+0x1ea>
 8004850:	6833      	ldr	r3, [r6, #0]
 8004852:	6820      	ldr	r0, [r4, #0]
 8004854:	1d19      	adds	r1, r3, #4
 8004856:	6031      	str	r1, [r6, #0]
 8004858:	0606      	lsls	r6, r0, #24
 800485a:	d501      	bpl.n	8004860 <_printf_i+0xbc>
 800485c:	681d      	ldr	r5, [r3, #0]
 800485e:	e003      	b.n	8004868 <_printf_i+0xc4>
 8004860:	0645      	lsls	r5, r0, #25
 8004862:	d5fb      	bpl.n	800485c <_printf_i+0xb8>
 8004864:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004868:	2d00      	cmp	r5, #0
 800486a:	da03      	bge.n	8004874 <_printf_i+0xd0>
 800486c:	232d      	movs	r3, #45	@ 0x2d
 800486e:	426d      	negs	r5, r5
 8004870:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004874:	230a      	movs	r3, #10
 8004876:	4859      	ldr	r0, [pc, #356]	@ (80049dc <_printf_i+0x238>)
 8004878:	e011      	b.n	800489e <_printf_i+0xfa>
 800487a:	6821      	ldr	r1, [r4, #0]
 800487c:	6833      	ldr	r3, [r6, #0]
 800487e:	0608      	lsls	r0, r1, #24
 8004880:	f853 5b04 	ldr.w	r5, [r3], #4
 8004884:	d402      	bmi.n	800488c <_printf_i+0xe8>
 8004886:	0649      	lsls	r1, r1, #25
 8004888:	bf48      	it	mi
 800488a:	b2ad      	uxthmi	r5, r5
 800488c:	2f6f      	cmp	r7, #111	@ 0x6f
 800488e:	6033      	str	r3, [r6, #0]
 8004890:	bf14      	ite	ne
 8004892:	230a      	movne	r3, #10
 8004894:	2308      	moveq	r3, #8
 8004896:	4851      	ldr	r0, [pc, #324]	@ (80049dc <_printf_i+0x238>)
 8004898:	2100      	movs	r1, #0
 800489a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800489e:	6866      	ldr	r6, [r4, #4]
 80048a0:	2e00      	cmp	r6, #0
 80048a2:	bfa8      	it	ge
 80048a4:	6821      	ldrge	r1, [r4, #0]
 80048a6:	60a6      	str	r6, [r4, #8]
 80048a8:	bfa4      	itt	ge
 80048aa:	f021 0104 	bicge.w	r1, r1, #4
 80048ae:	6021      	strge	r1, [r4, #0]
 80048b0:	b90d      	cbnz	r5, 80048b6 <_printf_i+0x112>
 80048b2:	2e00      	cmp	r6, #0
 80048b4:	d04b      	beq.n	800494e <_printf_i+0x1aa>
 80048b6:	4616      	mov	r6, r2
 80048b8:	fbb5 f1f3 	udiv	r1, r5, r3
 80048bc:	fb03 5711 	mls	r7, r3, r1, r5
 80048c0:	5dc7      	ldrb	r7, [r0, r7]
 80048c2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80048c6:	462f      	mov	r7, r5
 80048c8:	42bb      	cmp	r3, r7
 80048ca:	460d      	mov	r5, r1
 80048cc:	d9f4      	bls.n	80048b8 <_printf_i+0x114>
 80048ce:	2b08      	cmp	r3, #8
 80048d0:	d10b      	bne.n	80048ea <_printf_i+0x146>
 80048d2:	6823      	ldr	r3, [r4, #0]
 80048d4:	07df      	lsls	r7, r3, #31
 80048d6:	d508      	bpl.n	80048ea <_printf_i+0x146>
 80048d8:	6923      	ldr	r3, [r4, #16]
 80048da:	6861      	ldr	r1, [r4, #4]
 80048dc:	4299      	cmp	r1, r3
 80048de:	bfde      	ittt	le
 80048e0:	2330      	movle	r3, #48	@ 0x30
 80048e2:	f806 3c01 	strble.w	r3, [r6, #-1]
 80048e6:	f106 36ff 	addle.w	r6, r6, #4294967295
 80048ea:	1b92      	subs	r2, r2, r6
 80048ec:	6122      	str	r2, [r4, #16]
 80048ee:	464b      	mov	r3, r9
 80048f0:	4621      	mov	r1, r4
 80048f2:	4640      	mov	r0, r8
 80048f4:	f8cd a000 	str.w	sl, [sp]
 80048f8:	aa03      	add	r2, sp, #12
 80048fa:	f7ff fee1 	bl	80046c0 <_printf_common>
 80048fe:	3001      	adds	r0, #1
 8004900:	d14a      	bne.n	8004998 <_printf_i+0x1f4>
 8004902:	f04f 30ff 	mov.w	r0, #4294967295
 8004906:	b004      	add	sp, #16
 8004908:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800490c:	6823      	ldr	r3, [r4, #0]
 800490e:	f043 0320 	orr.w	r3, r3, #32
 8004912:	6023      	str	r3, [r4, #0]
 8004914:	2778      	movs	r7, #120	@ 0x78
 8004916:	4832      	ldr	r0, [pc, #200]	@ (80049e0 <_printf_i+0x23c>)
 8004918:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800491c:	6823      	ldr	r3, [r4, #0]
 800491e:	6831      	ldr	r1, [r6, #0]
 8004920:	061f      	lsls	r7, r3, #24
 8004922:	f851 5b04 	ldr.w	r5, [r1], #4
 8004926:	d402      	bmi.n	800492e <_printf_i+0x18a>
 8004928:	065f      	lsls	r7, r3, #25
 800492a:	bf48      	it	mi
 800492c:	b2ad      	uxthmi	r5, r5
 800492e:	6031      	str	r1, [r6, #0]
 8004930:	07d9      	lsls	r1, r3, #31
 8004932:	bf44      	itt	mi
 8004934:	f043 0320 	orrmi.w	r3, r3, #32
 8004938:	6023      	strmi	r3, [r4, #0]
 800493a:	b11d      	cbz	r5, 8004944 <_printf_i+0x1a0>
 800493c:	2310      	movs	r3, #16
 800493e:	e7ab      	b.n	8004898 <_printf_i+0xf4>
 8004940:	4826      	ldr	r0, [pc, #152]	@ (80049dc <_printf_i+0x238>)
 8004942:	e7e9      	b.n	8004918 <_printf_i+0x174>
 8004944:	6823      	ldr	r3, [r4, #0]
 8004946:	f023 0320 	bic.w	r3, r3, #32
 800494a:	6023      	str	r3, [r4, #0]
 800494c:	e7f6      	b.n	800493c <_printf_i+0x198>
 800494e:	4616      	mov	r6, r2
 8004950:	e7bd      	b.n	80048ce <_printf_i+0x12a>
 8004952:	6833      	ldr	r3, [r6, #0]
 8004954:	6825      	ldr	r5, [r4, #0]
 8004956:	1d18      	adds	r0, r3, #4
 8004958:	6961      	ldr	r1, [r4, #20]
 800495a:	6030      	str	r0, [r6, #0]
 800495c:	062e      	lsls	r6, r5, #24
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	d501      	bpl.n	8004966 <_printf_i+0x1c2>
 8004962:	6019      	str	r1, [r3, #0]
 8004964:	e002      	b.n	800496c <_printf_i+0x1c8>
 8004966:	0668      	lsls	r0, r5, #25
 8004968:	d5fb      	bpl.n	8004962 <_printf_i+0x1be>
 800496a:	8019      	strh	r1, [r3, #0]
 800496c:	2300      	movs	r3, #0
 800496e:	4616      	mov	r6, r2
 8004970:	6123      	str	r3, [r4, #16]
 8004972:	e7bc      	b.n	80048ee <_printf_i+0x14a>
 8004974:	6833      	ldr	r3, [r6, #0]
 8004976:	2100      	movs	r1, #0
 8004978:	1d1a      	adds	r2, r3, #4
 800497a:	6032      	str	r2, [r6, #0]
 800497c:	681e      	ldr	r6, [r3, #0]
 800497e:	6862      	ldr	r2, [r4, #4]
 8004980:	4630      	mov	r0, r6
 8004982:	f000 f849 	bl	8004a18 <memchr>
 8004986:	b108      	cbz	r0, 800498c <_printf_i+0x1e8>
 8004988:	1b80      	subs	r0, r0, r6
 800498a:	6060      	str	r0, [r4, #4]
 800498c:	6863      	ldr	r3, [r4, #4]
 800498e:	6123      	str	r3, [r4, #16]
 8004990:	2300      	movs	r3, #0
 8004992:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004996:	e7aa      	b.n	80048ee <_printf_i+0x14a>
 8004998:	4632      	mov	r2, r6
 800499a:	4649      	mov	r1, r9
 800499c:	4640      	mov	r0, r8
 800499e:	6923      	ldr	r3, [r4, #16]
 80049a0:	47d0      	blx	sl
 80049a2:	3001      	adds	r0, #1
 80049a4:	d0ad      	beq.n	8004902 <_printf_i+0x15e>
 80049a6:	6823      	ldr	r3, [r4, #0]
 80049a8:	079b      	lsls	r3, r3, #30
 80049aa:	d413      	bmi.n	80049d4 <_printf_i+0x230>
 80049ac:	68e0      	ldr	r0, [r4, #12]
 80049ae:	9b03      	ldr	r3, [sp, #12]
 80049b0:	4298      	cmp	r0, r3
 80049b2:	bfb8      	it	lt
 80049b4:	4618      	movlt	r0, r3
 80049b6:	e7a6      	b.n	8004906 <_printf_i+0x162>
 80049b8:	2301      	movs	r3, #1
 80049ba:	4632      	mov	r2, r6
 80049bc:	4649      	mov	r1, r9
 80049be:	4640      	mov	r0, r8
 80049c0:	47d0      	blx	sl
 80049c2:	3001      	adds	r0, #1
 80049c4:	d09d      	beq.n	8004902 <_printf_i+0x15e>
 80049c6:	3501      	adds	r5, #1
 80049c8:	68e3      	ldr	r3, [r4, #12]
 80049ca:	9903      	ldr	r1, [sp, #12]
 80049cc:	1a5b      	subs	r3, r3, r1
 80049ce:	42ab      	cmp	r3, r5
 80049d0:	dcf2      	bgt.n	80049b8 <_printf_i+0x214>
 80049d2:	e7eb      	b.n	80049ac <_printf_i+0x208>
 80049d4:	2500      	movs	r5, #0
 80049d6:	f104 0619 	add.w	r6, r4, #25
 80049da:	e7f5      	b.n	80049c8 <_printf_i+0x224>
 80049dc:	08004d9b 	.word	0x08004d9b
 80049e0:	08004dac 	.word	0x08004dac

080049e4 <memmove>:
 80049e4:	4288      	cmp	r0, r1
 80049e6:	b510      	push	{r4, lr}
 80049e8:	eb01 0402 	add.w	r4, r1, r2
 80049ec:	d902      	bls.n	80049f4 <memmove+0x10>
 80049ee:	4284      	cmp	r4, r0
 80049f0:	4623      	mov	r3, r4
 80049f2:	d807      	bhi.n	8004a04 <memmove+0x20>
 80049f4:	1e43      	subs	r3, r0, #1
 80049f6:	42a1      	cmp	r1, r4
 80049f8:	d008      	beq.n	8004a0c <memmove+0x28>
 80049fa:	f811 2b01 	ldrb.w	r2, [r1], #1
 80049fe:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004a02:	e7f8      	b.n	80049f6 <memmove+0x12>
 8004a04:	4601      	mov	r1, r0
 8004a06:	4402      	add	r2, r0
 8004a08:	428a      	cmp	r2, r1
 8004a0a:	d100      	bne.n	8004a0e <memmove+0x2a>
 8004a0c:	bd10      	pop	{r4, pc}
 8004a0e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004a12:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004a16:	e7f7      	b.n	8004a08 <memmove+0x24>

08004a18 <memchr>:
 8004a18:	4603      	mov	r3, r0
 8004a1a:	b510      	push	{r4, lr}
 8004a1c:	b2c9      	uxtb	r1, r1
 8004a1e:	4402      	add	r2, r0
 8004a20:	4293      	cmp	r3, r2
 8004a22:	4618      	mov	r0, r3
 8004a24:	d101      	bne.n	8004a2a <memchr+0x12>
 8004a26:	2000      	movs	r0, #0
 8004a28:	e003      	b.n	8004a32 <memchr+0x1a>
 8004a2a:	7804      	ldrb	r4, [r0, #0]
 8004a2c:	3301      	adds	r3, #1
 8004a2e:	428c      	cmp	r4, r1
 8004a30:	d1f6      	bne.n	8004a20 <memchr+0x8>
 8004a32:	bd10      	pop	{r4, pc}

08004a34 <_init>:
 8004a34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a36:	bf00      	nop
 8004a38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a3a:	bc08      	pop	{r3}
 8004a3c:	469e      	mov	lr, r3
 8004a3e:	4770      	bx	lr

08004a40 <_fini>:
 8004a40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a42:	bf00      	nop
 8004a44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a46:	bc08      	pop	{r3}
 8004a48:	469e      	mov	lr, r3
 8004a4a:	4770      	bx	lr
